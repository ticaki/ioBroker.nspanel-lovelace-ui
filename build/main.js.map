{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0..\n */\n//FlashNextion http://nspanel.de/nspanel-v4.6.0.tft ist die 55\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport { Library } from './lib/classes/library';\nimport 'source-map-support/register';\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\nimport * as MQTT from './lib/classes/mqtt';\nimport { testCaseConfig } from './lib/config';\nimport { Controller } from './lib/controller/controller';\nimport { Icons } from './lib/const/icon_mapping';\nimport { genericStateObjects } from './lib/const/definition';\nimport { ConfigManager } from './lib/classes/config-manager';\nimport type { panelConfigPartial } from './lib/controller/panel';\nimport { generateAliasDocumentation } from './lib/tools/readme';\nimport type { STATUS0 } from './lib/types/types';\nimport axios from 'axios';\nimport { URL } from 'url';\nimport type { HttpServer } from './lib/classes/http-server';\n//import fs from 'fs';\naxios.defaults.timeout = 3000;\n\nclass NspanelLovelaceUi extends utils.Adapter {\n    library: Library;\n    mqttClient: MQTT.MQTTClientClass | undefined;\n    mqttServer: MQTT.MQTTServerClass | undefined;\n    controller: Controller | undefined;\n    unload: boolean = false;\n    testSuccessful: boolean = true;\n    httpServer: HttpServer[] = [];\n    timeoutAdmin: ioBroker.Timeout | undefined;\n    timeoutAdmin2: ioBroker.Timeout | undefined;\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'nspanel-lovelace-ui',\n            useFormatDate: true,\n        });\n        this.library = new Library(this);\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n        // init some propertys so we dont need undefined checks\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        await this.extendForeignObjectAsync(this.namespace, {\n            type: 'meta',\n            common: { name: { en: 'Nspanel Instance', de: 'Nspanel Instanze' }, type: 'meta.folder' },\n            native: {},\n        });\n        this.library = new Library(this);\n\n        if (this.config.mqttServer && this.config.mqttPort && this.config.mqttUsername) {\n            this.config.mqttPassword = this.config.mqttPassword || '';\n\n            const port = await this.getPortAsync(this.config.mqttPort);\n            if (port != this.config.mqttPort) {\n                this.log.error(`Port ${this.config.mqttPort} is already in use!`);\n                this.log.error(`Please change the port in the admin settings to ${port}!`);\n                this.log.error('Stopping adapter!');\n                if (this.stop) {\n                    await this.stop();\n                }\n                return;\n            }\n            this.mqttServer = new MQTT.MQTTServerClass(\n                this,\n                this.config.mqttPort,\n                this.config.mqttUsername,\n                this.config.mqttPassword,\n                './mqtt',\n            );\n            this.config.mqttIp = '127.0.0.1';\n            await this.delay(100);\n            let c = 0;\n            while (!this.mqttServer.ready) {\n                this.log.debug('Wait for mqttServer');\n                await this.delay(1000);\n                if (c++ > 6) {\n                    throw new Error('mqttServer not ready!');\n                }\n            }\n        }\n\n        if (this.config.fixBrokenCommonTypes) {\n            //fix broken common.type in alias.0 from iobroker.device\n            const states = await this.getForeignObjectsAsync('alias.0.*');\n            this.log.info('Fix broken common.type in alias.0');\n            if (states) {\n                for (const id in states) {\n                    if (\n                        states[id] &&\n                        states[id].type === 'state' &&\n                        states[id].common &&\n                        //@ts-expect-error\n                        states[id].common.type === 'state'\n                    ) {\n                        this.log.warn(`Fix broken common.type in ${id} set to 'mixed'`);\n                        states[id].common.type = 'mixed';\n                        await this.extendForeignObjectAsync(id, states[id]);\n                    }\n                }\n            }\n            const o = await this.getForeignObjectAsync(`system.adapter.${this.namespace}`);\n            if (o && o.native) {\n                o.native.fixBrokenCommonTypes = false;\n                await this.extendForeignObjectAsync(`system.adapter.${this.namespace}`, o);\n                return;\n            }\n        }\n\n        await generateAliasDocumentation();\n        if (this.config.testCase) {\n            this.log.warn('Testcase mode!');\n        }\n\n        /*if (!this.config.Testconfig2) {\n            if (this.config.onlyStartFromSystemConfig) {\n                this.log.warn('No configuration stopped!');\n                return;\n            }\n            this.log.warn('No configuration use dev test config!');\n            let testconfig = Testconfig;\n            try {\n                const path = './lib/config-custom.js';\n                testconfig = (await import(path)).Testconfig;\n            } catch {\n                // nothing\n            }\n            this.config.Testconfig2 = testconfig;\n        }\n        if (\n            !this.config.Testconfig2 ||\n            !Array.isArray(this.config.Testconfig2) ||\n            !this.config.Testconfig2[0] ||\n            !this.config.Testconfig2[0].pages\n        ) {\n            this.log.warn('Adapter on hold, user restart needed!');\n            return;\n        }*/\n        //try {\n        this.config.Testconfig2 = [];\n        const obj = await this.getForeignObjectAsync(this.namespace);\n        if (obj && obj.native) {\n            const config = [];\n            if (obj.native.scriptConfigRaw) {\n                const manager = new ConfigManager(this, true);\n                manager.log.warn = function (_msg: string) {\n                    //nothing\n                };\n                for (const a of this.config.panels) {\n                    if (a && a.topic) {\n                        const page = (obj.native.scriptConfigRaw as any[]).find(\n                            (b: { panelTopic: string }) => b.panelTopic === a.topic,\n                        );\n                        if (page) {\n                            const c = await manager.setScriptConfig(page);\n                            if (c && c.messages && c.messages.length > 0) {\n                                if (!c.messages[0].startsWith('Panel')) {\n                                    this.log.warn(c.messages[0]);\n                                }\n                            }\n                            if (c && c.panelConfig) {\n                                this.log.info(`Raw script config found for ${a.topic}`);\n                                config.push(c.panelConfig);\n                                continue;\n                            }\n                        }\n                        {\n                            const c = (obj.native.scriptConfig as any[]).find(\n                                (b: { topic: string }) => b.topic === a.topic,\n                            );\n                            if (c) {\n                                this.log.info(`Converted script config found for ${a.topic}`);\n                                config.push(c);\n                                continue;\n                            }\n                        }\n                    }\n                    this.log.warn(`No script config found for ${a.topic}`);\n                    await manager.delete();\n                }\n            }\n\n            const scriptConfig: Partial<panelConfigPartial>[] = config;\n            if (scriptConfig.length === 0) {\n                if (!this.config.testCase) {\n                    this.log.error('No compatible config found, paused!');\n                    return;\n                }\n            }\n            if (scriptConfig) {\n                for (let b = 0; b < scriptConfig.length; b++) {\n                    const s = scriptConfig[b];\n                    if (!s || !s.pages) {\n                        continue;\n                    }\n\n                    this.config.Testconfig2[b] = {};\n\n                    if (!this.config.Testconfig2[b].pages) {\n                        this.config.Testconfig2[b].pages = [];\n                    }\n                    if (!this.config.Testconfig2[b].navigation) {\n                        this.config.Testconfig2[b].navigation = [];\n                    }\n                    this.config.Testconfig2[b].pages = (this.config.Testconfig2[b] as panelConfigPartial).pages.filter(\n                        a => {\n                            if (s.pages!.find(b => b.uniqueID === a.uniqueID)) {\n                                return false;\n                            }\n                            return true;\n                        },\n                    );\n                    this.config.Testconfig2[b].navigation = (\n                        this.config.Testconfig2[b] as panelConfigPartial\n                    ).navigation.filter(a => {\n                        if (s.navigation && s.navigation.find(b => a == null || b == null || b.name === a.name)) {\n                            return false;\n                        }\n                        return true;\n                    });\n                    s.navigation = (this.config.Testconfig2[b].navigation || []).concat(s.navigation || []);\n                    s.pages = (this.config.Testconfig2[b].pages || []).concat(s.pages || []);\n                    this.config.Testconfig2[b] = {\n                        ...((this.config.Testconfig2[b] as panelConfigPartial) || {}),\n                        ...s,\n                    };\n                }\n                //this.config.Testconfig2[0].timeout = this.config.timeout;\n            }\n        }\n        /*} catch (e: any) {\n            this.log.warn(`Invalid configuration stopped! ${e}`);\n            return;\n        }*/\n\n        if (\n            this.config.doubleClickTime === undefined ||\n            typeof this.config.doubleClickTime !== 'number' ||\n            !(this.config.doubleClickTime > 0)\n        ) {\n            this.config.doubleClickTime = 350;\n        }\n        await this.delay(4000);\n\n        //check config\n        try {\n            Icons.adapter = this;\n\n            await this.library.init();\n            const states = await this.getStatesAsync('*');\n            await this.library.initStates(states);\n\n            // set all .info.nspanel.isOnline to false\n            for (const id in states) {\n                if (id.endsWith('.info.isOnline')) {\n                    await this.library.writedp(id, false, genericStateObjects.panel.panels.info.isOnline);\n                }\n            }\n            this.log.debug('Check configuration!');\n\n            if (!this.config.pw1 || typeof this.config.pw1 !== 'string') {\n                this.log.warn('No pin entered for the service page! Please set a pin in the admin settings!');\n            }\n\n            if (!(this.config.mqttIp && this.config.mqttPort && this.config.mqttUsername && this.config.mqttPassword)) {\n                this.log.error('Invalid admin configuration for mqtt!');\n                this.testSuccessful = false;\n                return;\n            }\n            /*const test = await this.getObjectViewAsync('system', 'instance', {\n                startkey: `system.adapter`,\n                endkey: `system.adapter}`,\n            });\n            this.log.debug(JSON.stringify(test));*/\n            this.mqttClient = new MQTT.MQTTClientClass(\n                this,\n                this.config.mqttIp,\n                this.config.mqttPort,\n                this.config.mqttUsername,\n                this.config.mqttPassword,\n                (topic, message) => {\n                    this.log.debug(`${topic} ${message}`);\n                },\n                this.onMqttConnect,\n            );\n            if (!this.mqttClient) {\n                return;\n            }\n\n            if (this.config.testCase) {\n                await this.extendForeignObjectAsync('0_userdata.0.boolean', {\n                    type: 'state',\n                    common: { name: 'boolean', type: 'boolean' },\n                    native: {},\n                });\n                await this.extendForeignObjectAsync('0_userdata.0.number', {\n                    type: 'state',\n                    common: { name: 'number', type: 'number' },\n                    native: {},\n                });\n                await this.extendForeignObjectAsync('0_userdata.0.string', {\n                    type: 'state',\n                    common: { name: 'string', type: 'string' },\n                    native: {},\n                });\n                this.config.Testconfig2 = testCaseConfig;\n                const test = new MQTT.MQTTClientClass(\n                    this,\n                    this.config.mqttIp,\n                    this.config.mqttPort,\n                    this.config.mqttUsername,\n                    this.config.mqttPassword,\n                    (topic, message) => {\n                        this.log.debug(`${topic} ${message}`);\n                    },\n                );\n                let c = 0;\n                while (!test.ready) {\n                    this.log.debug('Wait for Test mqttClient');\n                    await this.delay(1000);\n                    if (c++ > 6) {\n                        throw new Error('Test mqttClient not ready!');\n                    }\n                }\n\n                test.subscript('test/123456/cmnd/#', async (topic, message) => {\n                    this.log.debug(`Testcase ${topic}`);\n                    if (message === 'pageType~pageStartup') {\n                        await test.publish('test/123456/stat/RESULT', '{\"CustomSend\": \"Done\"}');\n                        await test.publish('test/123456/tele/RESULT', '{\"CustomRecv\":\"event,startup,54,eu\"}');\n                    } else if (topic === 'test/123456/cmnd/STATUS0') {\n                        await test.publish(\n                            'test/123456/stat/STATUS0',\n                            '{\"Status\":{\"Module\":0,\"DeviceName\":\"NSPanel 4 Test\",\"FriendlyName\":[\"Tasmota\",\"\"],\"Topic\":\"ns_panel4\",\"ButtonTopic\":\"0\",\"Power\":\"00\",\"PowerLock\":\"00\",' +\n                                '\"PowerOnState\":3,\"LedState\":1,\"LedMask\":\"FFFF\",\"SaveData\":1,\"SaveState\":1,\"SwitchTopic\":\"0\",\"SwitchMode\":' +\n                                '[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"ButtonRetain\":0,\"SwitchRetain\":0,\"SensorRetain\":0,\"PowerRetain\":0,\"InfoRetain\":0,' +\n                                '\"StateRetain\":0,\"StatusRetain\":0},\"StatusPRM\":{\"Baudrate\":115200,\"SerialConfig\":\"8N1\",\"GroupTopic\":\"tasmotas\",' +\n                                '\"OtaUrl\":\"http://ota.tasmota.com/tasmota32/release/tasmota32-nspanel.bin\",\"RestartReason\":\"Vbat power on reset\",\"Uptime\":\"0T00:07:28\",\"StartupUTC\":' +\n                                '\"2025-02-19T09:23:29\",\"Sleep\":50,\"CfgHolder\":4617,\"BootCount\":59,\"BCResetTime\":\"2024-01-06T17:11:30\",\"SaveCount\":110},\"StatusFWR\":{\"Version\":\"14.4.1(release-nspanel)\",' +\n                                '\"BuildDateTime\":\"2024-12-15T13:33:11\",\"Core\":\"3_1_0\",\"SDK\":\"5.3.2\",\"CpuFrequency\":160,\"Hardware\":\"ESP32-D0WD-V3 v3.1\",\"CR\":\"502/699\"},\"StatusLOG\":{\"SerialLog\":2,' +\n                                '\"WebLog\":1,\"MqttLog\":3,\"SysLog\":0,\"LogHost\":\"\",\"LogPort\":514,\"SSId\":[\"xxx\",\"\"],\"TelePeriod\":300,\"Resolution\":\"558180C0\",\"SetOption\":' +\n                                '[\"00008009\",\"2805C80001000600003C5A0A192800000000\",\"00000080\",\"00006000\",\"00004000\",\"00000000\"]},\"StatusMEM\":{\"ProgramSize\":2017,\"Free\":862,\"Heap\":148,\"StackLowMark\":' +\n                                '3,\"PsrMax\":2048,\"PsrFree\":2025,\"ProgramFlashSize\":4096,\"FlashSize\":4096,\"FlashChipId\":\"16405E\",\"FlashFrequency\":40,\"FlashMode\":\"DIO\",\"Features\":[\"0809\",' +\n                                '\"9F9AD7DF\",\"0015A001\",\"B7F7BFCF\",\"05DA9BC4\",\"E0360DC7\",\"480840D2\",\"20200000\",\"D4BC482D\",\"810A80F1\",\"00000014\"],\"Drivers\":\"1,2,!3,!4,!5,7,!8,9,10,11,12,!14,!16,' +\n                                '!17,!20,!21,24,26,!27,29,!34,!35,38,50,52,!59,!60,62,!63,!66,!67,!68,!73,!75,82,!86,!87,!88,!121\",\"Sensors\":\"1,2,3,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,' +\n                                '21,22,26,31,34,37,39,40,42,43,45,51,52,55,56,58,59,64,66,67,74,85,92,95,98,103,105,109,127\",\"I2CDriver\":\"7,8,9,10,11,12,13,14,15,17,18,20,24,29,31,36,41,42,44,46,48,58' +\n                                ',62,65,69,76,77,82,89\"},\"StatusNET\":{\"Hostname\":\"ns-panel4-0112\",\"IPAddress\":\"192.168.178.174\",\"Gateway\":\"192.168.178.1\",\"Subnetmask\":\"255.255.254.0\",\"DNSServer1\":' +\n                                '\"192.168.179.21\",\"DNSServer2\":\"0.0.0.0\",\"Mac\":\"A0:B7:A5:54:C0:71\",\"IP6Global\":\"\",\"IP6Local\":\"xxx\",\"Ethernet\":{\"Hostname\":\"\",\"IPAddress\":\"0.0.0.0\",\"Gateway\":\"0.0.0.0\",' +\n                                '\"Subnetmask\":\"0.0.0.0\",\"DNSServer1\":\"192.168.179.21\",\"DNSServer2\":\"0.0.0.0\",\"Mac\":\"00:00:00:00:00:00\",\"IP6Global\":\"\",\"IP6Local\":\"\"},\"Webserver\":2,\"HTTP_API\":1,' +\n                                '\"WifiConfig\":4,\"WifiPower\":16.0},\"StatusMQT\":{\"MqttHost\":\"xxx\",\"MqttPort\":1883,\"MqttClientMask\":\"ns_panel4\",\"MqttClient\":\"ns_panel4\",\"MqttUser\":\"xxx\",\"MqttCount\":1,' +\n                                '\"MAX_PACKET_SIZE\":1200,\"KEEPALIVE\":30,\"SOCKET_TIMEOUT\":4},\"StatusTIM\":{\"UTC\":\"2025-02-19T09:30:57Z\",\"Local\":\"2025-02-19T10:30:57\",\"StartDST\":\"2025-03-30T02:00:00\",' +\n                                '\"EndDST\":\"2025-10-26T03:00:00\",\"Timezone\":\"+01:00\",\"Sunrise\":\"07:50\",\"Sunset\":\"18:17\"},\"StatusSNS\":{\"Time\":\"2025-02-19T10:30:57\",\"ANALOG\":{\"Temperature1\":-3.2},\"TempUnit\"' +\n                                ':\"C\"},\"StatusSTS\":{\"Time\":\"2025-02-19T10:30:57\",\"Uptime\":\"0T00:07:28\",\"UptimeSec\":448,\"Heap\":146,\"SleepMode\":\"Dynamic\",\"Sleep\":50,\"LoadAvg\":19,\"MqttCount\":1,\"Berry\":' +\n                                '{\"HeapUsed\":16,\"Objects\":212},\"POWER1\":\"OFF\",\"POWER2\":\"OFF\",\"Wifi\":{\"AP\":1,\"SSId\":\"Keller\",\"BSSId\":\"DC:15:C8:EB:3E:B8\",\"Channel\":7,\"Mode\":\"HT40\",\"RSSI\":46,\"Signal\":-77,' +\n                                '\"LinkCount\":1,\"Downtime\":\"0T00:00:03\"}}}',\n                        );\n                    }\n                });\n            }\n            if (\n                !this.config.Testconfig2 ||\n                !Array.isArray(this.config.Testconfig2) ||\n                this.config.Testconfig2.length === 0\n            ) {\n                await this.delay(100);\n                this.mqttClient.destroy();\n                await this.delay(100);\n                this.log.error('No configuration - adapter on hold!');\n                return;\n            }\n            const testconfig = structuredClone(this.config.Testconfig2);\n            let counter = 0;\n            for (const a of testconfig) {\n                try {\n                    if (a && a.pages) {\n                        const names: string[] = [];\n                        for (const p of a.pages) {\n                            counter++;\n                            if (!('uniqueID' in p)) {\n                                continue;\n                            }\n                            if (p.card === 'screensaver' || p.card === 'screensaver2' || p.card === 'screensaver3') {\n                                p.uniqueID = `#${p.uniqueID}`;\n                            }\n                            if (names.indexOf(p.uniqueID) !== -1) {\n                                throw new Error(\n                                    `PanelTopic: ${(a as panelConfigPartial).topic} uniqueID ${p.uniqueID} is double! Ignore this panel!`,\n                                );\n                            }\n                            names.push(p.uniqueID);\n                        }\n                    }\n                } catch (e: any) {\n                    const index = testconfig.findIndex(b => b === a);\n                    testconfig.splice(index, 1);\n                    this.log.error(`Error: ${e}`);\n                }\n            }\n            if (counter === 0) {\n                return;\n            }\n            //testconfig[0].name = this.config.name;\n            //testconfig[0].topic = this.config.topic;\n            const mem = process.memoryUsage().heapUsed / 1024;\n            this.log.debug(String(`${mem}k`));\n            this.controller = new Controller(this, {\n                mqttClient: this.mqttClient,\n                name: 'controller',\n                panels: testconfig,\n            });\n            await this.controller.init();\n            /*setInterval(() => {\n                    this.log.debug(\n                        `${Math.trunc(mem)}k/${String(Math.trunc(process.memoryUsage().heapUsed / 1024))}k Start/Jetzt: `,\n                    );\n                }, 60000);*/\n        } catch (e: any) {\n            this.testSuccessful = false;\n            this.log.error(`Error onReady: ${e}`);\n        }\n    }\n\n    private onMqttConnect = async (): Promise<void> => {\n        const _helper = async (tasmota: any): Promise<void> => {\n            try {\n                this.log.info(`Force an MQTT reconnect from the Nspanel with the ip ${tasmota.ip} in 10 seconds!`);\n                await axios.get(`http://${tasmota.ip}/cm?&cmnd=Backlog MqttRetry 11`);\n                await this.delay(300);\n                await axios.get(`http://${tasmota.ip}/cm?&cmnd=Backlog MqttRetry 10`);\n            } catch (e: any) {\n                this.log.warn(\n                    `Error: This usually means that the NSpanel with ip ${tasmota.ip} is not online or has not been set up properly in the configuration! ${e}`,\n                );\n            }\n        };\n        for (const tasmota of this.config.panels) {\n            if (tasmota && tasmota.ip) {\n                void _helper(tasmota);\n            }\n        }\n    };\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances.\n     *\n     * @param callback Callback so the adapter can finish what it has to do\n     */\n    private async onUnload(callback: () => void): Promise<void> {\n        try {\n            this.unload = true;\n            if (this.timeoutAdmin) {\n                this.clearTimeout(this.timeoutAdmin);\n            }\n            if (this.timeoutAdmin2) {\n                this.clearTimeout(this.timeoutAdmin2);\n            }\n            if (this.controller) {\n                await this.controller.delete();\n            }\n            for (const server of this.httpServer) {\n                if (!server.unload) {\n                    await server.delete();\n                }\n            }\n            if (this.mqttClient) {\n                this.mqttClient.destroy();\n            }\n            if (this.mqttServer) {\n                this.mqttServer.destroy();\n            }\n            callback();\n        } catch {\n            callback();\n        }\n    }\n    //test\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     *\n     * @param id   The id of the state that changed\n     * @param state The state object holding the new value and meta information of the state\n     */\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (state) {\n            if (this.controller) {\n                await this.controller.statesControler.onStateChange(id, state);\n            }\n        } else {\n            // The state was deleted\n            // this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Somee message was sent to this instance over message box. Used by email, pushover, text2speech, .\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    private async onMessage(obj: ioBroker.Message): Promise<void> {\n        if (typeof obj === 'object' && obj.message) {\n            //this.log.info(JSON.stringify(obj));\n            switch (obj.command) {\n                case 'config': {\n                    const obj1 = await this.getForeignObjectAsync(`system.adapter.${this.namespace}`);\n                    if (\n                        obj1 &&\n                        obj1.native &&\n                        JSON.stringify(obj1.native.Testconfig2) !== JSON.stringify(obj.message)\n                    ) {\n                        obj1.native.Testconfig2 = obj.message;\n                        await this.setForeignObjectAsync(`system.adapter.${this.namespace}`, obj1);\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, [], obj.callback);\n                    }\n                    break;\n                }\n                case 'updateCustom': {\n                    if (obj.message && obj.message.state) {\n                        const state = await this.getForeignObjectAsync(obj.message.state);\n                        if (state && state.common && state.common.custom && state.common.custom[this.namespace]) {\n                            this.log.debug(`updateCustom ${JSON.stringify(state.common.custom[this.namespace])}`);\n                        }\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, [], obj.callback);\n                    }\n                    break;\n                }\n                case 'ScriptConfig': {\n                    let result = ['something went wrong'];\n                    if (obj.message) {\n                        const manager = new ConfigManager(this);\n                        await manager.delete();\n                        const r = await manager.setScriptConfig(obj.message);\n                        result = r.messages;\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, result, obj.callback);\n                    }\n                    break;\n                }\n                case 'RefreshDevices': {\n                    if (this.timeoutAdmin) {\n                        if (obj.callback) {\n                            this.sendTo(obj.from, obj.command, { error: 'sendToAdminRunning' }, obj.callback);\n                            break;\n                        }\n                    }\n                    const device = { id: '', name: obj.message.name, topic: obj.message.topic, ip: '' };\n\n                    const mqtt = new MQTT.MQTTClientClass(\n                        this,\n                        this.config.mqttIp,\n                        this.config.mqttPort,\n                        this.config.mqttUsername,\n                        this.config.mqttPassword,\n                        (topic, message) => {\n                            this.log.debug(`${topic} ${message}`);\n                        },\n                    );\n                    await this.delay(100);\n                    const checkTasmota = async (\n                        mqtt: MQTT.MQTTClientClass,\n                        topic: string,\n                    ): Promise<{ status: boolean; id: string; ip: string }> => {\n                        return new Promise(resolve => {\n                            this.timeoutAdmin = this.setTimeout(() => {\n                                this.timeoutAdmin = null;\n                                resolve({ status: false, id: '', ip: '' });\n                            }, 5000);\n                            mqtt.subscript(`${topic}/stat/STATUS0`, (_topic: string, _message: string) => {\n                                const msg = JSON.parse(_message) as STATUS0;\n                                if (msg.StatusNET) {\n                                    resolve({\n                                        status: true,\n                                        ip: msg.StatusNET.IPAddress,\n                                        id: this.library.cleandp(msg.StatusNET.Mac, false, true),\n                                    });\n                                }\n                            });\n                            void mqtt.publish(`${topic}/cmnd/STATUS0`, '');\n                        });\n                    };\n\n                    const result = await checkTasmota(mqtt, device.topic);\n                    if (this.timeoutAdmin) {\n                        this.clearTimeout(this.timeoutAdmin);\n                        this.timeoutAdmin = null;\n                    }\n\n                    mqtt.destroy();\n                    if (result.status) {\n                        device.id = result.id;\n                        device.ip = result.ip;\n                        const index = this.config.panels.findIndex(a => a.topic === device.topic);\n                        //if (index !== -1) {\n                        this.config.panels[index] = device;\n                        if (obj.callback) {\n                            this.sendTo(obj.from, obj.command, { native: device }, obj.callback);\n                            this.sendTo(obj.from, obj.command, { result: 'ok' }, obj.callback);\n                            break;\n                        }\n                        //}\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, { error: 'sendToRefreshFail' }, obj.callback);\n                    }\n\n                    break;\n                }\n                case 'testCase': {\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, { testSuccessful: this.testSuccessful }, obj.callback);\n                    }\n                    break;\n                }\n                case 'getTasmotaDevices': {\n                    if (this.config.panels) {\n                        const devices = this.config.panels.map(a => {\n                            return { label: a.ip, value: a.ip };\n                        });\n                        if (obj.callback) {\n                            this.sendTo(obj.from, obj.command, devices, obj.callback);\n                        }\n                        break;\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, { error: 'sendToAnyError' }, obj.callback);\n                    }\n                    break;\n                }\n                case 'tasmotaSendTo': {\n                    if (obj.message) {\n                        try {\n                            if (\n                                obj.message.tasmotaIP &&\n                                (obj.message.mqttIp || obj.message.internalServerIp) &&\n                                obj.message.mqttServer != null &&\n                                obj.message.mqttPort &&\n                                obj.message.mqttUsername &&\n                                obj.message.mqttPassword &&\n                                obj.message.tasmotaTopic\n                            ) {\n                                if (obj.message.mqttServer == 'false' || !obj.message.mqttServer) {\n                                    obj.message.mqttServer = false;\n                                } else {\n                                    obj.message.mqttServer = true;\n                                }\n                                const url =\n                                    ` MqttHost ${obj.message.mqttServer ? obj.message.internalServerIp : obj.message.mqttIp};` +\n                                    ` MqttPort ${obj.message.mqttPort}; MqttUser ${obj.message.mqttUsername}; MqttPassword ${obj.message.mqttPassword};` +\n                                    ` FullTopic ${`${obj.message.tasmotaTopic}/%prefix%/`.replaceAll('//', '/')};` +\n                                    ` MqttRetry 10; FriendlyName1 ${obj.message.tasmotaName}; Hostname ${obj.message.tasmotaName.replaceAll(/[^a-zA-Z0-9_-]/g, '_')};` +\n                                    ` WebLog 2; template {\"NAME\":\"${obj.message.tasmotaName}\", \"GPIO\":[0,0,0,0,3872,0,0,0,0,0,32,0,0,0,0,225,0,480,224,1,0,0,0,33,0,0,0,0,0,0,0,0,0,0,4736,0],\"FLAG\":0,\"BASE\":1};` +\n                                    ` Module 0; MqttClient ${obj.message.tasmotaName.replaceAll(/[^a-zA-Z0-9_-]/g, '_')}%06X;` +\n                                    ` Restart 1`;\n                                const u = new URL(\n                                    `http://${obj.message.tasmotaIP}/cm?&cmnd=Backlog${url\n                                        .replaceAll('&', '%26')\n                                        .replaceAll('%', '%25')}`,\n                                );\n                                this.log.info(`Sending mqtt config & base config to tasmota: ${obj.message.tasmotaIP}`);\n\n                                await axios.get(u.href);\n\n                                if (obj.callback) {\n                                    this.sendTo(obj.from, obj.command, [], obj.callback);\n                                }\n                            }\n                        } catch (e: any) {\n                            this.log.error(`Error: while sending mqtt config & base config to tasmota - ${e}`);\n                            if (obj.callback) {\n                                this.sendTo(obj.from, obj.command, { error: 'sendToRequestFail' }, obj.callback);\n                            }\n                        }\n                        break;\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, { error: 'sendToAnyError' }, obj.callback);\n                    }\n                    break;\n                    //Backlog UrlFetch https://raw.githubusercontent.com/joBr99/nspanel-lovelace-ui/main/tasmota/autoexec.be; Restart 1\n                    //Backlog UpdateDriverVersion https://raw.githubusercontent.com/joBr99/nspanel-lovelace-ui/main/tasmota/autoexec.be; Restart 1\n                }\n                case 'tasmotaAddTableSendTo': {\n                    if (obj.message) {\n                        if (this.timeoutAdmin2) {\n                            if (obj.callback) {\n                                this.sendTo(obj.from, obj.command, { error: 'sendToAdmin2Running' }, obj.callback);\n                                break;\n                            }\n                        }\n                        try {\n                            if (obj.message.tasmotaIP && obj.message.tasmotaTopic && obj.message.tasmotaName) {\n                                const config = this.config;\n                                const panels = config.panels ?? [];\n                                const index = panels.findIndex(a => a.topic === obj.message.tasmotaTopic);\n                                const item = index === -1 ? { name: '', ip: '', topic: '', id: '' } : panels[index];\n                                const nameIndex = panels.findIndex(a => a.name === obj.message.tasmotaName);\n                                if (nameIndex !== -1 && index !== -1 && nameIndex !== index) {\n                                    this.log.error('Name already exists!');\n                                    if (obj.callback) {\n                                        this.sendTo(obj.from, obj.command, { error: 'sendToNameExist' }, obj.callback);\n                                    }\n                                    break;\n                                }\n                                item.name = obj.message.tasmotaName;\n                                item.ip = obj.message.tasmotaIP;\n                                item.topic = obj.message.tasmotaTopic;\n\n                                const mqtt = new MQTT.MQTTClientClass(\n                                    this,\n                                    this.config.mqttIp,\n                                    this.config.mqttPort,\n                                    this.config.mqttUsername,\n                                    this.config.mqttPassword,\n                                    (topic, message) => {\n                                        this.log.debug(`${topic} ${message}`);\n                                    },\n                                );\n                                await this.delay(100);\n                                const checkTasmota = async (\n                                    mqtt: MQTT.MQTTClientClass,\n                                    topic: string,\n                                ): Promise<{ status: boolean; id: string; ip: string }> => {\n                                    return new Promise(resolve => {\n                                        const result: { status: boolean; id: string; ip: string } = {\n                                            status: false,\n                                            id: '',\n                                            ip: '',\n                                        };\n                                        this.timeoutAdmin2 = this.setTimeout(() => {\n                                            this.timeoutAdmin2 = null;\n                                            resolve(result);\n                                        }, 5000);\n                                        if (mqtt && topic) {\n                                            mqtt.subscript(\n                                                `${topic}/stat/STATUS0`,\n                                                (_topic: string, _message: string) => {\n                                                    const msg = JSON.parse(_message) as STATUS0;\n                                                    if (msg.StatusNET) {\n                                                        result.id = this.library.cleandp(\n                                                            msg.StatusNET.Mac,\n                                                            false,\n                                                            true,\n                                                        );\n                                                        result.ip = msg.StatusNET.IPAddress;\n                                                        this.log.info(\n                                                            `Device found: id: ${result.id} ip: ${result.ip} topic: ${topic} Hostname: ${msg.StatusNET.Hostname}`,\n                                                        );\n                                                        result.status = true;\n                                                    }\n                                                    resolve(result);\n                                                    return;\n                                                },\n                                            );\n                                            void mqtt.publish(`${topic}/cmnd/STATUS0`, '');\n                                        } else {\n                                            resolve(result);\n                                            return;\n                                        }\n                                    });\n                                };\n                                if (this.timeoutAdmin2) {\n                                    this.clearTimeout(this.timeoutAdmin2);\n                                    this.timeoutAdmin2 = null;\n                                }\n                                const result = await checkTasmota(mqtt, item.topic);\n                                mqtt.destroy();\n\n                                if (!result.status) {\n                                    this.log.error(`Device with topic ${item.topic} not found!`);\n                                    if (obj.callback) {\n                                        this.sendTo(\n                                            obj.from,\n                                            obj.command,\n                                            { error: 'sendToDeviceNotFound' },\n                                            obj.callback,\n                                        );\n                                    }\n                                    break;\n                                }\n                                item.id = result.id;\n                                item.ip = result.ip;\n                                if (index === -1) {\n                                    panels.push(item);\n                                }\n                                const o = await this.getForeignObjectAsync(`system.adapter.${this.namespace}`);\n                                if (o && o.native) {\n                                    o.native.panels = panels;\n                                    await this.setForeignObjectAsync(`system.adapter.${this.namespace}`, o);\n                                }\n\n                                if (obj.callback) {\n                                    this.sendTo(\n                                        obj.from,\n                                        obj.command,\n                                        { result: 'sendToDeviceFound', reloadBrowser: true },\n                                        obj.callback,\n                                    );\n                                }\n                            }\n                        } catch (e: any) {\n                            this.log.error(`Error: while sending mqtt config & base config to tasmota - ${e}`);\n                            if (obj.callback) {\n                                this.sendTo(obj.from, obj.command, { error: 'sendToRequestFail' }, obj.callback);\n                            }\n                        }\n                        break;\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, { error: 'sendToAnyError' }, obj.callback);\n                    }\n                    break;\n                }\n                case 'berryInstallSendTo': {\n                    if (obj.message) {\n                        if (obj.message.tasmotaIP) {\n                            try {\n                                const url = `http://${obj.message.tasmotaIP}/cm?&cmnd=Backlog UrlFetch https://raw.githubusercontent.com/joBr99/nspanel-lovelace-ui/main/tasmota/autoexec.be; Restart 1`;\n                                this.log.info(`Installing berry on tasmota with IP ${obj.message.tasmotaIP}`);\n                                await axios.get(url);\n                                if (obj.callback) {\n                                    this.sendTo(obj.from, obj.command, [], obj.callback);\n                                }\n                            } catch (e: any) {\n                                this.log.error(`Error: while installing berry - ${e}`);\n                                if (obj.callback) {\n                                    this.sendTo(obj.from, obj.command, { error: 'sendToRequestFail' }, obj.callback);\n                                }\n                            }\n                            break;\n                        }\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, { error: 'sendToAnyError' }, obj.callback);\n                    }\n                    break;\n                }\n                case 'tftInstallSendTo': {\n                    if (obj.message) {\n                        if (obj.message.tasmotaIP /*&& obj.message.internalServerIp*/) {\n                            try {\n                                const result = await axios.get(\n                                    'https://github.com/ticaki/ioBroker.nspanel-lovelace-ui/raw/refs/heads/main/json/version.json',\n                                );\n                                if (!result.data) {\n                                    this.log.error('No version found!');\n                                    if (obj.callback) {\n                                        this.sendTo(\n                                            obj.from,\n                                            obj.command,\n                                            { error: 'sendToRequestFail' },\n                                            obj.callback,\n                                        );\n                                    }\n                                    break;\n                                }\n\n                                const version = result.data.tft.split('_')[0];\n                                const fileName = `nspanel-v${version}.tft`;\n                                /*\n                                const path = `${utils.getAbsoluteInstanceDataDir(this)}/tft`;\n                                const absolutFileName = `${path}/${fileName}`;\n                                if (!fs.existsSync(path)) {\n                                    fs.mkdirSync(path, { recursive: true });\n                                }\n                                if (!fs.existsSync(fileName)) {\n                                    const downloadLink = `http://nspanel.de/nspanel-v${version}.tft`;\n                                    const response = await axios.get(downloadLink, { responseType: 'arraybuffer' });\n                                    const fileData = Buffer.from(response.data, 'binary');\n\n                                    fs.writeFileSync(absolutFileName, fileData);\n                                }\n                                const port = await this.getPortAsync(10000);\n                                const http = new HttpServer(\n                                    this,\n                                    `http-server-${this.httpServer.length}`,\n                                    obj.message.internalServerIp,\n                                    port,\n                                    path,\n                                );\n                                this.httpServer.push(http);\n                                this.httpServer = this.httpServer.filter(a => !a.unload);\n                                this.log.info(\n                                    `Installing version ${version} on tasmota with IP ${obj.message.tasmotaIP}`,\n                                );\n                                const url = `http://${obj.message.tasmotaIP}/cm?&cmnd=Backlog FlashNextion http://${obj.message.internalServerIp}:${port}/${\n                                    fileName\n                                }`;*/\n                                const url = `http://${obj.message.tasmotaIP}/cm?&cmnd=Backlog FlashNextion http://nspanel.de/${\n                                    fileName\n                                }`;\n                                this.log.debug(url);\n                                await axios.get(url);\n\n                                if (obj.callback) {\n                                    this.sendTo(obj.from, obj.command, [], obj.callback);\n                                }\n                            } catch (e: any) {\n                                this.log.error(`Error: ${e}`);\n                                if (obj.callback) {\n                                    this.sendTo(obj.from, obj.command, { error: 'sendToRequestFail' }, obj.callback);\n                                }\n                            }\n                            break;\n                        }\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, { error: 'sendToAnyError' }, obj.callback);\n                    }\n                    break;\n                }\n                default: {\n                    // Send response in callback if required\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, { error: 'sendToAnyError' }, obj.callback);\n                    }\n                }\n            }\n        } else {\n            if (obj.callback) {\n                this.sendTo(obj.from, obj.command, { error: 'failed' }, obj.callback);\n            }\n        }\n    }\n\n    async writeStateExternalAsync(dp: string, val: ioBroker.StateValue): Promise<void> {\n        if (dp.startsWith(this.namespace)) {\n            return;\n        }\n        await this.setForeignStateAsync(dp, val, false);\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new NspanelLovelaceUi(options);\n} else {\n    // otherwise start the instance directly\n    (() => new NspanelLovelaceUi())();\n}\n"],
  "mappings": "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",
  "names": ["axios", "b", "mqtt", "result"]
}
