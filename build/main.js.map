{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0..\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport { Library } from './lib/classes/library';\nimport 'source-map-support/register';\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\nimport * as MQTT from './lib/classes/mqtt';\nimport { Testconfig } from './lib/config';\nimport { Controller } from './lib/controller/controller';\nimport { Icons } from './lib/const/icon_mapping';\nimport { genericStateObjects } from './lib/const/definition';\nimport { ConfigManager } from './lib/controller/config-manager';\nimport type { panelConfigPartial } from './lib/controller/panel';\n\nclass NspanelLovelaceUi extends utils.Adapter {\n    library: Library;\n    mqttClient: MQTT.MQTTClientClass | undefined;\n    mqttServer: MQTT.MQTTServerClass | undefined;\n    controller: Controller | undefined;\n    unload: boolean = false;\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'nspanel-lovelace-ui',\n            useFormatDate: true,\n        });\n        this.library = new Library(this);\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n        // init some propertys so we dont need undefined checks\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration...\n     */\n    private async onReady(): Promise<void> {\n        await this.extendForeignObjectAsync(this.namespace, {\n            type: 'meta',\n            common: { name: { en: 'Nspanel Instance', de: 'Nspanel Instanze' }, type: 'meta.folder' },\n            native: {},\n        });\n\n        this.library = new Library(this);\n        await this.delay(2000);\n        if (!this.config.Testconfig2) {\n            if (this.config.onlyStartFromSystemConfig) {\n                this.log.warn('No configuration stopped!');\n                return;\n            }\n            this.log.warn('No configuration use dev test config!');\n            let testconfig = Testconfig;\n            try {\n                const path = './lib/config-custom.js';\n                testconfig = (await import(path)).Testconfig;\n            } catch {\n                // nothing\n            }\n            this.config.Testconfig2 = testconfig;\n        }\n        if (\n            !this.config.Testconfig2 ||\n            !Array.isArray(this.config.Testconfig2) ||\n            !this.config.Testconfig2[0] ||\n            !this.config.Testconfig2[0].pages\n        ) {\n            this.log.warn('Adapter on hold, user restart needed!');\n            return;\n        }\n        try {\n            const obj = await this.getForeignObjectAsync(this.namespace);\n            if (obj && obj.native && obj.native.scriptConfig) {\n                const scriptConfig = obj.native.scriptConfig as Partial<panelConfigPartial>[];\n                // \u00FCbergangsweise adden wir hier die seiten die wir haben ins erste panel\n                //this.config.Testconfig2 = { ...this.config.Testconfig2, ...obj.native.scriptConfig };\n                let changed = false;\n                for (let b = scriptConfig.length - 1; b >= 0; b--) {\n                    const index = this.config.panels.findIndex(a => a.name === scriptConfig[b].name);\n                    if (index !== -1) {\n                        if (this.config.panels[index].removeIt) {\n                            scriptConfig.splice(b, 1);\n                            changed = true;\n                        }\n                        continue;\n                    }\n                    if (scriptConfig[b].name !== undefined && scriptConfig[b].topic !== undefined) {\n                        this.config.panels.push({\n                            name: scriptConfig[b].name!,\n                            topic: scriptConfig[b].topic!,\n                            id: '',\n                            removeIt: false,\n                        });\n                    }\n                }\n                for (const a of this.config.panels) {\n                    if (a.removeIt) {\n                        await this.delObjectAsync(`panels.${a.id}`, { recursive: true });\n                    }\n                }\n\n                if (changed) {\n                    await this.setForeignObjectAsync(this.namespace, obj);\n                }\n                for (let b = 0; b < scriptConfig.length; b++) {\n                    const a = scriptConfig[b];\n                    if (!a || !a.pages) {\n                        continue;\n                    }\n                    if (!this.config.Testconfig2[b]) {\n                        this.config.Testconfig2[b] = {};\n                    }\n                    if (!this.config.Testconfig2[b].pages) {\n                        this.config.Testconfig2[b].pages = [];\n                    }\n                    this.config.Testconfig2[b].pages = (this.config.Testconfig2[b] as panelConfigPartial).pages.filter(\n                        a => {\n                            if (scriptConfig[b].pages!.find(b => b.uniqueID === a.uniqueID)) {\n                                return false;\n                            }\n                            return true;\n                        },\n                    );\n                    this.config.Testconfig2[b].navigation = (\n                        this.config.Testconfig2[b] as panelConfigPartial\n                    ).navigation.filter(a => {\n                        if (scriptConfig[b].navigation!.find(b => a == null || b == null || b.name === a.name)) {\n                            return false;\n                        }\n                        return true;\n                    });\n                    a.navigation = (this.config.Testconfig2[b].navigation || []).concat(a.navigation);\n                    a.pages = (this.config.Testconfig2[b].pages || []).concat(a.pages);\n                    this.config.Testconfig2[b] = {\n                        ...((this.config.Testconfig2[b] as panelConfigPartial) || {}),\n                        ...a,\n                    };\n                }\n                this.config.Testconfig2[0].pages![0] = this.config.Testconfig2[0].pages![0];\n                this.config.Testconfig2[0].timeout = this.config.timeout;\n            }\n        } catch (e: any) {\n            this.log.warn(`Invalid configuration stopped! ${e}`);\n            return;\n        }\n\n        if (\n            this.config.doubleClickTime === undefined ||\n            typeof this.config.doubleClickTime !== 'number' ||\n            !(this.config.doubleClickTime > 0)\n        ) {\n            this.config.doubleClickTime = 400;\n        }\n        //this.log.debug(JSON.stringify(this.config.Testconfig2[0].dpInit))\n\n        //this.config.Testconfig2[0].pages[1].dpInit = this.config.mediaid;\n        this.setTimeout(async () => {\n            //check config\n            Icons.adapter = this;\n\n            await this.library.init();\n            const states = await this.getStatesAsync('*');\n            await this.library.initStates(states);\n\n            // set all .info.nspanel.isOnline to false\n            for (const id in states) {\n                if (id.endsWith('.info.isOnline')) {\n                    await this.library.writedp(id, false, genericStateObjects.panel.panels.info.isOnline);\n                }\n            }\n            this.log.debug('Check configuration!');\n            if (!(this.config.mqttIp && this.config.mqttPort && this.config.mqttUsername && this.config.mqttPassword)) {\n                this.log.error('Invalid admin configuration for mqtt!');\n                return;\n            }\n\n            /*const test = await this.getObjectViewAsync('system', 'instance', {\n                startkey: `system.adapter`,\n                endkey: `system.adapter}`,\n            });\n            this.log.debug(JSON.stringify(test));*/\n            this.mqttClient = new MQTT.MQTTClientClass(\n                this,\n                this.config.mqttIp,\n                this.config.mqttPort,\n                this.config.mqttUsername,\n                this.config.mqttPassword,\n                (topic, message) => {\n                    this.log.debug(`${topic} ${message}`);\n                },\n            );\n            if (!this.mqttClient) {\n                return;\n            }\n            const testconfig = structuredClone(this.config.Testconfig2);\n            let counter = 0;\n            for (const a of testconfig) {\n                if (a && a.pages) {\n                    const names: string[] = [];\n                    for (const p of a.pages) {\n                        counter++;\n                        if (!('uniqueID' in p)) {\n                            continue;\n                        }\n                        if (p.card === 'screensaver' || p.card === 'screensaver2' || p.card === 'screensaver3') {\n                            p.uniqueID = `#${p.uniqueID}`;\n                        }\n                        if (names.indexOf(p.uniqueID) !== -1) {\n                            throw new Error(`uniqueID ${p.uniqueID} is double!`);\n                        }\n                        names.push(p.uniqueID);\n                    }\n                }\n            }\n            if (counter === 0) {\n                return;\n            }\n            //testconfig[0].name = this.config.name;\n            //testconfig[0].topic = this.config.topic;\n            const mem = process.memoryUsage().heapUsed / 1024;\n            this.log.debug(String(`${mem}k`));\n            this.controller = new Controller(this, {\n                mqttClient: this.mqttClient,\n                name: 'controller',\n                panels: testconfig,\n            });\n            await this.controller.init();\n            setInterval(() => {\n                this.log.debug(\n                    `${Math.trunc(mem)}k/${String(Math.trunc(process.memoryUsage().heapUsed / 1024))}k Start/Jetzt: `,\n                );\n            }, 60000);\n        }, 2500);\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances.\n     *\n     * @param callback Callback so the adapter can finish what it has to do\n     */\n    private async onUnload(callback: () => void): Promise<void> {\n        try {\n            this.unload = true;\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            // clearInterval(interval1);\n            if (this.controller) {\n                this.controller.delete;\n            }\n            callback();\n        } catch {\n            callback();\n        }\n    }\n    //test\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     *\n     * @param id   The id of the state that changed\n     * @param state The state object holding the new value and meta information of the state\n     */\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (state) {\n            if (this.controller) {\n                await this.controller.statesControler.onStateChange(id, state);\n            }\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Somee message was sent to this instance over message box. Used by email, pushover, text2speech, ........\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    private async onMessage(obj: ioBroker.Message): Promise<void> {\n        if (typeof obj === 'object' && obj.message) {\n            //this.log.info(JSON.stringify(obj));\n            switch (obj.command) {\n                case 'config': {\n                    const obj1 = await this.getForeignObjectAsync(`system.adapter.${this.namespace}`);\n                    if (\n                        obj1 &&\n                        obj1.native &&\n                        JSON.stringify(obj1.native.Testconfig2) !== JSON.stringify(obj.message)\n                    ) {\n                        obj1.native.Testconfig2 = obj.message;\n                        await this.setForeignObjectAsync(`system.adapter.${this.namespace}`, obj1);\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, [], obj.callback);\n                    }\n                    break;\n                }\n                case 'updateCustom': {\n                    if (obj.message && obj.message.state) {\n                        const state = await this.getForeignObjectAsync(obj.message.state);\n                        if (state && state.common && state.common.custom && state.common.custom[this.namespace]) {\n                            this.log.debug(`updateCustom ${JSON.stringify(state.common.custom[this.namespace])}`);\n                        }\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, [], obj.callback);\n                    }\n                    break;\n                }\n                case 'ScriptConfig': {\n                    if (obj.message) {\n                        const manager = new ConfigManager(this);\n                        await manager.setScriptConfig(obj.message);\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, [], obj.callback);\n                    }\n                    break;\n                }\n                case 'RefreshDevices': {\n                    const view = await this.getObjectViewAsync('system', 'device', {\n                        startkey: `${this.namespace}.panels.`,\n                        endkey: `${this.namespace}.panels.\\u9999`,\n                    });\n                    let devices: any = {};\n                    if (view && view.rows) {\n                        devices = { panels: [] };\n                        for (const panel of view.rows) {\n                            const result = { id: '', name: '', topic: '', removeIt: false };\n                            const p = await this.getForeignObjectAsync(panel.id);\n                            if (p && p.native && p.native.name) {\n                                result.id = p.native.name;\n                                result.name = p.native.configName;\n                                result.topic = p.native.topic;\n                                devices.panels.push(result);\n                            }\n                        }\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, { native: devices }, obj.callback);\n                    }\n                    this.log.debug(JSON.stringify(view));\n                    break;\n                }\n                default: {\n                    // Send response in callback if required\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, [], obj.callback);\n                    }\n                }\n            }\n        }\n    }\n\n    async writeStateExternalAsync(dp: string, val: ioBroker.StateValue): Promise<void> {\n        if (dp.startsWith(this.namespace)) {\n            return;\n        }\n        await this.setForeignStateAsync(dp, val, false);\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new NspanelLovelaceUi(options);\n} else {\n    // otherwise start the instance directly\n    (() => new NspanelLovelaceUi())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AACvB,qBAAwB;AACxB,sBAAO;AAGP,WAAsB;AACtB,oBAA2B;AAC3B,wBAA2B;AAC3B,0BAAsB;AACtB,wBAAoC;AACpC,4BAA8B;AAG9B,MAAM,0BAA0B,MAAM,QAAQ;AAAA,EAC1C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,SAAkB;AAAA,EACX,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,MACN,eAAe;AAAA,IACnB,CAAC;AACD,SAAK,UAAU,IAAI,uBAAQ,IAAI;AAC/B,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAEpD,SAAK,GAAG,WAAW,KAAK,UAAU,KAAK,IAAI,CAAC;AAC5C,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAE9C;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,UAAyB;AACnC,UAAM,KAAK,yBAAyB,KAAK,WAAW;AAAA,MAChD,MAAM;AAAA,MACN,QAAQ,EAAE,MAAM,EAAE,IAAI,oBAAoB,IAAI,mBAAmB,GAAG,MAAM,cAAc;AAAA,MACxF,QAAQ,CAAC;AAAA,IACb,CAAC;AAED,SAAK,UAAU,IAAI,uBAAQ,IAAI;AAC/B,UAAM,KAAK,MAAM,GAAI;AACrB,QAAI,CAAC,KAAK,OAAO,aAAa;AAC1B,UAAI,KAAK,OAAO,2BAA2B;AACvC,aAAK,IAAI,KAAK,2BAA2B;AACzC;AAAA,MACJ;AACA,WAAK,IAAI,KAAK,uCAAuC;AACrD,UAAI,aAAa;AACjB,UAAI;AACA,cAAM,OAAO;AACb,sBAAc,MAAM,6BAAO,QAAP,QAAO,IAAI,KAAG;AAAA,MACtC,QAAQ;AAAA,MAER;AACA,WAAK,OAAO,cAAc;AAAA,IAC9B;AACA,QACI,CAAC,KAAK,OAAO,eACb,CAAC,MAAM,QAAQ,KAAK,OAAO,WAAW,KACtC,CAAC,KAAK,OAAO,YAAY,CAAC,KAC1B,CAAC,KAAK,OAAO,YAAY,CAAC,EAAE,OAC9B;AACE,WAAK,IAAI,KAAK,uCAAuC;AACrD;AAAA,IACJ;AACA,QAAI;AACA,YAAM,MAAM,MAAM,KAAK,sBAAsB,KAAK,SAAS;AAC3D,UAAI,OAAO,IAAI,UAAU,IAAI,OAAO,cAAc;AAC9C,cAAM,eAAe,IAAI,OAAO;AAGhC,YAAI,UAAU;AACd,iBAAS,IAAI,aAAa,SAAS,GAAG,KAAK,GAAG,KAAK;AAC/C,gBAAM,QAAQ,KAAK,OAAO,OAAO,UAAU,OAAK,EAAE,SAAS,aAAa,CAAC,EAAE,IAAI;AAC/E,cAAI,UAAU,IAAI;AACd,gBAAI,KAAK,OAAO,OAAO,KAAK,EAAE,UAAU;AACpC,2BAAa,OAAO,GAAG,CAAC;AACxB,wBAAU;AAAA,YACd;AACA;AAAA,UACJ;AACA,cAAI,aAAa,CAAC,EAAE,SAAS,UAAa,aAAa,CAAC,EAAE,UAAU,QAAW;AAC3E,iBAAK,OAAO,OAAO,KAAK;AAAA,cACpB,MAAM,aAAa,CAAC,EAAE;AAAA,cACtB,OAAO,aAAa,CAAC,EAAE;AAAA,cACvB,IAAI;AAAA,cACJ,UAAU;AAAA,YACd,CAAC;AAAA,UACL;AAAA,QACJ;AACA,mBAAW,KAAK,KAAK,OAAO,QAAQ;AAChC,cAAI,EAAE,UAAU;AACZ,kBAAM,KAAK,eAAe,UAAU,EAAE,EAAE,IAAI,EAAE,WAAW,KAAK,CAAC;AAAA,UACnE;AAAA,QACJ;AAEA,YAAI,SAAS;AACT,gBAAM,KAAK,sBAAsB,KAAK,WAAW,GAAG;AAAA,QACxD;AACA,iBAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC1C,gBAAM,IAAI,aAAa,CAAC;AACxB,cAAI,CAAC,KAAK,CAAC,EAAE,OAAO;AAChB;AAAA,UACJ;AACA,cAAI,CAAC,KAAK,OAAO,YAAY,CAAC,GAAG;AAC7B,iBAAK,OAAO,YAAY,CAAC,IAAI,CAAC;AAAA,UAClC;AACA,cAAI,CAAC,KAAK,OAAO,YAAY,CAAC,EAAE,OAAO;AACnC,iBAAK,OAAO,YAAY,CAAC,EAAE,QAAQ,CAAC;AAAA,UACxC;AACA,eAAK,OAAO,YAAY,CAAC,EAAE,QAAS,KAAK,OAAO,YAAY,CAAC,EAAyB,MAAM;AAAA,YACxF,CAAAA,OAAK;AACD,kBAAI,aAAa,CAAC,EAAE,MAAO,KAAK,CAAAC,OAAKA,GAAE,aAAaD,GAAE,QAAQ,GAAG;AAC7D,uBAAO;AAAA,cACX;AACA,qBAAO;AAAA,YACX;AAAA,UACJ;AACA,eAAK,OAAO,YAAY,CAAC,EAAE,aACvB,KAAK,OAAO,YAAY,CAAC,EAC3B,WAAW,OAAO,CAAAA,OAAK;AACrB,gBAAI,aAAa,CAAC,EAAE,WAAY,KAAK,CAAAC,OAAKD,MAAK,QAAQC,MAAK,QAAQA,GAAE,SAASD,GAAE,IAAI,GAAG;AACpF,qBAAO;AAAA,YACX;AACA,mBAAO;AAAA,UACX,CAAC;AACD,YAAE,cAAc,KAAK,OAAO,YAAY,CAAC,EAAE,cAAc,CAAC,GAAG,OAAO,EAAE,UAAU;AAChF,YAAE,SAAS,KAAK,OAAO,YAAY,CAAC,EAAE,SAAS,CAAC,GAAG,OAAO,EAAE,KAAK;AACjE,eAAK,OAAO,YAAY,CAAC,IAAI;AAAA,YACzB,GAAK,KAAK,OAAO,YAAY,CAAC,KAA4B,CAAC;AAAA,YAC3D,GAAG;AAAA,UACP;AAAA,QACJ;AACA,aAAK,OAAO,YAAY,CAAC,EAAE,MAAO,CAAC,IAAI,KAAK,OAAO,YAAY,CAAC,EAAE,MAAO,CAAC;AAC1E,aAAK,OAAO,YAAY,CAAC,EAAE,UAAU,KAAK,OAAO;AAAA,MACrD;AAAA,IACJ,SAAS,GAAQ;AACb,WAAK,IAAI,KAAK,kCAAkC,CAAC,EAAE;AACnD;AAAA,IACJ;AAEA,QACI,KAAK,OAAO,oBAAoB,UAChC,OAAO,KAAK,OAAO,oBAAoB,YACvC,EAAE,KAAK,OAAO,kBAAkB,IAClC;AACE,WAAK,OAAO,kBAAkB;AAAA,IAClC;AAIA,SAAK,WAAW,YAAY;AAExB,gCAAM,UAAU;AAEhB,YAAM,KAAK,QAAQ,KAAK;AACxB,YAAM,SAAS,MAAM,KAAK,eAAe,GAAG;AAC5C,YAAM,KAAK,QAAQ,WAAW,MAAM;AAGpC,iBAAW,MAAM,QAAQ;AACrB,YAAI,GAAG,SAAS,gBAAgB,GAAG;AAC/B,gBAAM,KAAK,QAAQ,QAAQ,IAAI,OAAO,sCAAoB,MAAM,OAAO,KAAK,QAAQ;AAAA,QACxF;AAAA,MACJ;AACA,WAAK,IAAI,MAAM,sBAAsB;AACrC,UAAI,EAAE,KAAK,OAAO,UAAU,KAAK,OAAO,YAAY,KAAK,OAAO,gBAAgB,KAAK,OAAO,eAAe;AACvG,aAAK,IAAI,MAAM,uCAAuC;AACtD;AAAA,MACJ;AAOA,WAAK,aAAa,IAAI,KAAK;AAAA,QACvB;AAAA,QACA,KAAK,OAAO;AAAA,QACZ,KAAK,OAAO;AAAA,QACZ,KAAK,OAAO;AAAA,QACZ,KAAK,OAAO;AAAA,QACZ,CAAC,OAAO,YAAY;AAChB,eAAK,IAAI,MAAM,GAAG,KAAK,IAAI,OAAO,EAAE;AAAA,QACxC;AAAA,MACJ;AACA,UAAI,CAAC,KAAK,YAAY;AAClB;AAAA,MACJ;AACA,YAAM,aAAa,gBAAgB,KAAK,OAAO,WAAW;AAC1D,UAAI,UAAU;AACd,iBAAW,KAAK,YAAY;AACxB,YAAI,KAAK,EAAE,OAAO;AACd,gBAAM,QAAkB,CAAC;AACzB,qBAAW,KAAK,EAAE,OAAO;AACrB;AACA,gBAAI,EAAE,cAAc,IAAI;AACpB;AAAA,YACJ;AACA,gBAAI,EAAE,SAAS,iBAAiB,EAAE,SAAS,kBAAkB,EAAE,SAAS,gBAAgB;AACpF,gBAAE,WAAW,IAAI,EAAE,QAAQ;AAAA,YAC/B;AACA,gBAAI,MAAM,QAAQ,EAAE,QAAQ,MAAM,IAAI;AAClC,oBAAM,IAAI,MAAM,YAAY,EAAE,QAAQ,aAAa;AAAA,YACvD;AACA,kBAAM,KAAK,EAAE,QAAQ;AAAA,UACzB;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,YAAY,GAAG;AACf;AAAA,MACJ;AAGA,YAAM,MAAM,QAAQ,YAAY,EAAE,WAAW;AAC7C,WAAK,IAAI,MAAM,OAAO,GAAG,GAAG,GAAG,CAAC;AAChC,WAAK,aAAa,IAAI,6BAAW,MAAM;AAAA,QACnC,YAAY,KAAK;AAAA,QACjB,MAAM;AAAA,QACN,QAAQ;AAAA,MACZ,CAAC;AACD,YAAM,KAAK,WAAW,KAAK;AAC3B,kBAAY,MAAM;AACd,aAAK,IAAI;AAAA,UACL,GAAG,KAAK,MAAM,GAAG,CAAC,KAAK,OAAO,KAAK,MAAM,QAAQ,YAAY,EAAE,WAAW,IAAI,CAAC,CAAC;AAAA,QACpF;AAAA,MACJ,GAAG,GAAK;AAAA,IACZ,GAAG,IAAI;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAc,SAAS,UAAqC;AACxD,QAAI;AACA,WAAK,SAAS;AAMd,UAAI,KAAK,YAAY;AACjB,aAAK,WAAW;AAAA,MACpB;AACA,eAAS;AAAA,IACb,QAAQ;AACJ,eAAS;AAAA,IACb;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBA,MAAc,cAAc,IAAY,OAAyD;AAC7F,QAAI,OAAO;AACP,UAAI,KAAK,YAAY;AACjB,cAAM,KAAK,WAAW,gBAAgB,cAAc,IAAI,KAAK;AAAA,MACjE;AAAA,IACJ,OAAO;AAEH,WAAK,IAAI,KAAK,SAAS,EAAE,UAAU;AAAA,IACvC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAc,UAAU,KAAsC;AAC1D,QAAI,OAAO,QAAQ,YAAY,IAAI,SAAS;AAExC,cAAQ,IAAI,SAAS;AAAA,QACjB,KAAK,UAAU;AACX,gBAAM,OAAO,MAAM,KAAK,sBAAsB,kBAAkB,KAAK,SAAS,EAAE;AAChF,cACI,QACA,KAAK,UACL,KAAK,UAAU,KAAK,OAAO,WAAW,MAAM,KAAK,UAAU,IAAI,OAAO,GACxE;AACE,iBAAK,OAAO,cAAc,IAAI;AAC9B,kBAAM,KAAK,sBAAsB,kBAAkB,KAAK,SAAS,IAAI,IAAI;AAAA,UAC7E;AACA,cAAI,IAAI,UAAU;AACd,iBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,CAAC,GAAG,IAAI,QAAQ;AAAA,UACvD;AACA;AAAA,QACJ;AAAA,QACA,KAAK,gBAAgB;AACjB,cAAI,IAAI,WAAW,IAAI,QAAQ,OAAO;AAClC,kBAAM,QAAQ,MAAM,KAAK,sBAAsB,IAAI,QAAQ,KAAK;AAChE,gBAAI,SAAS,MAAM,UAAU,MAAM,OAAO,UAAU,MAAM,OAAO,OAAO,KAAK,SAAS,GAAG;AACrF,mBAAK,IAAI,MAAM,gBAAgB,KAAK,UAAU,MAAM,OAAO,OAAO,KAAK,SAAS,CAAC,CAAC,EAAE;AAAA,YACxF;AAAA,UACJ;AACA,cAAI,IAAI,UAAU;AACd,iBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,CAAC,GAAG,IAAI,QAAQ;AAAA,UACvD;AACA;AAAA,QACJ;AAAA,QACA,KAAK,gBAAgB;AACjB,cAAI,IAAI,SAAS;AACb,kBAAM,UAAU,IAAI,oCAAc,IAAI;AACtC,kBAAM,QAAQ,gBAAgB,IAAI,OAAO;AAAA,UAC7C;AACA,cAAI,IAAI,UAAU;AACd,iBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,CAAC,GAAG,IAAI,QAAQ;AAAA,UACvD;AACA;AAAA,QACJ;AAAA,QACA,KAAK,kBAAkB;AACnB,gBAAM,OAAO,MAAM,KAAK,mBAAmB,UAAU,UAAU;AAAA,YAC3D,UAAU,GAAG,KAAK,SAAS;AAAA,YAC3B,QAAQ,GAAG,KAAK,SAAS;AAAA,UAC7B,CAAC;AACD,cAAI,UAAe,CAAC;AACpB,cAAI,QAAQ,KAAK,MAAM;AACnB,sBAAU,EAAE,QAAQ,CAAC,EAAE;AACvB,uBAAW,SAAS,KAAK,MAAM;AAC3B,oBAAM,SAAS,EAAE,IAAI,IAAI,MAAM,IAAI,OAAO,IAAI,UAAU,MAAM;AAC9D,oBAAM,IAAI,MAAM,KAAK,sBAAsB,MAAM,EAAE;AACnD,kBAAI,KAAK,EAAE,UAAU,EAAE,OAAO,MAAM;AAChC,uBAAO,KAAK,EAAE,OAAO;AACrB,uBAAO,OAAO,EAAE,OAAO;AACvB,uBAAO,QAAQ,EAAE,OAAO;AACxB,wBAAQ,OAAO,KAAK,MAAM;AAAA,cAC9B;AAAA,YACJ;AAAA,UACJ;AACA,cAAI,IAAI,UAAU;AACd,iBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,EAAE,QAAQ,QAAQ,GAAG,IAAI,QAAQ;AAAA,UACxE;AACA,eAAK,IAAI,MAAM,KAAK,UAAU,IAAI,CAAC;AACnC;AAAA,QACJ;AAAA,QACA,SAAS;AAEL,cAAI,IAAI,UAAU;AACd,iBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,CAAC,GAAG,IAAI,QAAQ;AAAA,UACvD;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAM,wBAAwB,IAAY,KAAyC;AAC/E,QAAI,GAAG,WAAW,KAAK,SAAS,GAAG;AAC/B;AAAA,IACJ;AACA,UAAM,KAAK,qBAAqB,IAAI,KAAK,KAAK;AAAA,EAClD;AACJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,kBAAkB,OAAO;AAC1G,OAAO;AAEH,GAAC,MAAM,IAAI,kBAAkB,GAAG;AACpC;",
  "names": ["a", "b"]
}
