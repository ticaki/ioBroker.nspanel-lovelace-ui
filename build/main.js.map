{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0..\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport { Library } from './lib/classes/library';\nimport 'source-map-support/register';\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\nimport * as MQTT from './lib/classes/mqtt';\nimport { testCaseConfig } from './lib/config';\nimport { Controller } from './lib/controller/controller';\nimport { Icons } from './lib/const/icon_mapping';\nimport { genericStateObjects } from './lib/const/definition';\nimport { ConfigManager } from './lib/classes/config-manager';\nimport type { panelConfigPartial } from './lib/controller/panel';\nimport { generateAliasDocumentation } from './lib/tools/readme';\nimport type { STATUS0 } from './lib/types/types';\n\nclass NspanelLovelaceUi extends utils.Adapter {\n    library: Library;\n    mqttClient: MQTT.MQTTClientClass | undefined;\n    mqttServer: MQTT.MQTTServerClass | undefined;\n    controller: Controller | undefined;\n    unload: boolean = false;\n    testSuccessful: boolean = true;\n\n    timeoutAdmin: ioBroker.Timeout | undefined;\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'nspanel-lovelace-ui',\n            useFormatDate: true,\n        });\n        this.library = new Library(this);\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n        // init some propertys so we dont need undefined checks\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        await this.extendForeignObjectAsync(this.namespace, {\n            type: 'meta',\n            common: { name: { en: 'Nspanel Instance', de: 'Nspanel Instanze' }, type: 'meta.folder' },\n            native: {},\n        });\n        this.library = new Library(this);\n        await this.delay(2000);\n\n        await generateAliasDocumentation();\n        if (this.config.testCase) {\n            this.log.warn('Testcase mode!');\n        }\n        /*if (!this.config.Testconfig2) {\n            if (this.config.onlyStartFromSystemConfig) {\n                this.log.warn('No configuration stopped!');\n                return;\n            }\n            this.log.warn('No configuration use dev test config!');\n            let testconfig = Testconfig;\n            try {\n                const path = './lib/config-custom.js';\n                testconfig = (await import(path)).Testconfig;\n            } catch {\n                // nothing\n            }\n            this.config.Testconfig2 = testconfig;\n        }\n        if (\n            !this.config.Testconfig2 ||\n            !Array.isArray(this.config.Testconfig2) ||\n            !this.config.Testconfig2[0] ||\n            !this.config.Testconfig2[0].pages\n        ) {\n            this.log.warn('Adapter on hold, user restart needed!');\n            return;\n        }*/\n        //try {\n        this.config.Testconfig2 = [];\n        const obj = await this.getForeignObjectAsync(this.namespace);\n        if (obj && obj.native) {\n            const config = [];\n            if (obj.native.scriptConfigRaw) {\n                const manager = new ConfigManager(this, true);\n                manager.log.warn = function (_msg: string) {\n                    //nothing\n                };\n                for (const a of this.config.panels) {\n                    if (a && a.topic) {\n                        const page = (obj.native.scriptConfigRaw as any[]).find(\n                            (b: { panelTopic: string }) => b.panelTopic === a.topic,\n                        );\n                        if (page) {\n                            const c = await manager.setScriptConfig(page);\n                            if (c && c.messages && c.messages.length > 0) {\n                                if (!c.messages[0].startsWith('Panel')) {\n                                    this.log.warn(c.messages[0]);\n                                }\n                            }\n                            if (c && c.panelConfig) {\n                                this.log.info(`Raw script config found for ${a.topic}`);\n                                config.push(c.panelConfig);\n                                continue;\n                            }\n                        }\n                        {\n                            const c = (obj.native.scriptConfig as any[]).find(\n                                (b: { topic: string }) => b.topic === a.topic,\n                            );\n                            if (c) {\n                                this.log.info(`Converted script config found for ${a.topic}`);\n                                config.push(c);\n                                continue;\n                            }\n                        }\n                    }\n                    this.log.warn(`No script config found for ${a.topic}`);\n                }\n            }\n\n            const scriptConfig: Partial<panelConfigPartial>[] = config;\n            if (scriptConfig.length === 0) {\n                this.log.error('No compatible config found, paused!');\n                if (!this.config.testCase) {\n                    return;\n                }\n            }\n            if (scriptConfig) {\n                for (let b = 0; b < scriptConfig.length; b++) {\n                    const s = scriptConfig[b];\n                    if (!s || !s.pages) {\n                        continue;\n                    }\n\n                    this.config.Testconfig2[b] = {};\n\n                    if (!this.config.Testconfig2[b].pages) {\n                        this.config.Testconfig2[b].pages = [];\n                    }\n                    if (!this.config.Testconfig2[b].navigation) {\n                        this.config.Testconfig2[b].navigation = [];\n                    }\n                    this.config.Testconfig2[b].pages = (this.config.Testconfig2[b] as panelConfigPartial).pages.filter(\n                        a => {\n                            if (s.pages!.find(b => b.uniqueID === a.uniqueID)) {\n                                return false;\n                            }\n                            return true;\n                        },\n                    );\n                    this.config.Testconfig2[b].navigation = (\n                        this.config.Testconfig2[b] as panelConfigPartial\n                    ).navigation.filter(a => {\n                        if (s.navigation && s.navigation.find(b => a == null || b == null || b.name === a.name)) {\n                            return false;\n                        }\n                        return true;\n                    });\n                    s.navigation = (this.config.Testconfig2[b].navigation || []).concat(s.navigation || []);\n                    s.pages = (this.config.Testconfig2[b].pages || []).concat(s.pages || []);\n                    this.config.Testconfig2[b] = {\n                        ...((this.config.Testconfig2[b] as panelConfigPartial) || {}),\n                        ...s,\n                    };\n                }\n                //this.config.Testconfig2[0].timeout = this.config.timeout;\n            }\n        }\n\n        /*} catch (e: any) {\n            this.log.warn(`Invalid configuration stopped! ${e}`);\n            return;\n        }*/\n\n        if (\n            this.config.doubleClickTime === undefined ||\n            typeof this.config.doubleClickTime !== 'number' ||\n            !(this.config.doubleClickTime > 0)\n        ) {\n            this.config.doubleClickTime = 350;\n        }\n        await this.delay(2000);\n\n        //check config\n        try {\n            Icons.adapter = this;\n\n            await this.library.init();\n            const states = await this.getStatesAsync('*');\n            await this.library.initStates(states);\n\n            // set all .info.nspanel.isOnline to false\n            for (const id in states) {\n                if (id.endsWith('.info.isOnline')) {\n                    await this.library.writedp(id, false, genericStateObjects.panel.panels.info.isOnline);\n                }\n            }\n            this.log.debug('Check configuration!');\n\n            if (!this.config.pw1 || typeof this.config.pw1 !== 'string') {\n                this.log.warn('No pin entered for the service page! Please set a pin in the admin settings!');\n            }\n\n            if (this.config.mqttServer && this.config.mqttPort && this.config.mqttUsername) {\n                this.config.mqttPassword = this.config.mqttPassword || '1234';\n                this.mqttServer = new MQTT.MQTTServerClass(\n                    this,\n                    this.config.mqttPort,\n                    this.config.mqttUsername,\n                    this.config.mqttPassword,\n                    './mqtt',\n                );\n                this.config.mqttIp = '127.0.0.1';\n                let c = 0;\n                while (!this.mqttServer.ready) {\n                    this.log.debug('Wait for mqttServer');\n                    await this.delay(1000);\n                    if (c++ > 6) {\n                        throw new Error('mqttServer not ready!');\n                    }\n                }\n            }\n\n            if (!(this.config.mqttIp && this.config.mqttPort && this.config.mqttUsername && this.config.mqttPassword)) {\n                this.log.error('Invalid admin configuration for mqtt!');\n                this.testSuccessful = false;\n                return;\n            }\n            /*const test = await this.getObjectViewAsync('system', 'instance', {\n                startkey: `system.adapter`,\n                endkey: `system.adapter}`,\n            });\n            this.log.debug(JSON.stringify(test));*/\n            this.mqttClient = new MQTT.MQTTClientClass(\n                this,\n                this.config.mqttIp,\n                this.config.mqttPort,\n                this.config.mqttUsername,\n                this.config.mqttPassword,\n                (topic, message) => {\n                    this.log.debug(`${topic} ${message}`);\n                },\n            );\n            if (!this.mqttClient) {\n                return;\n            }\n\n            if (this.config.testCase) {\n                await this.extendForeignObjectAsync('0_userdata.0.boolean', {\n                    type: 'state',\n                    common: { name: 'boolean', type: 'boolean' },\n                    native: {},\n                });\n                await this.extendForeignObjectAsync('0_userdata.0.number', {\n                    type: 'state',\n                    common: { name: 'number', type: 'number' },\n                    native: {},\n                });\n                await this.extendForeignObjectAsync('0_userdata.0.string', {\n                    type: 'state',\n                    common: { name: 'string', type: 'string' },\n                    native: {},\n                });\n                this.config.Testconfig2 = testCaseConfig;\n                const test = new MQTT.MQTTClientClass(\n                    this,\n                    this.config.mqttIp,\n                    this.config.mqttPort,\n                    this.config.mqttUsername,\n                    this.config.mqttPassword,\n                    (topic, message) => {\n                        this.log.debug(`${topic} ${message}`);\n                    },\n                );\n                let c = 0;\n                while (!test.ready) {\n                    this.log.debug('Wait for Test mqttClient');\n                    await this.delay(1000);\n                    if (c++ > 6) {\n                        throw new Error('Test mqttClient not ready!');\n                    }\n                }\n\n                test.subscript('nspanel/ns_panel4/cmnd/#', async (topic, message) => {\n                    this.log.debug(`Testcase ${topic}`);\n                    if (message === 'pageType~pageStartup') {\n                        await test.publish('nspanel/ns_panel4/stat/RESULT', '{\"CustomSend\": \"Done\"}');\n                        await test.publish('nspanel/ns_panel4/tele/RESULT', '{\"CustomRecv\":\"event,startup,54,eu\"}');\n                    } else if (topic === 'nspanel/ns_panel4/cmnd/STATUS0') {\n                        await test.publish(\n                            'nspanel/ns_panel4/stat/STATUS0',\n                            '{\"Status\":{\"Module\":0,\"DeviceName\":\"NSPanel 4 Test\",\"FriendlyName\":[\"Tasmota\",\"\"],\"Topic\":\"ns_panel4\",\"ButtonTopic\":\"0\",\"Power\":\"00\",\"PowerLock\":\"00\",' +\n                                '\"PowerOnState\":3,\"LedState\":1,\"LedMask\":\"FFFF\",\"SaveData\":1,\"SaveState\":1,\"SwitchTopic\":\"0\",\"SwitchMode\":' +\n                                '[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"ButtonRetain\":0,\"SwitchRetain\":0,\"SensorRetain\":0,\"PowerRetain\":0,\"InfoRetain\":0,' +\n                                '\"StateRetain\":0,\"StatusRetain\":0},\"StatusPRM\":{\"Baudrate\":115200,\"SerialConfig\":\"8N1\",\"GroupTopic\":\"tasmotas\",' +\n                                '\"OtaUrl\":\"http://ota.tasmota.com/tasmota32/release/tasmota32-nspanel.bin\",\"RestartReason\":\"Vbat power on reset\",\"Uptime\":\"0T00:07:28\",\"StartupUTC\":' +\n                                '\"2025-02-19T09:23:29\",\"Sleep\":50,\"CfgHolder\":4617,\"BootCount\":59,\"BCResetTime\":\"2024-01-06T17:11:30\",\"SaveCount\":110},\"StatusFWR\":{\"Version\":\"14.4.1(release-nspanel)\",' +\n                                '\"BuildDateTime\":\"2024-12-15T13:33:11\",\"Core\":\"3_1_0\",\"SDK\":\"5.3.2\",\"CpuFrequency\":160,\"Hardware\":\"ESP32-D0WD-V3 v3.1\",\"CR\":\"502/699\"},\"StatusLOG\":{\"SerialLog\":2,' +\n                                '\"WebLog\":1,\"MqttLog\":3,\"SysLog\":0,\"LogHost\":\"\",\"LogPort\":514,\"SSId\":[\"xxx\",\"\"],\"TelePeriod\":300,\"Resolution\":\"558180C0\",\"SetOption\":' +\n                                '[\"00008009\",\"2805C80001000600003C5A0A192800000000\",\"00000080\",\"00006000\",\"00004000\",\"00000000\"]},\"StatusMEM\":{\"ProgramSize\":2017,\"Free\":862,\"Heap\":148,\"StackLowMark\":' +\n                                '3,\"PsrMax\":2048,\"PsrFree\":2025,\"ProgramFlashSize\":4096,\"FlashSize\":4096,\"FlashChipId\":\"16405E\",\"FlashFrequency\":40,\"FlashMode\":\"DIO\",\"Features\":[\"0809\",' +\n                                '\"9F9AD7DF\",\"0015A001\",\"B7F7BFCF\",\"05DA9BC4\",\"E0360DC7\",\"480840D2\",\"20200000\",\"D4BC482D\",\"810A80F1\",\"00000014\"],\"Drivers\":\"1,2,!3,!4,!5,7,!8,9,10,11,12,!14,!16,' +\n                                '!17,!20,!21,24,26,!27,29,!34,!35,38,50,52,!59,!60,62,!63,!66,!67,!68,!73,!75,82,!86,!87,!88,!121\",\"Sensors\":\"1,2,3,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,' +\n                                '21,22,26,31,34,37,39,40,42,43,45,51,52,55,56,58,59,64,66,67,74,85,92,95,98,103,105,109,127\",\"I2CDriver\":\"7,8,9,10,11,12,13,14,15,17,18,20,24,29,31,36,41,42,44,46,48,58' +\n                                ',62,65,69,76,77,82,89\"},\"StatusNET\":{\"Hostname\":\"ns-panel4-0112\",\"IPAddress\":\"192.168.178.174\",\"Gateway\":\"192.168.178.1\",\"Subnetmask\":\"255.255.254.0\",\"DNSServer1\":' +\n                                '\"192.168.179.21\",\"DNSServer2\":\"0.0.0.0\",\"Mac\":\"A0:B7:A5:54:C0:71\",\"IP6Global\":\"\",\"IP6Local\":\"xxx\",\"Ethernet\":{\"Hostname\":\"\",\"IPAddress\":\"0.0.0.0\",\"Gateway\":\"0.0.0.0\",' +\n                                '\"Subnetmask\":\"0.0.0.0\",\"DNSServer1\":\"192.168.179.21\",\"DNSServer2\":\"0.0.0.0\",\"Mac\":\"00:00:00:00:00:00\",\"IP6Global\":\"\",\"IP6Local\":\"\"},\"Webserver\":2,\"HTTP_API\":1,' +\n                                '\"WifiConfig\":4,\"WifiPower\":16.0},\"StatusMQT\":{\"MqttHost\":\"xxx\",\"MqttPort\":1883,\"MqttClientMask\":\"ns_panel4\",\"MqttClient\":\"ns_panel4\",\"MqttUser\":\"xxx\",\"MqttCount\":1,' +\n                                '\"MAX_PACKET_SIZE\":1200,\"KEEPALIVE\":30,\"SOCKET_TIMEOUT\":4},\"StatusTIM\":{\"UTC\":\"2025-02-19T09:30:57Z\",\"Local\":\"2025-02-19T10:30:57\",\"StartDST\":\"2025-03-30T02:00:00\",' +\n                                '\"EndDST\":\"2025-10-26T03:00:00\",\"Timezone\":\"+01:00\",\"Sunrise\":\"07:50\",\"Sunset\":\"18:17\"},\"StatusSNS\":{\"Time\":\"2025-02-19T10:30:57\",\"ANALOG\":{\"Temperature1\":-3.2},\"TempUnit\"' +\n                                ':\"C\"},\"StatusSTS\":{\"Time\":\"2025-02-19T10:30:57\",\"Uptime\":\"0T00:07:28\",\"UptimeSec\":448,\"Heap\":146,\"SleepMode\":\"Dynamic\",\"Sleep\":50,\"LoadAvg\":19,\"MqttCount\":1,\"Berry\":' +\n                                '{\"HeapUsed\":16,\"Objects\":212},\"POWER1\":\"OFF\",\"POWER2\":\"OFF\",\"Wifi\":{\"AP\":1,\"SSId\":\"Keller\",\"BSSId\":\"DC:15:C8:EB:3E:B8\",\"Channel\":7,\"Mode\":\"HT40\",\"RSSI\":46,\"Signal\":-77,' +\n                                '\"LinkCount\":1,\"Downtime\":\"0T00:00:03\"}}}',\n                        );\n                    }\n                });\n            }\n            if (\n                !this.config.Testconfig2 ||\n                !Array.isArray(this.config.Testconfig2) ||\n                this.config.Testconfig2.length === 0\n            ) {\n                await this.delay(100);\n                this.mqttClient.destroy();\n                await this.delay(100);\n                this.log.error('No configuration - adapter on hold!');\n                return;\n            }\n            const testconfig = structuredClone(this.config.Testconfig2);\n            let counter = 0;\n            for (const a of testconfig) {\n                if (a && a.pages) {\n                    const names: string[] = [];\n                    for (const p of a.pages) {\n                        counter++;\n                        if (!('uniqueID' in p)) {\n                            continue;\n                        }\n                        if (p.card === 'screensaver' || p.card === 'screensaver2' || p.card === 'screensaver3') {\n                            p.uniqueID = `#${p.uniqueID}`;\n                        }\n                        if (names.indexOf(p.uniqueID) !== -1) {\n                            throw new Error(`uniqueID ${p.uniqueID} is double!`);\n                        }\n                        names.push(p.uniqueID);\n                    }\n                }\n            }\n            if (counter === 0) {\n                return;\n            }\n            //testconfig[0].name = this.config.name;\n            //testconfig[0].topic = this.config.topic;\n            const mem = process.memoryUsage().heapUsed / 1024;\n            this.log.debug(String(`${mem}k`));\n            this.controller = new Controller(this, {\n                mqttClient: this.mqttClient,\n                name: 'controller',\n                panels: testconfig,\n            });\n            await this.controller.init();\n            /*setInterval(() => {\n                    this.log.debug(\n                        `${Math.trunc(mem)}k/${String(Math.trunc(process.memoryUsage().heapUsed / 1024))}k Start/Jetzt: `,\n                    );\n                }, 60000);*/\n        } catch (e: any) {\n            this.testSuccessful = false;\n            this.log.error(`Error onReady: ${e}`);\n        }\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances.\n     *\n     * @param callback Callback so the adapter can finish what it has to do\n     */\n    private async onUnload(callback: () => void): Promise<void> {\n        try {\n            this.unload = true;\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            // clearInterval(interval1);\n            if (this.timeoutAdmin) {\n                this.clearTimeout(this.timeoutAdmin);\n            }\n            if (this.controller) {\n                this.controller.delete;\n            }\n            callback();\n        } catch {\n            callback();\n        }\n    }\n    //test\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     *\n     * @param id   The id of the state that changed\n     * @param state The state object holding the new value and meta information of the state\n     */\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (state) {\n            if (this.controller) {\n                await this.controller.statesControler.onStateChange(id, state);\n            }\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Somee message was sent to this instance over message box. Used by email, pushover, text2speech, ........\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    private async onMessage(obj: ioBroker.Message): Promise<void> {\n        if (typeof obj === 'object' && obj.message) {\n            //this.log.info(JSON.stringify(obj));\n            switch (obj.command) {\n                case 'config': {\n                    const obj1 = await this.getForeignObjectAsync(`system.adapter.${this.namespace}`);\n                    if (\n                        obj1 &&\n                        obj1.native &&\n                        JSON.stringify(obj1.native.Testconfig2) !== JSON.stringify(obj.message)\n                    ) {\n                        obj1.native.Testconfig2 = obj.message;\n                        await this.setForeignObjectAsync(`system.adapter.${this.namespace}`, obj1);\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, [], obj.callback);\n                    }\n                    break;\n                }\n                case 'updateCustom': {\n                    if (obj.message && obj.message.state) {\n                        const state = await this.getForeignObjectAsync(obj.message.state);\n                        if (state && state.common && state.common.custom && state.common.custom[this.namespace]) {\n                            this.log.debug(`updateCustom ${JSON.stringify(state.common.custom[this.namespace])}`);\n                        }\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, [], obj.callback);\n                    }\n                    break;\n                }\n                case 'ScriptConfig': {\n                    let result = ['something went wrong'];\n                    if (obj.message) {\n                        const manager = new ConfigManager(this);\n                        const r = await manager.setScriptConfig(obj.message);\n                        result = r.messages;\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, result, obj.callback);\n                    }\n                    break;\n                }\n                case 'RefreshDevices': {\n                    /*const view = await this.getObjectViewAsync('system', 'device', {\n                        startkey: `${this.namespace}.panels.`,\n                        endkey: `${this.namespace}.panels.\\u9999`,\n                    });\n                    let devices: any = {};\n                    if (view && view.rows) {\n                        devices = { panels: [] };\n                        for (const panel of view.rows) {\n                            const result = { id: '', name: '', topic: '', removeIt: false };\n                            const p = await this.getForeignObjectAsync(panel.id);\n                            if (\n                                p &&\n                                p.native &&\n                                p.native.name &&\n                                p.native.configName === obj.message.name &&\n                                p.native.topic === obj.message.topic\n                            ) {\n                                result.id = ''; //p.native.name;\n                                result.name = p.native.configName;\n                                result.topic = p.native.topic;\n                                devices.panels.push(result);\n                            }\n                        }\n                    }*/\n                    const device = { id: '', name: obj.message.name, topic: obj.message.topic };\n\n                    const mqtt = new MQTT.MQTTClientClass(\n                        this,\n                        this.config.mqttIp,\n                        this.config.mqttPort,\n                        this.config.mqttUsername,\n                        this.config.mqttPassword,\n                        (topic, message) => {\n                            this.log.debug(`${topic} ${message}`);\n                        },\n                    );\n                    this.timeoutAdmin = this.setTimeout(\n                        async mqtt => {\n                            let rCount = 0;\n                            if (mqtt) {\n                                if (!device.id) {\n                                    rCount++;\n                                    mqtt.subscript(\n                                        `${device.topic}/stat/STATUS0`,\n                                        (_topic: string, _message: string) => {\n                                            const msg = JSON.parse(_message) as STATUS0;\n                                            if (msg.StatusNET) {\n                                                device.id = this.library.cleandp(msg.StatusNET.Mac, false, true);\n                                            }\n                                            rCount--;\n                                        },\n                                    );\n                                    void mqtt.publish(`${device.topic}/cmnd/STATUS0`, '');\n                                }\n\n                                const _waitForFinish = (count: number): void => {\n                                    if (count > 10 || rCount === 0) {\n                                        if (obj.callback) {\n                                            this.sendTo(obj.from, obj.command, { native: device }, obj.callback);\n                                        }\n                                        mqtt.destroy();\n                                        return;\n                                    }\n\n                                    this.timeoutAdmin = this.setTimeout(_waitForFinish, 500, ++count);\n                                };\n                                _waitForFinish(0);\n                            }\n                        },\n                        500,\n                        mqtt,\n                    );\n\n                    break;\n                }\n                case 'testCase': {\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, { testSuccessful: this.testSuccessful }, obj.callback);\n                    }\n                    break;\n                }\n                default: {\n                    // Send response in callback if required\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, [], obj.callback);\n                    }\n                }\n            }\n        }\n    }\n\n    async writeStateExternalAsync(dp: string, val: ioBroker.StateValue): Promise<void> {\n        if (dp.startsWith(this.namespace)) {\n            return;\n        }\n        await this.setForeignStateAsync(dp, val, false);\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new NspanelLovelaceUi(options);\n} else {\n    // otherwise start the instance directly\n    (() => new NspanelLovelaceUi())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AACvB,qBAAwB;AACxB,sBAAO;AAGP,WAAsB;AACtB,oBAA+B;AAC/B,wBAA2B;AAC3B,0BAAsB;AACtB,wBAAoC;AACpC,4BAA8B;AAE9B,oBAA2C;AAG3C,MAAM,0BAA0B,MAAM,QAAQ;AAAA,EAC1C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,SAAkB;AAAA,EAClB,iBAA0B;AAAA,EAE1B;AAAA,EACO,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,MACN,eAAe;AAAA,IACnB,CAAC;AACD,SAAK,UAAU,IAAI,uBAAQ,IAAI;AAC/B,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAEpD,SAAK,GAAG,WAAW,KAAK,UAAU,KAAK,IAAI,CAAC;AAC5C,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAE9C;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,UAAyB;AACnC,UAAM,KAAK,yBAAyB,KAAK,WAAW;AAAA,MAChD,MAAM;AAAA,MACN,QAAQ,EAAE,MAAM,EAAE,IAAI,oBAAoB,IAAI,mBAAmB,GAAG,MAAM,cAAc;AAAA,MACxF,QAAQ,CAAC;AAAA,IACb,CAAC;AACD,SAAK,UAAU,IAAI,uBAAQ,IAAI;AAC/B,UAAM,KAAK,MAAM,GAAI;AAErB,cAAM,0CAA2B;AACjC,QAAI,KAAK,OAAO,UAAU;AACtB,WAAK,IAAI,KAAK,gBAAgB;AAAA,IAClC;AA0BA,SAAK,OAAO,cAAc,CAAC;AAC3B,UAAM,MAAM,MAAM,KAAK,sBAAsB,KAAK,SAAS;AAC3D,QAAI,OAAO,IAAI,QAAQ;AACnB,YAAM,SAAS,CAAC;AAChB,UAAI,IAAI,OAAO,iBAAiB;AAC5B,cAAM,UAAU,IAAI,oCAAc,MAAM,IAAI;AAC5C,gBAAQ,IAAI,OAAO,SAAU,MAAc;AAAA,QAE3C;AACA,mBAAW,KAAK,KAAK,OAAO,QAAQ;AAChC,cAAI,KAAK,EAAE,OAAO;AACd,kBAAM,OAAQ,IAAI,OAAO,gBAA0B;AAAA,cAC/C,CAAC,MAA8B,EAAE,eAAe,EAAE;AAAA,YACtD;AACA,gBAAI,MAAM;AACN,oBAAM,IAAI,MAAM,QAAQ,gBAAgB,IAAI;AAC5C,kBAAI,KAAK,EAAE,YAAY,EAAE,SAAS,SAAS,GAAG;AAC1C,oBAAI,CAAC,EAAE,SAAS,CAAC,EAAE,WAAW,OAAO,GAAG;AACpC,uBAAK,IAAI,KAAK,EAAE,SAAS,CAAC,CAAC;AAAA,gBAC/B;AAAA,cACJ;AACA,kBAAI,KAAK,EAAE,aAAa;AACpB,qBAAK,IAAI,KAAK,+BAA+B,EAAE,KAAK,EAAE;AACtD,uBAAO,KAAK,EAAE,WAAW;AACzB;AAAA,cACJ;AAAA,YACJ;AACA;AACI,oBAAM,IAAK,IAAI,OAAO,aAAuB;AAAA,gBACzC,CAAC,MAAyB,EAAE,UAAU,EAAE;AAAA,cAC5C;AACA,kBAAI,GAAG;AACH,qBAAK,IAAI,KAAK,qCAAqC,EAAE,KAAK,EAAE;AAC5D,uBAAO,KAAK,CAAC;AACb;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AACA,eAAK,IAAI,KAAK,8BAA8B,EAAE,KAAK,EAAE;AAAA,QACzD;AAAA,MACJ;AAEA,YAAM,eAA8C;AACpD,UAAI,aAAa,WAAW,GAAG;AAC3B,aAAK,IAAI,MAAM,qCAAqC;AACpD,YAAI,CAAC,KAAK,OAAO,UAAU;AACvB;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,cAAc;AACd,iBAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC1C,gBAAM,IAAI,aAAa,CAAC;AACxB,cAAI,CAAC,KAAK,CAAC,EAAE,OAAO;AAChB;AAAA,UACJ;AAEA,eAAK,OAAO,YAAY,CAAC,IAAI,CAAC;AAE9B,cAAI,CAAC,KAAK,OAAO,YAAY,CAAC,EAAE,OAAO;AACnC,iBAAK,OAAO,YAAY,CAAC,EAAE,QAAQ,CAAC;AAAA,UACxC;AACA,cAAI,CAAC,KAAK,OAAO,YAAY,CAAC,EAAE,YAAY;AACxC,iBAAK,OAAO,YAAY,CAAC,EAAE,aAAa,CAAC;AAAA,UAC7C;AACA,eAAK,OAAO,YAAY,CAAC,EAAE,QAAS,KAAK,OAAO,YAAY,CAAC,EAAyB,MAAM;AAAA,YACxF,OAAK;AACD,kBAAI,EAAE,MAAO,KAAK,CAAAA,OAAKA,GAAE,aAAa,EAAE,QAAQ,GAAG;AAC/C,uBAAO;AAAA,cACX;AACA,qBAAO;AAAA,YACX;AAAA,UACJ;AACA,eAAK,OAAO,YAAY,CAAC,EAAE,aACvB,KAAK,OAAO,YAAY,CAAC,EAC3B,WAAW,OAAO,OAAK;AACrB,gBAAI,EAAE,cAAc,EAAE,WAAW,KAAK,CAAAA,OAAK,KAAK,QAAQA,MAAK,QAAQA,GAAE,SAAS,EAAE,IAAI,GAAG;AACrF,qBAAO;AAAA,YACX;AACA,mBAAO;AAAA,UACX,CAAC;AACD,YAAE,cAAc,KAAK,OAAO,YAAY,CAAC,EAAE,cAAc,CAAC,GAAG,OAAO,EAAE,cAAc,CAAC,CAAC;AACtF,YAAE,SAAS,KAAK,OAAO,YAAY,CAAC,EAAE,SAAS,CAAC,GAAG,OAAO,EAAE,SAAS,CAAC,CAAC;AACvE,eAAK,OAAO,YAAY,CAAC,IAAI;AAAA,YACzB,GAAK,KAAK,OAAO,YAAY,CAAC,KAA4B,CAAC;AAAA,YAC3D,GAAG;AAAA,UACP;AAAA,QACJ;AAAA,MAEJ;AAAA,IACJ;AAOA,QACI,KAAK,OAAO,oBAAoB,UAChC,OAAO,KAAK,OAAO,oBAAoB,YACvC,EAAE,KAAK,OAAO,kBAAkB,IAClC;AACE,WAAK,OAAO,kBAAkB;AAAA,IAClC;AACA,UAAM,KAAK,MAAM,GAAI;AAGrB,QAAI;AACA,gCAAM,UAAU;AAEhB,YAAM,KAAK,QAAQ,KAAK;AACxB,YAAM,SAAS,MAAM,KAAK,eAAe,GAAG;AAC5C,YAAM,KAAK,QAAQ,WAAW,MAAM;AAGpC,iBAAW,MAAM,QAAQ;AACrB,YAAI,GAAG,SAAS,gBAAgB,GAAG;AAC/B,gBAAM,KAAK,QAAQ,QAAQ,IAAI,OAAO,sCAAoB,MAAM,OAAO,KAAK,QAAQ;AAAA,QACxF;AAAA,MACJ;AACA,WAAK,IAAI,MAAM,sBAAsB;AAErC,UAAI,CAAC,KAAK,OAAO,OAAO,OAAO,KAAK,OAAO,QAAQ,UAAU;AACzD,aAAK,IAAI,KAAK,8EAA8E;AAAA,MAChG;AAEA,UAAI,KAAK,OAAO,cAAc,KAAK,OAAO,YAAY,KAAK,OAAO,cAAc;AAC5E,aAAK,OAAO,eAAe,KAAK,OAAO,gBAAgB;AACvD,aAAK,aAAa,IAAI,KAAK;AAAA,UACvB;AAAA,UACA,KAAK,OAAO;AAAA,UACZ,KAAK,OAAO;AAAA,UACZ,KAAK,OAAO;AAAA,UACZ;AAAA,QACJ;AACA,aAAK,OAAO,SAAS;AACrB,YAAI,IAAI;AACR,eAAO,CAAC,KAAK,WAAW,OAAO;AAC3B,eAAK,IAAI,MAAM,qBAAqB;AACpC,gBAAM,KAAK,MAAM,GAAI;AACrB,cAAI,MAAM,GAAG;AACT,kBAAM,IAAI,MAAM,uBAAuB;AAAA,UAC3C;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,EAAE,KAAK,OAAO,UAAU,KAAK,OAAO,YAAY,KAAK,OAAO,gBAAgB,KAAK,OAAO,eAAe;AACvG,aAAK,IAAI,MAAM,uCAAuC;AACtD,aAAK,iBAAiB;AACtB;AAAA,MACJ;AAMA,WAAK,aAAa,IAAI,KAAK;AAAA,QACvB;AAAA,QACA,KAAK,OAAO;AAAA,QACZ,KAAK,OAAO;AAAA,QACZ,KAAK,OAAO;AAAA,QACZ,KAAK,OAAO;AAAA,QACZ,CAAC,OAAO,YAAY;AAChB,eAAK,IAAI,MAAM,GAAG,KAAK,IAAI,OAAO,EAAE;AAAA,QACxC;AAAA,MACJ;AACA,UAAI,CAAC,KAAK,YAAY;AAClB;AAAA,MACJ;AAEA,UAAI,KAAK,OAAO,UAAU;AACtB,cAAM,KAAK,yBAAyB,wBAAwB;AAAA,UACxD,MAAM;AAAA,UACN,QAAQ,EAAE,MAAM,WAAW,MAAM,UAAU;AAAA,UAC3C,QAAQ,CAAC;AAAA,QACb,CAAC;AACD,cAAM,KAAK,yBAAyB,uBAAuB;AAAA,UACvD,MAAM;AAAA,UACN,QAAQ,EAAE,MAAM,UAAU,MAAM,SAAS;AAAA,UACzC,QAAQ,CAAC;AAAA,QACb,CAAC;AACD,cAAM,KAAK,yBAAyB,uBAAuB;AAAA,UACvD,MAAM;AAAA,UACN,QAAQ,EAAE,MAAM,UAAU,MAAM,SAAS;AAAA,UACzC,QAAQ,CAAC;AAAA,QACb,CAAC;AACD,aAAK,OAAO,cAAc;AAC1B,cAAM,OAAO,IAAI,KAAK;AAAA,UAClB;AAAA,UACA,KAAK,OAAO;AAAA,UACZ,KAAK,OAAO;AAAA,UACZ,KAAK,OAAO;AAAA,UACZ,KAAK,OAAO;AAAA,UACZ,CAAC,OAAO,YAAY;AAChB,iBAAK,IAAI,MAAM,GAAG,KAAK,IAAI,OAAO,EAAE;AAAA,UACxC;AAAA,QACJ;AACA,YAAI,IAAI;AACR,eAAO,CAAC,KAAK,OAAO;AAChB,eAAK,IAAI,MAAM,0BAA0B;AACzC,gBAAM,KAAK,MAAM,GAAI;AACrB,cAAI,MAAM,GAAG;AACT,kBAAM,IAAI,MAAM,4BAA4B;AAAA,UAChD;AAAA,QACJ;AAEA,aAAK,UAAU,4BAA4B,OAAO,OAAO,YAAY;AACjE,eAAK,IAAI,MAAM,YAAY,KAAK,EAAE;AAClC,cAAI,YAAY,wBAAwB;AACpC,kBAAM,KAAK,QAAQ,iCAAiC,wBAAwB;AAC5E,kBAAM,KAAK,QAAQ,iCAAiC,sCAAsC;AAAA,UAC9F,WAAW,UAAU,kCAAkC;AACnD,kBAAM,KAAK;AAAA,cACP;AAAA,cACA;AAAA,YAsBJ;AAAA,UACJ;AAAA,QACJ,CAAC;AAAA,MACL;AACA,UACI,CAAC,KAAK,OAAO,eACb,CAAC,MAAM,QAAQ,KAAK,OAAO,WAAW,KACtC,KAAK,OAAO,YAAY,WAAW,GACrC;AACE,cAAM,KAAK,MAAM,GAAG;AACpB,aAAK,WAAW,QAAQ;AACxB,cAAM,KAAK,MAAM,GAAG;AACpB,aAAK,IAAI,MAAM,qCAAqC;AACpD;AAAA,MACJ;AACA,YAAM,aAAa,gBAAgB,KAAK,OAAO,WAAW;AAC1D,UAAI,UAAU;AACd,iBAAW,KAAK,YAAY;AACxB,YAAI,KAAK,EAAE,OAAO;AACd,gBAAM,QAAkB,CAAC;AACzB,qBAAW,KAAK,EAAE,OAAO;AACrB;AACA,gBAAI,EAAE,cAAc,IAAI;AACpB;AAAA,YACJ;AACA,gBAAI,EAAE,SAAS,iBAAiB,EAAE,SAAS,kBAAkB,EAAE,SAAS,gBAAgB;AACpF,gBAAE,WAAW,IAAI,EAAE,QAAQ;AAAA,YAC/B;AACA,gBAAI,MAAM,QAAQ,EAAE,QAAQ,MAAM,IAAI;AAClC,oBAAM,IAAI,MAAM,YAAY,EAAE,QAAQ,aAAa;AAAA,YACvD;AACA,kBAAM,KAAK,EAAE,QAAQ;AAAA,UACzB;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,YAAY,GAAG;AACf;AAAA,MACJ;AAGA,YAAM,MAAM,QAAQ,YAAY,EAAE,WAAW;AAC7C,WAAK,IAAI,MAAM,OAAO,GAAG,GAAG,GAAG,CAAC;AAChC,WAAK,aAAa,IAAI,6BAAW,MAAM;AAAA,QACnC,YAAY,KAAK;AAAA,QACjB,MAAM;AAAA,QACN,QAAQ;AAAA,MACZ,CAAC;AACD,YAAM,KAAK,WAAW,KAAK;AAAA,IAM/B,SAAS,GAAQ;AACb,WAAK,iBAAiB;AACtB,WAAK,IAAI,MAAM,kBAAkB,CAAC,EAAE;AAAA,IACxC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAc,SAAS,UAAqC;AACxD,QAAI;AACA,WAAK,SAAS;AAMd,UAAI,KAAK,cAAc;AACnB,aAAK,aAAa,KAAK,YAAY;AAAA,MACvC;AACA,UAAI,KAAK,YAAY;AACjB,aAAK,WAAW;AAAA,MACpB;AACA,eAAS;AAAA,IACb,QAAQ;AACJ,eAAS;AAAA,IACb;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBA,MAAc,cAAc,IAAY,OAAyD;AAC7F,QAAI,OAAO;AACP,UAAI,KAAK,YAAY;AACjB,cAAM,KAAK,WAAW,gBAAgB,cAAc,IAAI,KAAK;AAAA,MACjE;AAAA,IACJ,OAAO;AAEH,WAAK,IAAI,KAAK,SAAS,EAAE,UAAU;AAAA,IACvC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAc,UAAU,KAAsC;AAC1D,QAAI,OAAO,QAAQ,YAAY,IAAI,SAAS;AAExC,cAAQ,IAAI,SAAS;AAAA,QACjB,KAAK,UAAU;AACX,gBAAM,OAAO,MAAM,KAAK,sBAAsB,kBAAkB,KAAK,SAAS,EAAE;AAChF,cACI,QACA,KAAK,UACL,KAAK,UAAU,KAAK,OAAO,WAAW,MAAM,KAAK,UAAU,IAAI,OAAO,GACxE;AACE,iBAAK,OAAO,cAAc,IAAI;AAC9B,kBAAM,KAAK,sBAAsB,kBAAkB,KAAK,SAAS,IAAI,IAAI;AAAA,UAC7E;AACA,cAAI,IAAI,UAAU;AACd,iBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,CAAC,GAAG,IAAI,QAAQ;AAAA,UACvD;AACA;AAAA,QACJ;AAAA,QACA,KAAK,gBAAgB;AACjB,cAAI,IAAI,WAAW,IAAI,QAAQ,OAAO;AAClC,kBAAM,QAAQ,MAAM,KAAK,sBAAsB,IAAI,QAAQ,KAAK;AAChE,gBAAI,SAAS,MAAM,UAAU,MAAM,OAAO,UAAU,MAAM,OAAO,OAAO,KAAK,SAAS,GAAG;AACrF,mBAAK,IAAI,MAAM,gBAAgB,KAAK,UAAU,MAAM,OAAO,OAAO,KAAK,SAAS,CAAC,CAAC,EAAE;AAAA,YACxF;AAAA,UACJ;AACA,cAAI,IAAI,UAAU;AACd,iBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,CAAC,GAAG,IAAI,QAAQ;AAAA,UACvD;AACA;AAAA,QACJ;AAAA,QACA,KAAK,gBAAgB;AACjB,cAAI,SAAS,CAAC,sBAAsB;AACpC,cAAI,IAAI,SAAS;AACb,kBAAM,UAAU,IAAI,oCAAc,IAAI;AACtC,kBAAM,IAAI,MAAM,QAAQ,gBAAgB,IAAI,OAAO;AACnD,qBAAS,EAAE;AAAA,UACf;AACA,cAAI,IAAI,UAAU;AACd,iBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,QAAQ,IAAI,QAAQ;AAAA,UAC3D;AACA;AAAA,QACJ;AAAA,QACA,KAAK,kBAAkB;AAyBnB,gBAAM,SAAS,EAAE,IAAI,IAAI,MAAM,IAAI,QAAQ,MAAM,OAAO,IAAI,QAAQ,MAAM;AAE1E,gBAAM,OAAO,IAAI,KAAK;AAAA,YAClB;AAAA,YACA,KAAK,OAAO;AAAA,YACZ,KAAK,OAAO;AAAA,YACZ,KAAK,OAAO;AAAA,YACZ,KAAK,OAAO;AAAA,YACZ,CAAC,OAAO,YAAY;AAChB,mBAAK,IAAI,MAAM,GAAG,KAAK,IAAI,OAAO,EAAE;AAAA,YACxC;AAAA,UACJ;AACA,eAAK,eAAe,KAAK;AAAA,YACrB,OAAMC,UAAQ;AACV,kBAAI,SAAS;AACb,kBAAIA,OAAM;AACN,oBAAI,CAAC,OAAO,IAAI;AACZ;AACA,kBAAAA,MAAK;AAAA,oBACD,GAAG,OAAO,KAAK;AAAA,oBACf,CAAC,QAAgB,aAAqB;AAClC,4BAAM,MAAM,KAAK,MAAM,QAAQ;AAC/B,0BAAI,IAAI,WAAW;AACf,+BAAO,KAAK,KAAK,QAAQ,QAAQ,IAAI,UAAU,KAAK,OAAO,IAAI;AAAA,sBACnE;AACA;AAAA,oBACJ;AAAA,kBACJ;AACA,uBAAKA,MAAK,QAAQ,GAAG,OAAO,KAAK,iBAAiB,EAAE;AAAA,gBACxD;AAEA,sBAAM,iBAAiB,CAAC,UAAwB;AAC5C,sBAAI,QAAQ,MAAM,WAAW,GAAG;AAC5B,wBAAI,IAAI,UAAU;AACd,2BAAK,OAAO,IAAI,MAAM,IAAI,SAAS,EAAE,QAAQ,OAAO,GAAG,IAAI,QAAQ;AAAA,oBACvE;AACA,oBAAAA,MAAK,QAAQ;AACb;AAAA,kBACJ;AAEA,uBAAK,eAAe,KAAK,WAAW,gBAAgB,KAAK,EAAE,KAAK;AAAA,gBACpE;AACA,+BAAe,CAAC;AAAA,cACpB;AAAA,YACJ;AAAA,YACA;AAAA,YACA;AAAA,UACJ;AAEA;AAAA,QACJ;AAAA,QACA,KAAK,YAAY;AACb,cAAI,IAAI,UAAU;AACd,iBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,EAAE,gBAAgB,KAAK,eAAe,GAAG,IAAI,QAAQ;AAAA,UAC5F;AACA;AAAA,QACJ;AAAA,QACA,SAAS;AAEL,cAAI,IAAI,UAAU;AACd,iBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,CAAC,GAAG,IAAI,QAAQ;AAAA,UACvD;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAM,wBAAwB,IAAY,KAAyC;AAC/E,QAAI,GAAG,WAAW,KAAK,SAAS,GAAG;AAC/B;AAAA,IACJ;AACA,UAAM,KAAK,qBAAqB,IAAI,KAAK,KAAK;AAAA,EAClD;AACJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,kBAAkB,OAAO;AAC1G,OAAO;AAEH,GAAC,MAAM,IAAI,kBAAkB,GAAG;AACpC;",
  "names": ["b", "mqtt"]
}
