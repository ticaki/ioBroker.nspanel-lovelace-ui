{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0..\n */\n//FlashNextion http://nspanel.de/nspanel-v4.6.0.tft ist die 55\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport { Library } from './lib/classes/library';\nimport 'source-map-support/register';\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\nimport * as MQTT from './lib/classes/mqtt';\nimport { testCaseConfig } from './lib/config';\nimport { Controller } from './lib/controller/controller';\nimport { Icons } from './lib/const/icon_mapping';\nimport * as definition from './lib/const/definition';\nimport { ConfigManager } from './lib/classes/config-manager';\nimport type { panelConfigPartial } from './lib/controller/panel';\nimport { generateAliasDocumentation } from './lib/tools/readme';\nimport axios from 'axios';\nimport { URL } from 'url';\nimport type { HttpServer } from './lib/classes/http-server';\nimport type * as pages from './lib/types/pages';\nimport * as fs from 'fs';\nimport type { NavigationItemConfig } from './lib/classes/navigation';\nimport path from 'path';\n//import fs from 'fs';\naxios.defaults.timeout = 3000;\n\nclass NspanelLovelaceUi extends utils.Adapter {\n    library: Library;\n    mqttClient: MQTT.MQTTClientClass | undefined;\n    mqttServer: MQTT.MQTTServerClass | undefined;\n    controller: Controller | undefined;\n    unload: boolean = false;\n    testSuccessful: boolean = true;\n    httpServer: HttpServer[] = [];\n    timeoutAdmin: ioBroker.Timeout | undefined;\n    timeoutAdmin2: ioBroker.Timeout | undefined;\n    timeoutAdminArray: (ioBroker.Timeout | undefined)[] = [];\n\n    intervalAdminArray: (ioBroker.Interval | undefined)[] = [];\n\n    mainConfiguration: panelConfigPartial[] | undefined;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'nspanel-lovelace-ui',\n            useFormatDate: true,\n        });\n        this.library = new Library(this);\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n        // init some propertys so we dont need undefined checks\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        await this.extendForeignObjectAsync(this.namespace, {\n            type: 'meta',\n            common: { name: { en: 'Nspanel Instance', de: 'Nspanel Instanze' }, type: 'meta.folder' },\n            native: {},\n        });\n        this.library = new Library(this);\n\n        if (this.config.mqttServer && this.config.mqttPort && this.config.mqttUsername) {\n            this.config.mqttPassword = this.config.mqttPassword || '';\n\n            const port = await this.getPortAsync(this.config.mqttPort);\n            if (port != this.config.mqttPort) {\n                this.log.error(`Port ${this.config.mqttPort} is already in use!`);\n                this.log.error(`Please change the port in the admin settings to ${port}!`);\n                this.log.error('Stopping adapter!');\n                if (this.stop) {\n                    await this.stop();\n                }\n                return;\n            }\n            this.mqttServer = await MQTT.MQTTServerClass.createMQTTServer(\n                this,\n                this.config.mqttPort,\n                this.config.mqttUsername,\n                this.config.mqttPassword,\n                './mqtt',\n            );\n            this.config.mqttIp = '127.0.0.1';\n        }\n\n        if (this.config.fixBrokenCommonTypes) {\n            //fix broken common.type in alias.0 from iobroker.device\n            const states = await this.getForeignObjectsAsync('alias.0.*');\n            this.log.info('Fix broken common.type in alias.0');\n            if (states) {\n                for (const id in states) {\n                    if (\n                        states[id] &&\n                        states[id].type === 'state' &&\n                        states[id].common &&\n                        //@ts-expect-error\n                        states[id].common.type === 'state'\n                    ) {\n                        this.log.warn(`Fix broken common.type in ${id} set to 'mixed'`);\n                        states[id].common.type = 'mixed';\n                        await this.extendForeignObjectAsync(id, states[id]);\n                    }\n                }\n            }\n            const o = await this.getForeignObjectAsync(`system.adapter.${this.namespace}`);\n            if (o && o.native) {\n                o.native.fixBrokenCommonTypes = false;\n                await this.extendForeignObjectAsync(`system.adapter.${this.namespace}`, o);\n                return;\n            }\n        }\n\n        await generateAliasDocumentation();\n        if (this.config.testCase) {\n            this.log.warn('Testcase mode!');\n        }\n\n        /*if (!this.config.Testconfig2) {\n            if (this.config.onlyStartFromSystemConfig) {\n                this.log.warn('No configuration stopped!');\n                return;\n            }\n            this.log.warn('No configuration use dev test config!');\n            let testconfig = Testconfig;\n            try {\n                const path = './lib/config-custom.js';\n                testconfig = (await import(path)).Testconfig;\n            } catch {\n                // nothing\n            }\n            this.config.Testconfig2 = testconfig;\n        }\n        if (\n            !this.config.Testconfig2 ||\n            !Array.isArray(this.config.Testconfig2) ||\n            !this.config.Testconfig2[0] ||\n            !this.config.Testconfig2[0].pages\n        ) {\n            this.log.warn('Adapter on hold, user restart needed!');\n            return;\n        }*/\n        //try {\n        this.config.Testconfig2 = [];\n        const obj = await this.getForeignObjectAsync(this.namespace);\n        if (obj && obj.native) {\n            const config = [];\n            if (obj.native.scriptConfigRaw) {\n                const manager = new ConfigManager(this, true);\n                manager.log.warn = function (_msg: string) {\n                    //nothing\n                };\n                for (const a of this.config.panels) {\n                    if (a && a.topic) {\n                        const page = (obj.native.scriptConfigRaw as any[]).find(\n                            (b: { panelTopic: string }) => b.panelTopic === a.topic,\n                        );\n                        if (page) {\n                            const c = await manager.setScriptConfig(page);\n                            if (c && c.messages && c.messages.length > 0) {\n                                if (!c.messages[0].startsWith('Panel')) {\n                                    this.log.warn(c.messages[0]);\n                                }\n                            }\n                            if (c && c.panelConfig) {\n                                this.log.info(`Raw script config found for ${a.topic}`);\n                                config.push(c.panelConfig);\n                                continue;\n                            }\n                        }\n                        {\n                            const c = (obj.native.scriptConfig as any[]).find(\n                                (b: { topic: string }) => b.topic === a.topic,\n                            );\n                            if (c) {\n                                this.log.info(`Converted script config found for ${a.topic}`);\n                                config.push(c);\n                                continue;\n                            }\n                        }\n                    }\n                    this.log.warn(`No script config found for ${a.topic}`);\n                    await manager.delete();\n                }\n            }\n\n            const scriptConfig: Partial<panelConfigPartial>[] = config;\n            if (scriptConfig.length === 0) {\n                if (!this.config.testCase) {\n                    this.log.error('No compatible config found, paused!');\n                    return;\n                }\n            }\n            if (scriptConfig) {\n                // merge all pages into every pages array\n                for (let b = 0; b < scriptConfig.length; b++) {\n                    for (let c = b <= 0 ? 1 : b - 1; c < scriptConfig.length; c++) {\n                        if (c === b || !scriptConfig[c] || !scriptConfig[b].pages || !scriptConfig[c].pages) {\n                            continue;\n                        }\n                        let pages = structuredClone(scriptConfig[c].pages);\n                        if (pages) {\n                            pages = pages.filter(a => {\n                                if (\n                                    a.config?.card === 'screensaver' ||\n                                    a.config?.card === 'screensaver2' ||\n                                    a.config?.card === 'screensaver3'\n                                ) {\n                                    return false;\n                                }\n                                if (scriptConfig[b].pages!.find(b => b.uniqueID === a.uniqueID)) {\n                                    return false;\n                                }\n                                return true;\n                            });\n\n                            scriptConfig[b].pages = scriptConfig[b].pages!.concat(pages);\n                        }\n                    }\n                }\n                for (let b = 0; b < scriptConfig.length; b++) {\n                    const s = scriptConfig[b];\n                    if (!s || !s.pages) {\n                        continue;\n                    }\n\n                    this.config.Testconfig2[b] = {};\n\n                    if (!this.config.Testconfig2[b].pages) {\n                        this.config.Testconfig2[b].pages = [];\n                    }\n                    if (!this.config.Testconfig2[b].navigation) {\n                        this.config.Testconfig2[b].navigation = [];\n                    }\n                    this.config.Testconfig2[b].pages = (this.config.Testconfig2[b] as panelConfigPartial).pages.filter(\n                        a => {\n                            if (s.pages!.find(b => b.uniqueID === a.uniqueID)) {\n                                return false;\n                            }\n                            return true;\n                        },\n                    );\n                    this.config.Testconfig2[b].navigation = (\n                        this.config.Testconfig2[b] as panelConfigPartial\n                    ).navigation.filter(a => {\n                        if (s.navigation && s.navigation.find(b => a == null || b == null || b.name === a.name)) {\n                            return false;\n                        }\n                        return true;\n                    });\n                    s.navigation = (this.config.Testconfig2[b].navigation || []).concat(s.navigation || []);\n                    s.pages = (this.config.Testconfig2[b].pages || []).concat(s.pages || []);\n                    this.config.Testconfig2[b] = {\n                        ...((this.config.Testconfig2[b] as panelConfigPartial) || {}),\n                        ...s,\n                    };\n                }\n                //this.config.Testconfig2[0].timeout = this.config.timeout;\n            }\n        }\n\n        /*} catch (e: any) {\n            this.log.warn(`Invalid configuration stopped! ${e}`);\n            return;\n        }*/\n\n        if (\n            this.config.doubleClickTime === undefined ||\n            typeof this.config.doubleClickTime !== 'number' ||\n            !(this.config.doubleClickTime > 0)\n        ) {\n            this.config.doubleClickTime = 350;\n        }\n        /*await this.extendForeignObjectAsync('hmip.0.devices.3014F711A000185F2999676C.channels.1.windSpeed', {\n            type: 'state',\n            common: {\n                name: 'windSpeed',\n                type: 'number',\n                role: 'value.speed',\n                read: true,\n                write: false,\n            },\n            native: {},\n            _id: 'hmip.0.devices.3014F711A000185F2999676C.channels.1.windSpeed',\n            acl: {\n                object: 1636,\n                state: 1636,\n                owner: 'system.user.admin',\n                ownerGroup: 'system.group.administrator',\n            },\n            from: 'system.adapter.hmip.0',\n            user: 'system.user.admin',\n            ts: 1743869733951,\n        });*/\n\n        //check config\n        try {\n            Icons.adapter = this;\n            await this.library.init();\n            const states = await this.getStatesAsync('*');\n            await this.library.initStates(states);\n            await this.onMqttConnect();\n            await this.delay(2000);\n\n            // set all .info.nspanel.isOnline to false\n            for (const id in states) {\n                if (id.endsWith('.info.isOnline')) {\n                    await this.library.writedp(id, false, definition.genericStateObjects.panel.panels.info.isOnline);\n                }\n            }\n            this.log.debug('Check configuration!');\n\n            if (!this.config.pw1 || typeof this.config.pw1 !== 'string') {\n                this.log.warn('No pin entered for the service page! Please set a pin in the admin settings!');\n            }\n\n            if (!(this.config.mqttIp && this.config.mqttPort && this.config.mqttUsername && this.config.mqttPassword)) {\n                this.log.error('Invalid admin configuration for mqtt!');\n                this.testSuccessful = false;\n                return;\n            }\n            /*const test = await this.getObjectViewAsync('system', 'instance', {\n                startkey: `system.adapter`,\n                endkey: `system.adapter}`,\n            });\n            this.log.debug(JSON.stringify(test));*/\n            this.mqttClient = new MQTT.MQTTClientClass(\n                this,\n                this.config.mqttIp,\n                this.config.mqttPort,\n                this.config.mqttUsername,\n                this.config.mqttPassword,\n                this.config.mqttServer,\n                async (topic, message) => {\n                    this.log.debug(`${topic} ${message}`);\n                },\n            );\n            if (!this.mqttClient) {\n                return;\n            }\n            await this.mqttClient.waitConnectAsync(5000);\n\n            if (this.config.testCase) {\n                await this.extendForeignObjectAsync('0_userdata.0.boolean', {\n                    type: 'state',\n                    common: { name: 'boolean', type: 'boolean' },\n                    native: {},\n                });\n                await this.extendForeignObjectAsync('0_userdata.0.number', {\n                    type: 'state',\n                    common: { name: 'number', type: 'number' },\n                    native: {},\n                });\n                await this.extendForeignObjectAsync('0_userdata.0.string', {\n                    type: 'state',\n                    common: { name: 'string', type: 'string' },\n                    native: {},\n                });\n                this.config.Testconfig2 = testCaseConfig;\n                const test = new MQTT.MQTTClientClass(\n                    this,\n                    this.config.mqttIp,\n                    this.config.mqttPort,\n                    this.config.mqttUsername,\n                    this.config.mqttPassword,\n                    this.config.mqttServer,\n                    async (topic, message) => {\n                        this.log.debug(`${topic} ${message}`);\n                    },\n                );\n                await test.waitConnectAsync(5000);\n\n                await test.subscript('test/123456/cmnd/#', async (topic, message) => {\n                    this.log.debug(`Testcase ${topic}`);\n                    if (message === 'pageType~pageStartup') {\n                        await test.publish('test/123456/stat/RESULT', '{\"CustomSend\": \"Done\"}');\n                        await test.publish('test/123456/tele/RESULT', '{\"CustomRecv\":\"event,startup,54,eu\"}');\n                    } else if (topic === 'test/123456/cmnd/STATUS0') {\n                        await test.publish(\n                            'test/123456/stat/STATUS0',\n                            '{\"Status\":{\"Module\":0,\"DeviceName\":\"NSPanel 4 Test\",\"FriendlyName\":[\"Tasmota\",\"\"],\"Topic\":\"ns_panel4\",\"ButtonTopic\":\"0\",\"Power\":\"00\",\"PowerLock\":\"00\",' +\n                                '\"PowerOnState\":3,\"LedState\":1,\"LedMask\":\"FFFF\",\"SaveData\":1,\"SaveState\":1,\"SwitchTopic\":\"0\",\"SwitchMode\":' +\n                                '[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"ButtonRetain\":0,\"SwitchRetain\":0,\"SensorRetain\":0,\"PowerRetain\":0,\"InfoRetain\":0,' +\n                                '\"StateRetain\":0,\"StatusRetain\":0},\"StatusPRM\":{\"Baudrate\":115200,\"SerialConfig\":\"8N1\",\"GroupTopic\":\"tasmotas\",' +\n                                '\"OtaUrl\":\"http://ota.tasmota.com/tasmota32/release/tasmota32-nspanel.bin\",\"RestartReason\":\"Vbat power on reset\",\"Uptime\":\"0T00:07:28\",\"StartupUTC\":' +\n                                '\"2025-02-19T09:23:29\",\"Sleep\":50,\"CfgHolder\":4617,\"BootCount\":59,\"BCResetTime\":\"2024-01-06T17:11:30\",\"SaveCount\":110},\"StatusFWR\":{\"Version\":\"14.4.1(release-nspanel)\",' +\n                                '\"BuildDateTime\":\"2024-12-15T13:33:11\",\"Core\":\"3_1_0\",\"SDK\":\"5.3.2\",\"CpuFrequency\":160,\"Hardware\":\"ESP32-D0WD-V3 v3.1\",\"CR\":\"502/699\"},\"StatusLOG\":{\"SerialLog\":2,' +\n                                '\"WebLog\":1,\"MqttLog\":3,\"SysLog\":0,\"LogHost\":\"\",\"LogPort\":514,\"SSId\":[\"xxx\",\"\"],\"TelePeriod\":300,\"Resolution\":\"558180C0\",\"SetOption\":' +\n                                '[\"00008009\",\"2805C80001000600003C5A0A192800000000\",\"00000080\",\"00006000\",\"00004000\",\"00000000\"]},\"StatusMEM\":{\"ProgramSize\":2017,\"Free\":862,\"Heap\":148,\"StackLowMark\":' +\n                                '3,\"PsrMax\":2048,\"PsrFree\":2025,\"ProgramFlashSize\":4096,\"FlashSize\":4096,\"FlashChipId\":\"16405E\",\"FlashFrequency\":40,\"FlashMode\":\"DIO\",\"Features\":[\"0809\",' +\n                                '\"9F9AD7DF\",\"0015A001\",\"B7F7BFCF\",\"05DA9BC4\",\"E0360DC7\",\"480840D2\",\"20200000\",\"D4BC482D\",\"810A80F1\",\"00000014\"],\"Drivers\":\"1,2,!3,!4,!5,7,!8,9,10,11,12,!14,!16,' +\n                                '!17,!20,!21,24,26,!27,29,!34,!35,38,50,52,!59,!60,62,!63,!66,!67,!68,!73,!75,82,!86,!87,!88,!121\",\"Sensors\":\"1,2,3,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,' +\n                                '21,22,26,31,34,37,39,40,42,43,45,51,52,55,56,58,59,64,66,67,74,85,92,95,98,103,105,109,127\",\"I2CDriver\":\"7,8,9,10,11,12,13,14,15,17,18,20,24,29,31,36,41,42,44,46,48,58' +\n                                ',62,65,69,76,77,82,89\"},\"StatusNET\":{\"Hostname\":\"ns-panel4-0112\",\"IPAddress\":\"192.168.178.174\",\"Gateway\":\"192.168.178.1\",\"Subnetmask\":\"255.255.254.0\",\"DNSServer1\":' +\n                                '\"192.168.179.21\",\"DNSServer2\":\"0.0.0.0\",\"Mac\":\"A0:B7:A5:54:C0:71\",\"IP6Global\":\"\",\"IP6Local\":\"xxx\",\"Ethernet\":{\"Hostname\":\"\",\"IPAddress\":\"0.0.0.0\",\"Gateway\":\"0.0.0.0\",' +\n                                '\"Subnetmask\":\"0.0.0.0\",\"DNSServer1\":\"192.168.179.21\",\"DNSServer2\":\"0.0.0.0\",\"Mac\":\"00:00:00:00:00:00\",\"IP6Global\":\"\",\"IP6Local\":\"\"},\"Webserver\":2,\"HTTP_API\":1,' +\n                                '\"WifiConfig\":4,\"WifiPower\":16.0},\"StatusMQT\":{\"MqttHost\":\"xxx\",\"MqttPort\":1883,\"MqttClientMask\":\"ns_panel4\",\"MqttClient\":\"ns_panel4\",\"MqttUser\":\"xxx\",\"MqttCount\":1,' +\n                                '\"MAX_PACKET_SIZE\":1200,\"KEEPALIVE\":30,\"SOCKET_TIMEOUT\":4},\"StatusTIM\":{\"UTC\":\"2025-02-19T09:30:57Z\",\"Local\":\"2025-02-19T10:30:57\",\"StartDST\":\"2025-03-30T02:00:00\",' +\n                                '\"EndDST\":\"2025-10-26T03:00:00\",\"Timezone\":\"+01:00\",\"Sunrise\":\"07:50\",\"Sunset\":\"18:17\"},\"StatusSNS\":{\"Time\":\"2025-02-19T10:30:57\",\"ANALOG\":{\"Temperature1\":-3.2},\"TempUnit\"' +\n                                ':\"C\"},\"StatusSTS\":{\"Time\":\"2025-02-19T10:30:57\",\"Uptime\":\"0T00:07:28\",\"UptimeSec\":448,\"Heap\":146,\"SleepMode\":\"Dynamic\",\"Sleep\":50,\"LoadAvg\":19,\"MqttCount\":1,\"Berry\":' +\n                                '{\"HeapUsed\":16,\"Objects\":212},\"POWER1\":\"OFF\",\"POWER2\":\"OFF\",\"Wifi\":{\"AP\":1,\"SSId\":\"Keller\",\"BSSId\":\"DC:15:C8:EB:3E:B8\",\"Channel\":7,\"Mode\":\"HT40\",\"RSSI\":46,\"Signal\":-77,' +\n                                '\"LinkCount\":1,\"Downtime\":\"0T00:00:03\"}}}',\n                        );\n                    }\n                });\n            }\n            if (\n                !this.config.Testconfig2 ||\n                !Array.isArray(this.config.Testconfig2) ||\n                this.config.Testconfig2.length === 0\n            ) {\n                await this.delay(100);\n                await this.mqttClient.destroy();\n                await this.delay(100);\n                this.log.error('No configuration - adapter on hold!');\n                return;\n            }\n            this.mainConfiguration = structuredClone(this.config.Testconfig2);\n            let counter = 0;\n            for (const a of this.mainConfiguration) {\n                try {\n                    if (a && a.pages) {\n                        const names: string[] = [];\n                        for (const p of a.pages) {\n                            counter++;\n                            if (!('uniqueID' in p)) {\n                                continue;\n                            }\n                            if (\n                                p.config?.card === 'screensaver' ||\n                                p.config?.card === 'screensaver2' ||\n                                p.config?.card === 'screensaver3'\n                            ) {\n                                p.uniqueID = `#${p.uniqueID}`;\n                            }\n                            if (names.indexOf(p.uniqueID) !== -1) {\n                                throw new Error(\n                                    `PanelTopic: ${a.topic} uniqueID ${p.uniqueID} is double! Ignore this panel!`,\n                                );\n                            }\n                            names.push(p.uniqueID);\n                        }\n                    }\n                } catch (e: any) {\n                    const index = this.mainConfiguration.findIndex(b => b === a);\n                    this.mainConfiguration.splice(index, 1);\n                    this.log.error(`Error: ${e}`);\n                }\n            }\n            if (counter === 0) {\n                return;\n            }\n            const mem = process.memoryUsage().heapUsed / 1024;\n            this.log.debug(String(`${mem}k`));\n            this.controller = new Controller(this, {\n                mqttClient: this.mqttClient,\n                name: 'controller',\n                panels: structuredClone(this.mainConfiguration),\n            });\n            await this.controller.init();\n            /*setInterval(() => {\n                    this.log.debug(\n                        `${Math.trunc(mem)}k/${String(Math.trunc(process.memoryUsage().heapUsed / 1024))}k Start/Jetzt: `,\n                    );\n                }, 60000);*/\n        } catch (e: any) {\n            this.testSuccessful = false;\n            this.log.error(`Error onReady: ${e}`);\n        }\n    }\n\n    private onMqttConnect = async (): Promise<void> => {\n        const _helper = async (tasmota: any): Promise<void> => {\n            try {\n                const state = this.library.readdb(`panels.${tasmota.id}.info.nspanel.firmwareUpdate`);\n                if (state && typeof state.val === 'number' && state.val >= 100) {\n                    this.log.info(`Force an MQTT reconnect from the Nspanel with the ip ${tasmota.ip} in 10 seconds!`);\n                    await axios.get(\n                        `http://${tasmota.ip}/cm?` +\n                            `${this.config.useTasmotaAdmin ? `user=admin&password=${this.config.tasmotaAdminPassword}` : ``}` +\n                            `&cmnd=Backlog Restart 1`,\n                    );\n                } else {\n                    this.log.info(`Update detected on the Nspanel with the ip ${tasmota.ip}!!`);\n                }\n            } catch (e: any) {\n                this.log.warn(\n                    `Error: This usually means that the NSpanel with ip ${tasmota.ip} is not online or has not been set up properly in the configuration! ${e}`,\n                );\n            }\n        };\n        for (const tasmota of this.config.panels) {\n            if (tasmota && tasmota.ip) {\n                void _helper(tasmota);\n            }\n        }\n        await this.setState('info.connection', true, true);\n    };\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances.\n     *\n     * @param callback Callback so the adapter can finish what it has to do.\n     */\n    private async onUnload(callback: () => void): Promise<void> {\n        try {\n            this.unload = true;\n            if (this.timeoutAdmin) {\n                this.clearTimeout(this.timeoutAdmin);\n            }\n            if (this.timeoutAdmin2) {\n                this.clearTimeout(this.timeoutAdmin2);\n            }\n            this.timeoutAdminArray.forEach(a => {\n                if (a) {\n                    this.clearTimeout(a);\n                }\n            });\n            this.intervalAdminArray.forEach(a => {\n                if (a) {\n                    this.clearInterval(a);\n                }\n            });\n            if (this.controller) {\n                await this.controller.delete();\n            }\n            for (const server of this.httpServer) {\n                if (!server.unload) {\n                    await server.delete();\n                }\n            }\n            if (this.mqttClient) {\n                await this.mqttClient.destroy();\n            }\n            if (this.mqttServer) {\n                this.mqttServer.destroy();\n            }\n            callback();\n        } catch {\n            callback();\n        }\n    }\n    //test\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     *\n     * @param id   The id of the state that changed\n     * @param state The state object holding the new value and meta information of the state\n     */\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (state) {\n            if (this.controller) {\n                await this.controller.statesControler.onStateChange(id, state);\n            }\n        } else {\n            // The state was deleted\n            // this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Somee message was sent to this instance over message box. Used by email, pushover, text2speech,\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    private async onMessage(obj: ioBroker.Message): Promise<void> {\n        if (typeof obj === 'object' && obj.message) {\n            this.log.debug(JSON.stringify(obj));\n            if (obj.command === 'tftInstallSendToMQTT') {\n                if (obj.message.online === 'no') {\n                    obj.command = 'tftInstallSendTo';\n                }\n            }\n            const scriptPath = `script.js.${this.library.cleandp(this.namespace, false, true)}`;\n            switch (obj.command) {\n                case 'config': {\n                    const obj1 = await this.getForeignObjectAsync(`system.adapter.${this.namespace}`);\n                    if (\n                        obj1 &&\n                        obj1.native &&\n                        JSON.stringify(obj1.native.Testconfig2) !== JSON.stringify(obj.message)\n                    ) {\n                        obj1.native.Testconfig2 = obj.message;\n                        await this.setForeignObjectAsync(`system.adapter.${this.namespace}`, obj1);\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, [], obj.callback);\n                    }\n                    break;\n                }\n                case 'updateCustom': {\n                    if (obj.message && obj.message.state) {\n                        const state = await this.getForeignObjectAsync(obj.message.state);\n                        if (state && state.common && state.common.custom && state.common.custom[this.namespace]) {\n                            this.log.debug(`updateCustom ${JSON.stringify(state.common.custom[this.namespace])}`);\n                        }\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, [], obj.callback);\n                    }\n                    break;\n                }\n                case 'ScriptConfig': {\n                    let result = ['something went wrong'];\n                    if (obj.message) {\n                        const manager = new ConfigManager(this);\n                        let r: {\n                            messages: string[];\n                            panelConfig:\n                                | (Omit<Partial<panelConfigPartial>, 'pages' | 'navigation'> & {\n                                      navigation: NavigationItemConfig[];\n                                      pages: pages.PageBaseConfig[];\n                                  })\n                                | undefined;\n                        } = { messages: [], panelConfig: undefined };\n                        if (obj.message.panelTopic && Array.isArray(obj.message.panelTopic)) {\n                            const topics = JSON.parse(JSON.stringify(obj.message.panelTopic));\n                            for (const a of topics) {\n                                r = await manager.setScriptConfig({ ...obj.message, panelTopic: a });\n                            }\n                        } else {\n                            r = await manager.setScriptConfig(obj.message);\n                        }\n                        await manager.delete();\n                        result = r.messages;\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, result, obj.callback);\n                    }\n                    break;\n                }\n\n                /*case 'RefreshDevices': {\n                    if (this.timeoutAdmin) {\n                        if (obj.callback) {\n                            this.sendTo(obj.from, obj.command, { error: 'sendToAdminRunning' }, obj.callback);\n                            break;\n                        }\n                    }\n                    const device = { id: '', name: obj.message.name, topic: obj.message.topic, ip: '' };\n\n                    const mqtt = new MQTT.MQTTClientClass(\n                        this,\n                        this.config.mqttIp,\n                        this.config.mqttPort,\n                        this.config.mqttUsername,\n                        this.config.mqttPassword,\n                        this.config.mqttServer,\n                        (topic, message) => {\n                            this.log.debug(`${topic} ${message}`);\n                        },\n                    );\n                    await this.delay(100);\n                    const checkTasmota = async (\n                        mqtt: MQTT.MQTTClientClass,\n                        topic: string,\n                    ): Promise<{ status: boolean; id: string; ip: string }> => {\n                        return new Promise(resolve => {\n                            this.timeoutAdmin = this.setTimeout(() => {\n                                this.timeoutAdmin = null;\n                                resolve({ status: false, id: '', ip: '' });\n                            }, 5000);\n                            void mqtt\n                                .subscript(`${topic}/stat/STATUS0`, (_topic: string, _message: string) => {\n                                    const msg = JSON.parse(_message) as STATUS0;\n                                    if (msg.StatusNET) {\n                                        resolve({\n                                            status: true,\n                                            ip: msg.StatusNET.IPAddress,\n                                            id: this.library.cleandp(msg.StatusNET.Mac, false, true),\n                                        });\n                                    }\n                                })\n                                .then(() => {\n                                    void mqtt.publish(`${topic}/cmnd/STATUS0`, '');\n                                });\n                        });\n                    };\n\n                    const result = await checkTasmota(mqtt, device.topic);\n                    if (this.timeoutAdmin) {\n                        this.clearTimeout(this.timeoutAdmin);\n                        this.timeoutAdmin = null;\n                    }\n\n                    await mqtt.destroy();\n                    if (result.status) {\n                        device.id = result.id;\n                        device.ip = result.ip;\n                        const index = this.config.panels.findIndex(a => a.topic === device.topic);\n                        //if (index !== -1) {\n                        this.config.panels[index] = device;\n                        if (obj.callback) {\n                            this.sendTo(obj.from, obj.command, { native: device }, obj.callback);\n                            this.sendTo(obj.from, obj.command, { result: 'ok' }, obj.callback);\n                            break;\n                        }\n                        //}\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, { error: 'sendToRefreshFail' }, obj.callback);\n                    }\n\n                    break;\n                }*/\n                case 'testCase': {\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, { testSuccessful: this.testSuccessful }, obj.callback);\n                    }\n                    break;\n                }\n                case 'getTasmotaDevices': {\n                    if (this.config.panels) {\n                        const devices = this.config.panels.map(a => {\n                            return { label: `${a.ip} (${a.name})`, value: a.ip };\n                        });\n                        if (obj.callback) {\n                            this.sendTo(obj.from, obj.command, devices, obj.callback);\n                        }\n                        break;\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, { error: 'sendToAnyError' }, obj.callback);\n                    }\n                    break;\n                }\n                case 'nsPanelInit': {\n                    if (obj.message) {\n                        try {\n                            if (\n                                obj.message.tasmotaIP &&\n                                (obj.message.mqttIp || obj.message.internalServerIp) &&\n                                obj.message.mqttServer != null &&\n                                obj.message.mqttPort &&\n                                obj.message.mqttUsername &&\n                                obj.message.mqttPassword &&\n                                obj.message.tasmotaTopic\n                            ) {\n                                if (obj.message.mqttServer == 'false' || !obj.message.mqttServer) {\n                                    obj.message.mqttServer = false;\n                                } else {\n                                    obj.message.mqttServer = true;\n                                }\n                                this.log.info(\n                                    `Sending mqtt config & base config to tasmota: ${obj.message.tasmotaIP} with user ${obj.message.mqttUsername} && ${obj.message.mqttPassword}`,\n                                );\n                                let u = new URL(\n                                    `http://${obj.message.tasmotaIP}/cm?` +\n                                        `${this.config.useTasmotaAdmin ? `user=admin&password=${this.config.tasmotaAdminPassword}` : ``}` +\n                                        `&cmnd=status 5`,\n                                );\n                                let r = await axios.get(u.href);\n                                if (!r || !r.data || !r.data.StatusNET || !r.data.StatusNET.Mac) {\n                                    this.log.warn(`Device with topic ${obj.message.tasmotaTopic} not found!`);\n                                    if (obj.callback) {\n                                        this.sendTo(\n                                            obj.from,\n                                            obj.command,\n                                            { error: 'sendToDeviceNotFound' },\n                                            obj.callback,\n                                        );\n                                    }\n                                    break;\n                                }\n                                let mac = r.data.StatusNET.Mac;\n                                const topic = obj.message.tasmotaTopic;\n                                const appendix = r.data.StatusNET.Mac.replace(/:/g, '').slice(-6);\n                                const mqttClientId = `${this.library.cleandp(obj.message.tasmotaName)}-${appendix}`;\n                                const url: string =\n                                    ` MqttHost ${obj.message.mqttServer ? obj.message.internalServerIp : obj.message.mqttIp};` +\n                                    ` MqttPort ${obj.message.mqttPort}; MqttUser ${obj.message.mqttUsername}; MqttPassword ${obj.message.mqttPassword};` +\n                                    ` FullTopic ${`${topic}/%prefix%/`.replaceAll('//', '/')};` +\n                                    ` MqttRetry 10; FriendlyName1 ${obj.message.tasmotaName}; Hostname ${obj.message.tasmotaName.replaceAll(/[^a-zA-Z0-9_-]/g, '_')};` +\n                                    ` WebLog 2; template {\"NAME\":\"${obj.message.tasmotaName}\", \"GPIO\":[0,0,0,0,3872,0,0,0,0,0,32,0,0,0,0,225,0,480,224,1,0,0,0,33,0,0,0,0,0,0,0,0,0,0,4736,0],\"FLAG\":0,\"BASE\":1};` +\n                                    ` Module 0; MqttClient ${mqttClientId};${this.config.timezone ? definition.getTasmotaTimeZone(this.config.timezone) : ''}` +\n                                    ` ${obj.message.mqttServer ? 'SetOption132 1; SetOption103 1 ' : 'SetOption132 0; SetOption103 0'}; Restart 1`;\n                                u = new URL(\n                                    `http://${obj.message.tasmotaIP}/cm?` +\n                                        `${this.config.useTasmotaAdmin ? `user=admin&password=${this.config.tasmotaAdminPassword}` : ``}` +\n                                        `&cmnd=Backlog${encodeURIComponent(url)}`,\n                                );\n                                this.log.info(\n                                    `Sending mqtt config & base config to tasmota with IP ${obj.message.tasmotaIP} and name ${obj.message.tasmotaName}.`,\n                                );\n\n                                await axios.get(u.href);\n                                this.mqttClient && (await this.mqttClient.waitPanelConnectAsync(topic, 60000));\n\n                                u = new URL(\n                                    `http://${obj.message.tasmotaIP}/cm?` +\n                                        `${this.config.useTasmotaAdmin ? `user=admin&password=${this.config.tasmotaAdminPassword}` : ``}` +\n                                        `&cmnd=status 0`,\n                                );\n                                r = await axios.get(u.href);\n                                if (!r || !r.data || !r.data.StatusNET || !r.data.StatusNET.Mac) {\n                                    this.log.warn(`Device with topic ${obj.message.tasmotaTopic} not found!`);\n                                    if (obj.callback) {\n                                        this.sendTo(\n                                            obj.from,\n                                            obj.command,\n                                            { error: 'sendToDeviceNotFound2' },\n                                            obj.callback,\n                                        );\n                                    }\n                                    break;\n                                }\n                                const config = this.config;\n                                const panels = config.panels ?? [];\n                                const index = panels.findIndex(a => a.topic === obj.message.tasmotaTopic);\n                                const item: (typeof this.config.panels)[number] =\n                                    index === -1 ? { name: '', ip: '', topic: '', id: '' } : panels[index];\n                                const ipIndex = panels.findIndex(a => a.ip === obj.message.tasmotaIP);\n                                let update = false;\n                                if (ipIndex !== -1 && index !== -1 && ipIndex !== index) {\n                                    this.log.error('Topic and ip are already in use on different panels!');\n                                    if (obj.callback) {\n                                        this.sendTo(obj.from, obj.command, { error: 'sendToNameExist' }, obj.callback);\n                                    }\n                                    break;\n                                } else {\n                                    update = index !== -1;\n                                }\n                                mac = r.data.StatusNET.Mac;\n                                item.name = obj.message.tasmotaName;\n                                item.topic = topic;\n                                item.id = this.library.cleandp(mac);\n                                item.ip = r.data.StatusNET.IPAddress;\n\n                                if (index === -1) {\n                                    panels.push(item);\n                                }\n                                try {\n                                    const url =\n                                        `http://${obj.message.tasmotaIP}/cm?` +\n                                        `${this.config.useTasmotaAdmin ? `user=admin&password=${this.config.tasmotaAdminPassword}` : ``}` +\n                                        `&cmnd=Backlog UrlFetch https://raw.githubusercontent.com/joBr99/nspanel-lovelace-ui/main/tasmota/autoexec.be; Restart 1`;\n                                    this.log.info(\n                                        `Installing berry on tasmota with IP ${obj.message.tasmotaIP} and name ${obj.message.tasmotaName}.`,\n                                    );\n                                    await axios.get(url);\n                                    this.mqttClient && (await this.mqttClient.waitPanelConnectAsync(topic, 20000));\n                                    await this.delay(7000);\n                                } catch (e: any) {\n                                    this.log.error(`Error: while installing berry - ${e}`);\n                                }\n                                try {\n                                    const result = await axios.get(\n                                        'https://raw.githubusercontent.com/ticaki/ioBroker.nspanel-lovelace-ui/main/json/version.json',\n                                    );\n                                    if (!result.data) {\n                                        this.log.error('No version found!');\n                                        if (obj.callback) {\n                                            this.sendTo(\n                                                obj.from,\n                                                obj.command,\n                                                { error: 'sendToRequestFail' },\n                                                obj.callback,\n                                            );\n                                        }\n                                        break;\n                                    }\n\n                                    const version = obj.message.useBetaTFT\n                                        ? result.data['tft-beta'].split('_')[0]\n                                        : result.data.tft.split('_')[0];\n                                    const fileName = `nspanel-v${version}.tft`;\n                                    if (this.mqttClient) {\n                                        await this.mqttClient.publish(\n                                            `${topic}/cmnd/Backlog`,\n                                            `FlashNextion http://nspanel.de/${fileName}`,\n                                        );\n                                    }\n                                    this.log.info(\n                                        `Installing tft on tasmota with IP ${obj.message.tasmotaIP} and name ${obj.message.tasmotaName}.`,\n                                    );\n                                } catch (e: any) {\n                                    this.log.error(`Error: ${e}`);\n                                    if (obj.callback) {\n                                        this.sendTo(\n                                            obj.from,\n                                            obj.command,\n                                            { error: 'sendToRequestFail' },\n                                            obj.callback,\n                                        );\n                                    }\n                                }\n\n                                if (obj.callback) {\n                                    this.sendTo(\n                                        obj.from,\n                                        obj.command,\n                                        {\n                                            result: update\n                                                ? 'sendToNSPanelUpdateDataSuccess'\n                                                : 'sendToNSPanelInitDataSuccess',\n                                            native: { panels: panels },\n                                            saveConfig: true,\n                                        },\n                                        obj.callback,\n                                    );\n                                }\n                            }\n                        } catch (e: any) {\n                            this.log.error(`Error: while sending mqtt config & base config to tasmota - ${e}`);\n                            if (obj.callback) {\n                                this.sendTo(obj.from, obj.command, { error: 'sendToRequestFail' }, obj.callback);\n                            }\n                        }\n                        break;\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, { error: 'sendToAnyError' }, obj.callback);\n                    }\n                    break;\n                    //Backlog UrlFetch https://raw.githubusercontent.com/joBr99/nspanel-lovelace-ui/main/tasmota/autoexec.be; Restart 1\n                    //Backlog UpdateDriverVersion https://raw.githubusercontent.com/joBr99/nspanel-lovelace-ui/main/tasmota/autoexec.be; Restart 1\n                }\n\n                case 'berryInstallSendTo': {\n                    if (obj.message) {\n                        if (obj.message.tasmotaIP) {\n                            try {\n                                const url =\n                                    `http://${obj.message.tasmotaIP}/cm?` +\n                                    `${this.config.useTasmotaAdmin ? `user=admin&password=${this.config.tasmotaAdminPassword}` : ``}` +\n                                    `&cmnd=Backlog UrlFetch https://raw.githubusercontent.com/joBr99/nspanel-lovelace-ui/main/tasmota/autoexec.be; Restart 1`;\n                                this.log.info(`Installing berry on tasmota with IP ${obj.message.tasmotaIP}`);\n                                await axios.get(url);\n                                if (obj.callback) {\n                                    this.sendTo(obj.from, obj.command, [], obj.callback);\n                                }\n                            } catch (e: any) {\n                                this.log.error(`Error: while installing berry - ${e}`);\n                                if (obj.callback) {\n                                    this.sendTo(obj.from, obj.command, { error: 'sendToRequestFail' }, obj.callback);\n                                }\n                            }\n                            break;\n                        }\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, { error: 'sendToAnyError' }, obj.callback);\n                    }\n                    break;\n                }\n                case 'tftInstallSendTo': {\n                    if (obj.message) {\n                        if (obj.message.tasmotaIP /*&& obj.message.internalServerIp*/) {\n                            try {\n                                const result = await axios.get(\n                                    'https://raw.githubusercontent.com/ticaki/ioBroker.nspanel-lovelace-ui/main/json/version.json',\n                                );\n                                if (!result.data) {\n                                    this.log.error('No version found!');\n                                    if (obj.callback) {\n                                        this.sendTo(\n                                            obj.from,\n                                            obj.command,\n                                            { error: 'sendToRequestFail' },\n                                            obj.callback,\n                                        );\n                                    }\n                                    break;\n                                }\n\n                                const version = obj.message.useBetaTFT\n                                    ? result.data['tft-beta'].split('_')[0]\n                                    : result.data.tft.split('_')[0];\n                                const fileName = `nspanel-v${version}.tft`;\n\n                                const url =\n                                    `http://${obj.message.tasmotaIP}/cm?` +\n                                    `${this.config.useTasmotaAdmin ? `user=admin&password=${this.config.tasmotaAdminPassword}` : ``}` +\n                                    `&cmnd=Backlog FlashNextion http://nspanel.de/${fileName}`;\n                                this.log.debug(url);\n                                await axios.get(url);\n\n                                if (obj.callback) {\n                                    this.sendTo(obj.from, obj.command, [], obj.callback);\n                                }\n                            } catch (e: any) {\n                                this.log.error(`Error: ${e}`);\n                                if (obj.callback) {\n                                    this.sendTo(obj.from, obj.command, { error: 'sendToRequestFail' }, obj.callback);\n                                }\n                            }\n                            break;\n                        }\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, { error: 'sendToAnyError' }, obj.callback);\n                    }\n                    break;\n                }\n                case 'tftInstallSendToMQTT': {\n                    if (obj.message) {\n                        if (obj.message.topic /*&& obj.message.internalServerIp*/) {\n                            try {\n                                const result = await axios.get(\n                                    'https://raw.githubusercontent.com/ticaki/ioBroker.nspanel-lovelace-ui/main/json/version.json',\n                                );\n                                if (!result.data) {\n                                    this.log.error('No version found!');\n                                    if (obj.callback) {\n                                        this.sendTo(\n                                            obj.from,\n                                            obj.command,\n                                            { error: 'sendToRequestFail' },\n                                            obj.callback,\n                                        );\n                                    }\n                                    break;\n                                }\n\n                                const version = obj.message.useBetaTFT\n                                    ? result.data['tft-beta'].split('_')[0]\n                                    : result.data.tft.split('_')[0];\n                                const fileName = `nspanel-v${version}.tft`;\n\n                                const cmnd = `FlashNextion http://nspanel.de/${fileName}`;\n                                this.log.debug(cmnd);\n                                if (this.controller?.panels) {\n                                    const index = this.controller.panels.findIndex(a => a.topic === obj.message.topic);\n                                    if (index !== -1) {\n                                        const panel = this.controller.panels[index];\n                                        panel.sendToTasmota(`${panel.topic}/cmnd/Backlog`, cmnd);\n                                    }\n                                }\n\n                                if (obj.callback) {\n                                    this.sendTo(obj.from, obj.command, [], obj.callback);\n                                }\n                            } catch (e: any) {\n                                this.log.error(`Error: ${e}`);\n                                if (obj.callback) {\n                                    this.sendTo(obj.from, obj.command, { error: 'sendToRequestFail' }, obj.callback);\n                                }\n                            }\n                            break;\n                        }\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, { error: 'sendToAnyError' }, obj.callback);\n                    }\n                    break;\n                }\n\n                case 'getRandomMqttCredentials': {\n                    if (obj.message) {\n                        const allowedChars: string[] = [\n                            ...'abcdefghijklmnopqrstuvwxyz',\n                            ...'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n                            ...'0123456789',\n                            ...'()*+-.:<=>[]_',\n                        ];\n                        const allowedCharsUser: string[] = [\n                            ...'abcdefghijklmnopqrstuvwxyz',\n                            ...'ABCDEFGHIJKLMNOPQRSTUVWXYZ', // c|Yh7Pe<&1ap34t/]S&TxDwL&KDWqW-Se_D@vtXh,z]|T[RIqLgz.>^3H1j<\n                        ];\n                        const passwordLength = 50;\n                        const usernameLength = 15;\n                        const getString = (c: string[], length: number): string => {\n                            let result = '';\n                            for (let i = 0; i < length; i++) {\n                                const random = Math.floor(Math.random() * c.length);\n                                result += c[random];\n                            }\n                            return result;\n                        };\n\n                        const result = {\n                            native: {\n                                mqttUsername: getString(allowedCharsUser, usernameLength),\n                                mqttPassword: getString(allowedChars, passwordLength),\n                                mqttPort: await this.getPortAsync(8883),\n                                saveConfig: true,\n                            },\n                        };\n                        if (obj.callback) {\n                            this.sendTo(obj.from, obj.command, result, obj.callback);\n                        }\n                        break;\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, { error: 'error' }, obj.callback);\n                    }\n                    break;\n                }\n                case 'selectPanel': {\n                    if (this.mainConfiguration && obj.message?.id) {\n                        let msg: any[] = [];\n                        switch (obj.message.id) {\n                            case 'panel': {\n                                msg = this.mainConfiguration.map(a => {\n                                    const index = this.config.panels.findIndex(b => b.topic === a.topic);\n                                    if (index !== -1) {\n                                        return { value: a.topic, label: this.config.panels[index].name };\n                                    }\n                                    return null;\n                                });\n                                msg = msg.filter(a => a);\n                                msg.sort((a, b) => a.label.localeCompare(b.label));\n                                break;\n                            }\n                            case 'uniqueID': {\n                                if (obj.message.panel) {\n                                    const index: number = this.mainConfiguration.findIndex(\n                                        a => a.topic === obj.message.panel,\n                                    );\n                                    if (index !== -1) {\n                                        msg = this.mainConfiguration[index].pages.map(a => {\n                                            return { label: a.uniqueID, value: a.uniqueID };\n                                        });\n                                        msg.sort((a, b) => a.label.localeCompare(b.label));\n                                        break;\n                                    }\n                                }\n                                msg = [];\n                                break;\n                            }\n                            case 'navigationNames': {\n                                if (obj.message.table && Array.isArray(obj.message.table)) {\n                                    msg = obj.message.table.map((a: { name: string }) => {\n                                        return a.name;\n                                    });\n                                    msg = msg.filter(a => a && a !== obj.message.name);\n                                    msg.sort((a, b) => a.localeCompare(b));\n                                    break;\n                                }\n                                msg = [];\n                                break;\n                            }\n                        }\n\n                        if (obj.callback) {\n                            this.sendTo(obj.from, obj.command, msg, obj.callback);\n                            break;\n                        }\n                    }\n\n                    this.sendTo(obj.from, obj.command, null, obj.callback);\n                    break;\n                }\n                case '_loadNavigationOverview': {\n                    if (this.mainConfiguration && obj.message?.panel) {\n                        let msg: any[] = [];\n                        let useNavigation = false;\n                        let configFrom = '';\n                        const index: number = this.mainConfiguration.findIndex(a => a.topic === obj.message.panel);\n                        if (index !== -1) {\n                            let nav: any[] = [];\n                            const o = await this.getForeignObjectAsync(this.namespace);\n                            if (o?.native?.navigation && o.native.navigation[obj.message.panel]) {\n                                nav = o.native.navigation[obj.message.panel].data;\n                                useNavigation = o.native.navigation[obj.message.panel].useNavigation;\n                                configFrom = 'Adminconfiguration';\n                            } else {\n                                nav = this.mainConfiguration[index].navigation;\n                                configFrom = 'Scriptconfiguration';\n                            }\n                            msg = nav.map(a => {\n                                return a\n                                    ? {\n                                          name: a.name,\n                                          page: a.page,\n                                          left1: a.left?.single,\n                                          left2: a.left?.double,\n                                          right1: a.right?.single,\n                                          right2: a.right?.double,\n                                      }\n                                    : null;\n                            });\n                            msg = msg.filter(a => a);\n                        }\n                        if (obj.callback) {\n                            this.sendTo(\n                                obj.from,\n                                obj.command,\n                                {\n                                    native: {\n                                        _NavigationOverviewTable: msg,\n                                        _useNavigation: useNavigation,\n                                        _configFrom: configFrom,\n                                    },\n                                },\n                                obj.callback,\n                            );\n                        }\n                        break;\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, { error: 'sendToAnyError' }, obj.callback);\n                    }\n                    break;\n                }\n                case '_saveNavigationOverview': {\n                    if (obj.message?.table && obj.message?.panel && this.mainConfiguration) {\n                        const o = await this.getForeignObjectAsync(this.namespace);\n                        if (o && o.native) {\n                            const index: number = this.mainConfiguration.findIndex(a => a.topic === obj.message.panel);\n                            if (index !== -1) {\n                                let result = obj.message.table.map(\n                                    (a: { name: any; page: any; left1: any; left2: any; right1: any; right2: any }) => {\n                                        return a && a.name && a.page && (a.left1 || a.left2 || a.right1 || a.right2)\n                                            ? {\n                                                  name: a.name,\n                                                  page: a.page,\n                                                  left:\n                                                      a.left1 || a.left2 ? { single: a.left1, double: a.left2 } : null,\n                                                  right:\n                                                      a.right1 || a.right2\n                                                          ? { single: a.right1, double: a.right2 }\n                                                          : null,\n                                              }\n                                            : null;\n                                    },\n                                );\n                                result = result.filter((a: any) => a);\n                                o.native.navigation = o.native.navigation ?? {};\n                                o.native.navigation[obj.message.panel] = {\n                                    useNavigation: obj.message.useNavigation === 'true',\n                                    data: result,\n                                };\n\n                                await this.setForeignObjectAsync(this.namespace, o);\n                            }\n                            if (obj.callback) {\n                                this.sendTo(obj.from, obj.command, null, obj.callback);\n                            }\n                            break;\n                        }\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, { error: 'sendToAnyError' }, obj.callback);\n                    }\n                    break;\n                }\n                case '_clearNavigationOverview': {\n                    if (obj.message?.table && obj.message?.panel && this.mainConfiguration) {\n                        const o = await this.getForeignObjectAsync(this.namespace);\n                        if (o && o.native && o.native.navigation && o.native.navigation[obj.message.panel]) {\n                            o.native.navigation[obj.message.panel] = undefined;\n                            await this.setForeignObjectAsync(this.namespace, o);\n                        }\n                        if (obj.callback) {\n                            this.sendTo(\n                                obj.from,\n                                obj.command,\n                                {\n                                    native: {\n                                        _NavigationOverviewTable: [],\n                                        _useNavigation: false,\n                                        _configFrom: 'None!',\n                                    },\n                                },\n                                obj.callback,\n                            );\n                        }\n                        break;\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, { error: 'sendToAnyError' }, obj.callback);\n                    }\n                    break;\n                }\n                case 'tasmotaRestartSendTo': {\n                    if (obj.message) {\n                        if (obj.message.tasmotaIP /*&& obj.message.internalServerIp*/) {\n                            try {\n                                const url =\n                                    `http://${obj.message.tasmotaIP}/cm?` +\n                                    `${this.config.useTasmotaAdmin ? `user=admin&password=${this.config.tasmotaAdminPassword}` : ``}` +\n                                    `&cmnd=Restart 1`;\n                                this.log.debug(url);\n                                await axios.get(url);\n\n                                if (obj.callback) {\n                                    this.sendTo(obj.from, obj.command, [], obj.callback);\n                                }\n                            } catch (e: any) {\n                                this.log.error(`Error: ${e}`);\n                                if (obj.callback) {\n                                    this.sendTo(obj.from, obj.command, { error: 'sendToRequestFail' }, obj.callback);\n                                }\n                            }\n                            break;\n                        }\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, { error: 'sendToAnyError' }, obj.callback);\n                    }\n                    break;\n                }\n                case 'resetTasmota': {\n                    if (obj.message) {\n                        if (obj.message.tasmotaIP /*&& obj.message.internalServerIp*/) {\n                            try {\n                                const url =\n                                    `http://${obj.message.tasmotaIP}/cm?` +\n                                    `${this.config.useTasmotaAdmin ? `user=admin&password=${this.config.tasmotaAdminPassword}` : ``}` +\n                                    `&cmnd=reset 4`;\n                                this.log.debug(`Reset to factory defaults tasmota with IP ${obj.message.tasmotaIP}`);\n                                await axios.get(url);\n\n                                if (obj.callback) {\n                                    this.sendTo(obj.from, obj.command, [], obj.callback);\n                                }\n                            } catch (e: any) {\n                                this.log.error(`Error: ${e}`);\n                                if (obj.callback) {\n                                    this.sendTo(obj.from, obj.command, { error: 'sendToRequestFail' }, obj.callback);\n                                }\n                            }\n                            break;\n                        }\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, { error: 'sendToAnyError' }, obj.callback);\n                    }\n                    break;\n                }\n\n                case 'refreshMaintainTable': {\n                    const added: string[] = [];\n                    let result: any[] = [];\n                    const flashingText = this.library.getTranslation('Updating');\n                    const flashingObj: Record<string, string> = {};\n\n                    let file = undefined;\n                    if (fs.existsSync(path.join(__dirname, '../script'))) {\n                        file = fs.readFileSync(\n                            path.join(__dirname, '../script/example_sendTo_script_iobroker.ts'),\n                            'utf8',\n                        );\n                    }\n                    const vTemp = file?.match(/const.version.+'(\\d\\.\\d\\.\\d)';/) || [];\n                    const version = vTemp[1] ? vTemp[1] : '';\n\n                    for (let a = 0; a < this.config.panels.length; a++) {\n                        const panel = this.config.panels[a];\n                        const state = this.library.readdb(`panels.${panel.id}.info.nspanel.firmwareUpdate`);\n                        if (state && typeof state.val === 'number' && state.val < 100) {\n                            flashingObj[panel.id] = `${flashingText}: ${state.val}%`;\n                        }\n                    }\n\n                    if (this.controller?.panels) {\n                        const updateText = this.library.getTranslation('updateAvailable');\n                        const checkText = this.library.getTranslation('check!');\n                        const temp = [];\n                        for (const a of this.controller.panels) {\n                            let check = false;\n                            let tv = '';\n                            let nv = '';\n                            let sv = '';\n                            const ft = flashingObj[a.name];\n                            const scriptId = this.library.cleandp(\n                                `${scriptPath}.${this.library.cleandp(a.friendlyName, false, true)}`,\n                            );\n                            const o = await this.getForeignObjectAsync(scriptId);\n                            if (o) {\n                                const temp = o.common.source.match(/const.version.+'(\\d\\.\\d\\.\\d)';/)?.[1] ?? '';\n                                if (temp !== version) {\n                                    check = true;\n                                    sv = `${temp} (${updateText}: v${version})`;\n                                } else {\n                                    sv = temp;\n                                }\n                            }\n                            if (a.info) {\n                                if (a.info.tasmota?.firmwareversion) {\n                                    const temp = a.info.tasmota.firmwareversion.match(/([0-9]+\\.[0-9]+\\.[0-9])/);\n                                    if (temp && temp[1]) {\n                                        tv = `${temp[1]}`;\n                                    }\n                                }\n                                if (a.info.tasmota?.onlineVersion && tv) {\n                                    const temp = a.info.tasmota.onlineVersion.match(/([0-9]+\\.[0-9]+\\.[0-9])/);\n                                    if (temp && temp[1] && temp[1] !== tv) {\n                                        tv += ` (${updateText})`;\n                                        check = true;\n                                    }\n                                }\n                                tv = tv ? `v${tv}` : '';\n                                if (a.info.nspanel?.displayVersion) {\n                                    const temp = a.info.nspanel.displayVersion.match(/([0-9]+\\.[0-9]+\\.[0-9])/);\n                                    if (temp && temp[1]) {\n                                        nv = `${temp[1]}`;\n                                    }\n                                }\n                                if (a.info.nspanel?.onlineVersion && nv) {\n                                    const temp = a.info.nspanel.onlineVersion.match(/([0-9]+\\.[0-9]+\\.[0-9])/);\n                                    if (temp && temp[1] && temp[1] !== nv) {\n                                        nv += ` (${updateText})`;\n                                        check = true;\n                                    }\n                                }\n                                nv = nv ? `v${nv}` : '';\n                            }\n                            added.push(a.topic);\n\n                            temp.push({\n                                _check: check,\n                                _Headline: `${a.friendlyName} (${ft ? ft : `${check ? checkText : `${a.isOnline ? 'online' : 'offline'}`}`})`,\n                                _name: a.friendlyName,\n                                _ip: a.info?.tasmota?.net?.IPAddress\n                                    ? a.info.tasmota.net.IPAddress\n                                    : 'offline - waiting',\n                                _online: a.isOnline ? 'yes' : 'no',\n                                _topic: a.topic,\n                                _id: a.info?.tasmota?.net?.Mac ? a.info.tasmota.net.Mac : '',\n                                _tftVersion: nv ? nv : '???',\n                                _tasmotaVersion: tv ? tv : '???',\n                                _ScriptVersion: sv ? `v${sv}` : '???',\n                            });\n                        }\n                        result = result.concat(temp);\n                    }\n                    if (this.config.panels) {\n                        const temp2 = this.config.panels.filter(a => {\n                            return added.findIndex(b => b === a.topic) === -1;\n                        });\n                        const temp = [];\n                        for (const a of temp2) {\n                            const ft = flashingObj[a.name];\n                            let sv = version;\n                            const scriptId = this.library.cleandp(\n                                `${scriptPath}.${this.library.cleandp(a.name, false, true)}`,\n                            );\n                            const o = await this.getForeignObjectAsync(scriptId);\n                            if (o) {\n                                const temp = o.common.source.match(/const.version.+'(\\d\\.\\d\\.\\d)';/)?.[1] ?? '';\n                                if (temp !== version) {\n                                    sv = temp ? temp : version;\n                                }\n                            }\n                            temp.push({\n                                _check: true,\n                                _Headline: `${a.name} (${\n                                    ft\n                                        ? ft\n                                        : `${\n                                              this.config.Testconfig2\n                                                  ? this.config.Testconfig2.findIndex(b => b.topic === a.topic) === -1\n                                                      ? 'Missing configuration!'\n                                                      : 'offline - waiting'\n                                                  : 'offline'\n                                          }`\n                                })`,\n                                _name: a.name,\n                                _ip: this.config.Testconfig2\n                                    ? this.config.Testconfig2.findIndex(b => b.topic === a.topic) === -1\n                                        ? 'Missing configuration!'\n                                        : 'offline - waiting'\n                                    : 'offline',\n                                _online: 'no',\n                                _topic: a.topic,\n                                _id: '',\n                                _tftVersion: '---',\n                                _tasmotaVersion: '---',\n                                _ScriptVersion: sv ? `v${sv}` : '???',\n                            });\n                        }\n                        result = result.concat(temp);\n                    }\n                    if (result.length > 0) {\n                        result.sort((a, b) => a._name.localeCompare(b._name));\n                        if (obj.callback) {\n                            this.sendTo(obj.from, obj.command, { native: { _maintainPanels: result } }, obj.callback);\n                        }\n                        break;\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, { error: 'sendToAnyError' }, obj.callback);\n                    }\n                    break;\n                }\n                case 'createScript': {\n                    const folder: ioBroker.ChannelObject = {\n                        type: 'channel',\n                        _id: scriptPath,\n                        common: {\n                            name: this.namespace,\n                            expert: true,\n                        },\n                        native: {},\n                    };\n                    await this.extendForeignObjectAsync(scriptPath, folder);\n\n                    // Skript erstellen\n                    const scriptId = this.library.cleandp(\n                        `${scriptPath}.${this.library.cleandp(obj.message.name, false, true)}`,\n                    );\n                    this.log.debug(`Create script ${scriptId}`);\n                    if (fs.existsSync(path.join(__dirname, '../script')) && obj.message.name && obj.message.topic) {\n                        let file = fs.readFileSync(\n                            path.join(__dirname, '../script/example_sendTo_script_iobroker.ts'),\n                            'utf8',\n                        );\n                        const o = await this.getForeignObjectAsync(scriptId);\n                        if (file) {\n                            file = file.replace(`panelTopic: 'topic',`, `panelTopic: '${obj.message.topic}',`);\n                            file = file.replace(\n                                /await sendToAsync\\('nspanel-lovelace-ui\\.0', 'ScriptConfig',/,\n                                `await sendToAsync('${this.namespace}', 'ScriptConfig',`,\n                            );\n                            if (o) {\n                                const token =\n                                    '*  END STOP END STOP END - No more configuration - END STOP END STOP END       *';\n                                const indexFrom = file.indexOf(token);\n                                const indexTo = o.common.source.indexOf(token);\n                                if (indexFrom !== -1 && indexTo !== -1) {\n                                    this.log.info(`Update script ${scriptId}`);\n                                    file = o.common.source.substring(0, indexTo) + file.substring(indexFrom);\n                                } else {\n                                    if (obj.callback) {\n                                        this.sendTo(obj.from, obj.command, null, obj.callback);\n                                    }\n                                    this.log.warn(`Update script ${scriptId} something whent wrong!`);\n                                    break;\n                                }\n                            } else {\n                                this.log.info(`Create script ${scriptId}`);\n                            }\n                            const script: ioBroker.ScriptObject = {\n                                type: 'script',\n                                _id: scriptId,\n                                common: {\n                                    name: obj.message.name,\n                                    engineType: 'TypeScript/ts',\n                                    engine: `system.adapter.javascript.0`,\n                                    source: file,\n                                    debug: false,\n                                    verbose: false,\n                                    enabled: false,\n                                },\n                                native: {},\n                            };\n                            await this.extendForeignObjectAsync(scriptId, script);\n                        }\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, null, obj.callback);\n                    }\n                    break;\n                }\n                case 'getIcons': {\n                    const icons = Array.from(Icons.iconMap, ([name]) => name).map(a => {\n                        return { label: a, value: a };\n                    });\n                    this.sendTo(obj.from, obj.command, icons, obj.callback);\n                    break;\n                }\n                case 'getIconBase64': {\n                    try {\n                        if (fs.existsSync(path.join(__dirname, '../script'))) {\n                            const fileContent = fs.readFileSync(path.join(__dirname, '../script/icons.json'), 'utf-8');\n                            const icons = JSON.parse(fileContent);\n                            const index = icons.findIndex((a: { name: string }) => a.name === obj.message.icon);\n                            let img = '';\n                            if (index !== -1) {\n                                img = icons[index].base64;\n                            }\n                            this.sendTo(obj.from, obj.command, img, obj.callback);\n                        }\n                    } catch (error) {\n                        console.error('Fehler beim Verarbeiten der Datei:', error);\n                    }\n\n                    break;\n                }\n                case 'updateTasmota': {\n                    let language = this.library.getLocalLanguage();\n                    language = language === 'zh-cn' ? 'en' : language;\n                    const cmnd = `OtaUrl http://ota.tasmota.com/tasmota32/release/tasmota32-${language.toUpperCase()}.bin; Upgrade 1`;\n\n                    if (this.controller?.panels) {\n                        const index = this.controller.panels.findIndex(a => a.topic === obj.message.topic);\n                        if (index !== -1) {\n                            const panel = this.controller.panels[index];\n                            panel.sendToTasmota(`${panel.topic}/cmnd/Backlog`, cmnd);\n                        }\n                    }\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, [], obj.callback);\n                    }\n                    break;\n                }\n                case 'openTasmotaConsole':\n                case 'openLinkToTasmota': {\n                    if (obj.callback) {\n                        this.sendTo(\n                            obj.from,\n                            obj.command,\n                            {\n                                openUrl: `http://${obj.message.ip}/${obj.command === 'openTasmotaConsole' ? 'cs?' : ''}:80`,\n                                saveConfig: false,\n                            },\n                            obj.callback,\n                        );\n                    }\n                    break;\n                }\n                case 'getTimeZones': {\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, definition.tasmotaTimeZonesAdmin, obj.callback);\n                    }\n                    break;\n                }\n                default: {\n                    // Send response in callback if required\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, { error: 'sendToAnyError' }, obj.callback);\n                    }\n                }\n            }\n        } else {\n            if (obj.callback) {\n                this.sendTo(obj.from, obj.command, { error: 'failed' }, obj.callback);\n            }\n        }\n    }\n\n    async writeStateExternalAsync(dp: string, val: ioBroker.StateValue): Promise<void> {\n        if (dp.startsWith(this.namespace)) {\n            return;\n        }\n        await this.setForeignStateAsync(dp, val, false);\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new NspanelLovelaceUi(options);\n} else {\n    // otherwise start the instance directly\n    (() => new NspanelLovelaceUi())();\n}\n"],
  "mappings": "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",
  "names": ["axios", "_a", "_b", "_c", "b", "url", "result", "_d", "path", "temp"]
}
