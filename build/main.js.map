{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport { Library } from './lib/classes/library';\nimport 'source-map-support/register';\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\nimport * as MQTT from './lib/classes/mqtt';\nimport { Testconfig } from './lib/config';\nimport { Controller } from './lib/controller/panel-controller';\nimport { Icons } from './lib/const/icon_mapping';\n\nclass NspanelLovelaceUi extends utils.Adapter {\n    library: Library;\n    mqttClient: MQTT.MQTTClientClass | undefined;\n    mqttServer: MQTT.MQTTServerClass | undefined;\n    controller: Controller | undefined;\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'nspanel-lovelace-ui',\n        });\n        this.library = new Library(this);\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n        // init some propertys so we dont need undefined checks\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        Icons.adapter = this;\n        this.setTimeout(() => {\n            this.log.debug('Check configuration!');\n            if (!(this.config.mqttIp && this.config.mqttPort && this.config.mqttUsername && this.config.mqttPassword))\n                return;\n            this.log.debug(this.adapterDir);\n            this.mqttClient = new MQTT.MQTTClientClass(\n                this,\n                this.config.mqttIp,\n                this.config.mqttPort,\n                this.config.mqttUsername,\n                this.config.mqttPassword,\n                (topic, message) => {\n                    this.log.debug(topic + ' ' + message);\n                },\n            );\n            Testconfig.name = this.config.name;\n            Testconfig.topic = this.config.topic;\n            this.log.debug(String(process.memoryUsage().heapUsed));\n            this.controller = new Controller(this, {\n                mqttClient: this.mqttClient,\n                name: 'controller',\n                panels: [Testconfig],\n            });\n            setTimeout(() => {\n                this.log.debug(String(process.memoryUsage().heapUsed)), 2000;\n            });\n        }, 1000);\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            // clearInterval(interval1);\n\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            if (this.controller) {\n                this.controller.readOnlyDB.onStateChange(id, state);\n            }\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    private onMessage(obj: ioBroker.Message): void {\n        if (typeof obj === 'object' && obj.message) {\n            if (obj.command === 'send') {\n                // e.g. send email or pushover or whatever\n                this.log.info('send command');\n\n                // Send response in callback if required\n                if (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n            }\n        }\n    }\n\n    async writeStateExternalAsync(dp: string, val: ioBroker.StateValue): Promise<void> {\n        if (dp.startsWith(this.namespace)) return;\n        await this.setForeignStateAsync(dp, val, false);\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new NspanelLovelaceUi(options);\n} else {\n    // otherwise start the instance directly\n    (() => new NspanelLovelaceUi())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AACvB,qBAAwB;AACxB,sBAAO;AAGP,WAAsB;AACtB,oBAA2B;AAC3B,8BAA2B;AAC3B,0BAAsB;AAEtB,MAAM,0BAA0B,MAAM,QAAQ;AAAA,EAC1C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACO,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AACD,SAAK,UAAU,IAAI,uBAAQ,IAAI;AAC/B,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAEpD,SAAK,GAAG,WAAW,KAAK,UAAU,KAAK,IAAI,CAAC;AAC5C,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAE9C;AAAA,EAKA,MAAc,UAAyB;AACnC,8BAAM,UAAU;AAChB,SAAK,WAAW,MAAM;AAClB,WAAK,IAAI,MAAM,sBAAsB;AACrC,UAAI,EAAE,KAAK,OAAO,UAAU,KAAK,OAAO,YAAY,KAAK,OAAO,gBAAgB,KAAK,OAAO;AACxF;AACJ,WAAK,IAAI,MAAM,KAAK,UAAU;AAC9B,WAAK,aAAa,IAAI,KAAK;AAAA,QACvB;AAAA,QACA,KAAK,OAAO;AAAA,QACZ,KAAK,OAAO;AAAA,QACZ,KAAK,OAAO;AAAA,QACZ,KAAK,OAAO;AAAA,QACZ,CAAC,OAAO,YAAY;AAChB,eAAK,IAAI,MAAM,QAAQ,MAAM,OAAO;AAAA,QACxC;AAAA,MACJ;AACA,+BAAW,OAAO,KAAK,OAAO;AAC9B,+BAAW,QAAQ,KAAK,OAAO;AAC/B,WAAK,IAAI,MAAM,OAAO,QAAQ,YAAY,EAAE,QAAQ,CAAC;AACrD,WAAK,aAAa,IAAI,mCAAW,MAAM;AAAA,QACnC,YAAY,KAAK;AAAA,QACjB,MAAM;AAAA,QACN,QAAQ,CAAC,wBAAU;AAAA,MACvB,CAAC;AACD,iBAAW,MAAM;AACb,aAAK,IAAI,MAAM,OAAO,QAAQ,YAAY,EAAE,QAAQ,CAAC,GAAG;AAAA,MAC5D,CAAC;AAAA,IACL,GAAG,GAAI;AAAA,EACX;AAAA,EAKQ,SAAS,UAA4B;AACzC,QAAI;AAOA,eAAS;AAAA,IACb,SAAS,GAAP;AACE,eAAS;AAAA,IACb;AAAA,EACJ;AAAA,EAoBQ,cAAc,IAAY,OAAgD;AAC9E,QAAI,OAAO;AACP,UAAI,KAAK,YAAY;AACjB,aAAK,WAAW,WAAW,cAAc,IAAI,KAAK;AAAA,MACtD;AAAA,IACJ,OAAO;AAEH,WAAK,IAAI,KAAK,SAAS,YAAY;AAAA,IACvC;AAAA,EACJ;AAAA,EAOQ,UAAU,KAA6B;AAC3C,QAAI,OAAO,QAAQ,YAAY,IAAI,SAAS;AACxC,UAAI,IAAI,YAAY,QAAQ;AAExB,aAAK,IAAI,KAAK,cAAc;AAG5B,YAAI,IAAI;AAAU,eAAK,OAAO,IAAI,MAAM,IAAI,SAAS,oBAAoB,IAAI,QAAQ;AAAA,MACzF;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAM,wBAAwB,IAAY,KAAyC;AAC/E,QAAI,GAAG,WAAW,KAAK,SAAS;AAAG;AACnC,UAAM,KAAK,qBAAqB,IAAI,KAAK,KAAK;AAAA,EAClD;AACJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,kBAAkB,OAAO;AAC1G,OAAO;AAEH,GAAC,MAAM,IAAI,kBAAkB,GAAG;AACpC;",
  "names": []
}
