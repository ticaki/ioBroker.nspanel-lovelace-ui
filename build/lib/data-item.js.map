{
  "version": 3,
  "sources": ["../../src/lib/data-item.ts"],
  "sourcesContent": ["import * as Color from './color';\nimport { BaseClass } from './library';\nimport { BaseClassTriggerd, StatesDBReadOnly } from './states-controler';\nimport * as NSPanel from './types';\n\nexport class Dataitem extends BaseClass {\n    private options: NSPanel.DataItemsOptions;\n    private obj: ioBroker.Object | null | undefined;\n    readOnlyDB: StatesDBReadOnly;\n    type: ioBroker.CommonType | 'undefined' = 'undefined';\n    parent: BaseClassTriggerd;\n    /**\n     * Call isValidAndInit() after constructor and check return value - if false, this object is not configured correctly.\n     * @param adapter this of adapter\n     * @param options {DataItemsOptions}\n     * @param val must be valid for type 'const'\n     */\n    constructor(adapter: any, options: NSPanel.DataItemsOptions, that: BaseClassTriggerd, db: StatesDBReadOnly) {\n        super(adapter, options.name || '');\n        this.options = options;\n        this.options.type = options.type;\n        this.readOnlyDB = db;\n        this.parent = that;\n        switch (this.options.type) {\n            case 'const':\n                /*if (!this.options.constVal) {\n                    this.log.error(`Error 1001 in constructor val == '' not allow in type const!`);\n                }*/\n                this.setTypeFromValue(this.options.constVal);\n                this.options.value = {\n                    val: this.options.constVal,\n                    ack: true,\n                    ts: Date.now(),\n                    lc: Date.now(),\n                    from: '',\n                };\n                break;\n            case 'state':\n            case 'triggered':\n                // all work is done in isValidAndInit\n                break;\n        }\n    }\n\n    /**\n     * Init and check dp is valid\n     * @returns if false value is not valid\n     */\n    async isValidAndInit(): Promise<boolean> {\n        switch (this.options.type) {\n            case 'const':\n                return this.options.constVal !== undefined;\n            case 'state':\n            case 'triggered':\n                if (this.options.dp === undefined) return false;\n                this.obj = await this.adapter.getForeignObjectAsync(this.options.dp);\n                if (!this.obj || this.obj.type != 'state' || !this.obj.common) {\n                    throw new Error(`801: ${this.options.dp} has no state object! Bye Bye`);\n                }\n                this.type = this.obj.common.type;\n                this.options.role = this.obj.common.role || '';\n                const value = await this.readOnlyDB.getValue(this.options.dp);\n                if (this.options.type == 'state') return !!value;\n                this.readOnlyDB.setTrigger(this.options.dp, this.parent);\n                return !!value;\n        }\n        return false;\n    }\n    async getRawValue(): Promise<NSPanel.State | null | undefined> {\n        switch (this.options.type) {\n            case 'const':\n                return this.options.value;\n            case 'state':\n            case 'triggered':\n                if (this.options.dp === undefined)\n                    throw new Error(`Error 1002 type is ${this.options.type} but dp is undefined`);\n                return await this.readOnlyDB.getValue(this.options.dp);\n        }\n        return null;\n    }\n\n    async getObject(): Promise<object | null> {\n        const state = await this.getRawValue();\n        if (state && state.val) {\n            if (typeof state.val === 'string') {\n                try {\n                    const value = JSON.parse(state.val);\n                    return value;\n                } catch (e) {\n                    this.log.warn('incorrect json!');\n                }\n            } else if (typeof state.val === 'object') {\n                return state.val;\n            }\n        }\n        return null;\n    }\n\n    async getRGBValue(): Promise<NSPanel.RGB | null> {\n        const value = await this.getObject();\n        if (value) {\n            if (NSPanel.isRGB(value)) return value;\n        }\n        return null;\n    }\n    async getIconScale(): Promise<NSPanel.IconScaleElement | null> {\n        const value = await this.getObject();\n        if (value) {\n            if (NSPanel.isIconScaleElement(value)) return value;\n        }\n        return null;\n    }\n    async getRGBDec(): Promise<string | null> {\n        const value = await this.getRGBValue();\n        if (value) {\n            return String(Color.rgb_dec565(value));\n        }\n        return null;\n    }\n    async getString(): Promise<string | null> {\n        const state = await this.getRawValue();\n        switch (this.options.type) {\n            case 'const':\n                return state && state.val !== null ? String(state.val) : null;\n            case 'state':\n            case 'triggered':\n                if (this.options.substring) {\n                    const args = this.options.substring;\n                    return state && state.val !== null ? String(state.val).substring(args[0], args[1]) : null;\n                }\n                return state && state.val !== null ? String(state.val) : null;\n        }\n    }\n\n    async getNumber(): Promise<number | null> {\n        const result = await this.getRawValue();\n        if (result && !isNaN(parseInt(String(result.val)))) {\n            return parseInt(result.val as string);\n        }\n        return null;\n    }\n    async getBoolean(): Promise<boolean | null> {\n        const result = await this.getRawValue();\n        if (result && result.val !== null) {\n            if (typeof result.val === 'string') {\n                switch (result.val.toLowerCase()) {\n                    case 'ok':\n                    case 'on':\n                    case 'yes':\n                    case 'true':\n                    case 'online':\n                        return true;\n                }\n            }\n            return !!result.val;\n        }\n        return null;\n    }\n\n    private setTypeFromValue(val: NSPanel.StateValue | undefined): void {\n        switch (typeof val) {\n            case 'string':\n                this.type = 'string';\n                break;\n            case 'number':\n            case 'bigint':\n                this.type = 'number';\n                break;\n            case 'boolean':\n                this.type = 'boolean';\n                break;\n            case 'undefined':\n                this.type = 'undefined';\n            case 'symbol':\n            case 'object':\n            case 'function':\n                this.type = 'object';\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
