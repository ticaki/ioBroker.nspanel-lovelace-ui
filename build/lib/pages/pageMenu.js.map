{
  "version": 3,
  "sources": ["../../../src/lib/pages/pageMenu.ts"],
  "sourcesContent": ["import { Page } from '../classes/Page';\nimport { type PageInterface } from '../classes/PageInterface';\nimport { Color, type RGB } from '../const/Color';\nimport { Icons } from '../const/icon_mapping';\nimport { getPayload } from '../const/tools';\nimport * as pages from '../types/pages';\nimport type { IncomingEvent } from '../types/types';\nimport { handleCardRole } from './data-collection-functions';\nimport type { PageItem } from './pageItem';\n\nexport class PageMenu extends Page {\n    declare config: pages.PageMenuConfig;\n    protected maxItems: number = 4;\n    protected step: number = 0;\n    protected iconLeft: string = '';\n    protected iconRight: string = '';\n    protected iconLeftP: string = '';\n    protected iconRightP: string = '';\n    protected doubleClick: ioBroker.Timeout | undefined;\n    protected lastdirection: null | 'left' | 'right' = null;\n\n    /** Optional arrow item used when scrollPresentation === 'arrow'. */\n    protected arrowPageItem?: PageItem;\n\n    private nextArrow: boolean = false;\n\n    private tempItems: (PageItem | undefined)[] | undefined;\n\n    constructor(config: PageInterface, options: pages.PageBaseConfig) {\n        if (!pages.isPageMenuConfig(config)) {\n            throw new Error(`PageMenu: invalid config (card=${(config as any).card})`);\n        }\n        super(config, options);\n        if (options.config) {\n            switch (options.config.card) {\n                case 'cardSchedule':\n                case 'cardGrid':\n                    this.maxItems = 6;\n                    break;\n                case 'cardGrid2':\n                    this.maxItems = this.basePanel.info.nspanel.model === 'us-p' ? 9 : 8;\n                    break;\n                case 'cardGrid3':\n                    this.maxItems = 4;\n                    break;\n                case 'cardEntities':\n                    this.maxItems = this.basePanel.info.nspanel.model === 'us-p' ? 5 : 4;\n                    break;\n                case 'cardThermo2':\n                    this.maxItems = 9;\n                    break;\n                case 'cardMedia':\n                    this.maxItems = 5;\n                    break;\n                case 'cardChart':\n                case 'cardLChart':\n                case 'cardThermo':\n                case 'cardQR':\n                case 'cardAlarm':\n                case 'cardPower':\n                case 'screensaver':\n                case 'screensaver2':\n                case 'screensaver3':\n                case 'popupNotify':\n                case 'popupNotify2':\n                default:\n                    this.log.warn(\n                        `PageMenu: ${config.card} is not supported in this class. Please use the correct class for this card.`,\n                    );\n                    break;\n            }\n        }\n    }\n\n    public async init(): Promise<void> {\n        await super.init();\n        const temp = await this.createPageItems([\n            {\n                type: 'button',\n                dpInit: '',\n                role: 'button',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'arrow-right-bold-circle-outline' },\n                            color: { type: 'const', constVal: { red: 205, green: 142, blue: 153 } },\n                        },\n                    },\n                    entity1: { value: { type: 'const', constVal: true } },\n                    additionalId: { type: 'const', constVal: '-NextPageArrow' },\n                },\n            },\n        ]);\n        if (!temp || !temp[0]) {\n            throw new Error('PageMenu: unable to create arrowPageItem');\n        }\n        this.arrowPageItem = temp[0];\n    }\n\n    /**\n     * Build the list of payload strings for the current view.\n     *\n     * Modes:\n     * - \"classic\": windowed paging using `this.maxItems`.\n     *     - Respects `config.scrollType`: \"page\" (full page) or \"half\" (half page).\n     *     - \"half\" is only effective for grid/thermo cards; otherwise falls back to \"page\".\n     * - \"arrow\": always returns exactly `this.maxItems` slots; the last slot is optionally\n     *     replaced by `arrowPageItem`. Now also shows on the last page to wrap to the first.\n     *\n     * Order is preserved (sequential awaits). Resets `this.step` if it points beyond the list.\n     *\n     * @param result Pre-allocated result array to fill with payload strings.\n     * @returns Filled `result`.\n     */\n    public async getOptions(result: string[]): Promise<string[]> {\n        if (!this.pageItems || !this.config) {\n            return result;\n        }\n\n        // refresh enabled items\n        this.tempItems = (await this.getEnabledPageItems()) || [];\n\n        // filtering\n        if (this.config.filterType === 'true' || this.config.filterType === 'false') {\n            const wantTrue = this.config.filterType === 'true';\n            const filtered: typeof this.tempItems = [];\n            for (const p of this.pageItems) {\n                if (\n                    p?.dataItems?.data &&\n                    'entity1' in p.dataItems.data &&\n                    p.dataItems.data.entity1?.value &&\n                    wantTrue === (await p.dataItems.data.entity1.value.getBoolean())\n                ) {\n                    filtered.push(p);\n                }\n            }\n            this.tempItems = filtered;\n        } else if (typeof this.config.filterType === 'number') {\n            const filtered: typeof this.tempItems = [];\n            for (const p of this.pageItems) {\n                if (p?.dataItems && (p.dataItems.filter == null || p.dataItems.filter === this.config.filterType)) {\n                    filtered.push(p);\n                }\n            }\n            this.tempItems = filtered;\n        }\n\n        const items = this.tempItems ?? [];\n        const total = items.length;\n        const maxItems = Math.max(0, this.maxItems | 0);\n\n        // prefill with placeholders\n        for (let i = 0; i < maxItems; i++) {\n            result[i] = result[i] ?? '~~~~~';\n        }\n\n        const style = this.config.scrollPresentation ?? 'classic';\n\n        // classic paging\n        if (style === 'classic') {\n            const requestedScrollType = this.config.scrollType === 'half' ? 'half' : 'page';\n            const cardAllowsHalf = pages.isCardMenuHalfPageScrollType(this.config.card);\n            const effectiveScrollType: 'page' | 'half' =\n                requestedScrollType === 'half' && cardAllowsHalf ? 'half' : 'page';\n\n            const stride =\n                total > maxItems\n                    ? effectiveScrollType === 'page'\n                        ? maxItems\n                        : Math.max(1, Math.floor(maxItems / 2))\n                    : 0;\n\n            let start = stride > 0 ? this.step * stride : 0;\n            if (start >= total) {\n                this.step = 0;\n                start = 0;\n            }\n\n            const end = Math.min(start + maxItems, total);\n\n            let outIdx = 0;\n            for (let i = start; i < end; i++, outIdx++) {\n                const item = items[i];\n                result[outIdx] = item ? ((await item.getPageItemPayload()) ?? '~~~~~') : '~~~~~';\n            }\n            while (outIdx < maxItems) {\n                result[outIdx++] = '~~~~~';\n            }\n\n            return result;\n        }\n\n        // arrow paging (with wrap-around arrow on the last page)\n        if (style === 'arrow') {\n            if (maxItems <= 0) {\n                return result;\n            }\n\n            let start = this.step * maxItems;\n            if (start >= total) {\n                this.step = 0;\n                start = 0;\n            }\n\n            for (let i = 0; i < maxItems; i++) {\n                const idx = start + i;\n                const item = items[idx];\n                result[i] = item ? ((await item.getPageItemPayload()) ?? '~~~~~') : '~~~~~';\n            }\n\n            const moreAfterWindow = start + maxItems < total;\n            const moreBeforeWindow = start > 0;\n            const multiplePages = total > maxItems;\n\n            // show arrow if there are multiple pages and either we can go forward OR we are on the last page (wrap)\n            const shouldShowArrow = multiplePages && (moreAfterWindow || moreBeforeWindow);\n\n            if (shouldShowArrow) {\n                this.nextArrow = true;\n                result[maxItems - 1] = this.arrowPageItem\n                    ? ((await this.arrowPageItem.getPageItemPayload()) ?? '~~~~~')\n                    : '~~~~~';\n            } else {\n                this.nextArrow = false;\n            }\n\n            return result;\n        }\n\n        return result;\n    }\n\n    protected async onVisibilityChange(val: boolean): Promise<void> {\n        if (val) {\n            if (this.config && pages.isPageMenuConfig(this.config)) {\n                switch (this.config.card) {\n                    case 'cardSchedule':\n                    case 'cardGrid':\n                        this.maxItems = 6;\n                        break;\n                    case 'cardGrid2':\n                        this.maxItems = this.basePanel.info.nspanel.model === 'us-p' ? 9 : 8;\n                        break;\n                    case 'cardGrid3':\n                        this.maxItems = 4;\n                        break;\n                    case 'cardEntities':\n                        this.maxItems = this.basePanel.info.nspanel.model === 'us-p' ? 5 : 4;\n                        break;\n                    case 'cardThermo2':\n                        this.maxItems = 9;\n                        break;\n                    case 'cardMedia':\n                        this.maxItems = 5;\n                        break;\n                    default:\n                        //@ts-expect-error\n                        this.log.error(`PageMenu: ${this.config.card} is not supported in onVisibilityChange!`);\n                        break;\n                }\n                const temp = await handleCardRole(this.adapter, this.config.cardRole, this);\n                if (temp) {\n                    this.pageItemConfig = temp;\n                }\n            }\n            this.step = 0;\n        } else {\n            this.tempItems = [];\n        }\n        await super.onVisibilityChange(val);\n    }\n\n    goLeft(single: boolean = false): void {\n        if (this.config.scrollPresentation === 'arrow') {\n            super.goLeft();\n            return;\n        }\n        if (!this.config || !pages.isPageMenuConfig(this.config)) {\n            return;\n        }\n        if (!single) {\n            if (this.doubleClick) {\n                this.adapter.clearTimeout(this.doubleClick);\n                this.doubleClick = undefined;\n                if (this.lastdirection == 'right') {\n                    this.basePanel.navigation.goLeft();\n                    return;\n                }\n            } else {\n                this.lastdirection = 'left';\n                if (this.unload) {\n                    return;\n                }\n                this.doubleClick = this.adapter.setTimeout(() => {\n                    this.goLeft(true);\n                    this.doubleClick = undefined;\n                }, this.adapter.config.doubleClickTime);\n                return;\n            }\n        }\n\n        if (--this.step < 0) {\n            this.step = 0;\n            this.basePanel.navigation.goLeft();\n        } else {\n            void this.update();\n        }\n    }\n    goRight(single: boolean = false): void {\n        if (this.config.scrollPresentation === 'arrow') {\n            super.goRight();\n            return;\n        }\n        if (!this.config || !pages.isPageMenuConfig(this.config)) {\n            return;\n        }\n        if (!single) {\n            if (this.doubleClick) {\n                this.adapter.clearTimeout(this.doubleClick);\n                this.doubleClick = undefined;\n                if (this.lastdirection == 'right') {\n                    this.basePanel.navigation.goRight();\n                    return;\n                }\n            } else {\n                this.lastdirection = 'left';\n                if (this.unload) {\n                    return;\n                }\n                this.doubleClick = this.adapter.setTimeout(() => {\n                    this.doubleClick = undefined;\n                    this.goRight(true);\n                }, this.adapter.config.doubleClickTime);\n                return;\n            }\n        }\n        const pageScroll = this.config.scrollType === 'page';\n\n        const length = this.tempItems ? this.tempItems.length : this.pageItems ? this.pageItems.length : 0;\n        const maxItemsPage =\n            this.config.card === 'cardEntities' || this.config.card === 'cardSchedule'\n                ? this.maxItems\n                : this.maxItems / 2;\n        const maxItemsPagePlus =\n            this.config.card === 'cardEntities' || this.config.card === 'cardSchedule' ? 0 : this.maxItems / 2;\n        if (\n            !pageScroll ? ++this.step + this.maxItems > length : ++this.step * maxItemsPage + maxItemsPagePlus >= length\n        ) {\n            this.step--;\n            this.basePanel.navigation.goRight();\n        } else {\n            void this.update();\n        }\n    }\n    protected getNavigation(): string {\n        if (this.config.scrollPresentation === 'arrow') {\n            return super.getNavigation();\n        }\n        const pageScroll = this.config.scrollType === 'page';\n        const length = this.tempItems ? this.tempItems.length : this.pageItems ? this.pageItems.length : 0;\n        if (this.maxItems >= length) {\n            return super.getNavigation();\n        }\n        let left = '';\n        let right = '';\n        if (this.step <= 0) {\n            left = this.basePanel.navigation.buildNavigationString('left');\n        }\n        const maxItemsPage =\n            this.config.card === 'cardEntities' || this.config.card === 'cardSchedule'\n                ? this.maxItems\n                : this.maxItems / 2;\n        const maxItemsPagePlus =\n            this.config.card === 'cardEntities' || this.config.card === 'cardSchedule' ? 0 : this.maxItems / 2;\n        if (\n            !pageScroll\n                ? this.step + this.maxItems >= length\n                : (this.step + 1) * maxItemsPage + maxItemsPagePlus >= length\n        ) {\n            right = this.basePanel.navigation.buildNavigationString('right');\n        }\n        if (!left) {\n            left = getPayload(\n                'button',\n                'bSubPrev',\n                pageScroll ? Icons.GetIcon('arrow-up-bold-outline') : Icons.GetIcon('arrow-up-bold'),\n                String(Color.rgb_dec565(Color.navDown as RGB)),\n                '',\n                '',\n            );\n        }\n\n        if (!right) {\n            right = getPayload(\n                'button',\n                'bSubNext',\n                pageScroll ? Icons.GetIcon('arrow-down-bold-outline') : Icons.GetIcon('arrow-down-bold'),\n                String(Color.rgb_dec565(Color.navDown as RGB)),\n                '',\n                '',\n            );\n        }\n\n        return getPayload(left, right);\n    }\n    async onButtonEvent(event: IncomingEvent): Promise<void> {\n        if (this.nextArrow && event.id.endsWith('-NextPageArrow')) {\n            this.step++;\n            await this.update();\n        }\n    }\n\n    async reset(): Promise<void> {\n        this.step = 0;\n    }\n\n    async delete(): Promise<void> {\n        if (this.doubleClick) {\n            this.adapter.clearTimeout(this.doubleClick);\n            this.doubleClick = undefined;\n        }\n        this.tempItems = [];\n        await super.delete();\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
