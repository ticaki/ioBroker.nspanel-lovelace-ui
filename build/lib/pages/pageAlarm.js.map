{
  "version": 3,
  "sources": ["../../../src/lib/pages/pageAlarm.ts"],
  "sourcesContent": ["import type { BaseTriggeredPage } from '../classes/baseClassPage';\nimport { Page } from '../classes/Page';\nimport { type PageInterface } from '../classes/PageInterface';\nimport { Color } from '../const/Color';\nimport { genericStateObjects } from '../const/definition';\nimport { Icons } from '../const/icon_mapping';\nimport { getPayload, getPayloadRemoveTilde } from '../const/tools';\nimport type * as pages from '../types/pages';\nimport * as globals from '../types/function-and-const';\nimport type { IncomingEvent, nsPanelState } from '../types/types';\n\nconst PageAlarmMessageDefault: pages.PageAlarmMessage = {\n    event: 'entityUpd',\n    headline: 'Page Grid',\n    intNameEntity: '',\n    navigation: 'button~bSubPrev~~~~~button~bSubNext~~~~',\n    button1: '',\n    status1: '',\n    button2: '',\n    status2: '',\n    button3: '',\n    status3: '',\n    button4: '',\n    status4: '',\n    icon: '',\n    iconColor: '',\n    numpad: 'disable',\n    flashing: 'disable',\n};\nconst alarmStates: pages.AlarmStates[] = ['disarmed', 'armed', 'arming', 'pending', 'triggered'];\n\n/**\n * Page implementation for alarm/unlock card behaviour.\n *\n * This class is responsible for managing the alarm card state machine\n * (armed / disarmed / arming / pending / triggered) and for building\n * the payload that will be sent to the panel. It also reacts to configured\n * data items (approved, pin, etc.) and handles button actions coming from\n * the touch panel.\n *\n * Note: The Page lifecycle follows the base Page class contract. Important\n * public methods that are invoked by the Page controller are documented below\n * (init, update, onButtonEvent).\n */\nexport class PageAlarm extends Page {\n    private status: pages.AlarmStates = 'armed';\n    private useStates = true;\n    private alarmType: string = 'alarm';\n    private pathToStates: string = '';\n    items: pages.PageBase['items'];\n    private approveId: string = '';\n    private statusState: string = '';\n    readonly isGlobal: boolean = false;\n    private updatePanelTimeout: ioBroker.Timeout | undefined | null = null;\n    async setMode(m: pages.AlarmButtonEvents): Promise<void> {\n        if (this.useStates) {\n            await this.library.writedp(\n                `${this.pathToStates}.mode`,\n                m,\n                genericStateObjects.panel.panels.alarm.cardAlarm.mode,\n            );\n        }\n    }\n\n    /**\n     * Get the current alarm status.\n     *\n     * Reads the persisted status from the configured states (if state\n     * management is enabled) and maps numeric indices to the corresponding\n     * AlarmStates value.\n     *\n     * @returns Promise resolving to the current alarm status\n     */\n    async getStatus(): Promise<pages.AlarmStates> {\n        if (this.useStates) {\n            const state = this.library.readdb(`${this.pathToStates}.status`);\n            if (state) {\n                if (typeof state.val === 'number') {\n                    this.status = alarmStates[state.val];\n                }\n            }\n        }\n        return this.status;\n    }\n\n    /**\n     * Set the current alarm status and persist it when using states.\n     *\n     * @param value - new alarm status to set\n     * @returns Promise that resolves when the status has been persisted\n     */\n    private async setStatus(value: pages.AlarmStates): Promise<void> {\n        this.status = value;\n        if (this.useStates) {\n            await this.library.writedp(\n                `${this.pathToStates}.status`,\n                alarmStates.indexOf(this.status),\n                genericStateObjects.panel.panels.alarm.cardAlarm.status,\n            );\n        }\n        if (this.isGlobal) {\n            await this.basePanel.controller.setGlobalAlarmStatus(this.name, this.status);\n        }\n    }\n    public async setStatusGlobal(value: pages.AlarmStates): Promise<void> {\n        this.status = value;\n        this.delayUpdate();\n    }\n    private pin: string = '0';\n    private failCount: number = 0;\n    private pinFailTimeout: ioBroker.Timeout | undefined | null = null;\n\n    constructor(config: PageInterface, options: pages.PageBase) {\n        super(config, options);\n        if (options.config && options.config.card == 'cardAlarm') {\n            this.config = options.config;\n        }\n        const data = this.config?.data as pages.cardAlarmDataItemOptions['data'];\n        this.pathToStates = this.library.cleandp(`panels.${this.basePanel.name}.alarm.${this.name}`, false, false);\n        if (data?.global?.type === 'const' && !!data.global.constVal) {\n            this.isGlobal = true;\n            this.pathToStates = this.library.cleandp(`alarm.${this.name}`, false, false);\n        }\n        this.minUpdateInterval = 500;\n        this.neverDeactivateTrigger = true;\n        this.approveId = this.library.cleandp(`${this.pathToStates}.approve`, false, false);\n        this.statusState = this.library.cleandp(`${this.pathToStates}.status`, false, false);\n    }\n\n    /**\n     * Initialize the alarm page.\n     *\n     * This method prepares dataitems, default channels and initial runtime\n     * values (pin, alarmType, status). It is called during the Page\n     * initialization sequence and may perform asynchronous calls to the\n     * StatesController and adapter library.\n     *\n     * @returns Promise that resolves when initialization is complete\n     */\n    async init(): Promise<void> {\n        const config = structuredClone(this.config);\n        if (!(config?.card === 'cardAlarm' && config.data)) {\n            throw new Error('PageAlarm: invalid configuration');\n        }\n        await this.library.writedp(this.approveId, false, genericStateObjects.panel.panels.alarm.cardAlarm.approve);\n\n        config.data.approveState = {\n            type: 'triggered',\n            dp: `${this.adapter.namespace}.${this.approveId}`,\n        };\n        config.data.statusState = {\n            type: 'triggered',\n            dp: `${this.adapter.namespace}.${this.statusState}`,\n        };\n        // search states for mode auto\n        const tempConfig: Partial<pages.cardAlarmDataItemOptions> =\n            this.enums || this.dpInit\n                ? await this.basePanel.statesControler.getDataItemsFromAuto(this.dpInit, config, undefined, this.enums)\n                : config;\n        // create Dataitems\n        //this.log.debug(JSON.stringify(tempConfig));\n        const tempItem: Partial<pages.cardAlarmDataItems> = await this.basePanel.statesControler.createDataItems(\n            tempConfig,\n            this,\n        );\n        this.items = tempItem as pages.cardAlarmDataItems;\n        // set card because we lose it\n        this.items.card = 'cardAlarm';\n\n        await super.init();\n        this.useStates = true;\n        this.alarmType = (this.items?.data?.alarmType && (await this.items.data.alarmType.getString())) ?? 'alarm';\n        /*if (this.alarmType === 'unlock' && this.items?.data?.setNavi) {\n            this.useStates = true;\n        } else */ {\n            await this.library.writedp(\n                `panels.${this.basePanel.name}.alarm`,\n                undefined,\n                genericStateObjects.panel.panels.alarm._channel,\n            );\n            await this.library.writedp(`alarm`, undefined, genericStateObjects.panel.panels.alarm._channel);\n            await this.library.writedp(\n                `${this.pathToStates}`,\n                undefined,\n                genericStateObjects.panel.panels.alarm.cardAlarm._channel,\n            );\n        }\n        if (this.alarmType === 'alarm') {\n            const status = await this.getStatus();\n            if (status === 'pending') {\n                await this.setStatus('armed');\n            } else if (status === 'arming') {\n                await this.setStatus('disarmed');\n            } else {\n                await this.setStatus(this.status);\n            }\n\n            await this.library.writedp(\n                `${this.pathToStates}.mode`,\n                '',\n                genericStateObjects.panel.panels.alarm.cardAlarm.mode,\n            );\n        } else {\n            await this.setStatus('armed');\n        }\n        this.pin =\n            (this.items && this.items.data && this.items.data.pin && (await this.items.data.pin.getString())) ?? '';\n        if (this.pin == '-1') {\n            this.pin = this.adapter.config.pw1 ? this.adapter.config.pw1 : '';\n        }\n    }\n\n    /**\n     * Build the current message payload and send it to the panel.\n     *\n     * The message is assembled from the configured dataitems and the\n     * internal alarm status. If the page is not visible or incorrectly\n     * configured the update is skipped.\n     *\n     * @returns Promise that resolves after the message was sent (or skipped)\n     */\n    public async update(): Promise<void> {\n        if (!this.visibility || this.unload || this.adapter.unload) {\n            return;\n        }\n        const message: Partial<pages.PageAlarmMessage> = {};\n        const items = this.items;\n        if (!items || items.card !== 'cardAlarm') {\n            return;\n        }\n        const data = items.data;\n        await this.getStatus();\n        message.intNameEntity = this.id;\n        message.headline = (data.headline && (await data.headline.getTranslatedString())) ?? this.name;\n        message.navigation = this.getNavigation();\n        if (this.alarmType === 'alarm') {\n            if (this.status === 'armed' && !this.pinFailTimeout) {\n                message.button1 = (data.button5 && (await data.button5.getTranslatedString())) ?? '';\n                message.status1 = message.button1 ? 'D1' : '';\n                message.button2 = (data.button6 && (await data.button6.getTranslatedString())) ?? '';\n                message.status2 = message.button2 ? 'D2' : '';\n                message.button3 = (data.button7 && (await data.button7.getTranslatedString())) ?? '';\n                message.status3 = message.button3 ? 'D3' : '';\n                message.button4 = (data.button8 && (await data.button8.getTranslatedString())) ?? '';\n                message.status4 = message.button4 ? 'D4' : '';\n            } else if (this.status === 'disarmed' && !this.pinFailTimeout) {\n                //const entity1 = await getValueEntryNumber(data.entity1);\n                message.button1 = (data.button1 && (await data.button1.getTranslatedString())) ?? '';\n                message.status1 = message.button1 ? 'A1' : '';\n                message.button2 = (data.button2 && (await data.button2.getTranslatedString())) ?? '';\n                message.status2 = message.button2 ? 'A2' : '';\n                message.button3 = (data.button3 && (await data.button3.getTranslatedString())) ?? '';\n                message.status3 = message.button3 ? 'A3' : '';\n                message.button4 = (data.button4 && (await data.button4.getTranslatedString())) ?? '';\n                message.status4 = message.button4 ? 'A4' : '';\n            } else if (this.pinFailTimeout) {\n                message.button1 = `${this.library.getTranslation('locked_for')}`;\n                message.status1 = '';\n                message.button2 = ` ${2 ** this.failCount} s`;\n                message.status2 = '';\n                message.button3 = '';\n                message.status3 = '';\n                message.button4 = '';\n                message.status4 = '';\n            } else {\n                message.button1 = this.library.getTranslation(this.status);\n                message.status1 = '';\n                message.button2 = '';\n                message.status2 = '';\n                message.button3 = '';\n                message.status3 = '';\n                message.button4 = '';\n                message.status4 = '';\n            }\n            if (this.pinFailTimeout) {\n                message.icon = Icons.GetIcon('key-alert-outline'); //icon*~*\n                message.iconColor = String(Color.rgb_dec565({ r: 255, g: 0, b: 0 })); //iconcolor*~*\n                message.numpad = 'disable'; //numpadStatus*~*\n                message.flashing = 'enable'; //flashing*\n            } else if (this.status == 'armed') {\n                message.icon = Icons.GetIcon('shield-home'); //icon*~*\n                message.iconColor = '63488'; //iconcolor*~*\n                message.numpad = 'enable'; //numpadStatus*~*\n                message.flashing = 'disable'; //flashing*\n            } else if (this.status == 'disarmed') {\n                message.icon = Icons.GetIcon('shield-off'); //icon*~*\n                message.iconColor = String(Color.rgb_dec565(Color.Green)); //iconcolor*~*\n                message.numpad = 'enable'; //numpadStatus*~*\n                message.flashing = 'disable'; //flashing*\n            } else if (this.status == 'arming' || this.status == 'pending') {\n                message.icon = Icons.GetIcon('shield'); //icon*~*\n                message.iconColor = String(Color.rgb_dec565({ r: 243, g: 179, b: 0 })); //iconcolor*~*\n                message.numpad = 'disable'; //numpadStatus*~*\n                message.flashing = 'enable'; //flashing*\n            } else if (this.status == 'triggered') {\n                message.icon = Icons.GetIcon('bell-ring'); //icon*~*\n                message.iconColor = String(Color.rgb_dec565({ r: 223, g: 76, b: 30 })); //iconcolor*~*\n                message.numpad = 'enable'; //numpadStatus*~*\n                message.flashing = 'enable'; //flashing*\n            }\n        } else if (this.alarmType === 'unlock') {\n            if (this.status == 'triggered') {\n                message.button1 = this.library.getTranslation('locked');\n                message.status1 = '';\n                message.button2 = '';\n                message.status2 = '';\n                message.button3 = '';\n                message.status3 = '';\n                message.button4 = '';\n                message.status4 = '';\n                message.icon = Icons.GetIcon('lock-off'); //icon*~*\n                message.iconColor = String(Color.rgb_dec565({ r: 255, g: 0, b: 0 })); //iconcolor*~*\n                message.numpad = 'disable'; //numpadStatus*~*\n                message.flashing = 'enable'; //flashing*\n            } else {\n                message.button1 = this.library.getTranslation('unlock');\n                message.status1 = 'U1';\n                message.button2 = '';\n                message.status2 = '';\n                message.button3 = '';\n                message.status3 = '';\n                message.button4 = '';\n                message.status4 = '';\n                message.icon = Icons.GetIcon('lock-remove'); //icon*~*\n                message.iconColor = String(Color.rgb_dec565({ r: 223, g: 76, b: 30 })); //iconcolor*~*\n                message.numpad = 'enable'; //numpadStatus*~*\n                message.flashing = 'enable'; //flashing*\n            }\n        }\n        //message.icon = await getIconEntryValue(data.icon, true, 'shield-home');\n        //message.iconColor = await getIconEntryColor(data.icon, true, '');\n        //message.numpad = 'enable';\n        //message.flashing = 'enable';\n\n        this.sendToPanel(this.getMessage(message), false);\n    }\n\n    private getMessage(message: Partial<pages.PageAlarmMessage>): string {\n        let result: pages.PageAlarmMessage = PageAlarmMessageDefault;\n        result = { ...result, ...message } as pages.PageAlarmMessage;\n        return getPayload(\n            getPayloadRemoveTilde('entityUpd', result.headline),\n            result.navigation,\n            getPayloadRemoveTilde(\n                result.intNameEntity,\n                result.button1,\n                result.status1,\n                result.button2,\n                result.status2,\n                result.button3,\n                result.status3,\n                result.button4,\n                result.status4,\n                result.icon,\n                result.iconColor,\n                result.numpad,\n                result.flashing,\n            ),\n        );\n    }\n\n    async onStateChange(\n        id: string,\n        _state: {\n            old: nsPanelState;\n            new: nsPanelState;\n        },\n    ): Promise<void> {\n        if (this.unload || this.adapter.unload) {\n            return;\n        }\n        if (id && !_state.new.ack && this.items?.card === 'cardAlarm') {\n            if (id === this.items?.data?.approveState?.options?.dp) {\n                const approved = this.items.data && (await this.items.data.approved?.getBoolean());\n                if (approved) {\n                    if (this.updatePanelTimeout) {\n                        this.adapter.clearTimeout(this.updatePanelTimeout);\n                        this.updatePanelTimeout = null;\n                    }\n                    await this.getStatus();\n                    const val = _state.new.val;\n                    if (val) {\n                        if (this.status === 'pending') {\n                            await this.setStatus('disarmed');\n                        } else if (this.status === 'arming') {\n                            await this.setStatus('armed');\n                        }\n                    } else {\n                        if (this.status === 'pending') {\n                            await this.setStatus('armed');\n                        } else if (this.status === 'arming') {\n                            await this.setStatus('disarmed');\n                        }\n                    }\n                    await this.adapter.setForeignStateAsync(id, !!val, true);\n                    if (this.unload || this.adapter.unload) {\n                        return;\n                    }\n\n                    this.delayUpdate();\n                }\n            }\n            if (id === this.items?.data?.statusState?.options?.dp && typeof _state.new.val === 'number') {\n                if (this.updatePanelTimeout) {\n                    this.adapter.clearTimeout(this.updatePanelTimeout);\n                    this.updatePanelTimeout = null;\n                }\n                await this.setStatus(_state.new.val in alarmStates ? alarmStates[_state.new.val] : 'disarmed');\n                if (this.unload || this.adapter.unload) {\n                    return;\n                }\n                this.delayUpdate();\n            }\n        }\n    }\n\n    protected async onStateTrigger(_dp: string, _from: BaseTriggeredPage): Promise<void> {\n        // ignore\n    }\n    /**\n     * Handle a button event coming from the panel.\n     *\n     * The incoming event contains the action code (A1/A2/A3/A4/D1/U1/...) and\n     * an optional value (for example a numeric PIN). This method validates\n     * the PIN (when configured), updates the internal status machine and\n     * triggers the configured mode/state writes.\n     *\n     * @param _event - event payload from the touch panel\n     * @returns Promise that resolves after the event has been handled\n     */\n    async onButtonEvent(_event: IncomingEvent): Promise<void> {\n        if (this.unload || this.adapter.unload) {\n            return;\n        }\n        const button = _event.action;\n        const value = _event.opt;\n        if (!this.items || this.items.card !== 'cardAlarm') {\n            return;\n        }\n        const approved = this.items.data && (await this.items.data.approved?.getBoolean());\n\n        if (globals.isAlarmButtonEvent(button)) {\n            await this.getStatus();\n            if (this.status === 'triggered') {\n                return;\n            }\n\n            /*if (this.pin === 0) {\n                this.log.warn(`Pin is missing`);\n                return;\n            }*/\n            if (this.pin && this.pin != value) {\n                this.log.warn(\n                    `Wrong pin entered. try ${this.failCount}! Delay next attempt by ${2 ** ++this.failCount} seconds`,\n                );\n\n                this.pinFailTimeout = this.adapter.setTimeout(\n                    async () => {\n                        this.pinFailTimeout = null;\n                        void this.update();\n                    },\n                    2 ** this.failCount * 1000,\n                );\n                await this.update();\n                return;\n            }\n            this.failCount = 0;\n            this.log.debug(`Alarm event ${button} value: ${value}`);\n            switch (button) {\n                case 'A1':\n                case 'A2':\n                case 'A3':\n                case 'A4': {\n                    if (this.status === 'disarmed' && approved) {\n                        await this.setStatus('arming');\n                        await this.setMode(button);\n                        if (this.unload || this.adapter.unload) {\n                            return;\n                        }\n                        this.delayUpdate();\n                    } else if (this.status === 'arming') {\n                        // nothing to do\n                    } else if (!approved) {\n                        await this.setStatus('armed');\n                        await this.setMode(button);\n                        if (this.unload || this.adapter.unload) {\n                            return;\n                        }\n                        this.delayUpdate();\n                    }\n                    break;\n                }\n                case 'D1':\n                case 'D2':\n                case 'D3':\n                case 'D4': {\n                    if (this.status === 'armed' && approved) {\n                        await this.setStatus('pending');\n                        await this.setMode(button);\n                        if (this.unload || this.adapter.unload) {\n                            return;\n                        }\n                        this.delayUpdate();\n                    } else if (this.status === 'pending') {\n                        // nothing to do\n                    } else if (!approved) {\n                        await this.setStatus('disarmed');\n                        await this.setMode(button);\n                        if (this.unload || this.adapter.unload) {\n                            return;\n                        }\n                        this.delayUpdate();\n                    }\n\n                    break;\n                }\n                case 'U1': {\n                    const entry = this.items;\n                    const item = entry.data;\n                    const value: any = (item.setNavi && (await item.setNavi.getString())) ?? null;\n                    if (value !== null) {\n                        await this.basePanel.navigation.setTargetPageByName(value);\n                        break;\n                    }\n                    await this.setStatus('disarmed');\n                    await this.setStatus('armed');\n                    break;\n                }\n            }\n        }\n        //if (event.page && event.id && this.pageItems) {\n        //    this.pageItems[event.id as any].setPopupAction(event.action, event.opt);\n        //}\n    }\n\n    delayUpdate(): void {\n        if (this.updatePanelTimeout) {\n            this.adapter.clearTimeout(this.updatePanelTimeout);\n            this.updatePanelTimeout = null;\n        }\n        if (this.unload || this.adapter.unload) {\n            return;\n        }\n        this.updatePanelTimeout = this.adapter.setTimeout(\n            () => {\n                this.updatePanelTimeout = null;\n                void this.update();\n            },\n            50 + Math.ceil(Math.random() * 50),\n        );\n    }\n    async delete(): Promise<void> {\n        if (this.updatePanelTimeout) {\n            this.adapter.clearTimeout(this.updatePanelTimeout);\n            this.updatePanelTimeout = null;\n        }\n        if (this.pinFailTimeout) {\n            this.adapter.clearTimeout(this.pinFailTimeout);\n            this.pinFailTimeout = null;\n        }\n        await super.delete();\n    }\n}\n"],
  "mappings": "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",
  "names": ["value"]
}
