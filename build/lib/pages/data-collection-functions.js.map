{
  "version": 3,
  "sources": ["../../../src/lib/pages/data-collection-functions.ts"],
  "sourcesContent": ["import { Page } from '../classes/Page';\nimport { AdapterClassDefinition } from '../classes/library';\nimport { Color } from '../const/Color';\nimport { CardRole } from '../types/pages';\nimport { PageItemDataItemsOptions } from '../types/type-pageItem';\nimport { PageEntities } from './pageEntities';\n\nexport async function handleCardRole(\n    adapter: AdapterClassDefinition,\n    cardRole: CardRole | undefined,\n    page?: Page | PageEntities,\n): Promise<PageItemDataItemsOptions[] | null> {\n    if (!cardRole) return null;\n    switch (cardRole) {\n        /**\n         * only for enabled adapters\n         */\n        case 'AdapterConnection':\n        case 'AdapterStopped': {\n            const list = await adapter.getObjectViewAsync('system', 'instance', {\n                startkey: `system.adapter`,\n                endkey: `system.adapter}`,\n            });\n            if (!list) return null;\n            const result = [];\n            for (const item of list.rows) {\n                const obj = item.value;\n                if (!obj.common.enabled || obj.common.mode !== 'daemon') continue;\n                let n = obj.common.titleLang && obj.common.titleLang[adapter.library.getLocalLanguage()];\n                n = n ? n : obj.common.titleLang && obj.common.titleLang['en'];\n                n = n ? n : obj.common.name;\n                // ignore this\n                if (item.id.split('.').slice(2).join('.') === adapter.namespace) continue;\n\n                const stateID =\n                    cardRole === 'AdapterConnection'\n                        ? `${item.id.split('.').slice(2).join('.')}.info.connection`\n                        : `${item.id}.alive`;\n                const stateObj = await adapter.getForeignObjectAsync(stateID);\n                if (!stateObj || !stateObj.common || stateObj.common.type !== 'boolean') continue;\n\n                const pi: PageItemDataItemsOptions = {\n                    role: '',\n                    type: 'text',\n                    dpInit: '',\n\n                    data: {\n                        icon: {\n                            true: {\n                                value: { type: 'const', constVal: 'checkbox-intermediate' },\n                                color: { type: 'const', constVal: Color.good },\n                            },\n                            false: {\n                                value: { type: 'const', constVal: 'checkbox-intermediate' },\n                                color: {\n                                    type: 'const',\n                                    constVal: cardRole === 'AdapterConnection' ? Color.good : Color.bad,\n                                },\n                            },\n                            scale: undefined,\n                            maxBri: undefined,\n                            minBri: undefined,\n                        },\n                        entity1: {\n                            value: {\n                                type: 'triggered',\n                                dp: stateID,\n                            },\n                        },\n                        text: {\n                            true: { type: 'const', constVal: n },\n                            false: undefined,\n                        },\n                        text1: {\n                            true: { type: 'const', constVal: obj.common.version },\n                            false: undefined,\n                        },\n                    },\n                };\n                result.push(pi);\n            }\n            return result;\n        }\n        case 'AdapterUpdates': {\n            if (\n                !page ||\n                page.card !== 'cardEntities' ||\n                !('items' in page) ||\n                !page.items ||\n                page.items.card !== 'cardEntities'\n            )\n                return null;\n            if (!page.items.data.list) return null;\n            const value = (await page.items.data.list.getObject()) as any;\n            if (value && page.items.data.list.options.type !== 'const') {\n                const dp = page.items.data.list.options.dp;\n                const result = [];\n                for (const a in value) {\n                    const pi: PageItemDataItemsOptions = {\n                        role: '',\n                        type: 'text',\n                        dpInit: '',\n\n                        data: {\n                            icon: {\n                                true: {\n                                    value: { type: 'const', constVal: 'checkbox-intermediate' },\n                                    color: { type: 'const', constVal: Color.good },\n                                },\n                                false: {\n                                    value: { type: 'const', constVal: 'checkbox-intermediate' },\n                                    color: { type: 'const', constVal: Color.bad },\n                                },\n                            },\n                            entity1: {\n                                value: {\n                                    type: 'triggered',\n                                    dp: dp,\n                                    read: `return !!val`,\n                                },\n                            },\n                            text: {\n                                true: {\n                                    type: 'const',\n                                    constVal: a,\n                                },\n                                false: undefined,\n                            },\n                            text1: {\n                                true: {\n                                    type: 'state',\n                                    dp: dp,\n                                    read: `if (!val || !val.startsWith('{') || !val.endsWith('}')) return '';\n                                    const v = JSON.parse(val)\n                                    return (\n                                        v['${a}'] ? ('v' + v['${a}'].installedVersion.trim() + \"\\\\r\\\\nv\" + (v['${a}'].availableVersion.trim() + '  ' )) : 'done'\n                                    );`,\n                                },\n\n                                false: undefined,\n                            },\n                        },\n                    };\n                    result.push(pi);\n                }\n                return result;\n            }\n        }\n    }\n    return null;\n}\n"],
  "mappings": "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",
  "names": []
}
