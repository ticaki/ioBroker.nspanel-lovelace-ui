{
  "version": 3,
  "sources": ["../../../src/lib/pages/data-collection-functions.ts"],
  "sourcesContent": ["import type { Page } from '../classes/Page';\nimport type { AdapterClassDefinition } from '../classes/library';\nimport { Color } from '../const/Color';\nimport { getStringFromStringOrTranslated } from '../const/tools';\nimport { exhaustiveCheck, type CardRole, type PageMenuConfig } from '../types/pages';\nimport type { PageItemDataItemsOptions } from '../types/type-pageItem';\nimport type { PageEntities } from './pageEntities';\nimport type { PageMedia } from './pageMedia';\n\n/**\n * Handles the role of a card and returns the corresponding page item data options.\n *\n * @param adapter - The adapter instance used to interact with the system.\n * @param cardRole - The role of the card to handle. It can be 'AdapterConnection', 'AdapterStopped', or 'AdapterUpdates'.\n * @param [page] - The page instance, required for 'AdapterUpdates' role.\n * @param _tempArr\n * @param _options\n * @returns A promise that resolves to an array of page item data options or null if no data is found.\n * @description\n * This function processes different card roles and retrieves the corresponding data items based on the role.\n * It supports the following roles:\n *\n * - 'AdapterConnection': Retrieves data items for enabled adapters with a 'daemon' mode.\n * - 'AdapterStopped': Retrieves data items for stopped adapters.\n * - 'AdapterUpdates': Retrieves data items for adapter updates.\n *\n * For 'AdapterConnection' and 'AdapterStopped' roles, the function fetches the list of system instances and filters them based on their enabled state and mode.\n * It then constructs the page item data options for each adapter instance.\n *\n * For the 'AdapterUpdates' role, the function checks if the page is of type 'cardEntities' and retrieves the list of updates from the page's data list.\n * It then constructs the page item data options for each update.\n * @example\n * const adapter = new AdapterClassDefinition();\n * const cardRole = 'AdapterConnection';\n * const page = new Page();\n * const result = await handleCardRole(adapter, cardRole, page);\n * console.log(result);\n */\nexport async function handleCardRole(\n    adapter: AdapterClassDefinition,\n    cardRole: CardRole | undefined,\n    page?: Page | PageEntities,\n    _options?: PageMenuConfig['options'],\n): Promise<PageItemDataItemsOptions[] | null> {\n    if (!cardRole) {\n        return null;\n    }\n    switch (cardRole) {\n        /**\n         * only for enabled adapters\n         */\n        case 'AdapterConnection':\n        case 'AdapterStopped': {\n            const list = await adapter.getObjectViewAsync('system', 'instance', {\n                startkey: `system.adapter`,\n                endkey: `system.adapter}`,\n            });\n            if (!list) {\n                return null;\n            }\n            const result = [];\n            for (const item of list.rows) {\n                const obj = item.value;\n                if (!obj.common.enabled || obj.common.mode !== 'daemon') {\n                    continue;\n                }\n                let n =\n                    obj.common.titleLang &&\n                    typeof obj.common.titleLang == 'object' &&\n                    obj.common.titleLang[adapter.library.getLocalLanguage()];\n                n = n ? n : typeof obj.common.titleLang == 'object' && obj.common.titleLang.en;\n                n = n ? n : obj.common.name;\n                // ignore this\n                if (item.id.split('.').slice(2).join('.') === adapter.namespace) {\n                    continue;\n                }\n\n                const stateID =\n                    cardRole === 'AdapterConnection'\n                        ? `${item.id.split('.').slice(2).join('.')}.info.connection`\n                        : `${item.id}.alive`;\n                const stateObj = await adapter.getForeignObjectAsync(stateID);\n                if (!stateObj || !stateObj.common || stateObj.common.type !== 'boolean') {\n                    continue;\n                }\n\n                const pi: PageItemDataItemsOptions = {\n                    role: '',\n                    type: 'text',\n                    dpInit: '',\n\n                    data: {\n                        icon: {\n                            true: {\n                                value: { type: 'const', constVal: 'checkbox-intermediate' },\n                                color: { type: 'const', constVal: Color.good },\n                            },\n                            false: {\n                                value: { type: 'const', constVal: 'checkbox-intermediate' },\n                                color: {\n                                    type: 'const',\n                                    constVal: cardRole === 'AdapterConnection' ? Color.good : Color.bad,\n                                },\n                            },\n                            scale: undefined,\n                            maxBri: undefined,\n                            minBri: undefined,\n                        },\n                        entity1: {\n                            value: {\n                                type: 'triggered',\n                                dp: stateID,\n                            },\n                        },\n                        text: {\n                            true: { type: 'const', constVal: n },\n                            false: undefined,\n                        },\n                        text1: {\n                            true: { type: 'const', constVal: obj.common.version },\n                            false: undefined,\n                        },\n                    },\n                };\n                result.push(pi);\n            }\n            return result;\n        }\n        case 'AdapterUpdates':\n            {\n                if (\n                    !page ||\n                    page.card !== 'cardEntities' ||\n                    !('items' in page) ||\n                    !page.items ||\n                    page.items.card !== 'cardEntities'\n                ) {\n                    return null;\n                }\n                if (!page.items.data.list) {\n                    return null;\n                }\n                const value = (await page.items.data.list.getObject()) as any;\n                if (value && page.items.data.list.options.type !== 'const') {\n                    const dp = page.items.data.list.options.dp;\n                    const result = [];\n                    for (const a in value) {\n                        const pi: PageItemDataItemsOptions = {\n                            role: '',\n                            type: 'text',\n                            dpInit: '',\n\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: { type: 'const', constVal: 'checkbox-intermediate' },\n                                        color: { type: 'const', constVal: Color.good },\n                                    },\n                                    false: {\n                                        value: { type: 'const', constVal: 'checkbox-intermediate' },\n                                        color: { type: 'const', constVal: Color.bad },\n                                    },\n                                },\n                                entity1: {\n                                    value: {\n                                        type: 'triggered',\n                                        dp: dp,\n                                        read: `return !!val`,\n                                    },\n                                },\n                                text: {\n                                    true: {\n                                        type: 'const',\n                                        constVal: a,\n                                    },\n                                    false: undefined,\n                                },\n                                text1: {\n                                    true: {\n                                        type: 'state',\n                                        dp: dp,\n                                        read: `if (!val || !val.startsWith('{') || !val.endsWith('}')) return '';\n                                    const v = JSON.parse(val)\n                                    return (\n                                        v['${a}'] ? ('v' + v['${a}'].installedVersion.trim() + \"\\\\r\\\\nv\" + (v['${a}'].availableVersion.trim() + '  ' )) : 'done'\n                                    );`,\n                                    },\n\n                                    false: undefined,\n                                },\n                            },\n                        };\n                        result.push(pi);\n                    }\n                    return result;\n                }\n            }\n            break;\n        case 'SonosSpeaker':\n            {\n                let result: PageItemDataItemsOptions[] | null = null;\n                const _tempArr = _options?.cardRoleList;\n                //const ident = _options?.indentifier ?? '';\n                if (!((!_tempArr || Array.isArray(_tempArr)) && page && page.directParentPage)) {\n                    return null;\n                }\n                /*if (ident || !(typeof ident === 'string')) {\n                    adapter.log.error(` SonosSpeaker cardRole needs a string dpInit in page.parent.dpInit`);\n                    return null;\n                }*/\n                if (\n                    page.directParentPage.card !== 'cardMedia' ||\n                    (page.directParentPage as PageMedia).currentItem == null\n                ) {\n                    break;\n                }\n                const identifier = `${(page.directParentPage as PageMedia).currentItem?.ident}`;\n                const searchPath = identifier.split('.').slice(0, 3).join('.');\n                const view = await adapter.getObjectViewAsync('system', 'channel', {\n                    startkey: `${searchPath}.`,\n                    endkey: `${searchPath}${String.fromCharCode(0xff_fd)}`,\n                });\n                const selects: { name: string; id: string }[] = [];\n                if (view && view.rows && view.rows.length !== 0) {\n                    if (_tempArr && _tempArr.length > 0) {\n                        view.rows\n                            .filter(v =>\n                                _tempArr.includes(getStringFromStringOrTranslated(adapter, v.value.common.name)),\n                            )\n                            .forEach(v => {\n                                selects.push({\n                                    name: getStringFromStringOrTranslated(adapter, v.value.common.name),\n                                    id: v.id,\n                                });\n                            });\n                    } else {\n                        view.rows.forEach(v =>\n                            selects.push({\n                                name: getStringFromStringOrTranslated(adapter, v.value.common.name),\n                                id: v.id,\n                            }),\n                        );\n                    }\n                }\n                let arr =\n                    _tempArr && _tempArr.length > 0\n                        ? selects.filter(t => _tempArr.findIndex(s => s === t.name) !== -1)\n                        : selects;\n                arr = arr.concat((_tempArr ?? []).map(n => ({ name: n, id: `` })));\n                const seen = new Set();\n                arr = arr.filter(item => item && !seen.has(item.name) && seen.add(item.name));\n                arr = arr.sort((a, b) => a.name.localeCompare(b.name));\n\n                result = [];\n                for (let i = 0; i < arr.length; i++) {\n                    const val = arr[i].name.trim();\n                    const id = arr[i].id.trim();\n                    if (!val) {\n                        continue;\n                    }\n                    result.push({\n                        role: 'volume.mute',\n                        type: 'light',\n                        dpInit: '',\n                        data: {\n                            entity1: {\n                                value: {\n                                    type: 'triggered',\n                                    dp: `${identifier}.members`,\n                                    read: `\n                                            if (typeof val === 'string') {                                                    \n                                                const t = val.split(',').map(s => s.trim());\n                                                return t.includes('${val}');\n                                            };\n                                            return false;`,\n                                },\n                            },\n                            headline: { type: 'const', constVal: val },\n                            dimmer: {\n                                value: {\n                                    //mode: 'auto',\n                                    type: 'triggered',\n                                    //regexp: /\\.volume$/,\n                                    dp: `${id}.volume`,\n                                },\n                                minScale: { type: 'const', constVal: _options?.min ?? 0 },\n                                maxScale: { type: 'const', constVal: _options?.max ?? 100 },\n                            },\n                            icon: {\n                                true: {\n                                    value: { type: 'const', constVal: 'speaker' },\n                                    color: { type: 'const', constVal: Color.on },\n                                },\n                                false: {\n                                    value: { type: 'const', constVal: 'speaker' },\n                                    color: { type: 'const', constVal: Color.off },\n                                },\n                            },\n                            setValue1: {\n                                type: 'state',\n                                dp: `${identifier}.add_to_group`,\n                                write: `if (val) return '${val}'; else return '';`,\n                            },\n                            setValue2: {\n                                type: 'state',\n                                dp: `${identifier}.remove_from_group`,\n                                write: `if (val) return '${val}'; else return '';`,\n                            },\n                        },\n                    });\n                }\n                return result;\n            }\n            break;\n        default: {\n            exhaustiveCheck(cardRole);\n            return null;\n        }\n    }\n    return null;\n}\n"],
  "mappings": "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",
  "names": []
}
