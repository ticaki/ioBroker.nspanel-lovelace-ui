{
  "version": 3,
  "sources": ["../../../src/lib/pages/pageItem.ts"],
  "sourcesContent": ["import * as Color from '../const/Color';\nimport { Page, PageItemInterface } from '../classes/Page';\nimport * as typePageItem from '../types/type-pageItem';\nimport * as tools from '../const/tools';\nimport { PopupType } from '../types/types';\nimport { Panel } from '../controller/panel';\nimport { BaseClassTriggerd } from '../controller/states-controller';\nimport { RGB } from '../const/Color';\nimport { Icons } from '../const/icon_mapping';\nimport { Dataitem } from '../classes/data-item';\nimport { ChangeTypeOfKeys, DeviceRole } from '../types/pages';\n\n//light, shutter, delete, text, button, switch, number,input_sel, timer und fan types\nexport class PageItem extends BaseClassTriggerd {\n    defaultOnColor = Color.White;\n    defaultOffColor = Color.Blue;\n    config: typePageItem.PageItemDataItemsOptionsWithOutTemplate | undefined;\n    dataItems: typePageItem.PageItemDataItems | undefined;\n    panel: Panel;\n    id: string;\n    lastPopupType: PopupType | undefined = undefined;\n    parent: Page | undefined;\n    tempData: any = undefined; // use this to save some data while object is active\n    tempInterval: ioBroker.Interval | undefined;\n    constructor(\n        config: Omit<PageItemInterface, 'pageItemsConfig'>,\n        options: typePageItem.PageItemDataItemsOptionsWithOutTemplate | undefined,\n    ) {\n        super({ ...config });\n        this.panel = config.panel;\n        this.id = config.id;\n        this.config = options;\n        this.parent = config && config.parent;\n        this.name = this.parent ? this.parent.name + '.' + this.id : this.id;\n        this.sleep = false;\n    }\n\n    static getPageItem(\n        config: Omit<PageItemInterface, 'pageItemsConfig'>,\n        options: typePageItem.PageItemDataItemsOptions | undefined,\n    ): PageItem | undefined {\n        if (options === undefined) return undefined;\n        if (config.panel.persistentPageItems[config.id]) return config.panel.persistentPageItems[config.id];\n        return new PageItem(config, options as typePageItem.PageItemDataItemsOptionsWithOutTemplate);\n    }\n    async init(): Promise<void> {\n        if (!this.config) return;\n        const config = structuredClone(this.config);\n        /*// search states for mode auto\n        const dpInit = (this.parent && this.parent.dpInit ? this.parent.dpInit : this.config.dpInit) ?? '';\n        const tempConfig: Partial<PageItemDataItemsOptions['data']> = dpInit\n            ? await this.panel.statesControler.getDataItemsFromAuto(dpInit, config.data)\n            : config.data;*/\n        // create Dataitems\n        //this.log.debug(JSON.stringify(tempConfig));\n        const tempItem: typePageItem.PageItemDataItems['data'] = (await this.panel.statesControler.createDataItems(\n            config.data,\n            this,\n        )) as typePageItem.PageItemDataItems['data'];\n        this.dataItems = { ...config, data: tempItem } as typePageItem.PageItemDataItems;\n\n        switch (this.dataItems.type) {\n            case 'number':\n            case 'button':\n                break;\n            case 'shutter': {\n                const data = this.dataItems.data;\n                this.tempData = [];\n                this.tempData[0] = data.up && data.up.writeable;\n                this.tempData[1] = data.stop && data.stop.writeable;\n                this.tempData[2] = data.down && data.down.writeable;\n                this.tempData[3] = data.up2 && data.up2.writeable;\n                this.tempData[4] = data.stop2 && data.stop2.writeable;\n                this.tempData[5] = data.down2 && data.down2.writeable;\n                const list = await this.getListCommands(data.setList);\n                if (list) {\n                    for (let a = 0; a < 6; a++) {\n                        const test =\n                            list &&\n                            list[a] &&\n                            list[a].id &&\n                            (await this.panel.statesControler.getObjectAsync(list[a].id));\n                        if (test && test.common && test.common.write) this.tempData[a] = true;\n                    }\n                }\n                if (data.entity1 && data.entity1.value) {\n                    if (\n                        (data.entity1.value.type === 'number' &&\n                            data.entity1.minScale &&\n                            data.entity1.maxScale &&\n                            data.entity1.value &&\n                            data.entity1.value.writeable) ||\n                        (data.entity1.value.type === 'boolean' && data.entity1.value && data.entity1.value.writeable)\n                    ) {\n                        this.tempData[1] = true;\n                        this.tempData[3] = true;\n                    }\n                }\n\n                if (data.entity2 && data.entity2.value) {\n                    if (\n                        data.entity2.value.type === 'number' &&\n                        data.entity2.minScale &&\n                        data.entity2.maxScale &&\n                        data.entity2.value &&\n                        data.entity2.value.writeable\n                    ) {\n                        this.tempData[3] = true;\n                        this.tempData[5] = true;\n                    }\n                }\n\n                break;\n            }\n            case 'input_sel':\n            case 'light':\n            case 'text':\n            case 'fan': {\n                break;\n            }\n            case 'timer': {\n                if (this.dataItems.role === 'timer' && this.tempData === undefined) {\n                    this.tempData = { status: 'pause', value: 0 };\n                    if (!this.panel.persistentPageItems[this.id]) this.panel.persistentPageItems[this.id] = this;\n                }\n                break;\n            }\n        }\n        if (this.parent && (this.parent.card === 'screensaver' || this.parent.card === 'screensaver2')) {\n            if (!this.panel.persistentPageItems[this.id]) {\n                if (this.config.modeScr) {\n                    switch (this.config.modeScr) {\n                        case 'left':\n                        case 'bottom':\n                        case 'indicator':\n                        case 'alternate':\n                        case 'favorit':\n                        case 'mricon':\n                            break;\n                        case 'time':\n                        case 'date':\n                            this.neverDeactivateTrigger = true;\n                            break;\n                    }\n                }\n\n                this.panel.persistentPageItems[this.id] = this;\n                await this.controller.statesControler.activateTrigger(this);\n            }\n        }\n    }\n\n    async getPageItemPayload(): Promise<string> {\n        await this.controller.statesControler.activateTrigger(this);\n        this.lastPopupType = undefined;\n        if (this.dataItems && this.config) {\n            this.visibility = false;\n            this.triggerParent = true;\n            const entry = this.dataItems;\n            const message: Partial<typePageItem.MessageItem> = {};\n            message.intNameEntity = this.id;\n            switch (entry.type) {\n                case 'light': {\n                    const item = entry.data;\n                    message.type = 'light';\n\n                    const v = await tools.getValueEntryBoolean(item.entity1);\n                    const dimmer = (item.dimmer && item.dimmer.value && (await item.dimmer.value.getNumber())) ?? null;\n                    let rgb: RGB | null =\n                        (await tools.getRGBfromRGBThree(item)) ??\n                        (item.color && item.color.true && (await item.color.true.getRGBValue())) ??\n                        null;\n                    const nhue = (item.hue && (await item.hue.getNumber())) ?? null;\n                    if (rgb === null && nhue) rgb = Color.hsv2RGB(nhue, 1, 1) ?? null;\n                    message.icon = await tools.getIconEntryValue(item.icon, v, '', '');\n                    const colorMode: 'ct' | 'hue' | 'none' = !item.colorMode\n                        ? 'none'\n                        : (await item.colorMode.getBoolean())\n                          ? 'hue'\n                          : 'ct';\n\n                    message.iconColor =\n                        (colorMode === 'hue'\n                            ? await tools.GetIconColor(\n                                  rgb ?? undefined,\n                                  dimmer !== null ? (dimmer > 5 ? dimmer : 5) : v,\n                              )\n                            : await tools.getTemperaturColorFromValue(item.ct, dimmer ?? 100)) ??\n                        (await tools.getIconEntryColor(item.icon, dimmer ?? v, Color.Yellow)) ??\n                        '';\n                    if (v) {\n                        message.optionalValue = '1';\n                    } else {\n                        message.optionalValue = '0';\n                    }\n                    message.displayName = this.library.getTranslation(\n                        (await tools.getEntryTextOnOff(item.headline, v)) ?? message.displayName ?? '',\n                    );\n                    return tools.getItemMesssage(message);\n                    break;\n                }\n                case 'shutter': {\n                    const item = entry.data;\n\n                    message.type = 'shutter';\n\n                    const value = await tools.getValueEntryNumber(item.entity1);\n                    if (value === null) {\n                        this.log.warn(`Entity ${this.config.role} has no value!`);\n                        break;\n                    }\n                    message.icon = await tools.getIconEntryValue(item.icon, value < 40, 'window-open');\n                    message.iconColor = await tools.getIconEntryColor(item.icon, value, Color.White);\n                    const optionalValue = item.valueList\n                        ? await item.valueList.getObject()\n                        : [\n                              'arrow-up', //up\n                              'stop', //stop\n                              'arrow-down', //down\n                          ];\n                    let optionalValueC =\n                        Array.isArray(optionalValue) && optionalValue.every((a) => typeof a === 'string')\n                            ? [...optionalValue]\n                            : ['', '', ''];\n                    optionalValueC = optionalValueC.splice(0, 3).map((a) => (a ? Icons.GetIcon(a) : a));\n                    optionalValueC.forEach((a, i) => {\n                        if (a) optionalValueC[i + 3] = this.tempData[i] ? 'enable' : 'disable';\n                        else {\n                            optionalValueC[i] = '';\n                            optionalValueC[i + 3] = 'disable';\n                        }\n                    });\n\n                    optionalValueC[3] = value === 0 ? 'disable' : optionalValueC[3];\n                    optionalValueC[5] = value === 100 ? 'disable' : optionalValueC[5];\n                    message.optionalValue = optionalValueC.join('|');\n                    message.displayName = this.library.getTranslation(\n                        (await tools.getEntryTextOnOff(item.headline, !!value)) ?? message.displayName ?? '',\n                    );\n                    return tools.getItemMesssage(message);\n                    break;\n                }\n\n                case 'number': {\n                    if (entry.type === 'number') {\n                        const item = entry.data;\n                        message.type = 'number';\n                        const number = (await tools.getValueEntryNumber(item.entity1, false)) ?? 0;\n                        message.displayName = this.library.getTranslation(\n                            (await tools.getEntryTextOnOff(item.text, true)) ?? '',\n                        );\n                        message.icon = (await tools.getIconEntryValue(item.icon, true, '')) ?? '';\n                        message.iconColor = (await tools.getIconEntryColor(item.icon, true, Color.HMIOn)) ?? '';\n                        const min =\n                            (item.entity1 && item.entity1.minScale && (await item.entity1.minScale.getNumber())) ?? 0;\n                        const max =\n                            (item.entity1 && item.entity1.maxScale && (await item.entity1.maxScale.getNumber())) ?? 100;\n                        return tools.getPayload(\n                            message.type,\n                            message.intNameEntity,\n                            message.icon,\n                            message.iconColor,\n                            message.displayName,\n                            `${number}|${min}|${max}`,\n                        );\n                    }\n                    break;\n                }\n                /**\n                 * entity1 is value to calculate color\n                 * entity2 is display value\n                 */\n                case 'text': {\n                    if (entry.type === 'text') {\n                        const item = entry.data;\n                        message.type = 'text';\n                        let value: boolean | number | null = await tools.getValueEntryNumber(item.entity1, false);\n                        if (value === null) value = await tools.getValueEntryBoolean(item.entity1);\n                        if (value === null) value = true;\n                        message.displayName = this.library.getTranslation(\n                            (await tools.getEntryTextOnOff(item.text, !!value)) ?? '',\n                        );\n                        switch (entry.role) {\n                            case '2values': {\n                                message.optionalValue = ``;\n                                const val1 = await tools.getValueEntryNumber(item.entity1);\n                                const val2 = await tools.getValueEntryNumber(item.entity2);\n                                const unit1 =\n                                    item.entity1 && item.entity1.unit && (await item.entity1.unit.getString());\n                                const unit2 =\n                                    item.entity2 && item.entity2.unit && (await item.entity2.unit.getString());\n                                if (val1 !== null && val2 !== null) {\n                                    message.optionalValue = String(val1) + (unit1 ?? '') + String(val2) + (unit2 ?? '');\n                                    if (typeof value === 'number') value = (val1 + val2 / 2) as number;\n                                }\n\n                                break;\n                            }\n                            default: {\n                                message.optionalValue = this.library.getTranslation(\n                                    (await tools.getValueEntryString(item.entity2)) ??\n                                        (await tools.getEntryTextOnOff(item.text1, !!value)) ??\n                                        '',\n                                );\n                            }\n                        }\n                        switch (entry.role) {\n                            case 'textNotIcon': {\n                                message.icon =\n                                    (await tools.getIconEntryValue(item.icon, !!value, '', null, true)) ?? '';\n                                break;\n                            }\n                            case 'iconNotText': {\n                                message.icon =\n                                    (await tools.getIconEntryValue(item.icon, !!value, '', null, false)) ?? '';\n                                break;\n                            }\n                            case 'battery': {\n                                const val = (await tools.getValueEntryBoolean(item.entity3)) ?? false;\n                                message.icon = (await tools.getIconEntryValue(item.icon, val, '', '', false)) ?? '';\n\n                                break;\n                            }\n                            case 'combined': {\n                                message.icon =\n                                    (await tools.getIconEntryValue(item.icon, !!value, '', null, false)) ?? '';\n                                message.icon +=\n                                    (await tools.getIconEntryValue(item.icon, !!value, '', null, true)) ?? '';\n                                break;\n                            }\n                            default: {\n                                message.icon =\n                                    (await tools.getIconEntryValue(\n                                        item.icon,\n                                        !!value,\n                                        '',\n                                        null,\n                                        (this.parent &&\n                                            this.parent.card !== 'cardEntities' &&\n                                            !this.parent.card.startsWith('screens')) ??\n                                            false,\n                                    )) ?? '';\n                            }\n                        }\n\n                        message.iconColor = (await tools.getIconEntryColor(item.icon, value, Color.HMIOn)) ?? '';\n                        return tools.getPayload(\n                            message.type,\n                            message.intNameEntity,\n                            message.icon,\n                            message.iconColor,\n                            message.displayName,\n                            message.optionalValue,\n                        );\n                    }\n                    break;\n                }\n                case 'button': {\n                    /**\n                     * Alles was einen Druckfl\u00E4che sein kann. D\n                     */\n                    const item = entry.data;\n\n                    message.optionalValue = (await tools.getValueEntryBoolean(item.entity1)) ?? true ? '1' : '0';\n                    if (this.parent && this.parent.card === 'cardEntities')\n                        message.optionalValue =\n                            (await tools.getEntryTextOnOff(item.text1, message.optionalValue == '1')) ??\n                            message.optionalValue;\n                    message.displayName = this.library.getTranslation(\n                        (await tools.getEntryTextOnOff(item.text, message.optionalValue === '1')) ?? '',\n                    );\n\n                    message.icon = await tools.getIconEntryValue(item.icon, message.optionalValue === '1', 'home');\n                    message.iconColor = await tools.GetIconColor(item.icon, message.optionalValue === '1');\n                    return tools.getPayload(\n                        'button',\n                        message.intNameEntity,\n                        message.icon,\n                        message.iconColor,\n                        message.displayName,\n                        message.optionalValue,\n                    );\n\n                    break;\n                }\n\n                case 'input_sel': {\n                    const item = entry.data;\n                    message.type = 'input_sel';\n                    const value =\n                        (await tools.getValueEntryNumber(item.entityInSel)) ??\n                        (await tools.getValueEntryBoolean(item.entityInSel));\n                    message.icon = await tools.getIconEntryValue(item.icon, !!(value ?? true), 'gesture-tap-button');\n\n                    message.iconColor =\n                        (await tools.getIconEntryColor(item.icon, value ?? true, Color.HMIOff)) ?? Color.HMIOn;\n                    message.displayName = this.library.getTranslation(\n                        (await tools.getEntryTextOnOff(item.headline, true)) ?? message.displayName ?? '',\n                    );\n                    message.optionalValue = this.library.getTranslation(\n                        (await tools.getEntryTextOnOff(item.text, !!value)) ?? 'PRESS',\n                    );\n                    this.log.debug(JSON.stringify(message));\n                    return tools.getItemMesssage(message);\n\n                    break;\n                }\n                case 'fan': {\n                    if (entry.type === 'fan') {\n                        const item = entry.data;\n                        message.type = 'fan';\n                        //const speed = (await tools.getValueEntryNumber(item.speed, true)) ?? null;\n                        const value = (await tools.getValueEntryBoolean(item.entity1)) ?? null;\n                        message.displayName = this.library.getTranslation(\n                            (await tools.getEntryTextOnOff(item.headline, true)) ?? message.displayName ?? '',\n                        );\n                        message.icon = (await tools.getIconEntryValue(item.icon, value, '')) ?? '';\n                        message.iconColor = (await tools.getIconEntryColor(item.icon, value, Color.HMIOn)) ?? '';\n                        /*const min =\n                        (item.entity1 && item.entity1.minScale && (await item.entity1.minScale.getNumber())) ?? 0;\n                        const max =\n                        (item.entity1 && item.entity1.maxScale && (await item.entity1.maxScale.getNumber())) ?? 100;\n                        */\n                        return tools.getPayload(\n                            message.type,\n                            message.intNameEntity,\n                            message.icon,\n                            message.iconColor,\n                            message.displayName,\n                            value ? '1' : '0',\n                        );\n                    }\n                }\n                case 'timer': {\n                    if (entry.type === 'timer') {\n                        const item = entry.data;\n                        message.type = 'timer';\n                        const value: number | null = !item.setValue1\n                            ? (item.entity1 && (await tools.getValueEntryNumber(item.entity1))) ?? null\n                            : (this.tempData && this.tempData.time) ?? 0;\n\n                        if (value !== null) {\n                            let opt = '';\n                            if (this.tempData) {\n                                opt = new Date(new Date().setHours(0, 0, this.tempData.value, 0)).toLocaleTimeString(\n                                    'de',\n                                    { minute: '2-digit', second: '2-digit' },\n                                );\n                            }\n                            message.iconColor = await tools.getIconEntryColor(item.icon, value, Color.White);\n                            message.icon = await tools.getIconEntryValue(item.icon, true, 'gesture-tap-button');\n                            message.optionalValue = this.library.getTranslation(\n                                (await tools.getEntryTextOnOff(item.text, value !== 0)) ?? opt,\n                            );\n\n                            message.displayName = this.library.getTranslation(\n                                (await tools.getEntryTextOnOff(item.headline, true)) ?? message.displayName ?? '',\n                            );\n                            return tools.getPayload(\n                                message.type,\n                                message.intNameEntity,\n                                message.icon,\n                                message.iconColor,\n                                message.displayName,\n                                message.optionalValue,\n                            );\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        this.log.warn(`Something went wrong on ${this.id} type: ${this.config && this.config.type}!`);\n        return '~~~~~';\n    }\n\n    getDetailPayload(message: Partial<typePageItem.entityUpdateDetailMessage>): string {\n        this.triggerParent = false;\n        if (!message.type) return '';\n        switch (message.type) {\n            case '2Sliders': {\n                let result: typePageItem.entityUpdateDetailMessage = {\n                    type: '2Sliders',\n                    icon: '',\n                    entityName: 'test',\n                    slidersColor: 'disable',\n                    buttonState: 'disable',\n                    slider1Pos: 'disable',\n                    slider2Pos: 'disable',\n                    hueMode: false,\n                    hue_translation: '',\n                    slider2Translation: '',\n                    slider1Translation: '',\n                    popup: false,\n                };\n                result = Object.assign(result, message);\n                return tools.getPayload(\n                    'entityUpdateDetail',\n                    result.entityName,\n                    result.icon ?? '',\n                    result.slidersColor,\n                    result.buttonState === 'disable' ? 'disable' : result.buttonState ? '1' : '0',\n                    String(result.slider1Pos),\n                    String(result.slider2Pos),\n                    result.hueMode ? 'enable' : 'disable',\n                    result.hue_translation,\n                    result.slider2Translation,\n                    result.slider1Translation,\n                    result.popup ? 'enable' : 'disable',\n                );\n                break;\n            }\n            case 'insel': {\n                let result: typePageItem.entityUpdateDetailMessage = {\n                    type: 'insel',\n                    entityName: '',\n                    textColor: String(Color.rgb_dec565(Color.White)),\n                    currentState: '',\n                    list: '',\n                };\n                result = Object.assign(result, message);\n                return tools.getPayload(\n                    'entityUpdateDetail2',\n                    result.entityName,\n                    '',\n                    result.textColor,\n                    result.type,\n                    result.currentState,\n                    result.list,\n                );\n                break;\n            }\n            case 'popupThermo': {\n                let result: typePageItem.entityUpdateDetailMessage = {\n                    type: 'popupThermo',\n                    entityName: '',\n                    headline: '',\n                    currentState: '',\n                    list: '',\n                };\n                result = Object.assign(result, message);\n                return tools.getPayload(result.headline, result.entityName, result.currentState, result.list);\n                break;\n            }\n            case 'popupFan': {\n                let result: typePageItem.entityUpdateDetailMessage = {\n                    type: 'popupFan',\n                    entityName: '',\n                    icon: '',\n                    iconColor: '',\n                    buttonstate: '',\n                    slider1: '',\n                    slider1Max: '',\n                    speedText: '',\n                    mode: '',\n                    modeList: '',\n                };\n                result = Object.assign(result, message);\n                return tools.getPayload(\n                    'entityUpdateDetail',\n                    result.entityName,\n                    result.icon,\n                    result.iconColor,\n                    result.buttonstate,\n                    result.slider1,\n                    result.slider1Max,\n                    result.speedText,\n                    result.mode,\n                    result.modeList,\n                );\n                break;\n            }\n            case 'popupTimer': {\n                let result: typePageItem.entityUpdateDetailMessage = {\n                    type: 'popupTimer',\n                    entityName: '',\n                    iconColor: '',\n                    minutes: '',\n                    seconds: '',\n                    editable: '0',\n                    action1: '',\n                    action2: '',\n                    action3: '',\n                    text1: '',\n                    text2: '',\n                    text3: '',\n                };\n                result = Object.assign(result, message);\n                return tools.getPayload(\n                    'entityUpdateDetail',\n                    result.entityName,\n                    '',\n                    result.iconColor,\n                    result.entityName,\n                    result.minutes,\n                    result.seconds,\n                    result.editable,\n                    result.action1,\n                    result.action2,\n                    result.action3,\n                    result.text1,\n                    result.text2,\n                    result.text3,\n                );\n                break;\n            }\n            case 'popupShutter': {\n                let result: typePageItem.entityUpdateDetailMessage = {\n                    type: 'popupShutter',\n                    entityName: '',\n                    pos1: '',\n                    text2: '',\n                    pos1text: '',\n                    icon: '',\n                    iconL1: '',\n                    iconM1: '',\n                    iconR1: '',\n                    statusL1: 'disable',\n                    statusM1: 'disable',\n                    statusR1: 'disable',\n                    pos2text: '',\n                    iconL2: '',\n                    iconM2: '',\n                    iconR2: '',\n                    statusL2: 'disable',\n                    statusM2: 'disable',\n                    statusR2: 'disable',\n                    pos2: 'disable',\n                };\n                result = Object.assign(result, message);\n                return tools.getPayload(\n                    'entityUpdateDetail',\n                    result.entityName,\n                    result.pos1,\n                    result.text2,\n                    result.pos1text,\n                    result.icon,\n                    result.iconL1,\n                    result.iconM1,\n                    result.iconR1,\n                    result.statusL1,\n                    result.statusM1,\n                    result.statusR1,\n                    result.pos2text,\n                    result.iconL2,\n                    result.iconM2,\n                    result.iconR2,\n                    result.statusL2,\n                    result.statusM2,\n                    result.statusR2,\n                    result.pos2,\n                );\n            }\n        }\n        return '';\n    }\n\n    async GeneratePopup(mode: PopupType): Promise<string | null> {\n        if (!this.config || !this.dataItems) return null;\n        const entry = this.dataItems;\n        let message: Partial<typePageItem.entityUpdateDetailMessage> = {};\n        //const template = templatePageItems[mode][this.config.role];\n        message.entityName = this.id;\n        this.visibility = true;\n        this.lastPopupType = mode;\n        switch (mode) {\n            case 'popupLightNew':\n            case 'popupLight': {\n                switch (this.config.role) {\n                    case 'light':\n                    case 'socket':\n                    case 'dimmer':\n                    case 'hue':\n                    case 'ct':\n                    case 'rgbSingle':\n                    case 'rgb':\n                    case 'rgb.hex':\n                    default: {\n                        message.type = '2Sliders';\n                        if (message.type !== '2Sliders' || entry.type !== 'light') return null;\n                        const item = entry.data;\n                        message.buttonState = (await tools.getValueEntryBoolean(item.entity1)) ?? 'disable';\n                        const dimmer = item.dimmer && item.dimmer.value && (await item.dimmer.value.getNumber());\n                        if (dimmer != null && item.dimmer) {\n                            item.dimmer.minScale;\n                            if (item.dimmer.minScale != undefined && item.dimmer.maxScale) {\n                                message.slider1Pos = Math.trunc(\n                                    Color.scale(\n                                        dimmer,\n                                        await item.dimmer.minScale.getNumber(),\n                                        await item.dimmer.maxScale.getNumber(),\n                                        100,\n                                        0,\n                                    ),\n                                );\n                            } else {\n                                message.slider1Pos = dimmer;\n                            }\n                        }\n                        if (message.buttonState !== 'disable')\n                            message.icon = await tools.getIconEntryValue(item.icon, message.buttonState, '', '');\n\n                        message.slidersColor =\n                            (await tools.getIconEntryColor(\n                                item.icon,\n                                message.slider1Pos === undefined || message.slider1Pos === 'disable'\n                                    ? null\n                                    : message.slider1Pos ?? message.buttonState === true,\n                                Color.White,\n                            )) ?? 'disable';\n                        let rgb = null;\n                        switch (this.config.role) {\n                            case 'socket':\n                            case 'light':\n                            case 'dimmer':\n                            case 'ct':\n                                break;\n                            case 'hue': {\n                                const nhue = (item.hue && (await item.hue.getNumber())) ?? null;\n                                if (nhue) rgb = Color.hsv2RGB(nhue, 1, 1) ?? null;\n                                break;\n                            }\n                            case 'rgbSingle': {\n                                rgb = (await tools.getRGBfromRGBThree(item)) ?? null;\n                                break;\n                            }\n                            case 'rgb': {\n                                rgb = (item.color && item.color.true && (await item.color.true.getRGBValue())) ?? null;\n                                break;\n                            }\n                            case 'rgb.hex': {\n                                rgb = (item.color && item.color.true && (await item.color.true.getRGBValue())) ?? null;\n                                break;\n                            }\n                        }\n                        message.slider2Pos = 'disable';\n                        if (item.White) {\n                            const val = await tools.getScaledNumber(item.White);\n                            message.slider2Pos = val ?? 'disable';\n                        } else if (item.ct && item.ct.value) {\n                            const ct = await tools.getSliderCTFromValue(item.ct);\n                            if (ct !== null) {\n                                message.slider2Pos = parseInt(ct);\n                            }\n                        }\n                        const colorMode: 'ct' | 'hue' | 'none' = !item.colorMode\n                            ? 'none'\n                            : (await item.colorMode.getBoolean())\n                              ? 'hue'\n                              : 'ct';\n\n                        message.hueMode = rgb !== null;\n                        if (rgb !== null && colorMode === 'hue') {\n                            message.slidersColor = await tools.GetIconColor(\n                                rgb,\n                                message.slider1Pos !== 'disable' && message.slider1Pos !== undefined\n                                    ? message.slider1Pos > 20\n                                        ? message.slider1Pos\n                                        : 20\n                                    : message.buttonState !== 'disable' && message.buttonState !== false,\n                            );\n                        }\n                        if (message.slider2Pos !== 'disable' && colorMode === 'ct') {\n                            message.slidersColor =\n                                (await tools.getTemperaturColorFromValue(item.ct, dimmer ?? 100)) ?? '';\n                        }\n\n                        message.popup = message.slider2Pos !== 'disable' && rgb !== null;\n\n                        message.slider1Translation =\n                            (item.text1 && item.text1.true && (await item.text1.true.getString())) ?? undefined;\n                        message.slider2Translation =\n                            (item.text2 && item.text2.true && (await item.text2.true.getString())) ?? undefined;\n                        message.hue_translation =\n                            (item.text3 && item.text3.true && (await item.text3.true.getString())) ?? undefined;\n\n                        if (message.slider1Translation !== undefined)\n                            message.slider1Translation = this.library.getTranslation(message.slider1Translation);\n                        if (message.slider2Translation !== undefined)\n                            message.slider2Translation = this.library.getTranslation(message.slider2Translation);\n                        if (message.hue_translation !== undefined)\n                            message.hue_translation = this.library.getTranslation(message.hue_translation);\n\n                        break;\n                    }\n                }\n                break;\n            }\n\n            case 'popupFan': {\n                if (entry.type === 'fan') {\n                    const item = entry.data;\n                    message.type = 'popupFan';\n                    if (message.type !== 'popupFan') break;\n                    //const speed = (await tools.getValueEntryNumber(item.speed, true)) ?? null;\n                    const value = (await tools.getValueEntryBoolean(item.entity1)) ?? null;\n                    message.icon = (await tools.getIconEntryValue(item.icon, value, '')) ?? '';\n                    message.iconColor = (await tools.getIconEntryColor(item.icon, value, Color.HMIOn)) ?? '';\n                    /*const min =\n                    (item.entity1 && item.entity1.minScale && (await item.entity1.minScale.getNumber())) ?? 0;*/\n                    message.slider1 = String((await tools.getScaledNumber(item.speed)) ?? '');\n                    message.slider1Max = String(\n                        (item.speed && item.speed.maxScale && (await item.speed.maxScale.getNumber())) ?? '100',\n                    );\n\n                    message.buttonstate = value ? '1' : '0';\n                    message.speedText = this.library.getTranslation(\n                        (await tools.getEntryTextOnOff(item.text, value)) ?? '',\n                    );\n                    message.mode = this.library.getTranslation(\n                        (await tools.getValueEntryString(item.entityInSel)) ?? '',\n                    );\n                    let list =\n                        (item.valueList && (await item.valueList.getObject())) ??\n                        (item.valueList && (await item.valueList.getString())) ??\n                        '';\n\n                    /**\n                     * die Liste ist entweder ein mit ? getrennt der String oder ein Array\n                     */\n                    if (list !== null) {\n                        if (Array.isArray(list)) list = list.join('?');\n                    }\n                    message.modeList = typeof list === 'string' ? list : '';\n                }\n                break;\n            }\n            case 'popupThermo':\n            case 'popupInSel': {\n                if (entry.type !== 'input_sel' && entry.type !== 'light') break;\n                const item = entry.data;\n                message.type = 'insel';\n                if (!(message.type === 'insel')) return null;\n\n                const value = (await tools.getValueEntryBoolean(item.entityInSel)) ?? true;\n                if (message.type === 'insel')\n                    message.textColor = await tools.getEntryColor(item.color, value, Color.White);\n                message.currentState = this.library.getTranslation(\n                    (item.headline && (await item.headline.getString())) ?? '',\n                );\n                const sList =\n                    item.entityInSel &&\n                    (await this.getListFromStates(\n                        item.entityInSel,\n                        item.valueList,\n                        entry.role,\n                        'valueList2' in item ? item.valueList2 : undefined,\n                    ));\n                if (sList !== undefined && sList.list !== undefined && sList.value !== undefined) {\n                    message.textColor = await tools.getEntryColor(item.color, !!value, Color.White);\n                    if (sList.list.length > 0) {\n                        sList.list.splice(48);\n                        message.list = Array.isArray(sList.list)\n                            ? sList.list.map((a: string) => tools.formatInSelText(a)).join('?')\n                            : '';\n\n                        message.currentState = tools.formatInSelText(this.library.getTranslation(sList.value));\n                        if (mode !== 'popupThermo') break;\n                        message = { ...message, type: 'popupThermo' };\n                        if (message.type === 'popupThermo') {\n                            message.headline = this.library.getTranslation(\n                                (await tools.getEntryTextOnOff(item.headline, true)) ?? message.headline ?? '',\n                            );\n                        }\n                        break;\n                    }\n                }\n\n                let list = (item.valueList && (await item.valueList.getObject())) ??\n                    (item.valueList && (await item.valueList.getString())) ?? [\n                        '1',\n                        '2',\n                        '3',\n                        '4',\n                        '5',\n                        '6',\n                        '7',\n                        '8',\n                        '9',\n                        '10',\n                        '11',\n                        '12',\n                        '13',\n                    ];\n\n                /**\n                 * die Liste ist entweder ein mit ? getrennt der String oder ein Array\n                 */\n                if (list !== null) {\n                    if (typeof list === 'string') list = list.split('?');\n                    if (Array.isArray(list)) list.splice(48);\n                } else list = [];\n\n                message.list = Array.isArray(list) ? list.map((a: string) => tools.formatInSelText(a)).join('?') : '';\n                if (message.list && message.list.length > 940) {\n                    message.list = message.list.slice(0, 940);\n                    this.log.warn('Value list has more as 940 chars!');\n                }\n                if (mode !== 'popupThermo') break;\n                message = { ...message, type: 'popupThermo' };\n                if (message.type === 'popupThermo') {\n                    message.headline = this.library.getTranslation(\n                        (await tools.getEntryTextOnOff(item.headline, true)) ?? message.headline ?? '',\n                    );\n                }\n\n                break;\n            }\n            case 'popupNotify':\n                break;\n            case 'popupShutter': {\n                //entityUpdateDetail~entityName~*sliderPos*~2ndrow~textPosition~icon1~iconUp~iconStop~iconDown~iconUpStatus~iconStopStatus~iconDownStatus\n                //~textTilt~iconTiltLeft~iconTiltStop~iconTiltRight~iconTiltLeftStatus~iconTiltStopStatus~iconTiltLeftStatus~tiltPos\n                if (entry.type !== 'shutter') break;\n                const item = entry.data;\n                message.type = 'popupShutter';\n                if (!(message.type === 'popupShutter')) break;\n                message.text2 = (item.text && item.text.true && (await item.text.true.getString())) ?? '';\n                message.text2 = this.library.getTranslation(message.text2);\n                const pos1 = (await tools.getValueEntryNumber(item.entity1)) ?? 'disable';\n                const pos2 = (await tools.getValueEntryNumber(item.entity2)) ?? 'disable';\n                if (pos1 !== 'disable') message.icon = (await tools.getIconEntryValue(item.icon, pos1 < 40, '')) ?? '';\n                else if (pos2 !== 'disable')\n                    message.icon = (await tools.getIconEntryValue(item.icon, pos2 < 40, '')) ?? '';\n                const optionalValue = item.valueList\n                    ? await item.valueList.getObject()\n                    : [\n                          'arrow-up', //up\n                          'stop', //stop\n                          'arrow-down', //down\n                          'arrow-top-right', //t-up\n                          'stop', //t-stop\n                          'arrow-bottom-left', //t-down\n                      ];\n                const arr = [pos1, pos2];\n                for (let index = 0; index < arr.length; index++) {\n                    const pos = arr[index];\n                    if (pos == 'disable') continue;\n\n                    const i = index * 3;\n\n                    let optionalValueC =\n                        Array.isArray(optionalValue) && optionalValue.every((a) => typeof a === 'string')\n                            ? [...optionalValue]\n                            : ['', '', ''];\n                    optionalValueC = optionalValueC.splice(i, 3).map((a) => (a ? Icons.GetIcon(a) : a));\n                    optionalValueC.forEach((a, i) => {\n                        if (a) optionalValueC[i + 3] = this.tempData[i] ? 'enable' : 'disable';\n                        else {\n                            optionalValueC[i] = '';\n                            optionalValueC[i + 3] = 'disable';\n                        }\n                    });\n                    if (index === 0) {\n                        message.pos1 = String(pos);\n                        message.pos1text = (await tools.getEntryTextOnOff(item.text1, true)) ?? '';\n                        message.pos1text = this.library.getTranslation(message.pos1text);\n                        message.iconL1 = optionalValueC[0];\n                        message.iconM1 = optionalValueC[1];\n                        message.iconR1 = optionalValueC[2];\n                        message.statusL1 = pos === 0 ? 'disable' : optionalValueC[3];\n                        message.statusM1 = pos === 'disabled' ? 'disable' : optionalValueC[4];\n                        message.statusR1 = pos === 100 ? 'disable' : optionalValueC[5];\n                    } else {\n                        message.pos2 = String(pos);\n                        message.pos2text = (await tools.getEntryTextOnOff(item.text2, true)) ?? '';\n                        message.pos2text = this.library.getTranslation(message.pos2text);\n                        message.iconL2 = optionalValueC[0];\n                        message.iconM2 = optionalValueC[1];\n                        message.iconR2 = optionalValueC[2];\n                        message.statusL2 = pos === 0 ? 'disable' : optionalValueC[3];\n                        message.statusM2 = optionalValueC[4];\n                        message.statusR2 = pos === 100 ? 'disable' : optionalValueC[5];\n                    }\n                }\n                break;\n            }\n            case 'popupTimer': {\n                if (entry.type !== 'timer') break;\n                const item = entry.data;\n                message.type = 'popupTimer';\n                if (!(message.type === 'popupTimer')) break;\n                if (this.tempData !== undefined) {\n                    message.iconColor = await tools.GetIconColor(item.icon, this.tempData.status === 'run');\n                    message.minutes = Math.floor(this.tempData.value / 60).toFixed(0);\n                    message.seconds = Math.floor(this.tempData.value % 60).toFixed(0);\n\n                    if (this.tempData.status === 'run') {\n                        message.editable = '0';\n                        message.action1 = 'pause';\n                        message.action3 = 'clear';\n                        //message.action3 = 'finish';\n                        message.text1 = this.library.getTranslation('Pause');\n                        message.text3 = this.library.getTranslation('Clear');\n                        //message.text3 = this.library.getTranslation('Finish');\n                    } else if (this.tempData.value > 0) {\n                        message.editable = '0';\n                        message.action1 = 'start';\n                        message.action3 = 'clear';\n                        //message.action3 = 'finish';\n                        message.text1 = this.library.getTranslation('Continue');\n                        message.text3 = this.library.getTranslation('Clear');\n                        //message.text3 = this.library.getTranslation('Finish');\n                    } else {\n                        message.editable = '1';\n                        message.action2 = 'start';\n                        message.text2 = this.library.getTranslation('Start');\n                    }\n                }\n                break;\n            }\n        }\n\n        //if (template.type !== message.type) {\n        //    throw new Error(`Template ${template.type} is not ${message.type} for role: ${this.config.role}`);\n        //}\n        return this.getDetailPayload(message);\n    }\n\n    getLogname(): string {\n        return this.parent ? this.parent.name + '.' + this.id : this.id;\n    }\n    async delete(): Promise<void> {\n        this.visibility = false;\n        await this.controller.statesControler.deactivateTrigger(this);\n        if (this.panel.persistentPageItems[this.id]) {\n            if (!this.panel.unload) return;\n        }\n        await super.delete();\n        this.parent = undefined;\n    }\n\n    async onCommand(action: string, value: string): Promise<boolean> {\n        if (value === undefined || this.dataItems === undefined) return false;\n        const entry = this.dataItems;\n        switch (action) {\n            case 'mode-preset_modes':\n            case 'mode-insel':\n                {\n                    if (!('entityInSel' in entry.data)) break;\n                    await this.setListCommand(entry, value);\n                }\n                break;\n            case 'button': {\n                if (entry.type === 'button') {\n                    if (entry.role === 'indicator') break;\n                    const item = entry.data;\n                    let value: any = (item.setNavi && (await item.setNavi.getString())) ?? null;\n                    if (value !== null) {\n                        this.panel.navigation.setTargetPageByName(value);\n                        break;\n                    }\n                    value = (item.setValue1 && (await item.setValue1.getBoolean())) ?? null;\n                    if (value !== null && item.setValue1) {\n                        await item.setValue1.setStateFlip();\n                    }\n                    if (item.setValue2) {\n                        await item.setValue2.setStateTrue();\n                    }\n                } else if (entry.type === 'light') {\n                    const item = entry.data;\n                    item.entity1 && item.entity1.value && (await item.entity1.value.setStateFlip());\n                }\n                break;\n            }\n            case 'brightnessSlider': {\n                if (entry.type === 'light') {\n                    const item = entry.data;\n                    if (item && item.dimmer && item.dimmer.value && item.dimmer.value.writeable) {\n                        const dimmer = await tools.getScaledNumber(item.dimmer);\n                        if (dimmer !== null && String(dimmer) != value)\n                            await tools.setScaledNumber(item.dimmer, parseInt(value));\n                    } else {\n                        this.log.warn('Dimmer is not writeable!');\n                    }\n                }\n                break;\n            }\n            case 'colorTempSlider': {\n                if (entry.type === 'light') {\n                    const item = entry.data;\n                    if (item && item.White && item.White.value) {\n                        await tools.setScaledNumber(item.White, parseInt(value));\n                    }\n                    if (item && item.ct && item.ct.value && item.ct.value.writeable) {\n                        const ct = await tools.getSliderCTFromValue(item.ct);\n                        if (ct !== null && String(ct) != value)\n                            await tools.setSliderCTFromValue(item.ct, parseInt(value));\n                    } else {\n                        this.log.warn('ct is not writeable!');\n                    }\n                }\n                break;\n            }\n            case 'OnOff': {\n                if (entry.type === 'light') {\n                    const item = entry.data;\n                    if (item && item.entity1 && item.entity1.value && item.entity1.value.writeable) {\n                        await item.entity1.value.setStateAsync(value === '1');\n                    } else {\n                        this.log.warn('entity1 is not writeable!');\n                    }\n                }\n                break;\n            }\n            case 'colorWheel': {\n                if (entry.type === 'light') {\n                    const item = entry.data;\n                    if (item && this.config) {\n                        switch (this.config.role) {\n                            case 'socket':\n                            case 'light':\n                            case 'dimmer':\n                            case 'ct':\n                                break;\n                            case 'hue':\n                                await tools.setHuefromRGB(item, Color.resultToRgb(value));\n                                break;\n                            case 'rgbSingle': {\n                                const rgb = Color.resultToRgb(value);\n                                await tools.setRGBThreefromRGB(item, rgb);\n                                break;\n                            }\n                            case 'rgb': {\n                                const rgb = Color.resultToRgb(value);\n                                if (Color.isRGB(rgb)) {\n                                    item.color &&\n                                        item.color.true &&\n                                        (await item.color.true.setStateAsync(JSON.stringify(rgb)));\n                                }\n\n                                break;\n                            }\n                            case 'rgb.hex': {\n                                const rgb = Color.resultToRgb(value);\n                                if (Color.isRGB(rgb)) {\n                                    item.color &&\n                                        item.color.true &&\n                                        (await item.color.true.setStateAsync(\n                                            Color.ConvertRGBtoHex(rgb.r, rgb.g, rgb.b),\n                                        ));\n                                }\n\n                                break;\n                            }\n                        }\n                    } else {\n                        this.log.warn('color value is not writeable!');\n                    }\n                }\n                break;\n            }\n            case 'tiltOpen': {\n                if (entry.type !== 'shutter') break;\n                if (entry.data.up2 && entry.data.up2.writeable) {\n                    entry.data.up2.setStateTrue();\n                    break;\n                }\n            }\n            case 'tiltClose': {\n                if (entry.type !== 'shutter') break;\n                if (action === 'tiltClose' && entry.data.down2 && entry.data.down2.writeable) {\n                    entry.data.down2.setStateTrue();\n                    break;\n                }\n            }\n            case 'tiltStop': {\n                if (entry.type !== 'shutter') break;\n                if (action === 'tiltStop' && entry.data.stop2 && entry.data.stop2.writeable) {\n                    entry.data.stop2.setStateTrue();\n                    break;\n                }\n                const items = entry.data;\n                const list = await this.getListCommands(items.setList);\n                if (list !== null && list.length > 2) {\n                    switch (action) {\n                        case 'tiltOpen': {\n                            await this.adapter.setForeignStateAsync(list[0].id, list[0].value);\n                            break;\n                        }\n                        case 'tiltStop': {\n                            await this.adapter.setForeignStateAsync(list[1].id, list[1].value);\n                            break;\n                        }\n                        case 'tiltClose': {\n                            await this.adapter.setForeignStateAsync(list[2].id, list[2].value);\n                            break;\n                        }\n                    }\n                } else {\n                    if (items.entity2 && items.entity2.value) {\n                        if (items.entity2.value.type === 'number' && items.entity2.minScale && items.entity2.maxScale) {\n                            switch (action) {\n                                case 'tiltOpen': {\n                                    if (tools.ifValueEntryIs(items.entity2, 'number')) {\n                                        const value = await items.entity2.maxScale.getNumber();\n                                        if (value !== null) await tools.setValueEntry(items.entity2, value);\n                                    }\n                                    break;\n                                }\n                                case 'tiltStop': {\n                                    if (tools.ifValueEntryIs(items.entity2, 'number')) {\n                                        const value = await tools.getValueEntryNumber(items.entity2);\n                                        if (value !== null) await tools.setValueEntry(items.entity2, value);\n                                    }\n                                    break;\n                                }\n                                case 'tiltClose': {\n                                    if (tools.ifValueEntryIs(items.entity2, 'number')) {\n                                        const value = await items.entity2.minScale.getNumber();\n                                        if (value !== null) await tools.setValueEntry(items.entity2, value);\n                                    }\n                                    break;\n                                }\n                            }\n                        } else if (items.entity2.value.type === 'boolean') {\n                            if (action !== 'tiltStop') await items.entity2.value.setStateFlip();\n                        }\n                    }\n                }\n\n                break;\n            }\n\n            case 'up': {\n                if (entry.type !== 'shutter') break;\n                if (entry.data.up && entry.data.up.writeable) {\n                    entry.data.up.setStateTrue();\n                    break;\n                }\n            }\n            case 'stop': {\n                if (entry.type !== 'shutter') break;\n                if (action === 'stop' && entry.data.stop && entry.data.stop.writeable) {\n                    entry.data.stop.setStateTrue();\n                    break;\n                }\n            }\n            case 'down': {\n                if (entry.type === 'shutter') {\n                    if (action === 'down' && entry.data.down && entry.data.down.writeable) {\n                        entry.data.down.setStateTrue();\n                        break;\n                    }\n                    const items = entry.data;\n\n                    const list = await this.getListCommands(items.setList);\n                    if (list !== null && list.length > 2) {\n                        switch (action) {\n                            case 'up': {\n                                await this.adapter.setForeignStateAsync(list[0].id, list[0].value);\n                                break;\n                            }\n                            case 'stop': {\n                                await this.adapter.setForeignStateAsync(list[1].id, list[1].value);\n                                break;\n                            }\n                            case 'down': {\n                                await this.adapter.setForeignStateAsync(list[2].id, list[2].value);\n                                break;\n                            }\n                        }\n                    } else {\n                        if (items.entity1 && items.entity1.value && items.entity1.minScale && items.entity1.maxScale) {\n                            if (items.entity1.value.type === 'number') {\n                                switch (action) {\n                                    case 'up': {\n                                        if (tools.ifValueEntryIs(items.entity1, 'number')) {\n                                            const value = await items.entity1.maxScale.getNumber();\n                                            if (value !== null) await tools.setValueEntry(items.entity1, value);\n                                        }\n                                        break;\n                                    }\n                                    case 'stop': {\n                                        if (tools.ifValueEntryIs(items.entity1, 'number')) {\n                                            const value = await tools.getValueEntryNumber(items.entity1);\n                                            if (value !== null) await tools.setValueEntry(items.entity1, value);\n                                        }\n                                        break;\n                                    }\n                                    case 'down': {\n                                        if (tools.ifValueEntryIs(items.entity1, 'number')) {\n                                            const value = await items.entity1.minScale.getNumber();\n                                            if (value !== null) await tools.setValueEntry(items.entity1, value);\n                                        }\n                                        break;\n                                    }\n                                }\n                            } else if (items.entity1.value.type === 'boolean') {\n                                if (action !== 'stop') await items.entity1.value.setStateFlip();\n                            }\n                        }\n                    }\n                }\n                break;\n            }\n            /**\n             * 100 is right 0 left\n             */\n            case 'positionSlider': {\n                if (entry.type === 'shutter') {\n                    const items = entry.data;\n                    if (tools.ifValueEntryIs(items.entity1, 'number'))\n                        await tools.setValueEntry(items.entity1, parseInt(value));\n                }\n                break;\n            }\n            /**\n             * zu 100% geschlossen zu 0% geschlossen\n             */\n            case 'tiltSlider': {\n                if (entry.type === 'shutter') {\n                    const items = entry.data;\n                    if (tools.ifValueEntryIs(items.entity2, 'number'))\n                        await tools.setValueEntry(items.entity2, parseInt(value));\n                }\n                break;\n            }\n            case 'number-set': {\n                if (entry.type === 'number') {\n                    const item = entry.data;\n                    await tools.setValueEntry(item.entity1, parseInt(value), false);\n                } else if (entry.type === 'fan') {\n                    const item = entry.data;\n                    await tools.setValueEntry(item.speed, parseInt(value), false);\n                }\n                break;\n            }\n            case 'timer-start': {\n                if (this.tempInterval) this.adapter.clearInterval(this.tempInterval);\n                if (value) {\n                    this.tempData.value = value.split(':').reduce((p, c, i) => {\n                        return String(parseInt(p) + parseInt(c) * 60 ** (2 - i));\n                    });\n                } else {\n                    this.tempData.status = 'run';\n                    if (this.visibility) this.onStateTrigger();\n\n                    this.tempInterval = this.adapter.setInterval(() => {\n                        if (this.unload && this.tempInterval) this.adapter.clearInterval(this.tempInterval);\n                        if (--this.tempData.value == 0) {\n                            this.tempData.value = 0;\n                            this.tempData.status = 'stop';\n                            this.dataItems &&\n                                this.dataItems.type == 'timer' &&\n                                this.dataItems.data &&\n                                this.dataItems.data.setValue1 &&\n                                this.dataItems.data.setValue1.setStateTrue();\n                            if (this.visibility) this.onStateTrigger();\n                            if (this.tempInterval) this.adapter.clearInterval(this.tempInterval);\n                            this.tempInterval = undefined;\n                        } else if (this.tempData.value > 0) {\n                            if (this.visibility) this.onStateTrigger();\n                            else if (this.parent && !this.parent.sleep && this.parent.getVisibility())\n                                this.parent.onStateTriggerSuperDoNotOverride(this);\n                        }\n                    }, 1000);\n                }\n                break;\n            }\n            case 'timer-finish': {\n                break;\n            }\n            case 'timer-clear': {\n                if (this.tempData) {\n                    this.tempData.value = 0;\n                    this.tempData.status = 'stop';\n                    if (this.visibility) this.onStateTrigger();\n                    if (this.tempInterval) this.adapter.clearInterval(this.tempInterval);\n                }\n\n                break;\n            }\n            case 'timer-pause': {\n                if (this.tempData) {\n                    this.tempData.status = 'pause';\n                    if (this.visibility) this.onStateTrigger();\n                    if (this.tempInterval) this.adapter.clearInterval(this.tempInterval);\n                }\n\n                break;\n            }\n            default: {\n                return false;\n            }\n            /*let rgb = null;\n                        switch (this.config.role) {\n                            case 'socket':\n                            case 'light':\n                            case 'dimmer':\n                            case 'ct':\n                                break;\n                            case 'hue':\n                                rgb = (await tools.getDecfromHue(item)) ?? null;\n                                break;\n                            case 'rgbSingle':\n                            case 'rgb':\n                                rgb = (await tools.getDecfromRGBThree(item)) ?? null;\n                                break;\n                        }\n                        if (rgb !== null) {\n                            message.hueMode = true;\n                            message.slidersColor = rgb;\n                        } else {\n                            message.slider2Pos = 'disable';\n                        }\n\n                        if (rgb === null) {\n                            if (item.ct && item.ct.value) {\n                                const ct = await tools.getValueEntryNumber(item.ct);\n                                if (ct) {\n                                    message.slider2Pos = Math.trunc(ct);\n                                }\n                            }\n                        }*/\n        }\n        return true;\n    }\n    protected async onStateTrigger(): Promise<void> {\n        if (this.lastPopupType) {\n            if (this.lastPopupType === 'popupThermo') {\n                this.parent && this.parent.onPopupRequest(this.id, 'popupThermo', '', '', null);\n                return;\n            } else {\n                const msg = await this.GeneratePopup(this.lastPopupType);\n                if (msg) this.sendToPanel(msg);\n            }\n        }\n    }\n    async getListCommands(setList: Dataitem | undefined): Promise<typePageItem.listCommand[] | null> {\n        if (!setList) return null;\n        let list: typePageItem.listCommand[] | null = (await setList.getObject()) as typePageItem.listCommand[] | null;\n        if (list === null) {\n            const temp = await setList.getString();\n            if (temp === null) return null;\n            list = temp.split('|').map((a: string): typePageItem.listCommand => {\n                const t = a.split('?');\n                return typePageItem.islistCommandUnion(t[2])\n                    ? { id: t[0], value: t[1], command: t[2] }\n                    : { id: t[0], value: t[1] };\n            });\n        }\n        return list;\n    }\n\n    /**\n     * Die Setzliste besteht aus 1 Arrays in Stringform mit trenner | und einem json mit trenner ? { id: t[0], value: t[1] }\n     * oder { id: t[0], value: t[1], command: t[2]} command bitte in der funktion nachsehen. Hier sind meist nicht alle beschrieben\n     *\n     * Standardnutzung, NSPanelauswahl von z.B. Eintrag 2 benutzt das Element 2 aus diesem Array und setzt die ID auf den Wert value\n     * 'flip': Liest den State mit ID ein, negiert den Wert und schreibt ihn wieder zur\u00FCck. string, number, boolean m\u00F6glich.\n     */\n\n    async setListCommand(entry: typePageItem.PageItemDataItems, value: string): Promise<boolean> {\n        //if (entry.type !== 'input_sel') return false;\n        const item = entry.data;\n        if (!('entityInSel' in item)) return false;\n\n        const sList =\n            item.entityInSel &&\n            (await this.getListFromStates(\n                item.entityInSel,\n                item.valueList,\n                entry.role,\n                'valueList2' in item ? item.valueList2 : undefined,\n            ));\n        if (sList) {\n            if (\n                entry.role === 'spotify-playlist' &&\n                sList.list !== undefined &&\n                'setValue1' in item &&\n                sList.list[parseInt(value)] !== undefined &&\n                item.setValue1\n            ) {\n                await item.setValue1.setStateAsync(parseInt(value) + 1);\n\n                return true;\n            } else if (\n                sList.states !== undefined &&\n                sList.states[parseInt(value)] !== undefined &&\n                item.entityInSel &&\n                item.entityInSel.value\n            ) {\n                await item.entityInSel.value.setStateAsync(sList.states[parseInt(value)]);\n                return true;\n            }\n        }\n        if (!item.setList) return false;\n        const list = await this.getListCommands(item.setList);\n        const v = value as keyof typeof list;\n        if (list && list[v]) {\n            try {\n                const obj = await this.panel.statesControler.getObjectAsync(list[v].id);\n                if (!obj || !obj.common || obj.type !== 'state') throw new Error('Dont get obj!');\n\n                const type = obj.common.type;\n                let newValue: any = null;\n                switch (list[v].command) {\n                    case 'flip': {\n                        const state = await this.adapter.getForeignStateAsync(list[v].id);\n                        if (state) {\n                            switch (typeof state.val) {\n                                case 'string': {\n                                    switch (\n                                        state.val as 'ON' | 'OFF' | 'TRUE' | 'FALSE' | 'START' | 'STOP' | '0' | '1'\n                                    ) {\n                                        case 'ON': {\n                                            newValue = 'OFF';\n                                            break;\n                                        }\n                                        case 'OFF': {\n                                            newValue = 'ON';\n                                            break;\n                                        }\n                                        case 'TRUE': {\n                                            newValue = 'FALSE';\n                                            break;\n                                        }\n                                        case 'FALSE': {\n                                            newValue = 'TRUE';\n                                            break;\n                                        }\n                                        case 'START': {\n                                            newValue = 'STOP';\n                                            break;\n                                        }\n                                        case 'STOP': {\n                                            newValue = 'START';\n                                            break;\n                                        }\n                                        case '0': {\n                                            newValue = '1';\n                                            break;\n                                        }\n                                        case '1': {\n                                            newValue = '0';\n                                            break;\n                                        }\n                                    }\n                                    break;\n                                }\n                                case 'number':\n                                case 'bigint': {\n                                    newValue = state.val === 1 ? 0 : 1;\n                                    break;\n                                }\n                                case 'boolean': {\n                                    newValue = !state.val;\n                                    break;\n                                }\n\n                                case 'symbol':\n                                case 'undefined':\n                                case 'object':\n                                case 'function':\n                                    return false;\n                            }\n                        }\n                        break;\n                    }\n                    case undefined: {\n                        newValue = this.adapter.library.convertToType(list[v].value, type);\n                    }\n                }\n\n                if (newValue !== null) {\n                    await this.adapter.setForeignStateAsync(\n                        list[v].id,\n                        newValue,\n                        list[v].id.startsWith(this.adapter.namespace),\n                    );\n                    return true;\n                } else {\n                    this.log.error(`Try to set a null value to ${list[v].id}!`);\n                }\n            } catch (e) {\n                this.log.error(`Id ${list[v].id} is not valid!`);\n            }\n        }\n        return false;\n    }\n    async getListFromStates(\n        entityInSel: ChangeTypeOfKeys<typePageItem.ValueEntryType, Dataitem | undefined> | undefined,\n        valueList: Dataitem | undefined,\n        role: DeviceRole | undefined,\n        valueList2: Dataitem | undefined = undefined,\n    ): Promise<{ value?: string | undefined; list?: string[] | undefined; states?: string[] }> {\n        const list: { value?: string | undefined; list?: string[] | undefined; states?: string[] } = {};\n        if (\n            entityInSel &&\n            entityInSel.value &&\n            ['string', 'number'].indexOf(entityInSel.value.type ?? '') !== -1 &&\n            (role == 'spotify-playlist' || (await entityInSel.value.getCommonStates()))\n        ) {\n            let states: Record<string | number, string> | undefined = undefined;\n            const value = await tools.getValueEntryString(entityInSel);\n            switch (role) {\n                case 'spotify-playlist': {\n                    if (valueList) {\n                        const val = (await valueList.getObject()) as typePageItem.spotifyPlaylist | null;\n                        if (val) {\n                            states = {};\n                            for (const a in val) {\n                                states[parseInt(a) + 1] = val[a].title;\n                            }\n                            list.value = value ?? undefined;\n                        }\n                    }\n                    break;\n                }\n                case '2values': {\n                    if (!valueList || !valueList2) {\n                        this.log.error('2values without valueList or valueList2!');\n                        return {};\n                    }\n                    const val1: string[] = (await valueList.getObject()) as string[]; //key\n                    const val2: string[] = (await valueList2.getObject()) as string[]; //value\n                    if (!Array.isArray(val1) || !Array.isArray(val2)) {\n                        this.log.error('2values valueList or valueList2 is not a array!');\n                        return {};\n                    }\n                    states = {};\n                    for (const a in val1) {\n                        states[val1[a]] = val2[a];\n                    }\n                    break;\n                }\n                default: {\n                    states = await entityInSel.value.getCommonStates();\n                }\n            }\n            if (value !== null && states) {\n                list.list = [];\n                list.states = [];\n                for (const a in states) {\n                    list.list.push(this.library.getTranslation(String(states[a])));\n                    list.states.push(a);\n                }\n                if (!list.value) list.value = states[value];\n            }\n        }\n        return list;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAuB;AAEvB,mBAA8B;AAC9B,YAAuB;AAGvB,+BAAkC;AAElC,0BAAsB;AAKf,MAAM,iBAAiB,2CAAkB;AAAA,EAC5C,iBAAiB,MAAM;AAAA,EACvB,kBAAkB,MAAM;AAAA,EACxB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,gBAAuC;AAAA,EACvC;AAAA,EACA,WAAgB;AAAA,EAChB;AAAA,EACA,YACI,QACA,SACF;AACE,UAAM,EAAE,GAAG,OAAO,CAAC;AACnB,SAAK,QAAQ,OAAO;AACpB,SAAK,KAAK,OAAO;AACjB,SAAK,SAAS;AACd,SAAK,SAAS,UAAU,OAAO;AAC/B,SAAK,OAAO,KAAK,SAAS,KAAK,OAAO,OAAO,MAAM,KAAK,KAAK,KAAK;AAClE,SAAK,QAAQ;AAAA,EACjB;AAAA,EAEA,OAAO,YACH,QACA,SACoB;AACpB,QAAI,YAAY;AAAW,aAAO;AAClC,QAAI,OAAO,MAAM,oBAAoB,OAAO;AAAK,aAAO,OAAO,MAAM,oBAAoB,OAAO;AAChG,WAAO,IAAI,SAAS,QAAQ,OAA+D;AAAA,EAC/F;AAAA,EACA,MAAM,OAAsB;AACxB,QAAI,CAAC,KAAK;AAAQ;AAClB,UAAM,SAAS,gBAAgB,KAAK,MAAM;AAQ1C,UAAM,WAAoD,MAAM,KAAK,MAAM,gBAAgB;AAAA,MACvF,OAAO;AAAA,MACP;AAAA,IACJ;AACA,SAAK,YAAY,EAAE,GAAG,QAAQ,MAAM,SAAS;AAE7C,YAAQ,KAAK,UAAU,MAAM;AAAA,MACzB,KAAK;AAAA,MACL,KAAK;AACD;AAAA,MACJ,KAAK,WAAW;AACZ,cAAM,OAAO,KAAK,UAAU;AAC5B,aAAK,WAAW,CAAC;AACjB,aAAK,SAAS,KAAK,KAAK,MAAM,KAAK,GAAG;AACtC,aAAK,SAAS,KAAK,KAAK,QAAQ,KAAK,KAAK;AAC1C,aAAK,SAAS,KAAK,KAAK,QAAQ,KAAK,KAAK;AAC1C,aAAK,SAAS,KAAK,KAAK,OAAO,KAAK,IAAI;AACxC,aAAK,SAAS,KAAK,KAAK,SAAS,KAAK,MAAM;AAC5C,aAAK,SAAS,KAAK,KAAK,SAAS,KAAK,MAAM;AAC5C,cAAM,OAAO,MAAM,KAAK,gBAAgB,KAAK,OAAO;AACpD,YAAI,MAAM;AACN,mBAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,kBAAM,OACF,QACA,KAAK,MACL,KAAK,GAAG,MACP,MAAM,KAAK,MAAM,gBAAgB,eAAe,KAAK,GAAG,EAAE;AAC/D,gBAAI,QAAQ,KAAK,UAAU,KAAK,OAAO;AAAO,mBAAK,SAAS,KAAK;AAAA,UACrE;AAAA,QACJ;AACA,YAAI,KAAK,WAAW,KAAK,QAAQ,OAAO;AACpC,cACK,KAAK,QAAQ,MAAM,SAAS,YACzB,KAAK,QAAQ,YACb,KAAK,QAAQ,YACb,KAAK,QAAQ,SACb,KAAK,QAAQ,MAAM,aACtB,KAAK,QAAQ,MAAM,SAAS,aAAa,KAAK,QAAQ,SAAS,KAAK,QAAQ,MAAM,WACrF;AACE,iBAAK,SAAS,KAAK;AACnB,iBAAK,SAAS,KAAK;AAAA,UACvB;AAAA,QACJ;AAEA,YAAI,KAAK,WAAW,KAAK,QAAQ,OAAO;AACpC,cACI,KAAK,QAAQ,MAAM,SAAS,YAC5B,KAAK,QAAQ,YACb,KAAK,QAAQ,YACb,KAAK,QAAQ,SACb,KAAK,QAAQ,MAAM,WACrB;AACE,iBAAK,SAAS,KAAK;AACnB,iBAAK,SAAS,KAAK;AAAA,UACvB;AAAA,QACJ;AAEA;AAAA,MACJ;AAAA,MACA,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK,OAAO;AACR;AAAA,MACJ;AAAA,MACA,KAAK,SAAS;AACV,YAAI,KAAK,UAAU,SAAS,WAAW,KAAK,aAAa,QAAW;AAChE,eAAK,WAAW,EAAE,QAAQ,SAAS,OAAO,EAAE;AAC5C,cAAI,CAAC,KAAK,MAAM,oBAAoB,KAAK;AAAK,iBAAK,MAAM,oBAAoB,KAAK,MAAM;AAAA,QAC5F;AACA;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,KAAK,WAAW,KAAK,OAAO,SAAS,iBAAiB,KAAK,OAAO,SAAS,iBAAiB;AAC5F,UAAI,CAAC,KAAK,MAAM,oBAAoB,KAAK,KAAK;AAC1C,YAAI,KAAK,OAAO,SAAS;AACrB,kBAAQ,KAAK,OAAO,SAAS;AAAA,YACzB,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AACD;AAAA,YACJ,KAAK;AAAA,YACL,KAAK;AACD,mBAAK,yBAAyB;AAC9B;AAAA,UACR;AAAA,QACJ;AAEA,aAAK,MAAM,oBAAoB,KAAK,MAAM;AAC1C,cAAM,KAAK,WAAW,gBAAgB,gBAAgB,IAAI;AAAA,MAC9D;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAM,qBAAsC;AAxJhD;AAyJQ,UAAM,KAAK,WAAW,gBAAgB,gBAAgB,IAAI;AAC1D,SAAK,gBAAgB;AACrB,QAAI,KAAK,aAAa,KAAK,QAAQ;AAC/B,WAAK,aAAa;AAClB,WAAK,gBAAgB;AACrB,YAAM,QAAQ,KAAK;AACnB,YAAM,UAA6C,CAAC;AACpD,cAAQ,gBAAgB,KAAK;AAC7B,cAAQ,MAAM,MAAM;AAAA,QAChB,KAAK,SAAS;AACV,gBAAM,OAAO,MAAM;AACnB,kBAAQ,OAAO;AAEf,gBAAM,IAAI,MAAM,MAAM,qBAAqB,KAAK,OAAO;AACvD,gBAAM,UAAU,UAAK,UAAU,KAAK,OAAO,SAAU,MAAM,KAAK,OAAO,MAAM,UAAU,MAAvE,YAA8E;AAC9F,cAAI,OACC,iBAAM,MAAM,mBAAmB,IAAI,MAAnC,YACA,KAAK,SAAS,KAAK,MAAM,QAAS,MAAM,KAAK,MAAM,KAAK,YAAY,MADpE,YAED;AACJ,gBAAM,QAAQ,UAAK,OAAQ,MAAM,KAAK,IAAI,UAAU,MAAtC,YAA6C;AAC3D,cAAI,QAAQ,QAAQ;AAAM,mBAAM,WAAM,QAAQ,MAAM,GAAG,CAAC,MAAxB,YAA6B;AAC7D,kBAAQ,OAAO,MAAM,MAAM,kBAAkB,KAAK,MAAM,GAAG,IAAI,EAAE;AACjE,gBAAM,YAAmC,CAAC,KAAK,YACzC,SACC,MAAM,KAAK,UAAU,WAAW,IAC/B,QACA;AAER,kBAAQ,aACH,yBAAc,QACT,MAAM,MAAM;AAAA,YACR,oBAAO;AAAA,YACP,WAAW,OAAQ,SAAS,IAAI,SAAS,IAAK;AAAA,UAClD,IACA,MAAM,MAAM,4BAA4B,KAAK,IAAI,0BAAU,GAAG,MALnE,YAMA,MAAM,MAAM,kBAAkB,KAAK,MAAM,0BAAU,GAAG,MAAM,MAAM,MANlE,YAOD;AACJ,cAAI,GAAG;AACH,oBAAQ,gBAAgB;AAAA,UAC5B,OAAO;AACH,oBAAQ,gBAAgB;AAAA,UAC5B;AACA,kBAAQ,cAAc,KAAK,QAAQ;AAAA,aAC9B,iBAAM,MAAM,kBAAkB,KAAK,UAAU,CAAC,MAA9C,YAAoD,QAAQ,gBAA5D,YAA2E;AAAA,UAChF;AACA,iBAAO,MAAM,gBAAgB,OAAO;AACpC;AAAA,QACJ;AAAA,QACA,KAAK,WAAW;AACZ,gBAAM,OAAO,MAAM;AAEnB,kBAAQ,OAAO;AAEf,gBAAM,QAAQ,MAAM,MAAM,oBAAoB,KAAK,OAAO;AAC1D,cAAI,UAAU,MAAM;AAChB,iBAAK,IAAI,KAAK,UAAU,KAAK,OAAO,oBAAoB;AACxD;AAAA,UACJ;AACA,kBAAQ,OAAO,MAAM,MAAM,kBAAkB,KAAK,MAAM,QAAQ,IAAI,aAAa;AACjF,kBAAQ,YAAY,MAAM,MAAM,kBAAkB,KAAK,MAAM,OAAO,MAAM,KAAK;AAC/E,gBAAM,gBAAgB,KAAK,YACrB,MAAM,KAAK,UAAU,UAAU,IAC/B;AAAA,YACI;AAAA,YACA;AAAA,YACA;AAAA,UACJ;AACN,cAAI,iBACA,MAAM,QAAQ,aAAa,KAAK,cAAc,MAAM,CAAC,MAAM,OAAO,MAAM,QAAQ,IAC1E,CAAC,GAAG,aAAa,IACjB,CAAC,IAAI,IAAI,EAAE;AACrB,2BAAiB,eAAe,OAAO,GAAG,CAAC,EAAE,IAAI,CAAC,MAAO,IAAI,0BAAM,QAAQ,CAAC,IAAI,CAAE;AAClF,yBAAe,QAAQ,CAAC,GAAG,MAAM;AAC7B,gBAAI;AAAG,6BAAe,IAAI,KAAK,KAAK,SAAS,KAAK,WAAW;AAAA,iBACxD;AACD,6BAAe,KAAK;AACpB,6BAAe,IAAI,KAAK;AAAA,YAC5B;AAAA,UACJ,CAAC;AAED,yBAAe,KAAK,UAAU,IAAI,YAAY,eAAe;AAC7D,yBAAe,KAAK,UAAU,MAAM,YAAY,eAAe;AAC/D,kBAAQ,gBAAgB,eAAe,KAAK,GAAG;AAC/C,kBAAQ,cAAc,KAAK,QAAQ;AAAA,aAC9B,iBAAM,MAAM,kBAAkB,KAAK,UAAU,CAAC,CAAC,KAAK,MAApD,YAA0D,QAAQ,gBAAlE,YAAiF;AAAA,UACtF;AACA,iBAAO,MAAM,gBAAgB,OAAO;AACpC;AAAA,QACJ;AAAA,QAEA,KAAK,UAAU;AACX,cAAI,MAAM,SAAS,UAAU;AACzB,kBAAM,OAAO,MAAM;AACnB,oBAAQ,OAAO;AACf,kBAAM,UAAU,WAAM,MAAM,oBAAoB,KAAK,SAAS,KAAK,MAAnD,YAAyD;AACzE,oBAAQ,cAAc,KAAK,QAAQ;AAAA,eAC9B,WAAM,MAAM,kBAAkB,KAAK,MAAM,IAAI,MAA7C,YAAmD;AAAA,YACxD;AACA,oBAAQ,QAAQ,WAAM,MAAM,kBAAkB,KAAK,MAAM,MAAM,EAAE,MAAjD,YAAuD;AACvE,oBAAQ,aAAa,WAAM,MAAM,kBAAkB,KAAK,MAAM,MAAM,MAAM,KAAK,MAA1D,YAAgE;AACrF,kBAAM,OACD,UAAK,WAAW,KAAK,QAAQ,YAAa,MAAM,KAAK,QAAQ,SAAS,UAAU,MAAhF,YAAuF;AAC5F,kBAAM,OACD,UAAK,WAAW,KAAK,QAAQ,YAAa,MAAM,KAAK,QAAQ,SAAS,UAAU,MAAhF,YAAuF;AAC5F,mBAAO,MAAM;AAAA,cACT,QAAQ;AAAA,cACR,QAAQ;AAAA,cACR,QAAQ;AAAA,cACR,QAAQ;AAAA,cACR,QAAQ;AAAA,cACR,GAAG,UAAU,OAAO;AAAA,YACxB;AAAA,UACJ;AACA;AAAA,QACJ;AAAA,QAKA,KAAK,QAAQ;AACT,cAAI,MAAM,SAAS,QAAQ;AACvB,kBAAM,OAAO,MAAM;AACnB,oBAAQ,OAAO;AACf,gBAAI,QAAiC,MAAM,MAAM,oBAAoB,KAAK,SAAS,KAAK;AACxF,gBAAI,UAAU;AAAM,sBAAQ,MAAM,MAAM,qBAAqB,KAAK,OAAO;AACzE,gBAAI,UAAU;AAAM,sBAAQ;AAC5B,oBAAQ,cAAc,KAAK,QAAQ;AAAA,eAC9B,WAAM,MAAM,kBAAkB,KAAK,MAAM,CAAC,CAAC,KAAK,MAAhD,YAAsD;AAAA,YAC3D;AACA,oBAAQ,MAAM,MAAM;AAAA,cAChB,KAAK,WAAW;AACZ,wBAAQ,gBAAgB;AACxB,sBAAM,OAAO,MAAM,MAAM,oBAAoB,KAAK,OAAO;AACzD,sBAAM,OAAO,MAAM,MAAM,oBAAoB,KAAK,OAAO;AACzD,sBAAM,QACF,KAAK,WAAW,KAAK,QAAQ,QAAS,MAAM,KAAK,QAAQ,KAAK,UAAU;AAC5E,sBAAM,QACF,KAAK,WAAW,KAAK,QAAQ,QAAS,MAAM,KAAK,QAAQ,KAAK,UAAU;AAC5E,oBAAI,SAAS,QAAQ,SAAS,MAAM;AAChC,0BAAQ,gBAAgB,OAAO,IAAI,KAAK,wBAAS,MAAM,OAAO,IAAI,KAAK,wBAAS;AAChF,sBAAI,OAAO,UAAU;AAAU,4BAAS,OAAO,OAAO;AAAA,gBAC1D;AAEA;AAAA,cACJ;AAAA,cACA,SAAS;AACL,wBAAQ,gBAAgB,KAAK,QAAQ;AAAA,mBAChC,iBAAM,MAAM,oBAAoB,KAAK,OAAO,MAA5C,YACI,MAAM,MAAM,kBAAkB,KAAK,OAAO,CAAC,CAAC,KAAK,MADrD,YAEG;AAAA,gBACR;AAAA,cACJ;AAAA,YACJ;AACA,oBAAQ,MAAM,MAAM;AAAA,cAChB,KAAK,eAAe;AAChB,wBAAQ,QACH,WAAM,MAAM,kBAAkB,KAAK,MAAM,CAAC,CAAC,OAAO,IAAI,MAAM,IAAI,MAAhE,YAAsE;AAC3E;AAAA,cACJ;AAAA,cACA,KAAK,eAAe;AAChB,wBAAQ,QACH,WAAM,MAAM,kBAAkB,KAAK,MAAM,CAAC,CAAC,OAAO,IAAI,MAAM,KAAK,MAAjE,YAAuE;AAC5E;AAAA,cACJ;AAAA,cACA,KAAK,WAAW;AACZ,sBAAM,OAAO,WAAM,MAAM,qBAAqB,KAAK,OAAO,MAA7C,YAAmD;AAChE,wBAAQ,QAAQ,WAAM,MAAM,kBAAkB,KAAK,MAAM,KAAK,IAAI,IAAI,KAAK,MAA3D,YAAiE;AAEjF;AAAA,cACJ;AAAA,cACA,KAAK,YAAY;AACb,wBAAQ,QACH,WAAM,MAAM,kBAAkB,KAAK,MAAM,CAAC,CAAC,OAAO,IAAI,MAAM,KAAK,MAAjE,YAAuE;AAC5E,wBAAQ,SACH,WAAM,MAAM,kBAAkB,KAAK,MAAM,CAAC,CAAC,OAAO,IAAI,MAAM,IAAI,MAAhE,YAAsE;AAC3E;AAAA,cACJ;AAAA,cACA,SAAS;AACL,wBAAQ,QACH,WAAM,MAAM;AAAA,kBACT,KAAK;AAAA,kBACL,CAAC,CAAC;AAAA,kBACF;AAAA,kBACA;AAAA,mBACC,UAAK,UACF,KAAK,OAAO,SAAS,kBACrB,CAAC,KAAK,OAAO,KAAK,WAAW,SAAS,MAFzC,YAGG;AAAA,gBACR,MATC,YASK;AAAA,cACd;AAAA,YACJ;AAEA,oBAAQ,aAAa,WAAM,MAAM,kBAAkB,KAAK,MAAM,OAAO,MAAM,KAAK,MAA3D,YAAiE;AACtF,mBAAO,MAAM;AAAA,cACT,QAAQ;AAAA,cACR,QAAQ;AAAA,cACR,QAAQ;AAAA,cACR,QAAQ;AAAA,cACR,QAAQ;AAAA,cACR,QAAQ;AAAA,YACZ;AAAA,UACJ;AACA;AAAA,QACJ;AAAA,QACA,KAAK,UAAU;AAIX,gBAAM,OAAO,MAAM;AAEnB,kBAAQ,kBAAiB,WAAM,MAAM,qBAAqB,KAAK,OAAO,MAA7C,YAAmD,QAAO,MAAM;AACzF,cAAI,KAAK,UAAU,KAAK,OAAO,SAAS;AACpC,oBAAQ,iBACH,WAAM,MAAM,kBAAkB,KAAK,OAAO,QAAQ,iBAAiB,GAAG,MAAtE,YACD,QAAQ;AAChB,kBAAQ,cAAc,KAAK,QAAQ;AAAA,aAC9B,WAAM,MAAM,kBAAkB,KAAK,MAAM,QAAQ,kBAAkB,GAAG,MAAtE,YAA4E;AAAA,UACjF;AAEA,kBAAQ,OAAO,MAAM,MAAM,kBAAkB,KAAK,MAAM,QAAQ,kBAAkB,KAAK,MAAM;AAC7F,kBAAQ,YAAY,MAAM,MAAM,aAAa,KAAK,MAAM,QAAQ,kBAAkB,GAAG;AACrF,iBAAO,MAAM;AAAA,YACT;AAAA,YACA,QAAQ;AAAA,YACR,QAAQ;AAAA,YACR,QAAQ;AAAA,YACR,QAAQ;AAAA,YACR,QAAQ;AAAA,UACZ;AAEA;AAAA,QACJ;AAAA,QAEA,KAAK,aAAa;AACd,gBAAM,OAAO,MAAM;AACnB,kBAAQ,OAAO;AACf,gBAAM,SACD,WAAM,MAAM,oBAAoB,KAAK,WAAW,MAAhD,YACA,MAAM,MAAM,qBAAqB,KAAK,WAAW;AACtD,kBAAQ,OAAO,MAAM,MAAM,kBAAkB,KAAK,MAAM,CAAC,EAAE,wBAAS,OAAO,oBAAoB;AAE/F,kBAAQ,aACH,WAAM,MAAM,kBAAkB,KAAK,MAAM,wBAAS,MAAM,MAAM,MAAM,MAApE,YAA0E,MAAM;AACrF,kBAAQ,cAAc,KAAK,QAAQ;AAAA,aAC9B,iBAAM,MAAM,kBAAkB,KAAK,UAAU,IAAI,MAAjD,YAAuD,QAAQ,gBAA/D,YAA8E;AAAA,UACnF;AACA,kBAAQ,gBAAgB,KAAK,QAAQ;AAAA,aAChC,WAAM,MAAM,kBAAkB,KAAK,MAAM,CAAC,CAAC,KAAK,MAAhD,YAAsD;AAAA,UAC3D;AACA,eAAK,IAAI,MAAM,KAAK,UAAU,OAAO,CAAC;AACtC,iBAAO,MAAM,gBAAgB,OAAO;AAEpC;AAAA,QACJ;AAAA,QACA,KAAK,OAAO;AACR,cAAI,MAAM,SAAS,OAAO;AACtB,kBAAM,OAAO,MAAM;AACnB,oBAAQ,OAAO;AAEf,kBAAM,SAAS,WAAM,MAAM,qBAAqB,KAAK,OAAO,MAA7C,YAAmD;AAClE,oBAAQ,cAAc,KAAK,QAAQ;AAAA,eAC9B,iBAAM,MAAM,kBAAkB,KAAK,UAAU,IAAI,MAAjD,YAAuD,QAAQ,gBAA/D,YAA8E;AAAA,YACnF;AACA,oBAAQ,QAAQ,WAAM,MAAM,kBAAkB,KAAK,MAAM,OAAO,EAAE,MAAlD,YAAwD;AACxE,oBAAQ,aAAa,WAAM,MAAM,kBAAkB,KAAK,MAAM,OAAO,MAAM,KAAK,MAA3D,YAAiE;AAMtF,mBAAO,MAAM;AAAA,cACT,QAAQ;AAAA,cACR,QAAQ;AAAA,cACR,QAAQ;AAAA,cACR,QAAQ;AAAA,cACR,QAAQ;AAAA,cACR,QAAQ,MAAM;AAAA,YAClB;AAAA,UACJ;AAAA,QACJ;AAAA,QACA,KAAK,SAAS;AACV,cAAI,MAAM,SAAS,SAAS;AACxB,kBAAM,OAAO,MAAM;AACnB,oBAAQ,OAAO;AACf,kBAAM,QAAuB,CAAC,KAAK,aAC5B,UAAK,WAAY,MAAM,MAAM,oBAAoB,KAAK,OAAO,MAA7D,YAAoE,QACpE,UAAK,YAAY,KAAK,SAAS,SAA/B,YAAwC;AAE/C,gBAAI,UAAU,MAAM;AAChB,kBAAI,MAAM;AACV,kBAAI,KAAK,UAAU;AACf,sBAAM,IAAI,KAAK,IAAI,KAAK,EAAE,SAAS,GAAG,GAAG,KAAK,SAAS,OAAO,CAAC,CAAC,EAAE;AAAA,kBAC9D;AAAA,kBACA,EAAE,QAAQ,WAAW,QAAQ,UAAU;AAAA,gBAC3C;AAAA,cACJ;AACA,sBAAQ,YAAY,MAAM,MAAM,kBAAkB,KAAK,MAAM,OAAO,MAAM,KAAK;AAC/E,sBAAQ,OAAO,MAAM,MAAM,kBAAkB,KAAK,MAAM,MAAM,oBAAoB;AAClF,sBAAQ,gBAAgB,KAAK,QAAQ;AAAA,iBAChC,WAAM,MAAM,kBAAkB,KAAK,MAAM,UAAU,CAAC,MAApD,YAA0D;AAAA,cAC/D;AAEA,sBAAQ,cAAc,KAAK,QAAQ;AAAA,iBAC9B,iBAAM,MAAM,kBAAkB,KAAK,UAAU,IAAI,MAAjD,YAAuD,QAAQ,gBAA/D,YAA8E;AAAA,cACnF;AACA,qBAAO,MAAM;AAAA,gBACT,QAAQ;AAAA,gBACR,QAAQ;AAAA,gBACR,QAAQ;AAAA,gBACR,QAAQ;AAAA,gBACR,QAAQ;AAAA,gBACR,QAAQ;AAAA,cACZ;AAAA,YACJ;AAAA,UACJ;AACA;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,SAAK,IAAI,KAAK,2BAA2B,KAAK,YAAY,KAAK,UAAU,KAAK,OAAO,OAAO;AAC5F,WAAO;AAAA,EACX;AAAA,EAEA,iBAAiB,SAAkE;AA5dvF;AA6dQ,SAAK,gBAAgB;AACrB,QAAI,CAAC,QAAQ;AAAM,aAAO;AAC1B,YAAQ,QAAQ,MAAM;AAAA,MAClB,KAAK,YAAY;AACb,YAAI,SAAiD;AAAA,UACjD,MAAM;AAAA,UACN,MAAM;AAAA,UACN,YAAY;AAAA,UACZ,cAAc;AAAA,UACd,aAAa;AAAA,UACb,YAAY;AAAA,UACZ,YAAY;AAAA,UACZ,SAAS;AAAA,UACT,iBAAiB;AAAA,UACjB,oBAAoB;AAAA,UACpB,oBAAoB;AAAA,UACpB,OAAO;AAAA,QACX;AACA,iBAAS,OAAO,OAAO,QAAQ,OAAO;AACtC,eAAO,MAAM;AAAA,UACT;AAAA,UACA,OAAO;AAAA,WACP,YAAO,SAAP,YAAe;AAAA,UACf,OAAO;AAAA,UACP,OAAO,gBAAgB,YAAY,YAAY,OAAO,cAAc,MAAM;AAAA,UAC1E,OAAO,OAAO,UAAU;AAAA,UACxB,OAAO,OAAO,UAAU;AAAA,UACxB,OAAO,UAAU,WAAW;AAAA,UAC5B,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO,QAAQ,WAAW;AAAA,QAC9B;AACA;AAAA,MACJ;AAAA,MACA,KAAK,SAAS;AACV,YAAI,SAAiD;AAAA,UACjD,MAAM;AAAA,UACN,YAAY;AAAA,UACZ,WAAW,OAAO,MAAM,WAAW,MAAM,KAAK,CAAC;AAAA,UAC/C,cAAc;AAAA,UACd,MAAM;AAAA,QACV;AACA,iBAAS,OAAO,OAAO,QAAQ,OAAO;AACtC,eAAO,MAAM;AAAA,UACT;AAAA,UACA,OAAO;AAAA,UACP;AAAA,UACA,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,QACX;AACA;AAAA,MACJ;AAAA,MACA,KAAK,eAAe;AAChB,YAAI,SAAiD;AAAA,UACjD,MAAM;AAAA,UACN,YAAY;AAAA,UACZ,UAAU;AAAA,UACV,cAAc;AAAA,UACd,MAAM;AAAA,QACV;AACA,iBAAS,OAAO,OAAO,QAAQ,OAAO;AACtC,eAAO,MAAM,WAAW,OAAO,UAAU,OAAO,YAAY,OAAO,cAAc,OAAO,IAAI;AAC5F;AAAA,MACJ;AAAA,MACA,KAAK,YAAY;AACb,YAAI,SAAiD;AAAA,UACjD,MAAM;AAAA,UACN,YAAY;AAAA,UACZ,MAAM;AAAA,UACN,WAAW;AAAA,UACX,aAAa;AAAA,UACb,SAAS;AAAA,UACT,YAAY;AAAA,UACZ,WAAW;AAAA,UACX,MAAM;AAAA,UACN,UAAU;AAAA,QACd;AACA,iBAAS,OAAO,OAAO,QAAQ,OAAO;AACtC,eAAO,MAAM;AAAA,UACT;AAAA,UACA,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,QACX;AACA;AAAA,MACJ;AAAA,MACA,KAAK,cAAc;AACf,YAAI,SAAiD;AAAA,UACjD,MAAM;AAAA,UACN,YAAY;AAAA,UACZ,WAAW;AAAA,UACX,SAAS;AAAA,UACT,SAAS;AAAA,UACT,UAAU;AAAA,UACV,SAAS;AAAA,UACT,SAAS;AAAA,UACT,SAAS;AAAA,UACT,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,QACX;AACA,iBAAS,OAAO,OAAO,QAAQ,OAAO;AACtC,eAAO,MAAM;AAAA,UACT;AAAA,UACA,OAAO;AAAA,UACP;AAAA,UACA,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,QACX;AACA;AAAA,MACJ;AAAA,MACA,KAAK,gBAAgB;AACjB,YAAI,SAAiD;AAAA,UACjD,MAAM;AAAA,UACN,YAAY;AAAA,UACZ,MAAM;AAAA,UACN,OAAO;AAAA,UACP,UAAU;AAAA,UACV,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,UAAU;AAAA,UACV,UAAU;AAAA,UACV,UAAU;AAAA,UACV,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,UAAU;AAAA,UACV,UAAU;AAAA,UACV,MAAM;AAAA,QACV;AACA,iBAAS,OAAO,OAAO,QAAQ,OAAO;AACtC,eAAO,MAAM;AAAA,UACT;AAAA,UACA,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,cAAc,MAAyC;AAjpBjE;AAkpBQ,QAAI,CAAC,KAAK,UAAU,CAAC,KAAK;AAAW,aAAO;AAC5C,UAAM,QAAQ,KAAK;AACnB,QAAI,UAA2D,CAAC;AAEhE,YAAQ,aAAa,KAAK;AAC1B,SAAK,aAAa;AAClB,SAAK,gBAAgB;AACrB,YAAQ,MAAM;AAAA,MACV,KAAK;AAAA,MACL,KAAK,cAAc;AACf,gBAAQ,KAAK,OAAO,MAAM;AAAA,UACtB,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,SAAS;AACL,oBAAQ,OAAO;AACf,gBAAI,QAAQ,SAAS,cAAc,MAAM,SAAS;AAAS,qBAAO;AAClE,kBAAM,OAAO,MAAM;AACnB,oBAAQ,eAAe,WAAM,MAAM,qBAAqB,KAAK,OAAO,MAA7C,YAAmD;AAC1E,kBAAM,SAAS,KAAK,UAAU,KAAK,OAAO,SAAU,MAAM,KAAK,OAAO,MAAM,UAAU;AACtF,gBAAI,UAAU,QAAQ,KAAK,QAAQ;AAC/B,mBAAK,OAAO;AACZ,kBAAI,KAAK,OAAO,YAAY,UAAa,KAAK,OAAO,UAAU;AAC3D,wBAAQ,aAAa,KAAK;AAAA,kBACtB,MAAM;AAAA,oBACF;AAAA,oBACA,MAAM,KAAK,OAAO,SAAS,UAAU;AAAA,oBACrC,MAAM,KAAK,OAAO,SAAS,UAAU;AAAA,oBACrC;AAAA,oBACA;AAAA,kBACJ;AAAA,gBACJ;AAAA,cACJ,OAAO;AACH,wBAAQ,aAAa;AAAA,cACzB;AAAA,YACJ;AACA,gBAAI,QAAQ,gBAAgB;AACxB,sBAAQ,OAAO,MAAM,MAAM,kBAAkB,KAAK,MAAM,QAAQ,aAAa,IAAI,EAAE;AAEvF,oBAAQ,gBACH,WAAM,MAAM;AAAA,cACT,KAAK;AAAA,cACL,QAAQ,eAAe,UAAa,QAAQ,eAAe,YACrD,QACA,aAAQ,eAAR,YAAsB,QAAQ,gBAAgB;AAAA,cACpD,MAAM;AAAA,YACV,MANC,YAMK;AACV,gBAAI,MAAM;AACV,oBAAQ,KAAK,OAAO,MAAM;AAAA,cACtB,KAAK;AAAA,cACL,KAAK;AAAA,cACL,KAAK;AAAA,cACL,KAAK;AACD;AAAA,cACJ,KAAK,OAAO;AACR,sBAAM,QAAQ,UAAK,OAAQ,MAAM,KAAK,IAAI,UAAU,MAAtC,YAA6C;AAC3D,oBAAI;AAAM,yBAAM,WAAM,QAAQ,MAAM,GAAG,CAAC,MAAxB,YAA6B;AAC7C;AAAA,cACJ;AAAA,cACA,KAAK,aAAa;AACd,uBAAO,WAAM,MAAM,mBAAmB,IAAI,MAAnC,YAAyC;AAChD;AAAA,cACJ;AAAA,cACA,KAAK,OAAO;AACR,uBAAO,UAAK,SAAS,KAAK,MAAM,QAAS,MAAM,KAAK,MAAM,KAAK,YAAY,MAApE,YAA2E;AAClF;AAAA,cACJ;AAAA,cACA,KAAK,WAAW;AACZ,uBAAO,UAAK,SAAS,KAAK,MAAM,QAAS,MAAM,KAAK,MAAM,KAAK,YAAY,MAApE,YAA2E;AAClF;AAAA,cACJ;AAAA,YACJ;AACA,oBAAQ,aAAa;AACrB,gBAAI,KAAK,OAAO;AACZ,oBAAM,MAAM,MAAM,MAAM,gBAAgB,KAAK,KAAK;AAClD,sBAAQ,aAAa,oBAAO;AAAA,YAChC,WAAW,KAAK,MAAM,KAAK,GAAG,OAAO;AACjC,oBAAM,KAAK,MAAM,MAAM,qBAAqB,KAAK,EAAE;AACnD,kBAAI,OAAO,MAAM;AACb,wBAAQ,aAAa,SAAS,EAAE;AAAA,cACpC;AAAA,YACJ;AACA,kBAAM,YAAmC,CAAC,KAAK,YACzC,SACC,MAAM,KAAK,UAAU,WAAW,IAC/B,QACA;AAER,oBAAQ,UAAU,QAAQ;AAC1B,gBAAI,QAAQ,QAAQ,cAAc,OAAO;AACrC,sBAAQ,eAAe,MAAM,MAAM;AAAA,gBAC/B;AAAA,gBACA,QAAQ,eAAe,aAAa,QAAQ,eAAe,SACrD,QAAQ,aAAa,KACjB,QAAQ,aACR,KACJ,QAAQ,gBAAgB,aAAa,QAAQ,gBAAgB;AAAA,cACvE;AAAA,YACJ;AACA,gBAAI,QAAQ,eAAe,aAAa,cAAc,MAAM;AACxD,sBAAQ,gBACH,WAAM,MAAM,4BAA4B,KAAK,IAAI,0BAAU,GAAG,MAA9D,YAAoE;AAAA,YAC7E;AAEA,oBAAQ,QAAQ,QAAQ,eAAe,aAAa,QAAQ;AAE5D,oBAAQ,sBACH,UAAK,SAAS,KAAK,MAAM,QAAS,MAAM,KAAK,MAAM,KAAK,UAAU,MAAlE,YAAyE;AAC9E,oBAAQ,sBACH,UAAK,SAAS,KAAK,MAAM,QAAS,MAAM,KAAK,MAAM,KAAK,UAAU,MAAlE,YAAyE;AAC9E,oBAAQ,mBACH,UAAK,SAAS,KAAK,MAAM,QAAS,MAAM,KAAK,MAAM,KAAK,UAAU,MAAlE,YAAyE;AAE9E,gBAAI,QAAQ,uBAAuB;AAC/B,sBAAQ,qBAAqB,KAAK,QAAQ,eAAe,QAAQ,kBAAkB;AACvF,gBAAI,QAAQ,uBAAuB;AAC/B,sBAAQ,qBAAqB,KAAK,QAAQ,eAAe,QAAQ,kBAAkB;AACvF,gBAAI,QAAQ,oBAAoB;AAC5B,sBAAQ,kBAAkB,KAAK,QAAQ,eAAe,QAAQ,eAAe;AAEjF;AAAA,UACJ;AAAA,QACJ;AACA;AAAA,MACJ;AAAA,MAEA,KAAK,YAAY;AACb,YAAI,MAAM,SAAS,OAAO;AACtB,gBAAM,OAAO,MAAM;AACnB,kBAAQ,OAAO;AACf,cAAI,QAAQ,SAAS;AAAY;AAEjC,gBAAM,SAAS,WAAM,MAAM,qBAAqB,KAAK,OAAO,MAA7C,YAAmD;AAClE,kBAAQ,QAAQ,WAAM,MAAM,kBAAkB,KAAK,MAAM,OAAO,EAAE,MAAlD,YAAwD;AACxE,kBAAQ,aAAa,WAAM,MAAM,kBAAkB,KAAK,MAAM,OAAO,MAAM,KAAK,MAA3D,YAAiE;AAGtF,kBAAQ,UAAU,QAAQ,WAAM,MAAM,gBAAgB,KAAK,KAAK,MAAtC,YAA4C,EAAE;AACxE,kBAAQ,aAAa;AAAA,aAChB,UAAK,SAAS,KAAK,MAAM,YAAa,MAAM,KAAK,MAAM,SAAS,UAAU,MAA1E,YAAiF;AAAA,UACtF;AAEA,kBAAQ,cAAc,QAAQ,MAAM;AACpC,kBAAQ,YAAY,KAAK,QAAQ;AAAA,aAC5B,WAAM,MAAM,kBAAkB,KAAK,MAAM,KAAK,MAA9C,YAAoD;AAAA,UACzD;AACA,kBAAQ,OAAO,KAAK,QAAQ;AAAA,aACvB,WAAM,MAAM,oBAAoB,KAAK,WAAW,MAAhD,YAAsD;AAAA,UAC3D;AACA,cAAI,QACC,gBAAK,aAAc,MAAM,KAAK,UAAU,UAAU,MAAlD,YACA,KAAK,aAAc,MAAM,KAAK,UAAU,UAAU,MADlD,YAED;AAKJ,cAAI,SAAS,MAAM;AACf,gBAAI,MAAM,QAAQ,IAAI;AAAG,qBAAO,KAAK,KAAK,GAAG;AAAA,UACjD;AACA,kBAAQ,WAAW,OAAO,SAAS,WAAW,OAAO;AAAA,QACzD;AACA;AAAA,MACJ;AAAA,MACA,KAAK;AAAA,MACL,KAAK,cAAc;AACf,YAAI,MAAM,SAAS,eAAe,MAAM,SAAS;AAAS;AAC1D,cAAM,OAAO,MAAM;AACnB,gBAAQ,OAAO;AACf,YAAI,EAAE,QAAQ,SAAS;AAAU,iBAAO;AAExC,cAAM,SAAS,WAAM,MAAM,qBAAqB,KAAK,WAAW,MAAjD,YAAuD;AACtE,YAAI,QAAQ,SAAS;AACjB,kBAAQ,YAAY,MAAM,MAAM,cAAc,KAAK,OAAO,OAAO,MAAM,KAAK;AAChF,gBAAQ,eAAe,KAAK,QAAQ;AAAA,WAC/B,UAAK,YAAa,MAAM,KAAK,SAAS,UAAU,MAAhD,YAAuD;AAAA,QAC5D;AACA,cAAM,QACF,KAAK,eACJ,MAAM,KAAK;AAAA,UACR,KAAK;AAAA,UACL,KAAK;AAAA,UACL,MAAM;AAAA,UACN,gBAAgB,OAAO,KAAK,aAAa;AAAA,QAC7C;AACJ,YAAI,UAAU,UAAa,MAAM,SAAS,UAAa,MAAM,UAAU,QAAW;AAC9E,kBAAQ,YAAY,MAAM,MAAM,cAAc,KAAK,OAAO,CAAC,CAAC,OAAO,MAAM,KAAK;AAC9E,cAAI,MAAM,KAAK,SAAS,GAAG;AACvB,kBAAM,KAAK,OAAO,EAAE;AACpB,oBAAQ,OAAO,MAAM,QAAQ,MAAM,IAAI,IACjC,MAAM,KAAK,IAAI,CAAC,MAAc,MAAM,gBAAgB,CAAC,CAAC,EAAE,KAAK,GAAG,IAChE;AAEN,oBAAQ,eAAe,MAAM,gBAAgB,KAAK,QAAQ,eAAe,MAAM,KAAK,CAAC;AACrF,gBAAI,SAAS;AAAe;AAC5B,sBAAU,EAAE,GAAG,SAAS,MAAM,cAAc;AAC5C,gBAAI,QAAQ,SAAS,eAAe;AAChC,sBAAQ,WAAW,KAAK,QAAQ;AAAA,iBAC3B,iBAAM,MAAM,kBAAkB,KAAK,UAAU,IAAI,MAAjD,YAAuD,QAAQ,aAA/D,YAA2E;AAAA,cAChF;AAAA,YACJ;AACA;AAAA,UACJ;AAAA,QACJ;AAEA,YAAI,QAAQ,gBAAK,aAAc,MAAM,KAAK,UAAU,UAAU,MAAlD,YACP,KAAK,aAAc,MAAM,KAAK,UAAU,UAAU,MAD3C,YACkD;AAAA,UACtD;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACJ;AAKJ,YAAI,SAAS,MAAM;AACf,cAAI,OAAO,SAAS;AAAU,mBAAO,KAAK,MAAM,GAAG;AACnD,cAAI,MAAM,QAAQ,IAAI;AAAG,iBAAK,OAAO,EAAE;AAAA,QAC3C;AAAO,iBAAO,CAAC;AAEf,gBAAQ,OAAO,MAAM,QAAQ,IAAI,IAAI,KAAK,IAAI,CAAC,MAAc,MAAM,gBAAgB,CAAC,CAAC,EAAE,KAAK,GAAG,IAAI;AACnG,YAAI,QAAQ,QAAQ,QAAQ,KAAK,SAAS,KAAK;AAC3C,kBAAQ,OAAO,QAAQ,KAAK,MAAM,GAAG,GAAG;AACxC,eAAK,IAAI,KAAK,mCAAmC;AAAA,QACrD;AACA,YAAI,SAAS;AAAe;AAC5B,kBAAU,EAAE,GAAG,SAAS,MAAM,cAAc;AAC5C,YAAI,QAAQ,SAAS,eAAe;AAChC,kBAAQ,WAAW,KAAK,QAAQ;AAAA,aAC3B,iBAAM,MAAM,kBAAkB,KAAK,UAAU,IAAI,MAAjD,YAAuD,QAAQ,aAA/D,YAA2E;AAAA,UAChF;AAAA,QACJ;AAEA;AAAA,MACJ;AAAA,MACA,KAAK;AACD;AAAA,MACJ,KAAK,gBAAgB;AAGjB,YAAI,MAAM,SAAS;AAAW;AAC9B,cAAM,OAAO,MAAM;AACnB,gBAAQ,OAAO;AACf,YAAI,EAAE,QAAQ,SAAS;AAAiB;AACxC,gBAAQ,SAAS,UAAK,QAAQ,KAAK,KAAK,QAAS,MAAM,KAAK,KAAK,KAAK,UAAU,MAA/D,YAAsE;AACvF,gBAAQ,QAAQ,KAAK,QAAQ,eAAe,QAAQ,KAAK;AACzD,cAAM,QAAQ,WAAM,MAAM,oBAAoB,KAAK,OAAO,MAA5C,YAAkD;AAChE,cAAM,QAAQ,WAAM,MAAM,oBAAoB,KAAK,OAAO,MAA5C,YAAkD;AAChE,YAAI,SAAS;AAAW,kBAAQ,QAAQ,WAAM,MAAM,kBAAkB,KAAK,MAAM,OAAO,IAAI,EAAE,MAAtD,YAA4D;AAAA,iBAC3F,SAAS;AACd,kBAAQ,QAAQ,WAAM,MAAM,kBAAkB,KAAK,MAAM,OAAO,IAAI,EAAE,MAAtD,YAA4D;AAChF,cAAM,gBAAgB,KAAK,YACrB,MAAM,KAAK,UAAU,UAAU,IAC/B;AAAA,UACI;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACJ;AACN,cAAM,MAAM,CAAC,MAAM,IAAI;AACvB,iBAAS,QAAQ,GAAG,QAAQ,IAAI,QAAQ,SAAS;AAC7C,gBAAM,MAAM,IAAI;AAChB,cAAI,OAAO;AAAW;AAEtB,gBAAM,IAAI,QAAQ;AAElB,cAAI,iBACA,MAAM,QAAQ,aAAa,KAAK,cAAc,MAAM,CAAC,MAAM,OAAO,MAAM,QAAQ,IAC1E,CAAC,GAAG,aAAa,IACjB,CAAC,IAAI,IAAI,EAAE;AACrB,2BAAiB,eAAe,OAAO,GAAG,CAAC,EAAE,IAAI,CAAC,MAAO,IAAI,0BAAM,QAAQ,CAAC,IAAI,CAAE;AAClF,yBAAe,QAAQ,CAAC,GAAGA,OAAM;AAC7B,gBAAI;AAAG,6BAAeA,KAAI,KAAK,KAAK,SAASA,MAAK,WAAW;AAAA,iBACxD;AACD,6BAAeA,MAAK;AACpB,6BAAeA,KAAI,KAAK;AAAA,YAC5B;AAAA,UACJ,CAAC;AACD,cAAI,UAAU,GAAG;AACb,oBAAQ,OAAO,OAAO,GAAG;AACzB,oBAAQ,YAAY,WAAM,MAAM,kBAAkB,KAAK,OAAO,IAAI,MAA9C,YAAoD;AACxE,oBAAQ,WAAW,KAAK,QAAQ,eAAe,QAAQ,QAAQ;AAC/D,oBAAQ,SAAS,eAAe;AAChC,oBAAQ,SAAS,eAAe;AAChC,oBAAQ,SAAS,eAAe;AAChC,oBAAQ,WAAW,QAAQ,IAAI,YAAY,eAAe;AAC1D,oBAAQ,WAAW,QAAQ,aAAa,YAAY,eAAe;AACnE,oBAAQ,WAAW,QAAQ,MAAM,YAAY,eAAe;AAAA,UAChE,OAAO;AACH,oBAAQ,OAAO,OAAO,GAAG;AACzB,oBAAQ,YAAY,WAAM,MAAM,kBAAkB,KAAK,OAAO,IAAI,MAA9C,YAAoD;AACxE,oBAAQ,WAAW,KAAK,QAAQ,eAAe,QAAQ,QAAQ;AAC/D,oBAAQ,SAAS,eAAe;AAChC,oBAAQ,SAAS,eAAe;AAChC,oBAAQ,SAAS,eAAe;AAChC,oBAAQ,WAAW,QAAQ,IAAI,YAAY,eAAe;AAC1D,oBAAQ,WAAW,eAAe;AAClC,oBAAQ,WAAW,QAAQ,MAAM,YAAY,eAAe;AAAA,UAChE;AAAA,QACJ;AACA;AAAA,MACJ;AAAA,MACA,KAAK,cAAc;AACf,YAAI,MAAM,SAAS;AAAS;AAC5B,cAAM,OAAO,MAAM;AACnB,gBAAQ,OAAO;AACf,YAAI,EAAE,QAAQ,SAAS;AAAe;AACtC,YAAI,KAAK,aAAa,QAAW;AAC7B,kBAAQ,YAAY,MAAM,MAAM,aAAa,KAAK,MAAM,KAAK,SAAS,WAAW,KAAK;AACtF,kBAAQ,UAAU,KAAK,MAAM,KAAK,SAAS,QAAQ,EAAE,EAAE,QAAQ,CAAC;AAChE,kBAAQ,UAAU,KAAK,MAAM,KAAK,SAAS,QAAQ,EAAE,EAAE,QAAQ,CAAC;AAEhE,cAAI,KAAK,SAAS,WAAW,OAAO;AAChC,oBAAQ,WAAW;AACnB,oBAAQ,UAAU;AAClB,oBAAQ,UAAU;AAElB,oBAAQ,QAAQ,KAAK,QAAQ,eAAe,OAAO;AACnD,oBAAQ,QAAQ,KAAK,QAAQ,eAAe,OAAO;AAAA,UAEvD,WAAW,KAAK,SAAS,QAAQ,GAAG;AAChC,oBAAQ,WAAW;AACnB,oBAAQ,UAAU;AAClB,oBAAQ,UAAU;AAElB,oBAAQ,QAAQ,KAAK,QAAQ,eAAe,UAAU;AACtD,oBAAQ,QAAQ,KAAK,QAAQ,eAAe,OAAO;AAAA,UAEvD,OAAO;AACH,oBAAQ,WAAW;AACnB,oBAAQ,UAAU;AAClB,oBAAQ,QAAQ,KAAK,QAAQ,eAAe,OAAO;AAAA,UACvD;AAAA,QACJ;AACA;AAAA,MACJ;AAAA,IACJ;AAKA,WAAO,KAAK,iBAAiB,OAAO;AAAA,EACxC;AAAA,EAEA,aAAqB;AACjB,WAAO,KAAK,SAAS,KAAK,OAAO,OAAO,MAAM,KAAK,KAAK,KAAK;AAAA,EACjE;AAAA,EACA,MAAM,SAAwB;AAC1B,SAAK,aAAa;AAClB,UAAM,KAAK,WAAW,gBAAgB,kBAAkB,IAAI;AAC5D,QAAI,KAAK,MAAM,oBAAoB,KAAK,KAAK;AACzC,UAAI,CAAC,KAAK,MAAM;AAAQ;AAAA,IAC5B;AACA,UAAM,MAAM,OAAO;AACnB,SAAK,SAAS;AAAA,EAClB;AAAA,EAEA,MAAM,UAAU,QAAgB,OAAiC;AAxgCrE;AAygCQ,QAAI,UAAU,UAAa,KAAK,cAAc;AAAW,aAAO;AAChE,UAAM,QAAQ,KAAK;AACnB,YAAQ,QAAQ;AAAA,MACZ,KAAK;AAAA,MACL,KAAK;AACD;AACI,cAAI,EAAE,iBAAiB,MAAM;AAAO;AACpC,gBAAM,KAAK,eAAe,OAAO,KAAK;AAAA,QAC1C;AACA;AAAA,MACJ,KAAK,UAAU;AACX,YAAI,MAAM,SAAS,UAAU;AACzB,cAAI,MAAM,SAAS;AAAa;AAChC,gBAAM,OAAO,MAAM;AACnB,cAAIC,UAAc,UAAK,WAAY,MAAM,KAAK,QAAQ,UAAU,MAA9C,YAAqD;AACvE,cAAIA,WAAU,MAAM;AAChB,iBAAK,MAAM,WAAW,oBAAoBA,MAAK;AAC/C;AAAA,UACJ;AACA,UAAAA,UAAS,UAAK,aAAc,MAAM,KAAK,UAAU,WAAW,MAAnD,YAA0D;AACnE,cAAIA,WAAU,QAAQ,KAAK,WAAW;AAClC,kBAAM,KAAK,UAAU,aAAa;AAAA,UACtC;AACA,cAAI,KAAK,WAAW;AAChB,kBAAM,KAAK,UAAU,aAAa;AAAA,UACtC;AAAA,QACJ,WAAW,MAAM,SAAS,SAAS;AAC/B,gBAAM,OAAO,MAAM;AACnB,eAAK,WAAW,KAAK,QAAQ,SAAU,MAAM,KAAK,QAAQ,MAAM,aAAa;AAAA,QACjF;AACA;AAAA,MACJ;AAAA,MACA,KAAK,oBAAoB;AACrB,YAAI,MAAM,SAAS,SAAS;AACxB,gBAAM,OAAO,MAAM;AACnB,cAAI,QAAQ,KAAK,UAAU,KAAK,OAAO,SAAS,KAAK,OAAO,MAAM,WAAW;AACzE,kBAAM,SAAS,MAAM,MAAM,gBAAgB,KAAK,MAAM;AACtD,gBAAI,WAAW,QAAQ,OAAO,MAAM,KAAK;AACrC,oBAAM,MAAM,gBAAgB,KAAK,QAAQ,SAAS,KAAK,CAAC;AAAA,UAChE,OAAO;AACH,iBAAK,IAAI,KAAK,0BAA0B;AAAA,UAC5C;AAAA,QACJ;AACA;AAAA,MACJ;AAAA,MACA,KAAK,mBAAmB;AACpB,YAAI,MAAM,SAAS,SAAS;AACxB,gBAAM,OAAO,MAAM;AACnB,cAAI,QAAQ,KAAK,SAAS,KAAK,MAAM,OAAO;AACxC,kBAAM,MAAM,gBAAgB,KAAK,OAAO,SAAS,KAAK,CAAC;AAAA,UAC3D;AACA,cAAI,QAAQ,KAAK,MAAM,KAAK,GAAG,SAAS,KAAK,GAAG,MAAM,WAAW;AAC7D,kBAAM,KAAK,MAAM,MAAM,qBAAqB,KAAK,EAAE;AACnD,gBAAI,OAAO,QAAQ,OAAO,EAAE,KAAK;AAC7B,oBAAM,MAAM,qBAAqB,KAAK,IAAI,SAAS,KAAK,CAAC;AAAA,UACjE,OAAO;AACH,iBAAK,IAAI,KAAK,sBAAsB;AAAA,UACxC;AAAA,QACJ;AACA;AAAA,MACJ;AAAA,MACA,KAAK,SAAS;AACV,YAAI,MAAM,SAAS,SAAS;AACxB,gBAAM,OAAO,MAAM;AACnB,cAAI,QAAQ,KAAK,WAAW,KAAK,QAAQ,SAAS,KAAK,QAAQ,MAAM,WAAW;AAC5E,kBAAM,KAAK,QAAQ,MAAM,cAAc,UAAU,GAAG;AAAA,UACxD,OAAO;AACH,iBAAK,IAAI,KAAK,2BAA2B;AAAA,UAC7C;AAAA,QACJ;AACA;AAAA,MACJ;AAAA,MACA,KAAK,cAAc;AACf,YAAI,MAAM,SAAS,SAAS;AACxB,gBAAM,OAAO,MAAM;AACnB,cAAI,QAAQ,KAAK,QAAQ;AACrB,oBAAQ,KAAK,OAAO,MAAM;AAAA,cACtB,KAAK;AAAA,cACL,KAAK;AAAA,cACL,KAAK;AAAA,cACL,KAAK;AACD;AAAA,cACJ,KAAK;AACD,sBAAM,MAAM,cAAc,MAAM,MAAM,YAAY,KAAK,CAAC;AACxD;AAAA,cACJ,KAAK,aAAa;AACd,sBAAM,MAAM,MAAM,YAAY,KAAK;AACnC,sBAAM,MAAM,mBAAmB,MAAM,GAAG;AACxC;AAAA,cACJ;AAAA,cACA,KAAK,OAAO;AACR,sBAAM,MAAM,MAAM,YAAY,KAAK;AACnC,oBAAI,MAAM,MAAM,GAAG,GAAG;AAClB,uBAAK,SACD,KAAK,MAAM,QACV,MAAM,KAAK,MAAM,KAAK,cAAc,KAAK,UAAU,GAAG,CAAC;AAAA,gBAChE;AAEA;AAAA,cACJ;AAAA,cACA,KAAK,WAAW;AACZ,sBAAM,MAAM,MAAM,YAAY,KAAK;AACnC,oBAAI,MAAM,MAAM,GAAG,GAAG;AAClB,uBAAK,SACD,KAAK,MAAM,QACV,MAAM,KAAK,MAAM,KAAK;AAAA,oBACnB,MAAM,gBAAgB,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC;AAAA,kBAC7C;AAAA,gBACR;AAEA;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ,OAAO;AACH,iBAAK,IAAI,KAAK,+BAA+B;AAAA,UACjD;AAAA,QACJ;AACA;AAAA,MACJ;AAAA,MACA,KAAK,YAAY;AACb,YAAI,MAAM,SAAS;AAAW;AAC9B,YAAI,MAAM,KAAK,OAAO,MAAM,KAAK,IAAI,WAAW;AAC5C,gBAAM,KAAK,IAAI,aAAa;AAC5B;AAAA,QACJ;AAAA,MACJ;AAAA,MACA,KAAK,aAAa;AACd,YAAI,MAAM,SAAS;AAAW;AAC9B,YAAI,WAAW,eAAe,MAAM,KAAK,SAAS,MAAM,KAAK,MAAM,WAAW;AAC1E,gBAAM,KAAK,MAAM,aAAa;AAC9B;AAAA,QACJ;AAAA,MACJ;AAAA,MACA,KAAK,YAAY;AACb,YAAI,MAAM,SAAS;AAAW;AAC9B,YAAI,WAAW,cAAc,MAAM,KAAK,SAAS,MAAM,KAAK,MAAM,WAAW;AACzE,gBAAM,KAAK,MAAM,aAAa;AAC9B;AAAA,QACJ;AACA,cAAM,QAAQ,MAAM;AACpB,cAAM,OAAO,MAAM,KAAK,gBAAgB,MAAM,OAAO;AACrD,YAAI,SAAS,QAAQ,KAAK,SAAS,GAAG;AAClC,kBAAQ,QAAQ;AAAA,YACZ,KAAK,YAAY;AACb,oBAAM,KAAK,QAAQ,qBAAqB,KAAK,GAAG,IAAI,KAAK,GAAG,KAAK;AACjE;AAAA,YACJ;AAAA,YACA,KAAK,YAAY;AACb,oBAAM,KAAK,QAAQ,qBAAqB,KAAK,GAAG,IAAI,KAAK,GAAG,KAAK;AACjE;AAAA,YACJ;AAAA,YACA,KAAK,aAAa;AACd,oBAAM,KAAK,QAAQ,qBAAqB,KAAK,GAAG,IAAI,KAAK,GAAG,KAAK;AACjE;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ,OAAO;AACH,cAAI,MAAM,WAAW,MAAM,QAAQ,OAAO;AACtC,gBAAI,MAAM,QAAQ,MAAM,SAAS,YAAY,MAAM,QAAQ,YAAY,MAAM,QAAQ,UAAU;AAC3F,sBAAQ,QAAQ;AAAA,gBACZ,KAAK,YAAY;AACb,sBAAI,MAAM,eAAe,MAAM,SAAS,QAAQ,GAAG;AAC/C,0BAAMA,SAAQ,MAAM,MAAM,QAAQ,SAAS,UAAU;AACrD,wBAAIA,WAAU;AAAM,4BAAM,MAAM,cAAc,MAAM,SAASA,MAAK;AAAA,kBACtE;AACA;AAAA,gBACJ;AAAA,gBACA,KAAK,YAAY;AACb,sBAAI,MAAM,eAAe,MAAM,SAAS,QAAQ,GAAG;AAC/C,0BAAMA,SAAQ,MAAM,MAAM,oBAAoB,MAAM,OAAO;AAC3D,wBAAIA,WAAU;AAAM,4BAAM,MAAM,cAAc,MAAM,SAASA,MAAK;AAAA,kBACtE;AACA;AAAA,gBACJ;AAAA,gBACA,KAAK,aAAa;AACd,sBAAI,MAAM,eAAe,MAAM,SAAS,QAAQ,GAAG;AAC/C,0BAAMA,SAAQ,MAAM,MAAM,QAAQ,SAAS,UAAU;AACrD,wBAAIA,WAAU;AAAM,4BAAM,MAAM,cAAc,MAAM,SAASA,MAAK;AAAA,kBACtE;AACA;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ,WAAW,MAAM,QAAQ,MAAM,SAAS,WAAW;AAC/C,kBAAI,WAAW;AAAY,sBAAM,MAAM,QAAQ,MAAM,aAAa;AAAA,YACtE;AAAA,UACJ;AAAA,QACJ;AAEA;AAAA,MACJ;AAAA,MAEA,KAAK,MAAM;AACP,YAAI,MAAM,SAAS;AAAW;AAC9B,YAAI,MAAM,KAAK,MAAM,MAAM,KAAK,GAAG,WAAW;AAC1C,gBAAM,KAAK,GAAG,aAAa;AAC3B;AAAA,QACJ;AAAA,MACJ;AAAA,MACA,KAAK,QAAQ;AACT,YAAI,MAAM,SAAS;AAAW;AAC9B,YAAI,WAAW,UAAU,MAAM,KAAK,QAAQ,MAAM,KAAK,KAAK,WAAW;AACnE,gBAAM,KAAK,KAAK,aAAa;AAC7B;AAAA,QACJ;AAAA,MACJ;AAAA,MACA,KAAK,QAAQ;AACT,YAAI,MAAM,SAAS,WAAW;AAC1B,cAAI,WAAW,UAAU,MAAM,KAAK,QAAQ,MAAM,KAAK,KAAK,WAAW;AACnE,kBAAM,KAAK,KAAK,aAAa;AAC7B;AAAA,UACJ;AACA,gBAAM,QAAQ,MAAM;AAEpB,gBAAM,OAAO,MAAM,KAAK,gBAAgB,MAAM,OAAO;AACrD,cAAI,SAAS,QAAQ,KAAK,SAAS,GAAG;AAClC,oBAAQ,QAAQ;AAAA,cACZ,KAAK,MAAM;AACP,sBAAM,KAAK,QAAQ,qBAAqB,KAAK,GAAG,IAAI,KAAK,GAAG,KAAK;AACjE;AAAA,cACJ;AAAA,cACA,KAAK,QAAQ;AACT,sBAAM,KAAK,QAAQ,qBAAqB,KAAK,GAAG,IAAI,KAAK,GAAG,KAAK;AACjE;AAAA,cACJ;AAAA,cACA,KAAK,QAAQ;AACT,sBAAM,KAAK,QAAQ,qBAAqB,KAAK,GAAG,IAAI,KAAK,GAAG,KAAK;AACjE;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ,OAAO;AACH,gBAAI,MAAM,WAAW,MAAM,QAAQ,SAAS,MAAM,QAAQ,YAAY,MAAM,QAAQ,UAAU;AAC1F,kBAAI,MAAM,QAAQ,MAAM,SAAS,UAAU;AACvC,wBAAQ,QAAQ;AAAA,kBACZ,KAAK,MAAM;AACP,wBAAI,MAAM,eAAe,MAAM,SAAS,QAAQ,GAAG;AAC/C,4BAAMA,SAAQ,MAAM,MAAM,QAAQ,SAAS,UAAU;AACrD,0BAAIA,WAAU;AAAM,8BAAM,MAAM,cAAc,MAAM,SAASA,MAAK;AAAA,oBACtE;AACA;AAAA,kBACJ;AAAA,kBACA,KAAK,QAAQ;AACT,wBAAI,MAAM,eAAe,MAAM,SAAS,QAAQ,GAAG;AAC/C,4BAAMA,SAAQ,MAAM,MAAM,oBAAoB,MAAM,OAAO;AAC3D,0BAAIA,WAAU;AAAM,8BAAM,MAAM,cAAc,MAAM,SAASA,MAAK;AAAA,oBACtE;AACA;AAAA,kBACJ;AAAA,kBACA,KAAK,QAAQ;AACT,wBAAI,MAAM,eAAe,MAAM,SAAS,QAAQ,GAAG;AAC/C,4BAAMA,SAAQ,MAAM,MAAM,QAAQ,SAAS,UAAU;AACrD,0BAAIA,WAAU;AAAM,8BAAM,MAAM,cAAc,MAAM,SAASA,MAAK;AAAA,oBACtE;AACA;AAAA,kBACJ;AAAA,gBACJ;AAAA,cACJ,WAAW,MAAM,QAAQ,MAAM,SAAS,WAAW;AAC/C,oBAAI,WAAW;AAAQ,wBAAM,MAAM,QAAQ,MAAM,aAAa;AAAA,cAClE;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AACA;AAAA,MACJ;AAAA,MAIA,KAAK,kBAAkB;AACnB,YAAI,MAAM,SAAS,WAAW;AAC1B,gBAAM,QAAQ,MAAM;AACpB,cAAI,MAAM,eAAe,MAAM,SAAS,QAAQ;AAC5C,kBAAM,MAAM,cAAc,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,QAChE;AACA;AAAA,MACJ;AAAA,MAIA,KAAK,cAAc;AACf,YAAI,MAAM,SAAS,WAAW;AAC1B,gBAAM,QAAQ,MAAM;AACpB,cAAI,MAAM,eAAe,MAAM,SAAS,QAAQ;AAC5C,kBAAM,MAAM,cAAc,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,QAChE;AACA;AAAA,MACJ;AAAA,MACA,KAAK,cAAc;AACf,YAAI,MAAM,SAAS,UAAU;AACzB,gBAAM,OAAO,MAAM;AACnB,gBAAM,MAAM,cAAc,KAAK,SAAS,SAAS,KAAK,GAAG,KAAK;AAAA,QAClE,WAAW,MAAM,SAAS,OAAO;AAC7B,gBAAM,OAAO,MAAM;AACnB,gBAAM,MAAM,cAAc,KAAK,OAAO,SAAS,KAAK,GAAG,KAAK;AAAA,QAChE;AACA;AAAA,MACJ;AAAA,MACA,KAAK,eAAe;AAChB,YAAI,KAAK;AAAc,eAAK,QAAQ,cAAc,KAAK,YAAY;AACnE,YAAI,OAAO;AACP,eAAK,SAAS,QAAQ,MAAM,MAAM,GAAG,EAAE,OAAO,CAAC,GAAG,GAAG,MAAM;AACvD,mBAAO,OAAO,SAAS,CAAC,IAAI,SAAS,CAAC,IAAI,OAAO,IAAI,EAAE;AAAA,UAC3D,CAAC;AAAA,QACL,OAAO;AACH,eAAK,SAAS,SAAS;AACvB,cAAI,KAAK;AAAY,iBAAK,eAAe;AAEzC,eAAK,eAAe,KAAK,QAAQ,YAAY,MAAM;AAC/C,gBAAI,KAAK,UAAU,KAAK;AAAc,mBAAK,QAAQ,cAAc,KAAK,YAAY;AAClF,gBAAI,EAAE,KAAK,SAAS,SAAS,GAAG;AAC5B,mBAAK,SAAS,QAAQ;AACtB,mBAAK,SAAS,SAAS;AACvB,mBAAK,aACD,KAAK,UAAU,QAAQ,WACvB,KAAK,UAAU,QACf,KAAK,UAAU,KAAK,aACpB,KAAK,UAAU,KAAK,UAAU,aAAa;AAC/C,kBAAI,KAAK;AAAY,qBAAK,eAAe;AACzC,kBAAI,KAAK;AAAc,qBAAK,QAAQ,cAAc,KAAK,YAAY;AACnE,mBAAK,eAAe;AAAA,YACxB,WAAW,KAAK,SAAS,QAAQ,GAAG;AAChC,kBAAI,KAAK;AAAY,qBAAK,eAAe;AAAA,uBAChC,KAAK,UAAU,CAAC,KAAK,OAAO,SAAS,KAAK,OAAO,cAAc;AACpE,qBAAK,OAAO,iCAAiC,IAAI;AAAA,YACzD;AAAA,UACJ,GAAG,GAAI;AAAA,QACX;AACA;AAAA,MACJ;AAAA,MACA,KAAK,gBAAgB;AACjB;AAAA,MACJ;AAAA,MACA,KAAK,eAAe;AAChB,YAAI,KAAK,UAAU;AACf,eAAK,SAAS,QAAQ;AACtB,eAAK,SAAS,SAAS;AACvB,cAAI,KAAK;AAAY,iBAAK,eAAe;AACzC,cAAI,KAAK;AAAc,iBAAK,QAAQ,cAAc,KAAK,YAAY;AAAA,QACvE;AAEA;AAAA,MACJ;AAAA,MACA,KAAK,eAAe;AAChB,YAAI,KAAK,UAAU;AACf,eAAK,SAAS,SAAS;AACvB,cAAI,KAAK;AAAY,iBAAK,eAAe;AACzC,cAAI,KAAK;AAAc,iBAAK,QAAQ,cAAc,KAAK,YAAY;AAAA,QACvE;AAEA;AAAA,MACJ;AAAA,MACA,SAAS;AACL,eAAO;AAAA,MACX;AAAA,IA+BJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,MAAgB,iBAAgC;AAC5C,QAAI,KAAK,eAAe;AACpB,UAAI,KAAK,kBAAkB,eAAe;AACtC,aAAK,UAAU,KAAK,OAAO,eAAe,KAAK,IAAI,eAAe,IAAI,IAAI,IAAI;AAC9E;AAAA,MACJ,OAAO;AACH,cAAM,MAAM,MAAM,KAAK,cAAc,KAAK,aAAa;AACvD,YAAI;AAAK,eAAK,YAAY,GAAG;AAAA,MACjC;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,MAAM,gBAAgB,SAA2E;AAC7F,QAAI,CAAC;AAAS,aAAO;AACrB,QAAI,OAA2C,MAAM,QAAQ,UAAU;AACvE,QAAI,SAAS,MAAM;AACf,YAAM,OAAO,MAAM,QAAQ,UAAU;AACrC,UAAI,SAAS;AAAM,eAAO;AAC1B,aAAO,KAAK,MAAM,GAAG,EAAE,IAAI,CAAC,MAAwC;AAChE,cAAM,IAAI,EAAE,MAAM,GAAG;AACrB,eAAO,aAAa,mBAAmB,EAAE,EAAE,IACrC,EAAE,IAAI,EAAE,IAAI,OAAO,EAAE,IAAI,SAAS,EAAE,GAAG,IACvC,EAAE,IAAI,EAAE,IAAI,OAAO,EAAE,GAAG;AAAA,MAClC,CAAC;AAAA,IACL;AACA,WAAO;AAAA,EACX;AAAA,EAUA,MAAM,eAAe,OAAuC,OAAiC;AAEzF,UAAM,OAAO,MAAM;AACnB,QAAI,EAAE,iBAAiB;AAAO,aAAO;AAErC,UAAM,QACF,KAAK,eACJ,MAAM,KAAK;AAAA,MACR,KAAK;AAAA,MACL,KAAK;AAAA,MACL,MAAM;AAAA,MACN,gBAAgB,OAAO,KAAK,aAAa;AAAA,IAC7C;AACJ,QAAI,OAAO;AACP,UACI,MAAM,SAAS,sBACf,MAAM,SAAS,UACf,eAAe,QACf,MAAM,KAAK,SAAS,KAAK,OAAO,UAChC,KAAK,WACP;AACE,cAAM,KAAK,UAAU,cAAc,SAAS,KAAK,IAAI,CAAC;AAEtD,eAAO;AAAA,MACX,WACI,MAAM,WAAW,UACjB,MAAM,OAAO,SAAS,KAAK,OAAO,UAClC,KAAK,eACL,KAAK,YAAY,OACnB;AACE,cAAM,KAAK,YAAY,MAAM,cAAc,MAAM,OAAO,SAAS,KAAK,EAAE;AACxE,eAAO;AAAA,MACX;AAAA,IACJ;AACA,QAAI,CAAC,KAAK;AAAS,aAAO;AAC1B,UAAM,OAAO,MAAM,KAAK,gBAAgB,KAAK,OAAO;AACpD,UAAM,IAAI;AACV,QAAI,QAAQ,KAAK,IAAI;AACjB,UAAI;AACA,cAAM,MAAM,MAAM,KAAK,MAAM,gBAAgB,eAAe,KAAK,GAAG,EAAE;AACtE,YAAI,CAAC,OAAO,CAAC,IAAI,UAAU,IAAI,SAAS;AAAS,gBAAM,IAAI,MAAM,eAAe;AAEhF,cAAM,OAAO,IAAI,OAAO;AACxB,YAAI,WAAgB;AACpB,gBAAQ,KAAK,GAAG,SAAS;AAAA,UACrB,KAAK,QAAQ;AACT,kBAAM,QAAQ,MAAM,KAAK,QAAQ,qBAAqB,KAAK,GAAG,EAAE;AAChE,gBAAI,OAAO;AACP,sBAAQ,OAAO,MAAM,KAAK;AAAA,gBACtB,KAAK,UAAU;AACX,0BACI,MAAM,KACR;AAAA,oBACE,KAAK,MAAM;AACP,iCAAW;AACX;AAAA,oBACJ;AAAA,oBACA,KAAK,OAAO;AACR,iCAAW;AACX;AAAA,oBACJ;AAAA,oBACA,KAAK,QAAQ;AACT,iCAAW;AACX;AAAA,oBACJ;AAAA,oBACA,KAAK,SAAS;AACV,iCAAW;AACX;AAAA,oBACJ;AAAA,oBACA,KAAK,SAAS;AACV,iCAAW;AACX;AAAA,oBACJ;AAAA,oBACA,KAAK,QAAQ;AACT,iCAAW;AACX;AAAA,oBACJ;AAAA,oBACA,KAAK,KAAK;AACN,iCAAW;AACX;AAAA,oBACJ;AAAA,oBACA,KAAK,KAAK;AACN,iCAAW;AACX;AAAA,oBACJ;AAAA,kBACJ;AACA;AAAA,gBACJ;AAAA,gBACA,KAAK;AAAA,gBACL,KAAK,UAAU;AACX,6BAAW,MAAM,QAAQ,IAAI,IAAI;AACjC;AAAA,gBACJ;AAAA,gBACA,KAAK,WAAW;AACZ,6BAAW,CAAC,MAAM;AAClB;AAAA,gBACJ;AAAA,gBAEA,KAAK;AAAA,gBACL,KAAK;AAAA,gBACL,KAAK;AAAA,gBACL,KAAK;AACD,yBAAO;AAAA,cACf;AAAA,YACJ;AACA;AAAA,UACJ;AAAA,UACA,KAAK,QAAW;AACZ,uBAAW,KAAK,QAAQ,QAAQ,cAAc,KAAK,GAAG,OAAO,IAAI;AAAA,UACrE;AAAA,QACJ;AAEA,YAAI,aAAa,MAAM;AACnB,gBAAM,KAAK,QAAQ;AAAA,YACf,KAAK,GAAG;AAAA,YACR;AAAA,YACA,KAAK,GAAG,GAAG,WAAW,KAAK,QAAQ,SAAS;AAAA,UAChD;AACA,iBAAO;AAAA,QACX,OAAO;AACH,eAAK,IAAI,MAAM,8BAA8B,KAAK,GAAG,KAAK;AAAA,QAC9D;AAAA,MACJ,SAAS,GAAP;AACE,aAAK,IAAI,MAAM,MAAM,KAAK,GAAG,kBAAkB;AAAA,MACnD;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,MAAM,kBACF,aACA,WACA,MACA,aAAmC,QACoD;AAljD/F;AAmjDQ,UAAM,OAAuF,CAAC;AAC9F,QACI,eACA,YAAY,SACZ,CAAC,UAAU,QAAQ,EAAE,SAAQ,iBAAY,MAAM,SAAlB,YAA0B,EAAE,MAAM,OAC9D,QAAQ,sBAAuB,MAAM,YAAY,MAAM,gBAAgB,IAC1E;AACE,UAAI,SAAsD;AAC1D,YAAM,QAAQ,MAAM,MAAM,oBAAoB,WAAW;AACzD,cAAQ,MAAM;AAAA,QACV,KAAK,oBAAoB;AACrB,cAAI,WAAW;AACX,kBAAM,MAAO,MAAM,UAAU,UAAU;AACvC,gBAAI,KAAK;AACL,uBAAS,CAAC;AACV,yBAAW,KAAK,KAAK;AACjB,uBAAO,SAAS,CAAC,IAAI,KAAK,IAAI,GAAG;AAAA,cACrC;AACA,mBAAK,QAAQ,wBAAS;AAAA,YAC1B;AAAA,UACJ;AACA;AAAA,QACJ;AAAA,QACA,KAAK,WAAW;AACZ,cAAI,CAAC,aAAa,CAAC,YAAY;AAC3B,iBAAK,IAAI,MAAM,0CAA0C;AACzD,mBAAO,CAAC;AAAA,UACZ;AACA,gBAAM,OAAkB,MAAM,UAAU,UAAU;AAClD,gBAAM,OAAkB,MAAM,WAAW,UAAU;AACnD,cAAI,CAAC,MAAM,QAAQ,IAAI,KAAK,CAAC,MAAM,QAAQ,IAAI,GAAG;AAC9C,iBAAK,IAAI,MAAM,iDAAiD;AAChE,mBAAO,CAAC;AAAA,UACZ;AACA,mBAAS,CAAC;AACV,qBAAW,KAAK,MAAM;AAClB,mBAAO,KAAK,MAAM,KAAK;AAAA,UAC3B;AACA;AAAA,QACJ;AAAA,QACA,SAAS;AACL,mBAAS,MAAM,YAAY,MAAM,gBAAgB;AAAA,QACrD;AAAA,MACJ;AACA,UAAI,UAAU,QAAQ,QAAQ;AAC1B,aAAK,OAAO,CAAC;AACb,aAAK,SAAS,CAAC;AACf,mBAAW,KAAK,QAAQ;AACpB,eAAK,KAAK,KAAK,KAAK,QAAQ,eAAe,OAAO,OAAO,EAAE,CAAC,CAAC;AAC7D,eAAK,OAAO,KAAK,CAAC;AAAA,QACtB;AACA,YAAI,CAAC,KAAK;AAAO,eAAK,QAAQ,OAAO;AAAA,MACzC;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;",
  "names": ["i", "value"]
}
