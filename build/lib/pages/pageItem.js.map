{
  "version": 3,
  "sources": ["../../../src/lib/pages/pageItem.ts"],
  "sourcesContent": ["import * as Color from '../const/Color';\nimport { PageItemInterface } from '../classes/Page';\nimport {\n    PageItemDataItems,\n    MessageItem,\n    entityUpdateDetailMessage,\n    PageTypeUnionTemplate,\n    PageItemDataItemsOptions,\n} from '../types/type-pageItem';\nimport * as tools from '../const/tools';\nimport { PopupType } from '../types/types';\nimport { templatePageElements, templatePageItems } from '../templates/TpageItem';\nimport { BaseClassTriggerd } from '../controller/states-controller';\nimport { Panel } from '../controller/panel';\n\n//light, shutter, delete, text, button, switch, number,input_sel, timer und fan types\nexport class PageItem extends BaseClassTriggerd {\n    defaultOnColor = Color.White;\n    defaultOffColor = Color.Blue;\n    config: PageItemDataItemsOptions | undefined;\n    dataItems: PageItemDataItems | undefined;\n    panel: Panel;\n    id: string;\n    constructor(config: Omit<PageItemInterface, 'pageItemsConfig'>, options: PageItemDataItemsOptions | undefined) {\n        super({ ...config });\n        this.panel = config.panel;\n        this.id = config.id;\n        this.config = options;\n    }\n\n    async init(): Promise<void> {\n        if (!this.config) return;\n        const config = { ...this.config };\n        // search states for mode auto\n        const tempConfig: Partial<PageItemDataItemsOptions['data']> =\n            this.config.initMode === 'auto' && this.config.dpInit\n                ? await this.panel.statesControler.getDataItemsFromAuto(this.config.dpInit, config.data)\n                : config.data;\n        // create Dataitems\n        //this.log.debug(JSON.stringify(tempConfig));\n        const tempItem: PageItemDataItems['data'] = (await this.panel.statesControler.createDataItems(\n            tempConfig,\n            this,\n        )) as PageItemDataItems['data'];\n        this.dataItems = { ...config, data: tempItem } as PageItemDataItems;\n    }\n\n    async getPageItemPayload(): Promise<string> {\n        if (this.dataItems && this.config) {\n            const entry = this.dataItems;\n            const message: Partial<MessageItem> = {};\n            const template = templatePageElements[this.config.type];\n            message.intNameEntity = this.id;\n            switch (entry.type) {\n                case 'light': {\n                    const item = entry.data;\n                    message.type = 'light';\n                    const t =\n                        'item.role' in template &&\n                        (template[this.config.role as keyof typeof template] as PageTypeUnionTemplate | undefined);\n                    if (!t) break;\n                    const dimmer = t.data.dimmer ? item.dimmer && (await item.dimmer.getNumber()) : null;\n                    const rgb = t.data.RGB3\n                        ? (await tools.getDecfromRGBThree(item)) ??\n                          (await tools.getEntryColor(item.color, true, Color.White))\n                        : null;\n                    const hue = t.data.hue && item.hue ? Color.hsvtodec(await item.hue.getNumber(), 1, 1) : null;\n                    let v = (!!t.data.entity1 && (await tools.getValueEntryBoolean(item.entity1))) ?? true;\n                    if (t.data.entity1 === 'invert') v = !v;\n                    message.icon = t.data.icon\n                        ? await tools.getIconEntryValue(item.icon, v, t.data.icon.true.value, t.data.icon.false.value)\n                        : '';\n                    if (v) {\n                        message.optionalValue = '1';\n                        message.iconColor = hue ?? rgb ?? (await tools.GetIconColor(item.icon, dimmer ?? 100));\n                    } else {\n                        message.optionalValue = '0';\n                        message.iconColor = await tools.GetIconColor(item.icon, false);\n                    }\n                    message.displayName = t.data.text1\n                        ? (await tools.getEntryTextOnOff(item.text, v)) ?? v\n                            ? t.data.text1.true\n                            : t.data.text1.false\n                        : message.displayName;\n                    return tools.getItemMesssage(message);\n                    break;\n                }\n                /*case 'shutter': {\n                    const item = entry.data;\n\n                    message.type = 'shutter';\n                    const t =\n                        'item.role' in template &&\n                        (template[this.config.role as keyof typeof template] as PageTypeUnionTemplate | undefined);\n                    if (!t) break;\n                    let value = await tools.getValueEntryNumber(item.entity1);\n                    if (value === null) {\n                        this.log.warn(`Entity ${this.config.role} has no value!`);\n                        break;\n                    }\n                    if (t.data.entity1 === 'invert') value = 100 - value;\n                    message.icon = await tools.getIconEntryValue(item.icon, value < 5, 'window-open');\n                    message.icon = t.data.icon\n                        ? await tools.getIconEntryValue(\n                              item.icon,\n                              value < 5,\n                              t.data.icon.true.value,\n                              t.data.icon.false.value,\n                          )\n                        : '';\n                    const optionalValue =\n                        t.data.optionalData === true\n                            ? [\n                                  Icons.GetIcon('arrow-up'), //up\n                                  Icons.GetIcon('stop'), //stop\n                                  Icons.GetIcon('arrow-down'), //down\n                                  'enable', // up status\n                                  'enable', // stop status\n                                  'enable', // down status\n                              ]\n                            : t.data.optionalData === undefined\n                              ? ['', '', '', 'disable', 'disable', 'disable']\n                              : t.data.optionalData === 'state' && item.valueList\n                                ? await item.valueList.getObject()\n                                : [\n                                      Icons.GetIcon(t.data.optionalData[0]),\n                                      Icons.GetIcon(t.data.optionalData[1]),\n                                      Icons.GetIcon(t.data.optionalData[2]),\n                                      t.data.optionalData[3],\n                                      t.data.optionalData[4],\n                                      t.data.optionalData[5],\n                                  ];\n                    const optionalValueC =\n                        Array.isArray(optionalValue) && optionalValue.every((a) => typeof a === 'string')\n                            ? optionalValue\n                            : ['', '', '', 'disable', 'disable', 'disable'];\n                    message.optionalValue = optionalValueC.join('|');\n                    message.displayName =\n                        (t.data.text && ((await tools.getEntryTextOnOff(item.text, true)) || t.data.text.true)) ??\n                        message.displayName;\n                    return tools.getItemMesssage(message);\n                    break;\n                }\n                case 'text': {\n                    const item = entry.data;\n                    message.type = 'text';\n                    const t =\n                        this.config.role in template &&\n                        (template[this.config.role as keyof typeof template] as PageTypeUnionTemplate | undefined);\n                    if (!t) break;\n                    let value = t.data.entity1 ? await tools.getValueEntryBoolean(item.entity1) : null;\n                    if (value !== null) {\n                        // gate works revese true is closed -> invert value\n                        if (t.data.entity1 === 'invert') value = !value;\n                        let icon = '';\n                        message.iconColor = await tools.GetIconColor(item.icon, value ?? true ? true : false);\n\n                        icon = t.data.icon\n                            ? await tools.getIconEntryValue(\n                                  item.icon,\n                                  value,\n                                  t.data.icon.true.value,\n                                  t.data.icon.false.value,\n                              )\n                            : '';\n                        if (t.data.optionalData) {\n                            if (typeof t.data.optionalData === 'string') {\n                                const arr = t.data.optionalData.split('?');\n                                if (arr.length > 0) {\n                                    message.optionalValue = !value && arr.length > 1 ? arr[1] : arr[0];\n                                }\n                            } else\n                                message.optionalValue = this.library.getTranslation(\n                                    (await tools.getEntryTextOnOff(item.text, value)) ?? '',\n                                );\n                        }\n                        message.displayName =\n                            (t.data.text && (await tools.getEntryTextOnOff(item.text, value))) ?? message.displayName;\n                        message.icon = Icons.GetIcon(icon);\n                        return tools.getItemMesssage(message);\n                    } else {\n                        this.log.error(`Missing data value for ${this.name}-${this.id} role:${this.config.role}`);\n                    }\n                    this.log.debug(JSON.stringify(message));\n                    break;\n                }\n                case 'number': {\n                    const item = entry.data;\n                    break;\n                }*/\n                case 'button': {\n                    /**\n                     * Alles was einen Druckfl\u00E4che sein kann. D\n                     */\n                    const item = entry.data;\n\n                    if (item.entity1 && item.entity1.value) {\n                        /*let value;\n                        if (item.entity1.value.type === 'string') {\n                        } else if (item.entity1.value.type === 'number') {\n                        } else if (item.entity1.value.type === 'boolean') {\n                            value = await tools.getValueEntryBoolean(item.entity1);\n                        }\n                        if (value === undefined) break;\n*/\n                        message.optionalValue = !!(item.setValue1 && (await item.setValue1.getBoolean())) ? '0' : '1';\n                        message.displayName =\n                            (await tools.getEntryTextOnOff(item.text, message.optionalValue === '1')) ?? 'test1';\n\n                        message.icon = await tools.getIconEntryValue(\n                            item.icon,\n                            message.optionalValue === '1',\n                            'home',\n                            'account',\n                        );\n                        message.iconColor = await tools.GetIconColor(item.icon, message.optionalValue === '1');\n                        return tools.getPayload(\n                            'button',\n                            message.intNameEntity,\n                            message.icon,\n                            message.iconColor,\n                            message.displayName,\n                            message.optionalValue,\n                        );\n                    }\n                    break;\n                }\n\n                case 'input_sel': {\n                    const item = entry.data;\n                    message.type = 'input_sel';\n                    const value =\n                        (await tools.getValueEntryNumber(item.entity1)) ??\n                        (await tools.getValueEntryBoolean(item.entity1));\n                    message.icon = await tools.getIconEntryValue(item.icon, !!(value ?? true), 'gesture-tap-button');\n\n                    message.iconColor =\n                        (await tools.GetIconColor(\n                            item.icon,\n                            value ?? true,\n                            Color.HMIOn,\n                            Color.HMIOff,\n                            true,\n                            true,\n                            0,\n                            100,\n                        )) ?? Color.HMIOn;\n\n                    message.optionalValue = (await tools.getEntryTextOnOff(item.text, !!value)) ?? 'PRESS';\n                    this.log.debug(JSON.stringify(message));\n                    return tools.getItemMesssage(message);\n\n                    break;\n                }\n                //case 'switch':\n                /*case 'volumeGroup': {\n                break;\n            }\n            case 'volume': {\n                break;\n            }\n            case 'info':\n            case 'humidity':\n            case 'temperature':\n            case 'value.temperature':\n            case 'value.humidity':\n            case 'sensor.door':\n            case 'sensor.window':\n            case 'thermostat': {\n                break;\n            }\n            case 'warning': {\n                break;\n            }\n            case 'ct': {\n                break;\n            }\n            case 'cie': {\n                break;\n            }\n            case 'motion': {\n                message.type = 'text';\n                const value = await tools.getValueEntryBoolean(item.data.entity1);\n                if (value !== null) {\n                    message.iconColor = await tools.GetIconColor(item.data.icon, value ?? true ? true : false);\n                    message.icon = await tools.getIconEntryValue(item.data.icon, value, 'motion-sensor');\n                    message.optionalValue = tools.getTranslation(this.library, value ? 'on' : 'off');\n                    message.displayName = (await tools.getEntryTextOnOff(item.data.text, value)) ?? message.displayName;\n                    return this.getItemMesssage(message);\n                } else {\n                    this.log.error(`Missing data value for ${this.name}-${id} role:${item.role}`);\n                }\n                break;\n            }\n\n            case 'button': {\n                let value = (item.data.setValue1 && (await item.data.setValue1.getBoolean())) ?? null;\n                if (value === null && item.role === 'buttonSensor') value = true;\n                if (value !== null) {\n                    message.type = item.role === 'buttonSensor' ? 'input_sel' : 'button';\n                    message.iconColor = await tools.GetIconColor(item.data.icon, value);\n                    message.icon = await tools.getIconEntryValue(item.data.icon, value, 'gesture-tap-button');\n                    message.displayName = (await tools.getEntryTextOnOff(item.data.text, value)) ?? '';\n                    message.optionalValue = (await tools.getValueEntryString(item.data.entity1)) ?? 'PRESS';\n                    return this.getItemMesssage(message);\n                } else {\n                    this.log.error(`Missing set value for ${this.name}-${id} role:${item.role}`);\n                }\n                break;\n            }\n            case 'timer': {\n                const value = (item.data.setValue1 && (await item.data.setValue1.getNumber())) ?? null;\n                if (value !== null) {\n                    message.type = 'timer';\n                    message.iconColor = await tools.GetIconColor(item.data.icon, value);\n                    message.icon = await tools.getIconEntryValue(item.data.icon, true, 'gesture-tap-button');\n                    message.optionalValue = (await tools.getEntryTextOnOff(item.data.text, true)) ?? 'PRESS';\n                    return this.getItemMesssage(message);\n                } else {\n                    this.log.error(`Missing set value for ${this.name}-${id} role:${item.role}`);\n                }\n                break;\n            }\n            case 'value.alarmtime': {\n                const value = (item.data.setValue1 && (await item.data.setValue1.getNumber())) ?? null;\n                if (value !== null) {\n                    message.type = 'timer';\n\n                    // das ist im Grunde wie vorher nur das die Farbe in aus der Konfiguration benutzt wird, wenn vorhanden\n                    message.iconColor =\n                        ((await tools.getValueEntryString(item.data.entity2)) ?? '') == 'paused'\n                            ? await tools.getIconEntryColor(\n                                  item.data.icon,\n                                  true,\n                                  String(Color.rgb_dec565(Color.colorScale10)),\n                              )\n                            : await tools.getIconEntryColor(\n                                  item.data.icon,\n                                  false,\n                                  String(Color.rgb_dec565(Color.colorScale0)),\n                              );\n                    message.displayName = new Date(\n                        ((await tools.getValueEntryNumber(item.data.entity1)) || 0) * 1000,\n                    ).toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit', second: '2-digit' });\n                    message.icon = await tools.getIconEntryValue(item.data.icon, true, 'timer-outline');\n                    message.optionalValue = (await tools.getEntryTextOnOff(item.data.text, true)) ?? 'PRESS';\n                    return this.getItemMesssage(message);\n                } else {\n                    this.log.error(`Missing set value for ${this.name}-${id} role:${item.role}`);\n                }\n                break;\n            }\n\n            case 'level.mode.fan': {\n                message.type = 'fan';\n                const value = (await tools.getValueEntryBoolean(item.data.entity1)) ?? false;\n                message.iconColor = await tools.GetIconColor(item.data.icon, value);\n                message.icon = await tools.getIconEntryValue(item.data.icon, value, 'fan');\n                message.optionalValue = value ? '1' : '0';\n                return this.getItemMesssage(message);\n                break;\n            }\n            case 'media.repeat': {\n                message.type = 'button';\n                const value: number | boolean | null =\n                    item.data.entity1 && item.data.entity1.value && item.data.entity1.value.type === 'number'\n                        ? await tools.getValueEntryNumber(item.data.entity1)\n                        : await tools.getValueEntryBoolean(item.data.entity1);\n                if (value !== null) {\n                    message.iconColor = await tools.GetIconColor(item.data.icon, !!value);\n                    if (value === 2) {\n                        message.icon = 'repeat-once';\n                    } else {\n                        message.icon = await tools.getIconEntryValue(\n                            item.data.icon,\n                            !!value,\n                            'repeat-variant',\n                            'repeat-off',\n                        );\n\n                        message.optionalValue = !!value ? '1' : '0';\n                        return this.getItemMesssage(message);\n                    }\n                }\n                break;\n            }\n            case 'text.list': {\n                message.type = 'input_sel';\n                const value: boolean | null =\n                    (item.data.entity1 &&\n                        item.data.entity1.value &&\n                        (await tools.getValueEntryBoolean(item.data.entity1))) ??\n                    null;\n                message.iconColor = await tools.getIconEntryColor(item.data.icon, value, Color.HMIOn, Color.HMIOff);\n                message.icon = await tools.getIconEntryValue(\n                    item.data.icon,\n                    value,\n                    'clipboard-list',\n                    'clipboard-list-outline',\n                );\n                message.displayName = (await tools.getEntryTextOnOff(item.data.text, value)) ?? '';\n                message.optionalValue = !!value ? '1' : '0';\n                return this.getItemMesssage(message);\n\n                break;\n            }\n            /*case 'lock': {\n                break;\n            }\n            case 'slider': {\n                break;\n            }\n            case 'switch.mode.wlan': {\n                break;\n            }\n            case 'media': {\n                break;\n            }\n            case 'timeTable': {\n                break;\n            }\n            case 'airCondition': {\n                break;\n            }*/\n            }\n        }\n        return '~~~~~';\n    }\n\n    getDetailPayload(message: Partial<entityUpdateDetailMessage>): string {\n        if (!message.type) return '';\n        switch (message.type) {\n            case '2Sliders': {\n                let result: entityUpdateDetailMessage = {\n                    type: '2Sliders',\n                    icon: undefined,\n                    entityName: 'test',\n                    slidersColor: 'disable',\n                    buttonState: 'disable',\n                    slider1Pos: 'disable',\n                    slider2Pos: 'disable',\n                    hueMode: false,\n                    hue_translation: '',\n                    slider2Translation: '',\n                    slider1Translation: '',\n                    popup: false,\n                };\n                result = Object.assign(result, message);\n                return tools.getPayload(\n                    'entityUpdateDetail',\n                    result.entityName,\n                    '',\n                    result.slidersColor,\n                    result.buttonState === 'disable' ? 'disable' : result.buttonState ? '1' : '0',\n                    String(result.slider1Pos),\n                    String(result.slider2Pos),\n                    result.hueMode ? 'enable' : 'disable',\n                    result.hue_translation,\n                    result.slider2Translation,\n                    result.slider1Translation,\n                    result.popup ? 'enable' : 'disable',\n                );\n                break;\n            }\n            case 'insel': {\n                let result: entityUpdateDetailMessage = {\n                    type: 'insel',\n                    entityName: '',\n                    textColor: String(Color.rgb_dec565(Color.White)),\n                    headline: '',\n                    list: '',\n                };\n                result = Object.assign(result, message);\n                return tools.getPayload(\n                    'entityUpdateDetail2',\n                    result.entityName,\n                    '',\n                    result.textColor,\n                    result.type,\n                    result.headline,\n                    result.list,\n                );\n                break;\n            }\n        }\n        return '';\n    }\n    async GenerateDetailPage(mode: PopupType): Promise<string | null> {\n        if (!this.config || !this.dataItems) return null;\n        const entry = this.dataItems;\n        const message: Partial<entityUpdateDetailMessage> = {};\n        const template = templatePageItems[mode][this.config.role];\n        message.entityName = this.id;\n\n        switch (mode) {\n            /*case 'popupLight': {\n                switch (this.config.role) {\n                    case 'light':\n                    case 'socket':\n                    case 'dimmer':\n                    case 'hue':\n                    case 'ct':\n                    case 'rgbSingle':\n                    case 'rgb': {\n                        message.type = '2Sliders';\n                        if (message.type !== '2Sliders') return null;\n                        if (template.type !== message.type) return null;\n                        message.buttonState =\n                            (template.buttonState ? await tools.getValueEntryBoolean(item.entity1) : null) ?? 'disable';\n                        const dimmer = item.dimmer && (await item.dimmer.getNumber());\n                        if (dimmer != null && template.slider1Pos) {\n                            if (item.minValue1 != undefined && item.maxValue1) {\n                                message.slider1Pos = Math.trunc(\n                                    Color.scale(\n                                        dimmer,\n                                        await item.minValue1.getNumber(),\n                                        await item.maxValue1.getNumber(),\n                                        100,\n                                        0,\n                                    ),\n                                );\n                            } else {\n                                message.slider1Pos = dimmer;\n                            }\n                        }\n\n                        message.slidersColor = template.slidersColor\n                            ? String(Color.rgb_dec565(template.slidersColor))\n                            : (await tools.getIconEntryColor(item.icon, false, Color.White)) ?? 'disable';\n                        let rgb;\n                        switch (this.config.role) {\n                            case 'socket':\n                            case 'light':\n                            case 'dimmer':\n                            case 'ct':\n                                break;\n                            case 'hue':\n                                rgb = rgb ?? (await tools.getDecfromHue(item)) ?? null;\n                                break;\n                            case 'rgbSingle':\n                            case 'rgb':\n                                //rgb = await tools.getDecfromRGBThree(item);\n                                break;\n                        }\n                        if (rgb !== null && template.hueMode) {\n                            message.hueMode = true;\n                            message.slidersColor = rgb;\n                        }\n\n                        message.slider2Pos = 'disable';\n\n                        let ct = template.slider2Pos ? await tools.getValueEntryNumber(item.entity2) : null;\n                        if (ct != null && template.slider2Pos !== false) {\n                            const max = (item.maxValue2 && (await item.maxValue2.getNumber())) ?? template.slider2Pos;\n                            ct = ct > max ? max : ct < 0 ? 0 : ct;\n                            if (item.minValue2 !== undefined) {\n                                const min = (await item.minValue2.getNumber()) ?? 0;\n                                message.slider2Pos = Math.trunc(Color.scale(ct < min ? min : ct, min, max, 100, 0));\n                            } else {\n                                message.slider2Pos = Math.trunc(Color.scale(ct, 0, max, 100, 0));\n                            }\n                        }\n\n                        if ((template.popup && item.valueList && (await item.valueList.getString())) ?? null !== null) {\n                            message.popup = true;\n                        }\n                        message.slider1Translation =\n                            template.slider1Translation !== false\n                                ? (item.valueList && (await item.valueList.getString())) ?? template.slider1Translation\n                                : '';\n                        message.slider2Translation =\n                            template.slider2Translation !== false\n                                ? (item.valueList && (await item.valueList.getString())) ?? template.slider2Translation\n                                : '';\n                        message.hue_translation =\n                            template.hue_translation !== false\n                                ? (item.valueList && (await item.valueList.getString())) ?? template.hue_translation\n                                : '';\n\n                        break;\n                    }\n                }\n                break;\n            }*/\n            case 'popupFan':\n            case 'popupInSel': {\n                if (entry.type !== 'input_sel') break;\n                const item = entry.data;\n                message.type = 'insel';\n\n                if (message.type !== 'insel') return null;\n\n                const value = (await tools.getValueEntryBoolean(item.entity1)) ?? true;\n\n                message.textColor = await tools.getEntryColor(item.color, value, Color.White);\n                message.headline = this.library.getTranslation(\n                    (item.headline && (await item.headline.getString())) ?? '',\n                );\n                let list = (item.valueList && (await item.valueList.getObject())) ??\n                    (item.valueList && (await item.valueList.getString())) ?? [\n                        '1',\n                        '2',\n                        '3',\n                        '4',\n                        '5',\n                        '6',\n                        '7',\n                        '8',\n                        '9',\n                        '10',\n                        '11',\n                        '12',\n                        '13',\n                    ];\n                if (list !== null) {\n                    if (typeof list === 'string') list = list.split('?');\n                } else list = [];\n                message.list = Array.isArray(list) ? list.map((a: string[]) => tools.formatInSelText(a)).join('?') : '';\n\n                break;\n            }\n        }\n\n        if (template.type !== message.type) {\n            throw new Error(`Template ${template.type} is not ${message.type} for role: ${this.config.role}`);\n        }\n        return this.getDetailPayload(message);\n\n        return null;\n    }\n\n    async delete(): Promise<void> {\n        super.delete();\n    }\n\n    async setPopupAction(action: string, value: string): Promise<void> {\n        if (value === undefined || this.dataItems === undefined) return;\n        const entry = this.dataItems;\n        switch (action) {\n            case 'mode-insel':\n                {\n                    if (entry.type !== 'input_sel') break;\n                    const item = entry.data;\n                    if (!item.setList) return;\n                    let list: any = (await item.setList.getObject()) as { id: string; value: any } | null;\n                    if (list === null) {\n                        list = await item.setList.getString();\n                        list = list.split('|').map((a: string) => {\n                            const t = a.split('?');\n                            return { id: t[0], value: t[1] };\n                        });\n                    }\n                    if (list[value]) {\n                        try {\n                            const obj = await this.adapter.getForeignObjectAsync(list[value].id);\n                            if (!obj || !obj.common || obj.type !== 'state') throw new Error('Dont get obj!');\n                            const type = obj.common.type;\n                            const newValue = this.adapter.library.convertToType(list[value].value, type);\n                            if (newValue !== null) {\n                                await this.adapter.setForeignStateAsync(\n                                    list[value].id,\n                                    newValue,\n                                    list[value].id.startsWith(this.adapter.namespace),\n                                );\n                                this.log.debug(`------------Set dp ${list[value].id} to ${String(newValue)}!`);\n                            } else {\n                                this.log.error(`Try to set a null value to ${list[value].id}!`);\n                            }\n                        } catch (e) {\n                            this.log.error(`Id ${list[value].id} is not valid!`);\n                        }\n                    } else {\n                    }\n                }\n                break;\n            case 'button': {\n                if (entry.type !== 'button') break;\n                const item = entry.data;\n                let value: any = (item.setNavi && (await item.setNavi.getString())) ?? null;\n                if (value !== null) {\n                    this.panel.navigation.setTargetPageByName(value);\n                    break;\n                }\n                value = (item.setValue1 && (await item.setValue1.getBoolean())) ?? null;\n                if (value !== null) {\n                    await item.setValue1!.setStateFlip();\n                }\n            }\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["value"]
}
