{
  "version": 3,
  "sources": ["../../../../src/lib/pages/tools/getMpd.ts"],
  "sourcesContent": ["import { Color } from '../../const/Color';\nimport type * as pages from '../../types/pages';\nimport type { ConfigManager } from '../../classes/config-manager';\n\nexport async function getPageMpd(\n    configManager: ConfigManager,\n    page: ScriptConfig.PageMedia,\n    gridItem: pages.PageBase,\n    messages: string[],\n    justCheck = false,\n): Promise<{ gridItem: pages.PageBase; messages: string[] }> {\n    //const adapter = configManager.adapter;\n    if (justCheck) {\n        return { gridItem, messages: ['done'] };\n    }\n    gridItem.dpInit = `/^${page.media.id.split('.').slice(0, 2).join('\\\\.')}\\\\./`;\n    gridItem = {\n        ...gridItem,\n        uniqueID: page.uniqueName,\n        config: {\n            ...gridItem.config,\n            ident: page.media.id,\n            card: 'cardMedia',\n            logo: {\n                type: 'button',\n                data: {\n                    text1: { true: { type: 'const', constVal: '2' } },\n                    text: { true: { type: 'const', constVal: '1' } },\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'logo-mpd' },\n                            color: { type: 'const', constVal: { r: 250, b: 250, g: 0 } },\n                        },\n                    },\n                    entity1: {\n                        value: {\n                            type: 'const',\n                            constVal: 3,\n                        },\n                    },\n                },\n            },\n            data: {\n                headline: page.media.name ? await configManager.getFieldAsDataItemConfig(page.media.name) : undefined,\n\n                album: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: 'media.album',\n                    regexp: /\\.album$/,\n                    dp: '',\n                },\n                title: {\n                    value: {\n                        mode: 'auto',\n                        type: 'triggered',\n                        role: 'media.title',\n                        regexp: /\\.title$/,\n                        dp: '',\n                    },\n                    true: page.media.colorMediaArtist\n                        ? {\n                              color: await configManager.getFieldAsDataItemConfig(page.media.colorMediaArtist),\n                          }\n                        : undefined,\n                },\n                duration: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: 'media.duration',\n                    regexp: /\\.current_duration_s$/,\n                    dp: '',\n                    read: `return val ? val*1000 : val;`,\n                },\n                onOffColor: {\n                    true: page.media.colorMediaIcon\n                        ? { color: await configManager.getIconColor(page.media.colorMediaIcon) }\n                        : undefined,\n                },\n                elapsed: {\n                    mode: 'auto',\n                    type: 'triggered',\n                    role: 'media.elapsed',\n                    regexp: /\\.elapsed$/,\n                    dp: '',\n                    read: `return val ? val*1000 : val;`,\n                },\n                volume: {\n                    value: {\n                        mode: 'auto',\n                        type: 'state',\n                        role: 'level.volume',\n                        scale: { min: page.media.minValue ?? 0, max: page.media.maxValue ?? 100 },\n                        regexp: /\\.volume$/,\n                        dp: '',\n                    },\n                    set: {\n                        mode: 'auto',\n                        type: 'state',\n                        role: '',\n                        scale: { min: page.media.minValue ?? 0, max: page.media.maxValue ?? 100 },\n                        regexp: /\\.setvol$/,\n                        dp: '',\n                    },\n                },\n                artist: {\n                    value: {\n                        mode: 'auto',\n                        type: 'state',\n                        role: 'media.artist',\n                        regexp: /\\.artist$/,\n                        dp: '',\n                    },\n                    true: page.media.colorMediaArtist\n                        ? {\n                              color: await configManager.getIconColor(page.media.colorMediaArtist),\n                          }\n                        : undefined,\n                },\n                shuffle: {\n                    value: {\n                        mode: 'auto',\n                        type: 'triggered',\n                        role: 'media.mode.shuffle',\n                        regexp: /\\.random$/,\n                        dp: '',\n                    },\n                    set: {\n                        mode: 'auto',\n                        type: 'state',\n                        role: 'media.mode.shuffle',\n                        regexp: /\\.random$/,\n                        dp: '',\n                    },\n                },\n                icon: {\n                    type: 'const',\n                    constVal: 'dialpad',\n                },\n                play: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: 'button.play',\n                    regexp: /\\.play$/,\n                    dp: '',\n                },\n                isPlaying: {\n                    mode: 'auto',\n                    type: 'triggered',\n                    role: 'media.state',\n                    regexp: /\\.state$/,\n                    dp: '',\n                    read: `return val === 'play';`,\n                },\n                mediaState: {\n                    mode: 'auto',\n                    type: 'triggered',\n                    role: 'media.state',\n                    regexp: /\\.state$/,\n                    dp: '',\n                },\n                stop: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: 'button.stop',\n                    regexp: /\\.stop$/,\n                    dp: '',\n                },\n                pause: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: 'button.pause',\n                    regexp: /\\.pause$/,\n                    dp: '',\n                },\n                forward: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: 'button.next',\n                    regexp: /\\.next$/,\n                    dp: '',\n                },\n                backward: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: 'button.prev',\n                    regexp: /\\.previous$/,\n                    dp: '',\n                },\n            },\n        },\n        items: undefined,\n        pageItems: [],\n    };\n    gridItem.pageItems = gridItem.pageItems || [];\n\n    // Connection status\n    if (page.media.deactivateDefaultItems?.online !== true) {\n        gridItem.pageItems.push({\n            role: '',\n            type: 'text',\n            dpInit: '',\n            data: {\n                icon: {\n                    true: {\n                        value: { type: 'const', constVal: 'wifi' },\n                        color: await configManager.getIconColor(page.media.itemsColorOn?.online, Color.good),\n                    },\n                    false: {\n                        value: { type: 'const', constVal: 'wifi-off' },\n                        color: await configManager.getIconColor(page.media.itemsColorOff?.online, Color.attention),\n                    },\n                    scale: undefined,\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n                entity1: {\n                    value: {\n                        mode: 'auto',\n                        type: 'triggered',\n                        role: 'indicator.connected',\n                        regexp: /\\.info\\.connection$/,\n                        dp: '',\n                    },\n                },\n                enabled: {\n                    mode: 'auto',\n                    type: 'triggered',\n                    role: 'indicator.connected',\n                    regexp: /\\.info\\.connection$/,\n                    dp: '',\n                    read: 'return !val;',\n                },\n            },\n        });\n    }\n\n    // Repeat mode\n    if (page.media.deactivateDefaultItems?.repeat !== true) {\n        gridItem.pageItems.push({\n            role: '',\n            type: 'button',\n            dpInit: '',\n            data: {\n                icon: {\n                    true: {\n                        value: { type: 'const', constVal: 'repeat-variant' },\n                        color: await configManager.getIconColor(page.media.itemsColorOn?.repeat, Color.activated),\n                    },\n                    false: {\n                        value: { type: 'const', constVal: 'repeat' },\n                        color: await configManager.getIconColor(page.media.itemsColorOff?.repeat, Color.deactivated),\n                    },\n                },\n                entity1: {\n                    value: {\n                        mode: 'auto',\n                        type: 'triggered',\n                        role: 'media.mode.repeat',\n                        regexp: /\\.repeat$/,\n                        dp: '',\n                    },\n                },\n            },\n        });\n    }\n\n    // time\n    if (!page.media.deactivateDefaultItems?.clock) {\n        gridItem.pageItems.push({\n            template: 'text.clock',\n            dpInit: '',\n            data: {\n                icon: {\n                    true: {\n                        color: page.media.itemsColorOn?.clock\n                            ? await configManager.getIconColor(page.media.itemsColorOn?.clock)\n                            : undefined,\n                    },\n                },\n            },\n        });\n    }\n    if (page.media.volumePresets) {\n        gridItem.pageItems.push({\n            role: '',\n            type: 'input_sel',\n            dpInit: '',\n\n            data: {\n                icon: {\n                    true: {\n                        value: { type: 'const', constVal: 'volume-source' },\n                        color: await configManager.getIconColor(\n                            page.media.itemsColorOn?.volumePresets,\n                            Color.activated,\n                        ),\n                    },\n                },\n                entityInSel: {\n                    value: {\n                        mode: 'auto',\n                        type: 'state',\n                        role: 'level.volume',\n                        scale: { min: page.media.minValue ?? 0, max: page.media.maxValue ?? 100 },\n                        regexp: /\\.volume$/,\n                        dp: '',\n                    },\n                    set: {\n                        mode: 'auto',\n                        type: 'state',\n                        role: '',\n                        scale: { min: page.media.minValue ?? 0, max: page.media.maxValue ?? 100 },\n                        regexp: /\\.setvol$/,\n                        dp: '',\n                    },\n                },\n                valueList: {\n                    type: 'const',\n                    constVal: JSON.stringify(page.media.volumePresets || []),\n                },\n\n                headline: {\n                    type: 'const',\n                    constVal: 'volumePresets',\n                },\n            },\n        });\n    }\n    if (page.media.deactivateDefaultItems?.crossfade !== true) {\n        gridItem.pageItems.push({\n            role: '',\n            type: 'number',\n            dpInit: '',\n            data: {\n                icon: {\n                    true: {\n                        value: { type: 'const', constVal: 'shuffle' },\n                        color: await configManager.getIconColor(page.media.itemsColorOn?.repeat, Color.activated),\n                    },\n                    false: {\n                        value: { type: 'const', constVal: 'shuffle' },\n                        color: await configManager.getIconColor(page.media.itemsColorOff?.repeat, Color.deactivated),\n                    },\n                },\n                entity1: {\n                    value: {\n                        mode: 'auto',\n                        type: 'triggered',\n                        regexp: /\\.crossfade$/,\n                        dp: '',\n                    },\n                    set: {\n                        mode: 'auto',\n                        type: 'triggered',\n                        regexp: /\\.crossfade$/,\n                        dp: '',\n                    },\n                },\n                heading1: {\n                    type: 'const',\n                    constVal: 'crossfade',\n                },\n                minValue1: { type: 'const', constVal: 0 },\n                maxValue1: { type: 'const', constVal: 8 },\n                steps1: { type: 'const', constVal: 0.5 },\n            },\n        });\n    }\n\n    return { gridItem, messages };\n}\n"],
  "mappings": "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",
  "names": []
}
