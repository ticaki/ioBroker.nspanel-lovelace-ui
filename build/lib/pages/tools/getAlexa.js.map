{
  "version": 3,
  "sources": ["../../../../src/lib/pages/tools/getAlexa.ts"],
  "sourcesContent": ["import { Color } from '../../const/Color';\nimport type * as pages from '../../types/pages';\nimport type { ConfigManager } from '../../classes/config-manager';\nimport * as tools from '../../const/tools';\n\nexport async function getPageAlexa(\n    configManager: ConfigManager,\n    page: ScriptConfig.PageMedia,\n    gridItem: pages.PageBaseConfig,\n    messages: string[],\n): Promise<{ gridItem: pages.PageBaseConfig; messages: string[] }> {\n    const adapter = configManager.adapter;\n\n    const arr = page.media.id.split('.').slice(0, 3);\n    const str = arr.join('.');\n    const devices =\n        str && arr.length === 3\n            ? await configManager.adapter.getObjectViewAsync('system', 'device', {\n                  startkey: `${str}.`,\n                  endkey: `${str}${String.fromCharCode(0xfffd)}`,\n              })\n            : { rows: [] };\n\n    if (devices && devices.rows && devices.rows.length > 0) {\n        if (\n            devices.rows.findIndex(row => {\n                if (row && row.value && row.id && row.id.split('.').length === 4) {\n                    return page.media.id === row.id;\n                }\n            }) === -1\n        ) {\n            const msg = `${page.uniqueName}: Media page id ${page.media.id} is not a valid alexa2 device!`;\n            messages.push(msg);\n            adapter.log.warn(msg);\n            return { gridItem, messages };\n        }\n    }\n\n    gridItem.dpInit = tools.getRegExp(`/^${page.media.id.split('.').join('\\\\.')}/`) || page.media.id;\n    gridItem = {\n        ...gridItem,\n        config: {\n            ...gridItem.config,\n            ident: page.media.id,\n            card: 'cardMedia',\n            data: {\n                headline: page.media.name ? await configManager.getFieldAsDataItemConfig(page.media.name) : undefined,\n\n                album: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: 'media.album',\n                    regexp: /.?\\.Player\\..?/,\n                    dp: '',\n                },\n                title: {\n                    value: {\n                        mode: 'auto',\n                        type: 'triggered',\n                        role: 'media.title',\n                        regexp: /.?\\.Player\\..?/,\n                        dp: '',\n                    },\n\n                    true: page.media.colorMediaArtist\n                        ? {\n                              color: await configManager.getFieldAsDataItemConfig(page.media.colorMediaArtist),\n                          }\n                        : undefined,\n                },\n                duration: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: 'media.duration',\n                    regexp: /.?\\.Player\\..?/,\n                    dp: '',\n                    read: `return val ? val*1000 : val;`,\n                },\n                onOffColor: {\n                    true: page.media.colorMediaIcon\n                        ? { color: await configManager.getIconColor(page.media.colorMediaIcon) }\n                        : undefined,\n                },\n                elapsed: {\n                    mode: 'auto',\n                    type: 'triggered',\n                    role: ['media.elapsed', 'media.elapsed.text'],\n                    regexp: /.?\\.Player\\..?/,\n                    dp: '',\n                },\n                volume: {\n                    value: {\n                        mode: 'auto',\n                        type: 'state',\n                        role: ['level.volume'],\n                        scale: { min: page.media.minValue ?? 0, max: page.media.maxValue ?? 100 },\n                        regexp: /.?\\.Player\\..?/,\n                        dp: '',\n                    },\n                    set: {\n                        mode: 'auto',\n                        type: 'state',\n                        role: ['level.volume'],\n                        scale: { min: page.media.minValue ?? 0, max: page.media.maxValue ?? 100 },\n                        regexp: /.?\\.Player\\..?/,\n                        dp: '',\n                    },\n                },\n                artist: {\n                    value: {\n                        mode: 'auto',\n                        type: 'state',\n                        role: 'media.artist',\n                        regexp: /.?\\.Player\\..?/,\n                        dp: '',\n                    },\n                    true: page.media.colorMediaArtist\n                        ? {\n                              color: await configManager.getIconColor(page.media.colorMediaArtist),\n                          }\n                        : undefined,\n                },\n                shuffle: {\n                    value: {\n                        mode: 'auto',\n                        type: 'state',\n                        role: 'media.mode.shuffle',\n                        regexp: /.?\\.Player\\..?/,\n                        dp: '',\n                    },\n                    set: {\n                        mode: 'auto',\n                        type: 'state',\n                        role: 'media.mode.shuffle',\n                        regexp: /.?\\.Player\\..?/,\n                        dp: '',\n                    },\n                    enabled: {\n                        mode: 'auto',\n                        type: 'triggered',\n                        role: 'indicator',\n                        regexp: /.?\\.Player\\.allowShuffle$/,\n                        dp: '',\n                    },\n                },\n                icon: {\n                    type: 'const',\n                    constVal: 'dialpad',\n                },\n                play: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: ['button.play'],\n                    regexp: /.?\\.Player\\..?/,\n                    dp: '',\n                },\n                isPlaying: {\n                    mode: 'auto',\n                    type: 'triggered',\n                    role: ['media.state'],\n                    regexp: /.?\\.Player\\..?/,\n                    dp: '',\n                },\n                mediaState: {\n                    mode: 'auto',\n                    type: 'triggered',\n                    role: ['media.state'],\n                    regexp: /.?\\.Player\\..?/,\n                    dp: '',\n                },\n                stop: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: ['button.stop'],\n                    regexp: /.?\\.Player\\..?/,\n                    dp: '',\n                },\n                pause: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: 'button.pause',\n                    regexp: /.?\\.Player\\..?/,\n                    dp: '',\n                },\n                forward: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: 'button.next',\n                    regexp: /.?\\.Player\\..?/,\n                    dp: '',\n                },\n                backward: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: 'button.prev',\n                    regexp: /.?\\.Player\\..?/,\n                    dp: '',\n                },\n                logo: {\n                    on: {\n                        type: 'const',\n                        constVal: true,\n                    },\n                    text: { type: 'const', constVal: '1' },\n                    icon: { true: { type: 'const', constVal: 'logo-alexa' } },\n                    color: { type: 'const', constVal: { r: 250, b: 250, g: 0 } },\n                    list: undefined,\n                    action: 'cross',\n                },\n            },\n        },\n        items: undefined,\n        pageItems: [\n            //reminder\n            {\n                role: 'text.list',\n                type: 'text',\n                dpInit: '',\n\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'reminder' },\n                            color: await configManager.getIconColor(\n                                page.media.itemsColorOff?.reminder,\n                                Color.attention,\n                            ),\n                        },\n                    },\n\n                    entity1: {\n                        value: {\n                            type: 'const',\n                            constVal: true,\n                        },\n                    },\n                    enabled: {\n                        mode: 'auto',\n                        type: 'triggered',\n                        role: 'value',\n                        regexp: /.?\\.Reminder\\.triggered$/,\n                        dp: '',\n                        read: 'return (val != null && lc <= Date.now() + 120000 ? true : false);',\n                    },\n                },\n            },\n            // online\n            {\n                role: '',\n                type: 'text',\n                dpInit: '',\n\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'wifi' },\n                            color: await configManager.getIconColor(page.media.itemsColorOn?.online, Color.good),\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'wifi-off' },\n                            color: await configManager.getIconColor(page.media.itemsColorOff?.online, Color.attention),\n                        },\n                        scale: undefined,\n                        maxBri: undefined,\n                        minBri: undefined,\n                    },\n                    entity1: {\n                        value: {\n                            mode: 'auto',\n                            type: 'triggered',\n                            role: 'indicator.reachable',\n                            regexp: /.?\\.online$/,\n                            dp: '',\n                        },\n                    },\n\n                    enabled: {\n                        mode: 'auto',\n                        type: 'triggered',\n                        role: 'indicator.reachable',\n                        regexp: /.?\\.online$/,\n                        dp: '',\n                        read: 'return !val;',\n                    },\n                },\n            },\n            //speaker select\n            {\n                role: 'alexa-speaker',\n                type: 'input_sel',\n\n                data: {\n                    color: {\n                        true: {\n                            type: 'const',\n                            constVal: Color.HMIOn,\n                        },\n                        false: undefined,\n                    },\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'speaker-multiple' },\n                            color: await configManager.getIconColor(page.media.itemsColorOn?.speakerList, Color.good),\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'speaker-multiple' },\n                            color: await configManager.getIconColor(page.media.itemsColorOff?.speakerList, Color.bad),\n                        },\n                        scale: undefined,\n                        maxBri: undefined,\n                        minBri: undefined,\n                    },\n                    entityInSel: {\n                        value: {\n                            mode: 'auto',\n                            type: 'triggered',\n                            regexp: /.?\\.Info\\.name$/,\n                            dp: '',\n                        },\n                        set: {\n                            mode: 'auto',\n                            type: 'state',\n                            regexp: /.?\\.Commands\\.textCommand$/,\n                            dp: '',\n                        },\n                        decimal: undefined,\n                        factor: undefined,\n                        unit: undefined,\n                    },\n                    headline: {\n                        type: 'const',\n                        constVal: 'speakerList',\n                    },\n                    /**\n                     * valueList string[]/stringify oder string?string?string?string stelle korreliert mit setList  {input_sel}\n                     */\n                    valueList: {\n                        type: 'const',\n                        constVal: JSON.stringify(page.media.speakerList || []),\n                    },\n                    /**\n                     * setList: {id:Datenpunkt, value: zu setzender Wert}[] bzw. stringify  oder ein String nach dem Muster datenpunkt?Wert|Datenpunkt?Wert {input_sel}\n                     */\n                    setList: { type: 'const', constVal: '0_userdata.0.test?1|0_userdata.0.test?2' },\n                },\n            },\n            //playlist select\n            {\n                role: 'alexa-playlist',\n                type: 'input_sel',\n                dpInit: '',\n\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'playlist-play' },\n                            color: await configManager.getIconColor(page.media.itemsColorOn?.playList, Color.activated),\n                        },\n                    },\n                    entityInSel: {\n                        value: {\n                            type: 'const',\n                            constVal: 'My Playlist',\n                        },\n                    },\n                    valueList: {\n                        type: 'const',\n                        constVal: JSON.stringify(page.media.playList || []),\n                    },\n                    headline: {\n                        type: 'const',\n                        constVal: 'playList',\n                    },\n                },\n            },\n            //equalizer\n            {\n                role: '',\n                type: 'number',\n                dpInit: '',\n\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'equalizer-outline' },\n                            color: await configManager.getIconColor(\n                                page.media.itemsColorOn?.equalizer,\n                                Color.activated,\n                            ),\n                        },\n\n                        scale: undefined,\n                        maxBri: undefined,\n                        minBri: undefined,\n                    },\n                    heading1: {\n                        type: 'const',\n                        constVal: 'treble',\n                    },\n                    heading2: {\n                        type: 'const',\n                        constVal: 'midrange',\n                    },\n                    heading3: {\n                        type: 'const',\n                        constVal: 'bass',\n                    },\n                    zero1: {\n                        type: 'const',\n                        constVal: 6,\n                    },\n                    zero2: {\n                        type: 'const',\n                        constVal: 6,\n                    },\n                    zero3: {\n                        type: 'const',\n                        constVal: 6,\n                    },\n                    entity1: {\n                        value: {\n                            mode: 'auto',\n                            type: 'state',\n                            regexp: /.?\\.Preferences\\.equalizerTreble$/,\n                            dp: '',\n                        },\n                        minScale: {\n                            type: 'const',\n                            constVal: -6,\n                        },\n                        maxScale: {\n                            type: 'const',\n                            constVal: 6,\n                        },\n                        decimal: {\n                            type: 'const',\n                            constVal: 0,\n                        },\n                    },\n                    minValue1: {\n                        type: 'const',\n                        constVal: 0,\n                    },\n                    maxValue1: {\n                        type: 'const',\n                        constVal: 12,\n                    },\n\n                    entity2: {\n                        value: {\n                            mode: 'auto',\n                            type: 'state',\n                            regexp: /.?\\.Preferences\\.equalizerMidRange$/,\n                            dp: '',\n                        },\n                        minScale: {\n                            type: 'const',\n                            constVal: -6,\n                        },\n                        maxScale: {\n                            type: 'const',\n                            constVal: 6,\n                        },\n                        decimal: {\n                            type: 'const',\n                            constVal: 0,\n                        },\n                    },\n                    minValue2: {\n                        type: 'const',\n                        constVal: 0,\n                    },\n                    maxValue2: {\n                        type: 'const',\n                        constVal: 12,\n                    },\n                    entity3: {\n                        value: {\n                            mode: 'auto',\n                            type: 'state',\n                            regexp: /.?\\.Preferences\\.equalizerBass$/,\n                            dp: '',\n                        },\n                        minScale: {\n                            type: 'const',\n                            constVal: -6,\n                        },\n                        maxScale: {\n                            type: 'const',\n                            constVal: 6,\n                        },\n                        decimal: {\n                            type: 'const',\n                            constVal: 0,\n                        },\n                    },\n                    minValue3: {\n                        type: 'const',\n                        constVal: 0,\n                    },\n                    maxValue3: {\n                        type: 'const',\n                        constVal: 12,\n                    },\n                    text: {\n                        true: {\n                            type: 'const',\n                            constVal: 'equalizer',\n                        },\n                    },\n                },\n            },\n            // repeat\n            {\n                role: '',\n                type: 'text',\n                dpInit: '',\n\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'repeat-variant' },\n                            color: await configManager.getIconColor(page.media.itemsColorOn?.repeat, Color.activated),\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'repeat' },\n                            color: await configManager.getIconColor(\n                                page.media.itemsColorOff?.repeat,\n                                Color.deactivated,\n                            ),\n                        },\n                        scale: undefined,\n                        maxBri: undefined,\n                        minBri: undefined,\n                    },\n                    entity1: {\n                        value: {\n                            mode: 'auto',\n                            type: 'triggered',\n                            role: 'media.mode.repeat',\n                            regexp: /\\.Player\\.controlRepeat$/,\n                            dp: '',\n                        },\n                    },\n\n                    enabled: {\n                        mode: 'auto',\n                        type: 'triggered',\n                        role: 'indicator',\n                        regexp: /\\.Player\\.allowRepeat$/,\n                        dp: '',\n                    },\n                },\n            },\n        ],\n        uniqueID: page.uniqueName,\n    };\n    return { gridItem, messages };\n}\n"],
  "mappings": "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",
  "names": []
}
