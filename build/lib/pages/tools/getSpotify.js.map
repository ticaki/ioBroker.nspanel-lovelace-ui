{
  "version": 3,
  "sources": ["../../../../src/lib/pages/tools/getSpotify.ts"],
  "sourcesContent": ["import { Color } from '../../const/Color';\nimport type * as pages from '../../types/pages';\nimport type { ConfigManager } from '../../classes/config-manager';\n\nexport async function getPageSpotify(\n    configManager: ConfigManager,\n    page: ScriptConfig.PageMedia,\n    gridItem: pages.PageBaseConfig,\n    messages: string[],\n    justCheck = false,\n): Promise<{ gridItem: pages.PageBaseConfig; messages: string[] }> {\n    //const adapter = configManager.adapter;\n    if (justCheck) {\n        return { gridItem, messages: ['done'] };\n    }\n    gridItem.dpInit = `/^${page.media.id.split('.').slice(0, 2).join('\\\\.')}\\\\./`;\n    gridItem = {\n        ...gridItem,\n        uniqueID: page.uniqueName,\n        config: {\n            ...gridItem.config,\n            ident: page.media.id,\n            card: 'cardMedia',\n            logo: {\n                type: 'number',\n                data: {\n                    text: { true: { type: 'const', constVal: 'media.seek' } },\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'logo-spotify' },\n                            color: { type: 'const', constVal: { r: 250, b: 250, g: 0 } },\n                        },\n                    },\n                    entity1: {\n                        value: {\n                            mode: 'auto',\n                            type: 'triggered',\n                            role: '',\n                            regexp: /.?\\.player\\.progressPercentage$/,\n                            dp: '',\n                        },\n                        set: {\n                            mode: 'auto',\n                            type: 'state',\n                            writeable: true,\n                            role: '',\n                            regexp: /.?\\.player\\.progressPercentage$/,\n                            dp: '',\n                        },\n                    },\n                },\n            },\n            data: {\n                headline: page.media.name ? await configManager.getFieldAsDataItemConfig(page.media.name) : undefined,\n\n                album: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: '',\n                    regexp: /.?\\.player\\.album$/,\n                    dp: '',\n                },\n                title: {\n                    value: {\n                        mode: 'auto',\n                        type: 'triggered',\n                        role: '',\n                        regexp: /.?\\.player\\.trackName$/,\n                        dp: '',\n                    },\n\n                    true: page.media.colorMediaArtist\n                        ? {\n                              color: await configManager.getFieldAsDataItemConfig(page.media.colorMediaArtist),\n                          }\n                        : undefined,\n                },\n                duration: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: '',\n                    regexp: /.?\\.player\\.durationMs/,\n                    dp: '',\n                },\n                onOffColor: {\n                    true: page.media.colorMediaIcon\n                        ? { color: await configManager.getIconColor(page.media.colorMediaIcon) }\n                        : undefined,\n                },\n                elapsed: {\n                    mode: 'auto',\n                    type: 'triggered',\n                    role: '',\n                    regexp: /.?\\.player\\.progressMs$/,\n                    dp: '',\n                },\n                volume: {\n                    value: {\n                        mode: 'auto',\n                        type: 'triggered',\n                        role: '',\n                        scale: { min: page.media.minValue ?? 0, max: page.media.maxValue ?? 100 },\n                        regexp: /.?\\.player\\.volume$/,\n                        dp: '',\n                    },\n                    set: {\n                        mode: 'auto',\n                        type: 'state',\n                        role: '',\n                        scale: { min: page.media.minValue ?? 0, max: page.media.maxValue ?? 100 },\n                        regexp: /.?\\.player\\.volume$/,\n                        dp: '',\n                    },\n                },\n                artist: {\n                    value: {\n                        mode: 'auto',\n                        type: 'state',\n                        role: '',\n                        regexp: /.?\\.player\\.artistName/,\n                        dp: '',\n                    },\n                    true: page.media.colorMediaArtist\n                        ? {\n                              color: await configManager.getIconColor(page.media.colorMediaArtist),\n                          }\n                        : undefined,\n                },\n                shuffle: {\n                    value: {\n                        mode: 'auto',\n                        type: 'triggered',\n                        role: '',\n                        regexp: /.?\\.player\\.shuffle$/,\n                        dp: '',\n                        read: `return val == 'on';`,\n                        write: `return val === 'ON' || val === true  ? 'on' : 'off';`,\n                    },\n                    set: {\n                        mode: 'auto',\n                        type: 'state',\n                        role: '',\n                        regexp: /.?\\.player\\.shuffle$/,\n                        dp: '',\n                        read: `return val == 'on';`,\n                        write: `return val === 'ON' || val === true  ? 'on' : 'off';`,\n                    },\n                    /*enabled: {\n                                    mode: 'auto',\n                                    type: 'triggered',\n                                    role: 'indicator',\n                                    regexp: /.?\\.Player\\.allowShuffle$/,\n                                    dp: '',\n                                },*/\n                },\n                icon: {\n                    type: 'const',\n                    constVal: 'dialpad',\n                },\n                play: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: '',\n                    regexp: /.?\\.player\\.play$/,\n                    dp: '',\n                },\n                isPlaying: {\n                    mode: 'auto',\n                    type: 'triggered',\n                    role: '',\n                    regexp: /.?\\.player\\.isPlaying$/,\n                    dp: '',\n                },\n                /*mediaState: {\n                                mode: 'auto',\n                                type: 'triggered',\n                                role: ['media.state'],\n                                regexp: /.?\\.Player\\..?/,\n                                dp: '',\n                            },*/\n                /*stop: {\n                                mode: 'auto',\n                                type: 'state',\n                                role: ['button.stop'],\n                                regexp: /.?\\.Player\\..?/,\n                                dp: '',\n                            },*/\n                pause: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: '',\n                    regexp: /.?\\.player\\.pause$/,\n                    dp: '',\n                },\n                forward: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: '',\n                    regexp: /.?\\.player\\.skipPlus$/,\n                    dp: '',\n                },\n                backward: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: '',\n                    regexp: /.?\\.player\\.skipMinus$/,\n                    dp: '',\n                },\n            },\n        },\n        items: undefined,\n        pageItems: [],\n    };\n    gridItem.pageItems = gridItem.pageItems || [];\n    //online\n    if (page.media.deactivateDefaultItems?.online !== true) {\n        gridItem.pageItems.push(\n            // online\n            {\n                role: '',\n                type: 'text',\n                dpInit: '',\n\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'wifi' },\n                            color: await configManager.getIconColor(page.media.itemsColorOn?.online, Color.good),\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'wifi-off' },\n                            color: await configManager.getIconColor(page.media.itemsColorOff?.online, Color.attention),\n                        },\n                        scale: undefined,\n                        maxBri: undefined,\n                        minBri: undefined,\n                    },\n                    entity1: {\n                        value: {\n                            mode: 'auto',\n                            type: 'triggered',\n                            role: '',\n                            regexp: /.?\\.info\\.connection/,\n                            dp: '',\n                        },\n                    },\n\n                    enabled: {\n                        mode: 'auto',\n                        type: 'triggered',\n                        role: '',\n                        regexp: /.?\\.info\\.connection/,\n                        dp: '',\n                        read: 'return !val;',\n                    },\n                },\n            },\n        );\n    }\n\n    //speaker select\n    if (page.media.deactivateDefaultItems?.speakerList !== true) {\n        gridItem.pageItems.push({\n            role: 'spotify-speaker',\n            type: 'input_sel',\n\n            data: {\n                color: {\n                    true: {\n                        type: 'const',\n                        constVal: Color.HMIOn,\n                    },\n                    false: undefined,\n                },\n                icon: {\n                    true: {\n                        value: { type: 'const', constVal: 'speaker-multiple' },\n                        color: await configManager.getIconColor(page.media.itemsColorOn?.speakerList, Color.good),\n                    },\n                    false: {\n                        value: { type: 'const', constVal: 'speaker-multiple' },\n                        color: await configManager.getIconColor(page.media.itemsColorOff?.speakerList, Color.bad),\n                    },\n                    scale: undefined,\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n                entityInSel: {\n                    value: {\n                        mode: 'auto',\n                        type: 'triggered',\n                        regexp: /.?\\.devices\\.deviceList$/,\n                        dp: '',\n                    },\n                    set: {\n                        mode: 'auto',\n                        type: 'state',\n                        regexp: /.?\\.devices\\.deviceList$/,\n                        dp: '',\n                    },\n                    decimal: undefined,\n                    factor: undefined,\n                    unit: undefined,\n                },\n                headline: {\n                    type: 'const',\n                    constVal: 'speakerList',\n                },\n                /**\n                 * valueList string[]/stringify oder string?string?string?string stelle korreliert mit setList  {input_sel}\n                 */\n                valueList: {\n                    type: 'const',\n                    constVal: JSON.stringify(page.media.speakerList || []),\n                },\n            },\n        });\n    }\n    //playlist select\n    if (page.media.deactivateDefaultItems?.playList !== true) {\n        gridItem.pageItems.push(\n            //playlist select\n            {\n                role: 'spotify-playlist',\n                type: 'input_sel',\n                dpInit: '',\n\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'playlist-play' },\n                            color: await configManager.getIconColor(page.media.itemsColorOn?.playList, Color.activated),\n                        },\n                    },\n                    entityInSel: {\n                        value: {\n                            mode: 'auto',\n                            type: 'triggered',\n                            regexp: /.?\\.playlists\\.playlistList$/,\n                            dp: '',\n                        },\n                        set: {\n                            mode: 'auto',\n                            type: 'state',\n                            regexp: /.?\\.playlists\\.playlistList$/,\n                            dp: '',\n                        },\n                    },\n                    valueList: {\n                        type: 'const',\n                        constVal: JSON.stringify(page.media.playList || []),\n                    },\n\n                    headline: {\n                        type: 'const',\n                        constVal: 'playList',\n                    },\n                },\n            },\n        );\n    }\n    //tracklist\n    if (page.media.deactivateDefaultItems?.trackList !== true) {\n        gridItem.pageItems.push({\n            role: 'spotify-tracklist',\n            type: 'input_sel',\n            dpInit: '',\n\n            data: {\n                icon: {\n                    true: {\n                        value: { type: 'const', constVal: 'animation-play-outline' },\n                        color: await configManager.getIconColor(page.media.itemsColorOn?.playList, Color.activated),\n                    },\n                },\n                entityInSel: {\n                    value: {\n                        mode: 'auto',\n                        type: 'triggered',\n                        regexp: /.?\\.player\\.trackId$/,\n                        dp: '',\n                    },\n                    set: {\n                        mode: 'auto',\n                        type: 'state',\n                        regexp: /.?\\.player\\.playlist\\.trackNo$/,\n                        dp: '',\n                    },\n                },\n                valueList: {\n                    type: 'const',\n                    constVal: JSON.stringify([]),\n                },\n                valueList2: {\n                    type: 'triggered',\n                    mode: 'auto',\n                    regexp: /.?\\.player\\.playlist\\.trackListArray$/,\n                    dp: '',\n                },\n\n                headline: {\n                    type: 'const',\n                    constVal: 'trackList',\n                },\n            },\n        });\n    }\n    // time\n    if (!page.media.deactivateDefaultItems?.clock) {\n        gridItem.pageItems.push({\n            template: 'text.clock',\n            dpInit: '',\n            data: {\n                icon: {\n                    true: {\n                        color: page.media.itemsColorOn?.clock\n                            ? await configManager.getIconColor(page.media.itemsColorOn?.clock)\n                            : undefined,\n                    },\n                },\n            },\n        });\n    }\n    //equalizer\n    /*gridItem.pageItems.push(\n        {\n                role: '',\n                type: 'number',\n                dpInit: '',\n\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'equalizer-outline' },\n                            color: await configManager.getIconColor(\n                                page.media.itemsColorOn?.equalizer,\n                                Color.activated,\n                            ),\n                        },\n\n                        scale: undefined,\n                        maxBri: undefined,\n                        minBri: undefined,\n                    },\n                    heading1: {\n                        type: 'const',\n                        constVal: 'treble',\n                    },\n                    heading2: {\n                        type: 'const',\n                        constVal: 'midrange',\n                    },\n                    heading3: {\n                        type: 'const',\n                        constVal: 'bass',\n                    },\n                    zero1: {\n                        type: 'const',\n                        constVal: 6,\n                    },\n                    zero2: {\n                        type: 'const',\n                        constVal: 6,\n                    },\n                    zero3: {\n                        type: 'const',\n                        constVal: 6,\n                    },\n                    entity1: {\n                        value: {\n                            mode: 'auto',\n                            type: 'state',\n                            regexp: /.?\\.Preferences\\.equalizerTreble$/,\n                            dp: '',\n                        },\n                        minScale: {\n                            type: 'const',\n                            constVal: -6,\n                        },\n                        maxScale: {\n                            type: 'const',\n                            constVal: 6,\n                        },\n                        decimal: {\n                            type: 'const',\n                            constVal: 0,\n                        },\n                    },\n                    minValue1: {\n                        type: 'const',\n                        constVal: 0,\n                    },\n                    maxValue1: {\n                        type: 'const',\n                        constVal: 12,\n                    },\n\n                    entity2: {\n                        value: {\n                            mode: 'auto',\n                            type: 'state',\n                            regexp: /.?\\.Preferences\\.equalizerMidRange$/,\n                            dp: '',\n                        },\n                        minScale: {\n                            type: 'const',\n                            constVal: -6,\n                        },\n                        maxScale: {\n                            type: 'const',\n                            constVal: 6,\n                        },\n                        decimal: {\n                            type: 'const',\n                            constVal: 0,\n                        },\n                    },\n                    minValue2: {\n                        type: 'const',\n                        constVal: 0,\n                    },\n                    maxValue2: {\n                        type: 'const',\n                        constVal: 12,\n                    },\n                    entity3: {\n                        value: {\n                            mode: 'auto',\n                            type: 'state',\n                            regexp: /.?\\.Preferences\\.equalizerBass$/,\n                            dp: '',\n                        },\n                        minScale: {\n                            type: 'const',\n                            constVal: -6,\n                        },\n                        maxScale: {\n                            type: 'const',\n                            constVal: 6,\n                        },\n                        decimal: {\n                            type: 'const',\n                            constVal: 0,\n                        },\n                    },\n                    minValue3: {\n                        type: 'const',\n                        constVal: 0,\n                    },\n                    maxValue3: {\n                        type: 'const',\n                        constVal: 12,\n                    },\n                    text: {\n                        true: {\n                            type: 'const',\n                            constVal: 'equalizer',\n                        },\n                    },\n                },\n    });\n    */\n\n    // repeat\n    if (page.media.deactivateDefaultItems?.repeat !== true) {\n        gridItem.pageItems.push({\n            role: 'repeatValue',\n            type: 'button',\n            dpInit: '',\n\n            data: {\n                icon: {\n                    true: {\n                        value: {\n                            mode: 'auto',\n                            type: 'state',\n                            role: '',\n                            regexp: /\\.player\\.repeat$/,\n                            dp: '',\n                            read: `switch (val) {\n                                    case 'off':\n                                        return 'repeat';\n                                    case 'track':\n                                        return 'repeat-once';\n                                    case 'context':\n                                        return 'repeat-variant';\n                                    default:\n                                        return false;\n                                }`,\n                        },\n                        color: {\n                            mode: 'auto',\n                            type: 'state',\n                            role: '',\n                            regexp: /\\.player\\.repeat$/,\n                            dp: '',\n                            read: `switch (val) {\n                                    case 'off':\n                                        return Color.deactivated;\n                                    case 'context':\n                                        return Color.activated;\n                                    case 'track':\n                                        return Color.option4;\n                                    default:\n                                        return false;\n                                }`,\n                        },\n                    },\n                },\n\n                entity1: {\n                    value: {\n                        mode: 'auto',\n                        type: 'triggered',\n                        role: '',\n                        regexp: /\\.player\\.repeat$/,\n                        dp: '',\n                        read: `switch (val) {\n                                    case 'off':\n                                        return 'OFF';\n                                    case 'context':\n                                        return 'ALL';\n                                    case 'track':\n                                        return 'ONE';\n                                    default:\n                                        return 'OFF';\n                                }`,\n                        write: `switch (val) {\n                                    case 'OFF':\n                                    case false:\n                                        return 'track';\n                                    case 'ONE':\n                                        return 'context';\n                                    case 'ALL':\n                                        return 'off';\n                                    default:\n                                        return 'off';\n                                }`,\n                    },\n                },\n            },\n        });\n    }\n\n    return { gridItem, messages };\n}\n"],
  "mappings": "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",
  "names": []
}
