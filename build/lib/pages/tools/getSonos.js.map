{
  "version": 3,
  "sources": ["../../../../src/lib/pages/tools/getSonos.ts"],
  "sourcesContent": ["import { Color } from '../../const/Color';\nimport type * as pages from '../../types/pages';\nimport type { ConfigManager } from '../../classes/config-manager';\nimport * as tools from '../../const/tools';\n\nexport async function getPageSonos(\n    configManager: ConfigManager,\n    page: ScriptConfig.PageMedia,\n    gridItem: pages.PageBaseConfig,\n    messages: string[],\n    justCheck = false,\n): Promise<{ gridItem: pages.PageBaseConfig; messages: string[] }> {\n    const adapter = configManager.adapter;\n\n    const arr = page.media.id.split('.').slice(0, 4);\n    const viewStr = arr.join('.');\n    const str = page.media.id.split('.').slice(0, 4).join('.');\n    const devices =\n        viewStr && arr.length === 4\n            ? await configManager.adapter.getObjectViewAsync('system', 'device', {\n                  startkey: `${viewStr}.`,\n                  endkey: `${viewStr}${String.fromCharCode(0xfffd)}`,\n              })\n            : { rows: [] };\n\n    if (devices && devices.rows && devices.rows.length > 0) {\n        if (\n            devices.rows.findIndex(row => {\n                if (row && row.value && row.id && row.id.split('.').length === 4) {\n                    return str === row.id;\n                }\n            }) === -1\n        ) {\n            const msg = `${page.uniqueName}: Media page id ${page.media.id} is not a valid sonos device!`;\n            messages.push(msg);\n            adapter.log.warn(msg);\n            return { gridItem, messages };\n        }\n    }\n    if (justCheck) {\n        return { gridItem, messages: ['done'] };\n    }\n    const reg = tools.getRegExp(str, { startsWith: true });\n    gridItem.dpInit = reg ? reg : str;\n    gridItem = {\n        ...gridItem,\n        config: {\n            ...gridItem.config,\n            ident: str,\n            card: 'cardMedia',\n            logo: {\n                type: 'number',\n                data: {\n                    text: { true: { type: 'const', constVal: 'media.seek' } },\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'logo-sonos' },\n                            color: { type: 'const', constVal: { r: 250, b: 250, g: 0 } },\n                        },\n                    },\n                    entity1: {\n                        value: {\n                            mode: 'auto',\n                            type: 'triggered',\n                            role: 'media.seek',\n                            regexp: /\\.seek$/,\n                            dp: '',\n                            read: `return val != null ? Math.round(val) : val;`,\n                        },\n                        set: {\n                            mode: 'auto',\n                            type: 'state',\n                            writeable: true,\n                            role: 'media.seek',\n                            regexp: /\\.seek$/,\n                            dp: '',\n                            write: `return val != null ? Math.round(val) : val;`,\n                        },\n                    },\n                },\n            },\n            data: {\n                headline: page.media.name ? await configManager.getFieldAsDataItemConfig(page.media.name) : undefined,\n\n                album: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: 'media.album',\n                    regexp: /\\.current_album$/,\n                    dp: '',\n                },\n                title: {\n                    value: {\n                        mode: 'auto',\n                        type: 'triggered',\n                        role: 'media.title',\n                        regexp: /\\.current_title$/,\n                        dp: '',\n                    },\n\n                    true: page.media.colorMediaArtist\n                        ? {\n                              color: await configManager.getFieldAsDataItemConfig(page.media.colorMediaArtist),\n                          }\n                        : undefined,\n                },\n                duration: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: 'media.duration',\n                    regexp: /\\.current_duration$/,\n                    dp: '',\n                    read: `return val ? val*1000 : val;`,\n                },\n                onOffColor: {\n                    true: page.media.colorMediaIcon\n                        ? { color: await configManager.getIconColor(page.media.colorMediaIcon) }\n                        : { color: { type: 'const', constVal: Color.on } },\n                    false: page.media.colorMediaIcon ? undefined : { color: { type: 'const', constVal: Color.off } },\n                },\n                elapsed: {\n                    mode: 'auto',\n                    type: 'triggered',\n                    commonType: 'number',\n                    role: ['media.elapsed'],\n                    regexp: /\\.current_elapsed$/,\n                    dp: '',\n                    read: `return val != null ? val*1000 : val;`,\n                },\n                volume: {\n                    value: {\n                        mode: 'auto',\n                        type: 'state',\n                        role: ['level.volume'],\n                        scale: { min: page.media.minValue ?? 0, max: page.media.maxValue ?? 100 },\n                        regexp: /\\.volume$/,\n                        dp: '',\n                    },\n                    set: {\n                        mode: 'auto',\n                        type: 'state',\n                        role: ['level.volume'],\n                        scale: { min: page.media.minValue ?? 0, max: page.media.maxValue ?? 100 },\n                        regexp: /\\.volume$/,\n                        dp: '',\n                    },\n                },\n                artist: {\n                    value: {\n                        mode: 'auto',\n                        type: 'state',\n                        role: 'media.artist',\n                        regexp: /\\.current_artist$/,\n                        dp: '',\n                    },\n                    true: page.media.colorMediaArtist\n                        ? {\n                              color: await configManager.getIconColor(page.media.colorMediaArtist),\n                          }\n                        : undefined,\n                },\n                shuffle: {\n                    value: {\n                        mode: 'auto',\n                        type: 'state',\n                        role: 'media.mode.shuffle',\n                        regexp: /\\.shuffle$/,\n                        dp: '',\n                    },\n                    set: {\n                        mode: 'auto',\n                        type: 'state',\n                        role: 'media.mode.shuffle',\n                        regexp: /\\.shuffle$/,\n                        dp: '',\n                    },\n                },\n                icon: {\n                    type: 'const',\n                    constVal: 'dialpad',\n                },\n                play: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: ['button.play'],\n                    regexp: /\\.play$/,\n                    dp: '',\n                },\n                isPlaying: {\n                    mode: 'auto',\n                    type: 'triggered',\n                    role: ['media.state'],\n                    regexp: /\\.state_simple$/,\n                    dp: '',\n                },\n                mediaState: {\n                    mode: 'auto',\n                    type: 'triggered',\n                    role: ['media.state'],\n                    regexp: /\\.state_simple$/,\n                    dp: '',\n                },\n                stop: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: ['button.stop'],\n                    regexp: /\\.stop$/,\n                    dp: '',\n                },\n                pause: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: 'button.pause',\n                    regexp: /\\.pause$/,\n                    dp: '',\n                },\n                forward: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: 'button.next',\n                    regexp: /\\.next$/,\n                    dp: '',\n                },\n                backward: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: 'button.prev',\n                    regexp: /\\.prev$/,\n                    dp: '',\n                },\n            },\n        },\n\n        items: undefined,\n        uniqueID: page.uniqueName,\n        pageItems: [],\n    };\n    gridItem.pageItems = gridItem.pageItems || [];\n\n    // online\n    if (!page.media.deactivateDefaultItems?.online) {\n        gridItem.pageItems.push({\n            role: '',\n            type: 'text',\n            dpInit: '',\n\n            data: {\n                icon: {\n                    true: {\n                        value: { type: 'const', constVal: 'wifi' },\n                        color: await configManager.getIconColor(page.media.itemsColorOn?.online, Color.good),\n                    },\n                    false: {\n                        value: { type: 'const', constVal: 'wifi-off' },\n                        color: await configManager.getIconColor(page.media.itemsColorOff?.online, Color.attention),\n                    },\n                    scale: undefined,\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n                entity1: {\n                    value: {\n                        mode: 'auto',\n                        type: 'triggered',\n                        role: 'indicator.reachable',\n                        regexp: /\\.alive$/,\n                        dp: '',\n                    },\n                },\n\n                enabled: {\n                    mode: 'auto',\n                    type: 'triggered',\n                    role: 'indicator.reachable',\n                    regexp: /\\.alive$/,\n                    dp: '',\n                    read: 'return !val;',\n                },\n            },\n        });\n    }\n\n    //speaker select\n    if (!page.media.deactivateDefaultItems?.speakerList) {\n        gridItem.pageItems.push({\n            role: '',\n            type: 'input_sel',\n\n            data: {\n                color: {\n                    true: {\n                        type: 'const',\n                        constVal: Color.HMIOn,\n                    },\n                    false: undefined,\n                },\n                icon: {\n                    true: {\n                        value: { type: 'const', constVal: 'speaker-multiple' },\n                        color: await configManager.getIconColor(page.media.itemsColorOn?.speakerList, Color.good),\n                    },\n                    false: {\n                        value: { type: 'const', constVal: 'speaker-multiple' },\n                        color: await configManager.getIconColor(page.media.itemsColorOff?.speakerList, Color.bad),\n                    },\n                    scale: undefined,\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n                entityInSel: {\n                    value: {\n                        type: 'const',\n                        constVal: 'Sonos Speaker',\n                    },\n                },\n                headline: {\n                    type: 'const',\n                    constVal: 'speakerList',\n                },\n                /**\n                 * valueList string[]/stringify oder string?string?string?string stelle korreliert mit setList  {input_sel}\n                 */\n                valueList: {\n                    type: 'const',\n                    constVal: JSON.stringify(page.media.speakerList || []),\n                },\n                /**\n                 * setList: {id:Datenpunkt, value: zu setzender Wert}[] bzw. stringify  oder ein String nach dem Muster datenpunkt?Wert|Datenpunkt?Wert {input_sel}\n                 */\n                setList: { type: 'const', constVal: '0_userdata.0.test?1|0_userdata.0.test?2' },\n                enabled: {\n                    mode: 'auto',\n                    type: 'triggered',\n                    regexp: /.?\\.members$/,\n                    dp: '',\n                    read: `\n                    let data = val;\n                    if (typeof val === 'string') {\n                        try {\n                            data = JSON.parse(val);\n                        } catch {\n                            return false;\n                        }\n                    }\n                    if (Array.isArray(data)) {\n                        return data.length >= 2 || ${(page.media.speakerList && page.media.speakerList.length > 0) ?? false};\n                    }\n                    return false;`,\n                },\n            },\n        });\n    }\n    //favorite select\n    if (!page.media.deactivateDefaultItems?.favoriteList) {\n        gridItem.pageItems.push({\n            role: '2valuesIsValue',\n            type: 'input_sel',\n            dpInit: '',\n\n            data: {\n                icon: {\n                    true: {\n                        value: { type: 'const', constVal: 'playlist-star' },\n                        color: await configManager.getIconColor(page.media.itemsColorOn?.playList, Color.activated),\n                    },\n                },\n                entityInSel: {\n                    value: {\n                        mode: 'auto',\n                        type: 'triggered',\n                        regexp: /.?\\.favorites_set$/,\n                        dp: '',\n                    },\n                    set: {\n                        mode: 'auto',\n                        type: 'state',\n                        regexp: /.?\\.favorites_set$/,\n                        dp: '',\n                    },\n                },\n                valueList: {\n                    type: 'const',\n                    constVal: JSON.stringify(page.media.playList || []),\n                },\n                valueList2: {\n                    mode: 'auto',\n                    type: 'state',\n                    regexp: /.?\\.favorites_list_array$/,\n                    dp: '',\n                },\n\n                headline: {\n                    type: 'const',\n                    constVal: 'playList',\n                },\n                enabled: {\n                    mode: 'auto',\n                    type: 'triggered',\n                    regexp: /.?\\.favorites_list_array$/,\n                    dp: '',\n                    read: `\n                    let data = val;\n                    if (typeof val === 'string') {\n                        try {\n                            data = JSON.parse(val);\n                        } catch {\n                            return false;\n                        }\n                    }\n                    if (Array.isArray(data)) {\n                        return data.length !== 0;\n                    }\n                    return false;`,\n                },\n            },\n        });\n    }\n    //playlist select\n    if (!page.media.deactivateDefaultItems?.playList) {\n        gridItem.pageItems.push({\n            role: '',\n            type: 'input_sel',\n            dpInit: '',\n\n            data: {\n                icon: {\n                    true: {\n                        value: { type: 'const', constVal: 'playlist-play' },\n                        color: await configManager.getIconColor(page.media.itemsColorOn?.playList, Color.activated),\n                    },\n                },\n                entityInSel: Array.isArray(page.media.playList)\n                    ? {\n                          set: {\n                              mode: 'auto',\n                              type: 'state',\n                              regexp: /.?\\.playlist_set$/,\n                              dp: '',\n                              write: Array.isArray(page.media.playList)\n                                  ? `return ${JSON.stringify(page.media.playList)}.length > val ? ${JSON.stringify(page.media.playList)}[val]: ''`\n                                  : undefined,\n                          },\n                      }\n                    : undefined,\n                valueList: Array.isArray(page.media.playList)\n                    ? {\n                          type: 'const',\n                          constVal: JSON.stringify(page.media.playList),\n                      }\n                    : undefined,\n                headline: {\n                    type: 'const',\n                    constVal: 'playList',\n                },\n                enabled: {\n                    type: 'const',\n                    constVal: Array.isArray(page.media.playList) ? page.media.playList.length > 0 : false,\n                },\n            },\n        });\n    }\n    // time\n    if (!page.media.deactivateDefaultItems?.clock) {\n        gridItem.pageItems.push({\n            template: 'text.clock',\n            dpInit: '',\n        });\n    }\n    //tracklist\n    if (page.media.deactivateDefaultItems?.trackList !== true) {\n        gridItem.pageItems.push({\n            role: 'spotify-tracklist',\n            type: 'input_sel',\n            dpInit: '',\n\n            data: {\n                icon: {\n                    true: {\n                        value: { type: 'const', constVal: 'animation-play-outline' },\n                        color: await configManager.getIconColor(page.media.itemsColorOn?.playList, Color.activated),\n                    },\n                },\n                entityInSel: {\n                    value: {\n                        mode: 'auto',\n                        type: 'triggered',\n                        regexp: /.?\\.current_track_number$/,\n                        dp: '',\n                        read: `return val != null && parseInt(val) > 0? (parseInt(val)-1) : val;`,\n                    },\n                    set: {\n                        mode: 'auto',\n                        type: 'state',\n                        regexp: /.?\\.current_track_number$/,\n                        dp: '',\n                        write: `return parseInt(val)+1;`,\n                    },\n                },\n                valueList: {\n                    mode: 'auto',\n                    type: 'state',\n                    regexp: /.?\\.queue$/,\n                    dp: '',\n                    read: `\n                        let data = val;\n                        if (typeof val === 'string') {\n                            data = data.split(',');\n                            return data.map(item => {\n                                item = item.trim();\n                                let result = item.split(' - ')[1];\n                                if (!result) {\n                                    result = item;\n                                }\n                                return result;\n                            });\n                        }\n                        return [];`,\n                },\n\n                headline: {\n                    type: 'const',\n                    constVal: 'trackList',\n                },\n            },\n        });\n    }\n    // repeat\n    if (!page.media.deactivateDefaultItems?.repeat) {\n        gridItem.pageItems.push({\n            role: 'repeatValue',\n            type: 'button',\n            dpInit: '',\n\n            data: {\n                icon: {\n                    true: {\n                        value: {\n                            mode: 'auto',\n                            type: 'state',\n                            role: 'media.mode.repeat',\n                            regexp: /\\.repeat$/,\n                            dp: '',\n                            read: `switch (val) {\n                                    case 0:\n                                        return 'repeat';\n                                    case 2:\n                                        return 'repeat-once';\n                                    case 1:\n                                        return 'repeat-variant';\n                                }`,\n                        },\n                        color: {\n                            mode: 'auto',\n                            type: 'state',\n                            role: 'media.mode.repeat',\n                            regexp: /\\.repeat$/,\n                            dp: '',\n                            read: `switch (val) {\n                                    case 0:\n                                        return Color.deactivated;\n                                    case 1:\n                                        return Color.activated;\n                                    case 2:\n                                        return Color.option4;\n                                }`,\n                        },\n                    },\n                },\n                entity1: {\n                    value: {\n                        mode: 'auto',\n                        type: 'triggered',\n                        role: 'media.mode.repeat',\n                        regexp: /\\.repeat$/,\n                        dp: '',\n                        read: `\n                            switch (val) {\n                                case 0:\n                                    return 'OFF';\n                                case 1:\n                                    return 'ALL';\n                                case 2:\n                                    return 'ONE';\n                            }\n                            return 'OFF';\n                        `,\n                    },\n                    set: {\n                        mode: 'auto',\n                        type: 'state',\n                        role: 'media.mode.repeat',\n                        regexp: /\\.repeat$/,\n                        dp: '',\n                        write: `\n                            switch (val) {\n                                case 'OFF':\n                                    return 1;\n                                case 'ALL':\n                                    return 2;\n                                case 'ONE':\n                                    return 0;\n                            }\n                            return 0;`,\n                    },\n                },\n            },\n        });\n    }\n\n    return { gridItem, messages };\n}\n"],
  "mappings": "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",
  "names": []
}
