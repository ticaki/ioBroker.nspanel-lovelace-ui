{
  "version": 3,
  "sources": ["../../../src/lib/pages/screensaver.ts"],
  "sourcesContent": ["import * as Definition from '../const/definition';\nimport * as Types from '../types/types';\n\n//import dayjs from 'dayjs';\n//import moment from 'moment';\n//import parseFormat from 'moment-parseformat';\nimport { Page, type PageInterface } from '../classes/Page';\nimport * as pages from '../types/pages';\nimport * as tools from '../const/tools';\nimport { PageItem } from './pageItem';\nimport type { BaseClassTriggerd } from '../controller/states-controller';\n\nexport type ScreensaverConfigType = {\n    momentLocale: string;\n    locale: string; //Intl.DateTimeFormat;\n    iconBig1: boolean;\n    iconBig2: boolean;\n};\n\nexport class Screensaver extends Page {\n    items: undefined;\n    private step: number = 0;\n    private blockButtons: ioBroker.Timeout | undefined;\n    rotationTime: number = 300000;\n    public screensaverIndicatorButtons: boolean = false;\n    public screensaverSwipe: boolean = false;\n    private timoutRotation: ioBroker.Timeout | undefined = undefined;\n    //readonly mode: Types.ScreensaverModeType = 'standard';\n    constructor(config: PageInterface, options: pages.PageBaseConfig) {\n        if (\n            !options.config ||\n            (options.config.card !== 'screensaver' &&\n                options.config.card !== 'screensaver2' &&\n                options.config.card !== 'screensaver3')\n        ) {\n            config.adapter.log.error(\n                `Invalid card for screensaver: ${options ? JSON.stringify(options) : 'undefined'}`,\n            );\n            return;\n        }\n        switch (options.config.mode) {\n            case 'standard':\n            case 'alternate': {\n                config.card = 'screensaver';\n                break;\n            }\n            case 'advanced': {\n                config.card = 'screensaver2';\n                break;\n            }\n            case 'easyview': {\n                config.card = 'screensaver3';\n                break;\n            }\n        }\n        config.alwaysOn = 'none';\n        super(config, options);\n        this.screensaverIndicatorButtons = options.config.screensaverIndicatorButtons ?? false;\n        this.screensaverSwipe = options.config.screensaverSwipe ?? false;\n        this.rotationTime =\n            options.config.rotationTime !== 0 && options.config.rotationTime < 3\n                ? 3000\n                : options.config.rotationTime * 1000;\n        this.neverDeactivateTrigger = true;\n    }\n\n    async init(): Promise<void> {\n        await super.init();\n        await this.createPageItems();\n        await this.panel.setScreensaverSwipe(this.screensaverSwipe);\n        if (this.pageItems) {\n            const indicators = this.pageItems.filter(x => x && x.config && x.config.modeScr === 'indicator');\n            for (let a = 0; a < indicators.length; a++) {\n                await this.library.writedp(\n                    `panels.${this.panel.name}.buttons.indicator-${a + 1}`,\n                    undefined,\n                    Definition.genericStateObjects.panel.panels.buttons.indicator,\n                );\n            }\n        }\n    }\n\n    async getData(places: Types.ScreenSaverPlaces[]): Promise<pages.screensaverMessage | null> {\n        const config = this.config;\n        if (\n            !config ||\n            (config.card !== 'screensaver' && config.card !== 'screensaver2' && config.card !== 'screensaver3')\n        ) {\n            return null;\n        }\n        if (!pages.isScreenSaverCardType(config.card)) {\n            pages.exhaustiveCheck(config.card);\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            this.log.error(`Invalid card: ${config.card}`);\n        }\n        const message: pages.screensaverMessage = {\n            options: {\n                indicator: [],\n                left: [],\n                time: [],\n                date: [],\n                bottom: [],\n                mricon: [],\n                favorit: [],\n                alternate: [],\n            },\n        };\n\n        if (this.pageItems) {\n            const model = config.model;\n            const layout = this.mode;\n            for (let a = 0; a < this.pageItems.length; a++) {\n                const pageItems: PageItem | undefined = this.pageItems[a];\n                const options = message.options;\n                if (pageItems && pageItems.config && pageItems.config.modeScr) {\n                    if (pageItems.config.modeScr === 'alternate' && this.mode !== 'alternate') {\n                        continue;\n                    }\n                    const place = pageItems.config.modeScr;\n                    const max = Definition.ScreenSaverConst[layout][place].maxEntries[model];\n                    if (max === 0) {\n                        continue;\n                    }\n                    if (places.indexOf(place) === -1) {\n                        continue;\n                    }\n\n                    const arr = options[place] || [];\n                    arr.push(await pageItems.getPageItemPayload());\n                    options[place] = arr;\n                }\n            }\n            for (const x in message.options) {\n                const place = x as Types.ScreenSaverPlaces;\n                if (places.indexOf(place) === -1) {\n                    continue;\n                }\n                let items = message.options[place];\n                if (items) {\n                    const max = Definition.ScreenSaverConst[layout][place].maxEntries[model];\n                    if (items.length > Definition.ScreenSaverConst[layout][place].maxEntries[model]) {\n                        let f = items.length / Definition.ScreenSaverConst[layout][place].maxEntries[model];\n                        f = this.step % Math.ceil(f);\n                        message.options[place] = items.slice(max * f, max * (f + 1));\n                    }\n                    items = message.options[place];\n                    for (let i = 0; i < max; i++) {\n                        const msg = items[i];\n                        if (!msg) {\n                            items[i] = tools.getPayload('', '', '', '', '', '');\n                        } else {\n                            const arr = items[i].split('~');\n                            arr[0] = '';\n                            if (place !== 'indicator') {\n                                arr[1] = '';\n                            }\n                            items[i] = tools.getPayloadArray(arr);\n                        }\n                    }\n                }\n            }\n        }\n        return message;\n    }\n    async update(): Promise<void> {\n        if (!this.visibility) {\n            return;\n        }\n\n        const message = await this.getData(['left', 'bottom', 'indicator', 'alternate', 'favorit']);\n        if (message === null) {\n            return;\n        }\n        if (message.options.alternate.length > 0) {\n            message.options.alternate.unshift(tools.getPayload('', '', '', '', '', ''));\n        }\n        const arr: string[] = message.options.favorit.concat(\n            message.options.left,\n            message.options.bottom,\n            message.options.alternate,\n            message.options.indicator,\n        );\n        const msg = tools.getPayload('weatherUpdate', tools.getPayloadArray(arr));\n\n        this.sendToPanel(msg);\n        await this.HandleScreensaverStatusIcons();\n    }\n    async createPageItems(): Promise<void> {\n        await super.createPageItems();\n    }\n\n    async onVisibilityChange(v: boolean): Promise<void> {\n        //await super.onVisibilityChange(v);\n        this.step = 0;\n        if (v) {\n            this.sendType();\n            //await this.update();\n            await this.rotationLoop();\n        } else {\n            if (this.timoutRotation) {\n                this.adapter.clearTimeout(this.timoutRotation);\n            }\n        }\n    }\n    async restartRotationLoop(): Promise<void> {\n        if (this.timoutRotation) {\n            this.adapter.clearTimeout(this.timoutRotation);\n        }\n        await this.rotationLoop();\n    }\n    rotationLoop = async (): Promise<void> => {\n        if (this.unload) {\n            return;\n        }\n        // only use this if screensaver is activated\n        if (!this.visibility) {\n            return;\n        }\n        await this.update();\n\n        if (this.rotationTime === 0) {\n            this.step = 0;\n            return;\n        }\n        this.step = this.step > 10000 ? 0 : this.step + 1;\n        this.timoutRotation = this.adapter.setTimeout(\n            this.rotationLoop,\n            this.rotationTime < 3000 ? 3000 : this.rotationTime,\n        );\n    };\n\n    /**\n     * ..\n     *\n     * @param _dp - the dp that triggered the state\n     * @param from - the class that triggered the state\n     */\n    onStateTrigger = async (_dp: string, from: BaseClassTriggerd): Promise<void> => {\n        const config = this.config;\n        if (\n            !config ||\n            (config.card !== 'screensaver' && config.card !== 'screensaver2' && config.card !== 'screensaver3')\n        ) {\n            return;\n        }\n        if (from instanceof PageItem && this.pageItems) {\n            const index = parseInt(from.id.split('?')[1]);\n            const item = this.pageItems[index];\n            if (item && item.config) {\n                const place = item.config.modeScr;\n                if (place !== undefined) {\n                    switch (place) {\n                        case 'left':\n                        case 'bottom':\n                        case 'indicator':\n                        case 'alternate':\n                        case 'favorit': {\n                            await this.update();\n                            break;\n                        }\n                        case 'mricon': {\n                            await this.HandleScreensaverStatusIcons();\n                            break;\n                        }\n                        case 'time': {\n                            await this.HandleTime();\n                            break;\n                        }\n                        case 'date': {\n                            await this.HandleDate();\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    async HandleTime(): Promise<void> {\n        const message = await this.getData(['time']);\n        if (message === null || !message.options.time[0] || this.panel.isOnline === false) {\n            this.log.debug('HandleTime: no message, no time or panel is offline');\n            return;\n        }\n        this.sendToPanel(`time~${message.options.time[0].split('~')[5]}`);\n    }\n    async HandleDate(): Promise<void> {\n        const message = await this.getData(['date']);\n        if (message === null || !message.options.date[0] || this.panel.isOnline === false) {\n            this.log.debug('HandleDate: no message, no date or panel is offline');\n            return;\n        }\n        this.sendToPanel(`date~${message.options.date[0].split('~')[5]}`);\n    }\n\n    async HandleScreensaverStatusIcons(): Promise<void> {\n        if (!this.visibility) {\n            this.log.error('get update command but not visible!');\n            return;\n        }\n\n        const message = await this.getData(['mricon']);\n        if (message === null) {\n            return;\n        }\n        const mrIcon1 = message.options.mricon[0].split('~');\n        const mrIcon2 = message.options.mricon[1].split('~');\n        const msgArray: string[] = [\n            'statusUpdate',\n            mrIcon1[2] ?? '',\n            mrIcon1[3] ?? '',\n            mrIcon2[2] ?? '',\n            mrIcon2[3] ?? '',\n            this.panel.info.nspanel.bigIconLeft ? '1' : '',\n            this.panel.info.nspanel.bigIconRight ? '1' : '',\n        ];\n        const msg = tools.getPayloadArray(msgArray);\n        this.sendToPanel(msg);\n    }\n\n    async onButtonEvent(event: Types.IncomingEvent): Promise<void> {\n        if (event.page && event.id && this.pageItems && this.pageItems[event.id as any]) {\n            if (this.blockButtons) {\n                return;\n            }\n            const indicators = this.pageItems.filter(x => x && x.config && x.config.modeScr === 'indicator');\n            for (let a = 0; a < indicators.length; a++) {\n                if (indicators[a] === this.pageItems[event.id as any]) {\n                    await this.library.writedp(\n                        `panels.${this.panel.name}.buttons.indicator-${a + 1}`,\n                        true,\n                        Definition.genericStateObjects.panel.panels.buttons.indicator,\n                    );\n                }\n            }\n            await this.pageItems[event.id as any]!.onCommand(event.action, event.opt);\n            this.blockButtons = this.adapter.setTimeout(() => {\n                this.blockButtons = undefined;\n            }, 500);\n        }\n    }\n\n    async delete(): Promise<void> {\n        await super.delete();\n        if (this.timoutRotation) {\n            this.adapter.clearTimeout(this.timoutRotation);\n        }\n        if (this.blockButtons) {\n            this.adapter.clearTimeout(this.blockButtons);\n        }\n    }\n    goLeft(): void {}\n    goRight(): void {}\n\n    get mode(): Types.ScreensaverModeType {\n        if (\n            !this.config ||\n            (this.config.card !== 'screensaver' &&\n                this.config.card !== 'screensaver2' &&\n                this.config.card !== 'screensaver3')\n        ) {\n            return 'standard';\n        }\n        return this.config.mode;\n    }\n    set mode(mode: Types.ScreensaverModeType) {\n        if (\n            !this.config ||\n            (this.config.card !== 'screensaver' &&\n                this.config.card !== 'screensaver2' &&\n                this.config.card !== 'screensaver3')\n        ) {\n            return;\n        }\n        if (pages.isScreenSaverMode(mode)) {\n            this.config.mode = mode;\n        } else {\n            pages.exhaustiveCheck(mode);\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            this.log.error(`Invalid mode: ${mode}`);\n        }\n    }\n\n    overwriteModel(mode: Types.ScreensaverModeTypeAsNumber, init: boolean = false): void {\n        if (mode === Screensaver.mapModeToNumber(this.mode)) {\n            return;\n        }\n        switch (mode) {\n            case 0:\n            case 1: {\n                // overwrite readonly property\n                (this.card as any) = 'screensaver';\n                if (this.config) {\n                    this.config.card = 'screensaver';\n                }\n                break;\n            }\n            case 2: {\n                // overwrite readonly property\n                (this.card as any) = 'screensaver2';\n                if (this.config) {\n                    this.config.card = 'screensaver2';\n                }\n                break;\n            }\n            case 3: {\n                // overwrite readonly property\n                (this.card as any) = 'screensaver3';\n                if (this.config) {\n                    this.config.card = 'screensaver3';\n                }\n                break;\n            }\n            default: {\n                pages.exhaustiveCheck(mode);\n                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                this.log.error(`Invalid mode: ${mode}`);\n                return;\n            }\n        }\n        this.mode = Screensaver.mapNumberToMode(mode);\n        if (!init && this.visibility) {\n            this.sendType();\n            void this.update();\n        }\n    }\n\n    static mapModeToNumber(mode: Types.ScreensaverModeType): Types.ScreensaverModeTypeAsNumber {\n        const index = Types.arrayOfScreensaverModes.findIndex(x => x === mode);\n        return Math.min(\n            Math.max(index, 0),\n            Types.arrayOfScreensaverModes.length - 1,\n        ) as Types.ScreensaverModeTypeAsNumber;\n    }\n\n    static mapNumberToMode(mode: Types.ScreensaverModeTypeAsNumber): Types.ScreensaverModeType {\n        return Types.arrayOfScreensaverModes[mode];\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
