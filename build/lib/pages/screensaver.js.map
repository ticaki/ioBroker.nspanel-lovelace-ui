{
  "version": 3,
  "sources": ["../../../src/lib/pages/screensaver.ts"],
  "sourcesContent": ["import { Dataitem } from '../classes/data-item';\nimport * as Definition from '../const/definition';\nimport * as Color from '../const/color';\nimport * as NSPanel from '../types/types';\nimport * as Icons from '../const/icon_mapping';\n\n//import dayjs from 'dayjs';\nimport moment from 'moment';\nimport parseFormat from 'moment-parseformat';\nimport { sendTemplates, weatherUpdateTestArray } from '../types/msg-def';\nimport { BaseClassPanelSend, PanelSend } from '../controller/panel-message';\nimport { StatesDBReadOnly } from '../controller/states-controler';\n\nexport type ScreensaverConfigType = {\n    momentLocale: string;\n    locale: string; //Intl.DateTimeFormat;\n    iconBig1: boolean;\n    iconBig2: boolean;\n};\n\nexport type ScreensaverConfig = {\n    mode: NSPanel.ScreensaverModeType;\n    entitysConfig: NSPanel.ScreensaverOptionsType;\n    config: ScreensaverConfigType;\n    rotationTime: number;\n};\n\nexport class Screensaver extends BaseClassPanelSend {\n    private entitysConfig: NSPanel.ScreensaverOptionsType;\n    layout: NSPanel.ScreensaverModeType = 'standard';\n    readOnlyDB: StatesDBReadOnly;\n    private config: ScreensaverConfigType;\n    private items: Record<\n        keyof Omit<NSPanel.ScreensaverOptionsType, 'mrIconEntity'>,\n        (NSPanel.ScreenSaverDataItems | undefined)[]\n    > &\n        Record<\n            keyof Pick<NSPanel.ScreensaverOptionsType, 'mrIconEntity'>,\n            (NSPanel.ScreenSaverMRDataItems | undefined)[]\n        > = {\n        favoritEntity: [],\n        leftEntity: [],\n        bottomEntity: [],\n        alternateEntity: [],\n        indicatorEntity: [],\n        mrIconEntity: [],\n    };\n    readonly mode: NSPanel.ScreensaverModeType;\n    private rotationTime: number;\n    private currentPos: number = 0;\n    private timoutRotation: ioBroker.Timeout | undefined = undefined;\n    private step: number = 0;\n    protected visible: boolean = false;\n    constructor(adapter: any, config: ScreensaverConfig, panelSend: PanelSend, readOnlyDB: StatesDBReadOnly) {\n        super(adapter, panelSend, 'screensaver');\n        this.entitysConfig = config.entitysConfig;\n        this.mode = config.mode;\n        this.config = config.config;\n        moment.locale(config.config.momentLocale);\n        this.readOnlyDB = readOnlyDB;\n        this.rotationTime = config.rotationTime !== 0 && config.rotationTime < 3 ? 3000 : config.rotationTime * 1000;\n    }\n    async init(): Promise<void> {\n        const config = this.entitysConfig;\n\n        for (const key of Definition.ScreenSaverAllPlaces) {\n            for (const entry of config[key]) {\n                if (entry == null || entry === undefined) {\n                    this.items[key].push(undefined);\n                    continue;\n                }\n                const tempItem: Partial<NSPanel.ScreenSaverDataItems | NSPanel.ScreenSaverMRDataItems> = {};\n                for (const j1 in entry) {\n                    const j = j1 as keyof typeof entry;\n                    const data = entry[j];\n                    let temp =\n                        data !== undefined\n                            ? new Dataitem(\n                                  this.adapter,\n                                  { ...data, name: `${this.name}.${key}.${j}` },\n                                  this,\n                                  this.readOnlyDB,\n                              )\n                            : undefined;\n                    if (temp !== undefined && !(await temp.isValidAndInit())) {\n                        temp = undefined;\n                    }\n                    tempItem[j] = temp;\n                }\n                switch (key) {\n                    case 'favoritEntity':\n                    case 'leftEntity':\n                    case 'bottomEntity':\n                    case 'indicatorEntity':\n                        this.items[key].push(tempItem as NSPanel.ScreenSaverDataItems);\n                        break;\n                    case 'mrIconEntity':\n                        this.items['mrIconEntity'].push(tempItem as NSPanel.ScreenSaverMRDataItems);\n                        break;\n                }\n\n                //this.controller.RegisterEntityWatcher(this, item);\n            }\n        }\n    }\n\n    async update(): Promise<void> {\n        if (!this.visible) {\n            this.log.error('get update command but not visible!');\n            return;\n        }\n\n        const payload: sendTemplates['weatherUpdate'] = { eventType: 'weatherUpdate', value: {} };\n        payload.value[this.layout] = [];\n        const value = payload.value[this.layout];\n        if (value === undefined) return;\n        for (const place of Definition.ScreenSaverPlaces) {\n            // let bottom rotated\n            let maxItems = Definition.ScreenSaverConst[this.layout][place].maxEntries;\n            let i = 0;\n            if (place == 'bottomEntity') {\n                i = maxItems * this.step;\n                maxItems = maxItems * (this.step + 1);\n            }\n            if (place == 'favoritEntity') {\n                this.log.debug('y');\n            }\n            for (i; i < maxItems; i++) {\n                const item: NSPanel.ScreenSaverDataItems | undefined = this.items[place][i];\n                if (item === null || item === undefined || item.entity === undefined) {\n                    value.push({ icon: '', iconColor: '', displayName: '', optionalValue: '' });\n                    continue;\n                }\n                //RegisterEntityWatcher(leftEntity.entity);\n\n                let iconColor = String(Color.rgb_dec565(Color.White));\n                let icon = '';\n                if (item.entityIconOn) {\n                    const val = await item.entityIconOn.getString();\n                    if (val !== null) icon = Icons.GetIcon(val);\n                }\n                let val: string | number | boolean | null = await item.entity.getNumber();\n                // if val not null its a number\n\n                if (item.entity.type == 'number' && val !== null) {\n                    if (item.entityFactor) {\n                        const v = await item.entityFactor.getNumber();\n                        if (v !== null) val *= v;\n                    }\n                    if (item.entityDecimalPlaces) {\n                        const v = await item.entityDecimalPlaces.getNumber();\n                        if (v !== null) val = val.toFixed(v);\n                    }\n                    if (item.entityUnitText) {\n                        const v = await item.entityUnitText.getString();\n                        if (v !== null) val += v;\n                    }\n\n                    iconColor = await GetScreenSaverEntityColor(item);\n                } else if (item.entity.type == 'boolean') {\n                    val = await item.entity.getBoolean();\n                    iconColor = await GetScreenSaverEntityColor(item);\n                    if (!val && item.entityIconOff) {\n                        const t = await item.entityIconOff.getString();\n                        if (t !== null) icon = Icons.GetIcon(t);\n                    }\n                    if (val && item.entityOnText != undefined) {\n                        const t = await item.entityOnText.getString();\n                        if (t !== null) val = t;\n                    } else if (!val && item.entityOffText != undefined) {\n                        const t = await item.entityOffText.getString();\n                        if (t !== null) val = t;\n                    }\n                } else if (item.entity.type == 'string' && (val = await item.entity.getString()) !== null) {\n                    iconColor = await GetScreenSaverEntityColor(item);\n\n                    const pformat = parseFormat(val);\n\n                    this.log.debug(\n                        'moments.js --> Datum ' + val + ' valid?: ' + moment(val, pformat, true).isValid(),\n                        'info',\n                    );\n                    if (moment(val, pformat, true).isValid()) {\n                        const DatumZeit = moment(val, pformat).unix(); // Conversion to Unix time stamp\n                        const entityDateFormat = item.entityDateFormat ? await item.entityDateFormat.getObject() : null;\n                        val = new Date(DatumZeit * 1000).toLocaleString(\n                            this.config.locale,\n                            entityDateFormat !== null ? entityDateFormat : undefined,\n                        );\n                    }\n                }\n\n                let temp: any = item.entityIconColor ? await item.entityIconColor.getRGBDec() : null;\n                iconColor = temp ? temp : iconColor;\n                temp = item.entityText ? await item.entityText.getString() : null;\n                const entityText = temp ? temp : '';\n                value.push({ icon, iconColor, displayName: entityText, optionalValue: val ? String(val) : '' });\n            }\n        }\n        if (this.layout === 'alternate') {\n            // hack: insert empty entry\n            const lastIndex = payload.value[this.layout]!.length - 1;\n            payload.value[this.layout]!.push(payload.value[this.layout]![lastIndex]);\n            payload.value[this.layout]![lastIndex] = { icon: '', iconColor: '', displayName: '', optionalValue: '' };\n        }\n\n        this.log.debug('HandleScreensaverUpdate payload: ' + JSON.stringify(payload.value[this.layout]));\n\n        this.sendStatusUpdate(payload, this.layout);\n\n        this.HandleScreensaverStatusIcons();\n    }\n    sendType(): void {\n        switch (this.layout) {\n            case 'standard': {\n                this.visible = true;\n                this.sendToPanel('pageType~screensaver');\n                break;\n            }\n            case 'alternate': {\n                this.visible = true;\n                this.sendToPanel('pageType~screensaver');\n                break;\n            }\n            case 'advanced': {\n                this.visible = true;\n                this.sendToPanel('pageType~screensaver2');\n                break;\n            }\n        }\n    }\n    sendStatusUpdate(\n        payload: sendTemplates['statusUpdate'] | sendTemplates['weatherUpdate'],\n        layout: NSPanel.ScreensaverModeType,\n    ): void {\n        switch (payload.eventType) {\n            case 'statusUpdate':\n                this.sendToPanel(\n                    this.getPayload(\n                        payload.eventType,\n                        payload.icon1,\n                        payload.icon1Color,\n                        payload.icon2,\n                        payload.icon2Color,\n                        payload.icon1Font,\n                        payload.icon2Font,\n                        '',\n                    ),\n                );\n                break;\n            case 'weatherUpdate': {\n                let value = payload.value[layout];\n                if (!value) return;\n                const result: string[] = [payload.eventType];\n                const check = weatherUpdateTestArray![layout];\n                value = value.filter((item, pos) => check[pos]);\n                value.forEach((item, pos) => {\n                    const test = check[pos];\n                    if (item.icon && !test.icon) item.icon = '';\n                    if (item.iconColor && !test.iconColor) item.iconColor = '';\n                    if (item.displayName && (!('displayName' in test) || !test.displayName)) item.displayName = '';\n                    if (item.optionalValue && !test.icon) item.icon = '';\n                });\n                value.forEach(\n                    (a) =>\n                        a &&\n                        result.push(\n                            this.getPayload(\n                                '',\n                                '',\n                                a.icon,\n                                a.iconColor,\n                                'displayName' in a ? a.displayName : '',\n                                a.optionalValue,\n                            ),\n                        ),\n                );\n                this.sendToPanel(this.getPayloadArray([...result, '']));\n                break;\n            }\n        }\n    }\n    getVisibility = (): boolean => {\n        return this.visible;\n    };\n    setVisibility = (v: boolean): void => {\n        if (v !== this.visible) {\n            this.visible = v;\n            this.step = -1;\n            if (this.visible) {\n                this.sendType();\n                this.rotationLoop();\n            } else {\n                if (this.timoutRotation) this.adapter.clearTimeout(this.timoutRotation);\n            }\n        }\n    };\n    rotationLoop = async (): Promise<void> => {\n        if (this.unload) return;\n        // only use this if screensaver is activated\n        if (!this.visible) return;\n        const l = this.entitysConfig.bottomEntity.length;\n        const m = Definition.ScreenSaverConst[this.layout].bottomEntity.maxEntries;\n        if (l <= m * ++this.step) this.step = 0;\n\n        await this.update();\n\n        if (l <= m || this.rotationTime === 0) return;\n        this.timoutRotation = this.adapter.setTimeout(\n            this.rotationLoop,\n            this.rotationTime < 3000 ? 3000 : this.rotationTime,\n        );\n    };\n    getPayloadArray(s: string[]): string {\n        return s.join('~');\n    }\n    getPayload(...s: string[]): string {\n        return s.join('~');\n    }\n\n    onStateTrigger = async (): Promise<boolean> => {\n        if (!(await super.onStateTrigger())) return false;\n\n        this.update();\n        return true;\n    };\n    async HandleScreensaverStatusIcons(): Promise<void> {\n        const payload: Partial<sendTemplates['statusUpdate']> = { eventType: 'statusUpdate' };\n        const maxItems = Definition.ScreenSaverConst[this.layout]['mrIconEntity'].maxEntries;\n        for (let i = 0; i < maxItems; i++) {\n            const s: '1' | '2' = i == 0 ? '1' : '2';\n            const item = this.items['mrIconEntity'][i];\n            if (item === null || item === undefined) {\n                payload[`icon${s}`] = '';\n                payload[`icon${s}Color`] = '';\n                payload[`icon${s}Font`] = '';\n                continue;\n            }\n\n            let value: string | boolean | number | null = null;\n            if (item.entityValue) {\n                switch (item.entityValue.type) {\n                    case 'string': {\n                        const v = await item.entityValue.getString();\n                        if (v !== null) value = v;\n                        break;\n                    }\n                    case 'number': {\n                        value = 0;\n                        const v = await item.entityValue.getNumber();\n                        const c = item.entityValueDecimalPlace ? await item.entityValueDecimalPlace.getNumber() : null;\n                        if (v !== null) value = v;\n                        if (c !== null) value = (value || 0).toFixed(c);\n                        break;\n                    }\n                    case 'boolean': {\n                        value = false;\n                        const v = item.entityValue ? await item.entityValue.getBoolean() : null;\n                        if (v !== null) value = v;\n                        break;\n                    }\n\n                    case 'object':\n                        const s: '1' | '2' = i == 0 ? '1' : '2';\n                        payload[`icon${s}`] = '';\n                        payload[`icon${s}Color`] = '';\n                        payload[`icon${s}Font`] = '';\n                        continue;\n                }\n            }\n            const entity = item.entity\n                ? item.entity.type == 'string'\n                    ? await item.entity.getString()\n                    : await item.entity.getBoolean()\n                : null;\n            const offcolor = item.entityOffColor\n                ? await item.entityOffColor.getRGBDec()\n                : String(Color.rgb_dec565(Color.White));\n            const onColor = item.entityOnColor ? await item.entityOnColor.getRGBDec() : null;\n            payload[`icon${s}Color`] = offcolor !== null ? offcolor : String(Color.rgb_dec565(Color.White));\n            if (item.entity != null || value !== null || item.entityValue != null) {\n                // Pr\u00FCfung ob Entity vom Typ String ist\n                if (entity != null && onColor) {\n                    if (typeof entity == 'string') {\n                        this.log.debug('Entity ist String');\n                        switch (entity.toUpperCase()) {\n                            case 'ON':\n                            case 'OK':\n                            case 'AN':\n                            case 'YES':\n                            case 'TRUE':\n                            case 'ONLINE':\n                                payload[`icon${s}Color`] = onColor;\n                                break;\n                            default:\n                        }\n                        if (Definition.Debug)\n                            this.log.debug(\n                                'Value: ' + item.entity + ' Color: ' + JSON.stringify(payload[`icon${s}Color`]),\n                                'info',\n                            );\n                        // Alles was kein String ist in Boolean umwandeln\n                    } else {\n                        this.log.debug('Entity ist kein String', 'info');\n                        if (entity) {\n                            payload[`icon${s}Color`] = onColor;\n                        }\n                    }\n                }\n                const entityIconSelect: any | null = item.entityIconSelect\n                    ? await item.entityIconSelect.getObject()\n                    : null;\n\n                // Icon ermitteln\n                const onIcon = item.entityIconOn ? await item.entityIconOn.getString() : null;\n                const offIcon = item.entityIconOff ? await item.entityIconOff.getString() : null;\n                const selectIcon =\n                    typeof entity !== 'boolean' && entity !== null && entityIconSelect\n                        ? (entityIconSelect[entity] as string | undefined)\n                        : undefined;\n\n                if (selectIcon) {\n                    payload[`icon${s}`] = Icons.GetIcon(selectIcon);\n                    this.log.debug('SelectIcon: ' + JSON.stringify(payload), 'info');\n                } else if (entity && onIcon) {\n                    payload[`icon${s}`] = Icons.GetIcon(onIcon);\n                    this.log.debug('Icon if true ' + JSON.stringify(payload), 'info');\n                } else {\n                    if (offIcon) {\n                        payload[`icon${s}`] = Icons.GetIcon(offIcon);\n                        this.log.debug('Icon1 else true ' + JSON.stringify(payload), 'info');\n                    } else if (onIcon) {\n                        payload[`icon${s}`] = Icons.GetIcon(onIcon);\n                        this.log.debug('Icon1 else false ' + JSON.stringify(payload), 'info');\n                    }\n                }\n\n                if (value !== null && value !== undefined) {\n                    payload[`icon${s}`] += String(value);\n                    const unit = item.entityValueUnit ? await item.entityValueUnit.getString() : null;\n                    if (unit !== null) payload[`icon${s}`] += unit;\n                }\n            } else {\n                payload[`icon${s}Color`] = String(Color.rgb_dec565(Color.Black));\n            }\n            payload[`icon${s}Font`] = this.config[`iconBig${s}`] ? '1' : '';\n        }\n        this.sendStatusUpdate(payload as sendTemplates['statusUpdate'], this.layout);\n    }\n    async delete(): Promise<void> {\n        await super.delete();\n        if (this.timoutRotation) this.adapter.clearTimeout(this.timoutRotation);\n    }\n}\n\nasync function GetScreenSaverEntityColor(item: NSPanel.ScreenSaverDataItems | null): Promise<string> {\n    if (item && item.entity) {\n        let colorReturn: number | string;\n        const entityAsNumber = item.entity ? await item.entity.getNumber() : null;\n        const entityFactor = item.entityFactor ? await item.entityFactor.getNumber() : null;\n        const entityIconColor = item.entityIconColor ? await item.entityIconColor.getRGBDec() : null;\n        const entityIconColorScale: NSPanel.IconScaleElement | null = item.entityIconColorScale\n            ? await item.entityIconColorScale.getIconScale()\n            : null;\n        const entityOnColor = item.entityOnColor ? await item.entityOnColor.getRGBDec() : null;\n        const entityOffColor = item.entityOffColor ? await item.entityOffColor.getRGBDec() : null;\n        if (entityIconColor !== null && entityIconColorScale !== null) {\n            if (item.entity.type == 'boolean') {\n                const iconvalbest =\n                    entityIconColorScale && entityIconColorScale.val_best !== undefined\n                        ? !!entityIconColorScale.val_best\n                        : false;\n                if (iconvalbest == (await item.entity.getBoolean())) {\n                    if (entityOnColor !== null) colorReturn = entityOnColor;\n                    else colorReturn = Color.rgb_dec565(Color.colorScale0);\n                } else {\n                    if (entityOffColor !== null) colorReturn = entityOffColor;\n                    else colorReturn = Color.rgb_dec565(Color.colorScale10);\n                }\n            } else if (entityIconColorScale !== null && entityAsNumber !== null) {\n                const iconvalmin: number = entityIconColorScale.val_min != undefined ? entityIconColorScale.val_min : 0;\n                const iconvalmax: number =\n                    entityIconColorScale.val_max != undefined ? entityIconColorScale.val_max : 100;\n                const iconvalbest: number =\n                    entityIconColorScale.val_best != undefined ? entityIconColorScale.val_best : iconvalmin;\n                let valueScale = entityAsNumber * (entityFactor !== null ? entityFactor : 1);\n\n                if (iconvalmin == 0 && iconvalmax == 1) {\n                    if (await item.entity.getBoolean()) {\n                        if (entityOnColor !== null) colorReturn = entityOnColor;\n                        else colorReturn = Color.rgb_dec565(Color.colorScale0);\n                    } else {\n                        if (entityOffColor !== null) colorReturn = entityOffColor;\n                        else colorReturn = Color.rgb_dec565(Color.colorScale10);\n                    }\n                } else {\n                    if (iconvalbest == iconvalmin) {\n                        valueScale = Color.scale(valueScale, iconvalmin, iconvalmax, 10, 0);\n                    } else {\n                        if (valueScale < iconvalbest) {\n                            valueScale = Color.scale(valueScale, iconvalmin, iconvalbest, 0, 10);\n                        } else if (valueScale > iconvalbest || iconvalbest != iconvalmin) {\n                            valueScale = Color.scale(valueScale, iconvalbest, iconvalmax, 10, 0);\n                        } else {\n                            valueScale = Color.scale(valueScale, iconvalmin, iconvalmax, 10, 0);\n                        }\n                    }\n                    //limit if valueScale is smaller/larger than 0-10\n                    if (valueScale > 10) valueScale = 10;\n                    if (valueScale < 0) valueScale = 0;\n\n                    const valueScaletemp = Math.round(valueScale).toFixed();\n                    colorReturn = Color.HandleColorScale(valueScaletemp);\n                }\n            } else {\n                colorReturn = Color.rgb_dec565(Color.White);\n            }\n        } else {\n            const entityAsBoolean = item.entity ? await item.entity.getBoolean() : null;\n            if (item.entity.type == 'boolean' || item.entity.type == 'number') {\n                if (entityAsBoolean !== null) {\n                    if (entityAsBoolean) {\n                        if (entityOnColor !== null) colorReturn = entityOnColor;\n                        else colorReturn = Color.rgb_dec565(Color.White);\n                    } else {\n                        if (entityOffColor !== null) colorReturn = entityOffColor;\n                        else colorReturn = Color.rgb_dec565(Color.White);\n                    }\n                } else {\n                    if (entityOffColor !== null) colorReturn = entityOffColor;\n                    else colorReturn = Color.rgb_dec565(Color.White);\n                }\n            } else {\n                colorReturn = Color.rgb_dec565(Color.White);\n            }\n        }\n        return String(colorReturn);\n    }\n    return String(Color.rgb_dec565(Color.White));\n}\n"],
  "mappings": "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",
  "names": ["moment", "val", "parseFormat", "s"]
}
