{
  "version": 3,
  "sources": ["../../../src/lib/pages/screensaver.ts"],
  "sourcesContent": ["import * as Definition from '../const/definition';\nimport * as Types from '../types/types';\nimport { Icons } from '../const/icon_mapping';\n\n//import dayjs from 'dayjs';\n//import moment from 'moment';\n//import parseFormat from 'moment-parseformat';\nimport { Page } from '../classes/Page';\nimport * as pages from '../types/pages';\nimport * as tools from '../const/tools';\nimport { PageItem } from './pageItem';\nimport type { PageInterface } from '../classes/PageInterface';\nimport type { BaseClassTriggerd } from '../classes/baseClassPage';\nimport type { PageItemDataItemsOptions } from '../types/type-pageItem';\nimport { Color, type RGB } from '../const/Color';\n\nexport type ScreensaverConfigType = {\n    momentLocale: string;\n    locale: string; //Intl.DateTimeFormat;\n    iconBig1: boolean;\n    iconBig2: boolean;\n};\n\nexport class Screensaver extends Page {\n    items: undefined;\n    private step: number = 0;\n    private blockButtons: ioBroker.Timeout | undefined;\n    rotationTime: number = 300_000;\n    public screensaverIndicatorButtons: boolean = false;\n    public screensaverSwipe: boolean = false;\n    private _infoIcon: any = '';\n    private timeoutRotation: ioBroker.Timeout | undefined = undefined;\n    public headingNotification: string = '';\n    public textNotification: string = '';\n    //readonly mode: Types.ScreensaverModeType = 'standard';\n    constructor(config: PageInterface, options: pages.PageBaseConfig) {\n        if (\n            !options.config ||\n            (options.config.card !== 'screensaver' &&\n                options.config.card !== 'screensaver2' &&\n                options.config.card !== 'screensaver3')\n        ) {\n            config.adapter.log.error(\n                `Invalid card for screensaver: ${options ? JSON.stringify(options) : 'undefined'}`,\n            );\n            return;\n        }\n        switch (options.config.mode) {\n            case 'standard':\n            case 'alternate': {\n                config.card = 'screensaver';\n                break;\n            }\n            case 'advanced': {\n                config.card = 'screensaver2';\n                break;\n            }\n            case 'easyview': {\n                config.card = 'screensaver3';\n                break;\n            }\n        }\n        config.alwaysOn = 'none';\n        super(config, options);\n        this.screensaverIndicatorButtons = options.config.screensaverIndicatorButtons ?? false;\n        this.screensaverSwipe = options.config.screensaverSwipe ?? false;\n        this.rotationTime =\n            options.config.rotationTime !== 0 && options.config.rotationTime < 3\n                ? 3000\n                : options.config.rotationTime * 1000;\n        this.neverDeactivateTrigger = true;\n    }\n\n    async init(): Promise<void> {\n        await super.init();\n        this.pageItems = await this.createPageItems(this.pageItemConfig);\n        await this.basePanel.setScreensaverSwipe(this.screensaverSwipe);\n        if (this.pageItems) {\n            const indicators = this.pageItems.filter(x => x && x.config && x.config.modeScr === 'indicator');\n            for (let a = 0; a < indicators.length; a++) {\n                await this.library.writedp(\n                    `panels.${this.basePanel.name}.buttons.indicator-${a + 1}`,\n                    undefined,\n                    Definition.genericStateObjects.panel.panels.buttons.indicator,\n                );\n            }\n        }\n    }\n\n    /**\n     * Build the screensaver message for requested places (order-preserving, parallel).\n     *\n     * - Runs only for screensaver cards.\n     * - Keeps configured order by collecting (place, index, payload) and sorting by index per place.\n     * - Numeric `enabled` \u2192 overwrite by index; boolean `enabled=false` \u2192 skip.\n     *\n     * @param places Places to include in the message.\n     */\n    async getData(places: Types.ScreenSaverPlaces[]): Promise<pages.screensaverMessage | null> {\n        const config = this.config;\n        if (!config || !pages.isScreenSaverCardType(config.card)) {\n            return null;\n        }\n\n        const message: pages.screensaverMessage = {\n            options: {\n                indicator: [],\n                left: [],\n                time: [],\n                date: [],\n                bottom: [],\n                mricon: [],\n                favorit: [],\n                alternate: [],\n            },\n        };\n        const overwrite: Record<Types.ScreenSaverPlaces, string[]> = {\n            indicator: [],\n            left: [],\n            time: [],\n            date: [],\n            bottom: [],\n            mricon: [],\n            favorit: [],\n            alternate: [],\n        };\n\n        if (!this.pageItems) {\n            return message;\n        }\n\n        const model = 'model' in config ? config.model : 'eu';\n        const layout = this.mode;\n\n        type AppendResult = { kind: 'append'; place: Types.ScreenSaverPlaces; idx: number; payload: string };\n        type OverwriteResult = {\n            kind: 'overwrite';\n            place: Types.ScreenSaverPlaces;\n            enabledIndex: number;\n            payload: string;\n        };\n        type Result = AppendResult | OverwriteResult | null;\n\n        // Collect results in parallel, but tagged with original index\n        const results: Result[] = await Promise.all(\n            this.pageItems.map(async (pageItem, idx): Promise<Result> => {\n                const place = pageItem?.config?.modeScr;\n                if (!place) {\n                    return null;\n                }\n\n                if (place === 'alternate' && this.mode !== 'alternate') {\n                    return null;\n                }\n                if (!places.includes(place)) {\n                    return null;\n                }\n\n                const max = Definition.ScreenSaverConst[layout][place].maxEntries[model];\n                if (max === 0) {\n                    return null;\n                }\n\n                // Overwrite via numeric enabled index\n                const enabledNum = await pageItem.dataItems?.data?.enabled?.getNumber();\n                if (enabledNum != null) {\n                    if (enabledNum >= 0) {\n                        const payload = await pageItem.getPageItemPayload();\n                        return { kind: 'overwrite', place, enabledIndex: enabledNum, payload };\n                    }\n                    return null;\n                }\n\n                // Skip via boolean enabled=false\n                const enabledBool = await pageItem.dataItems?.data?.enabled?.getBoolean();\n                if (enabledBool === false) {\n                    return null;\n                }\n\n                // Default: append with original index\n                const payload = await pageItem.getPageItemPayload();\n                return { kind: 'append', place, idx, payload };\n            }),\n        );\n\n        // Apply overwrites and collect appends grouped by place\n        const appendsByPlace: Record<Types.ScreenSaverPlaces, Array<{ idx: number; payload: string }>> = {\n            indicator: [],\n            left: [],\n            time: [],\n            date: [],\n            bottom: [],\n            mricon: [],\n            favorit: [],\n            alternate: [],\n        };\n\n        for (const r of results) {\n            if (!r) {\n                continue;\n            }\n            if (r.kind === 'overwrite') {\n                overwrite[r.place][r.enabledIndex] = r.payload;\n            } else {\n                appendsByPlace[r.place].push({ idx: r.idx, payload: r.payload });\n            }\n        }\n\n        // Build message.options per place in original order, then apply overwrites\n        for (const key in message.options) {\n            const place = key as Types.ScreenSaverPlaces;\n            if (!places.includes(place)) {\n                continue;\n            }\n\n            // Stable order: sort by original index\n            const ordered = appendsByPlace[place].sort((a, b) => a.idx - b.idx).map(e => e.payload);\n            message.options[place].push(...ordered);\n\n            // Apply overwrites (sparse assignment is fine)\n            Object.assign(message.options[place], overwrite[place]);\n\n            // Windowing/paging\n            let max = Definition.ScreenSaverConst[layout][place].maxEntries[model];\n            if (max == null) {\n                max = Definition.ScreenSaverConst[layout][place].maxEntries.eu;\n            }\n            let items = message.options[place] || [];\n            if (items.length > max) {\n                const windows = Math.ceil(items.length / max);\n                const windowIdx = this.step % windows;\n                items = items.slice(max * windowIdx, max * (windowIdx + 1));\n                message.options[place] = items;\n            }\n\n            // Normalize payload fields per slot\n            for (let i = 0; i < max; i++) {\n                const msg = message.options[place][i];\n                if (!msg) {\n                    message.options[place][i] = tools.getPayload('', '', '', '', '', '');\n                } else {\n                    const arr = msg.split('~');\n                    arr[0] = '';\n                    if (place !== 'indicator') {\n                        arr[1] = '';\n                    }\n                    message.options[place][i] = tools.getPayloadArray(arr);\n                }\n            }\n        }\n\n        return message;\n    }\n\n    /**\n     * Send (or clear) a screensaver notification to the panel if the panel is online.\n     *\n     * @param enabled When true, send heading + text; otherwise clear the notify.\n     */\n    sendNotify(enabled: boolean): void {\n        if (!this.basePanel.isOnline) {\n            return;\n        }\n\n        const msg = enabled\n            ? tools.getPayload('notify', this.headingNotification, this.textNotification)\n            : tools.getPayload('notify', '', '');\n\n        this.sendToPanel(msg, false);\n    }\n\n    /** Current info icon (readonly property wrapper). */\n    get infoIcon(): string {\n        return this._infoIcon;\n    }\n\n    /**\n     * Update the info icon and trigger time handling refresh.\n     */\n    set infoIcon(infoIcon: string) {\n        this._infoIcon = infoIcon;\n        void this.HandleTime();\n    }\n\n    /**\n     * Update the screensaver view with data for selected places and refresh status icons.\n     * - Prepends an empty payload to 'alternate' if it contains entries\n     * - Sends a 'weatherUpdate' payload with concatenated place arrays\n     */\n    async update(): Promise<void> {\n        if (!this.visibility) {\n            return;\n        }\n\n        const message = await this.getData(['left', 'bottom', 'indicator', 'alternate', 'favorit']);\n        if (message === null) {\n            return;\n        }\n\n        if (message.options.alternate.length > 0) {\n            message.options.alternate.unshift(tools.getPayload('', '', '', '', '', ''));\n        }\n\n        const arr: string[] = [\n            ...(message.options.favorit || []),\n            ...(message.options.left || []),\n            ...(message.options.bottom || []),\n            ...(message.options.alternate || []),\n            ...(message.options.indicator || []),\n        ];\n\n        const msg = tools.getPayload('weatherUpdate', tools.getPayloadArray(arr));\n        this.sendToPanel(msg, false);\n        this.sendColors();\n        await this.HandleScreensaverStatusIcons();\n    }\n    public async createPageItems(\n        pageItemsConfig: (PageItemDataItemsOptions | undefined)[] | undefined,\n    ): Promise<(PageItem | undefined)[] | undefined> {\n        return await super.createPageItems(pageItemsConfig);\n    }\n\n    public sendColors(): void {\n        const colorPayload = `color~${Color.rgb_dec565(Color.background as RGB)}~${\n            Color.rgb_dec565(Color.fgTime as RGB) // tTime\n        }~${\n            Color.rgb_dec565(Color.fgTimeAmPm as RGB) // timeAMPM\n        }~${\n            Color.rgb_dec565(Color.fgDate as RGB) // tDate\n        }~${\n            Color.rgb_dec565(Color.fgMain as RGB) // tMainText\n        }~${\n            Color.rgb_dec565(Color.fgForecast as RGB) // tForecast1\n        }~${\n            Color.rgb_dec565(Color.fgForecast as RGB) // tForecast2\n        }~${\n            Color.rgb_dec565(Color.fgForecast as RGB) // tForecast3\n        }~${\n            Color.rgb_dec565(Color.fgForecast as RGB) // tForecast4\n        }~${\n            Color.rgb_dec565(Color.fgForecast as RGB) // tForecast1Val\n        }~${\n            Color.rgb_dec565(Color.fgForecast as RGB) // tForecast2Val\n        }~${\n            Color.rgb_dec565(Color.fgForecast as RGB) // tForecast3Val\n        }~${\n            Color.rgb_dec565(Color.fgForecast as RGB) // tForecast4Val\n        }~${\n            Color.rgb_dec565(Color.fgBar as RGB) // bar\n        }~${\n            Color.rgb_dec565(Color.fgMainAlt as RGB) // tMainTextAlt2\n        }~${\n            Color.rgb_dec565(Color.fgTimeAdd as RGB) // tTimeAdd\n        }`;\n        this.sendToPanel(colorPayload, false);\n    }\n    async onVisibilityChange(v: boolean): Promise<void> {\n        //await super.onVisibilityChange(v);\n        this.step = 0;\n        if (v) {\n            this.sendType();\n            //await this.update();\n            await this.HandleTime();\n            await this.restartRotationLoop();\n        } else {\n            if (this.timeoutRotation) {\n                this.adapter.clearTimeout(this.timeoutRotation);\n            }\n        }\n    }\n    async restartRotationLoop(): Promise<void> {\n        if (this.timeoutRotation) {\n            this.adapter.clearTimeout(this.timeoutRotation);\n        }\n        await this.rotationLoop();\n    }\n    rotationLoop = async (): Promise<void> => {\n        // only use this if screensaver is activated\n        if (!this.visibility) {\n            return;\n        }\n        await this.update();\n\n        if (this.rotationTime === 0) {\n            this.step = 0;\n            return;\n        }\n        this.step = this.step > 10_000 ? 0 : this.step + 1;\n        if (this.unload || this.adapter.unload) {\n            return;\n        }\n        this.timeoutRotation = this.adapter.setTimeout(\n            this.rotationLoop,\n            this.rotationTime < 3000 ? 3000 : this.rotationTime,\n        );\n    };\n\n    /**\n     * ..\n     *\n     * @param _dp - the dp that triggered the state\n     * @param from - the class that triggered the state\n     */\n    onStateTrigger = async (_dp: string, from: BaseClassTriggerd): Promise<void> => {\n        const config = this.config;\n        if (\n            !config ||\n            (config.card !== 'screensaver' && config.card !== 'screensaver2' && config.card !== 'screensaver3')\n        ) {\n            return;\n        }\n        if (from instanceof PageItem && this.pageItems) {\n            const index = parseInt(from.id.split('?')[1]);\n            const item = this.pageItems[index];\n            if (item && item.config) {\n                const place = item.config.modeScr;\n                if (place !== undefined) {\n                    switch (place) {\n                        case 'left':\n                        case 'bottom':\n                        case 'indicator':\n                        case 'alternate':\n                        case 'favorit': {\n                            await this.update();\n                            break;\n                        }\n                        case 'mricon': {\n                            await this.HandleScreensaverStatusIcons();\n                            break;\n                        }\n                        case 'time': {\n                            await this.HandleTime();\n                            break;\n                        }\n                        case 'date': {\n                            await this.HandleDate();\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    async HandleTime(): Promise<void> {\n        if (this.basePanel.isOnline === false) {\n            return;\n        }\n        const message = await this.getData(['time']);\n\n        if (message === null || !message.options.time[0]) {\n            this.log.debug('HandleTime: no message, no time or panel is offline');\n            return;\n        }\n        let icon = `${this.infoIcon ? `~${Icons.GetIcon(this.infoIcon)}` : ''}`;\n        if (this.basePanel.info.nspanel.displayVersion === '0.0.0') {\n            // only for development firmware\n            if (!this.adapter.config.hideDeveloperSymbols) {\n                icon = `~${Icons.GetIcon('cog-refresh-outline')}`;\n            }\n        } else if (!icon && this.basePanel.info.nspanel.onlineVersion !== this.basePanel.info.nspanel.displayVersion) {\n            // only for newer firmwares\n            icon = `~${Icons.GetIcon('wrench-clock')}`;\n        }\n\n        this.sendToPanel(`time~${message.options.time[0].split('~')[5]}${icon}`, false);\n    }\n    async HandleDate(): Promise<void> {\n        if (this.basePanel.isOnline === false) {\n            return;\n        }\n        const message = await this.getData(['date']);\n        if (message === null || !message.options.date[0]) {\n            this.log.debug('HandleDate: no message, no date or panel is offline');\n            return;\n        }\n        this.sendToPanel(`date~${message.options.date[0].split('~')[5]}`, false);\n    }\n\n    async HandleScreensaverStatusIcons(): Promise<void> {\n        if (!this.visibility) {\n            return;\n        }\n\n        const message = await this.getData(['mricon']);\n        if (message === null) {\n            return;\n        }\n        const mrIcon1 = message.options.mricon[0].split('~');\n        const mrIcon2 = message.options.mricon[1].split('~');\n        const msgArray: string[] = [\n            'statusUpdate',\n            mrIcon1[2] ?? '',\n            mrIcon1[3] ?? '',\n            mrIcon2[2] ?? '',\n            mrIcon2[3] ?? '',\n            this.basePanel.info.nspanel.bigIconLeft ? '1' : '',\n            this.basePanel.info.nspanel.bigIconRight ? '1' : '',\n        ];\n        const msg = tools.getPayloadArray(msgArray);\n        this.sendToPanel(msg, false);\n    }\n\n    async onButtonEvent(event: Types.IncomingEvent): Promise<void> {\n        if (event.page && event.id && this.pageItems && this.pageItems[event.id as any]) {\n            if (this.blockButtons) {\n                return;\n            }\n            const indicators = this.pageItems.filter(x => x && x.config && x.config.modeScr === 'indicator');\n            for (let a = 0; a < indicators.length; a++) {\n                if (indicators[a] === this.pageItems[event.id as any]) {\n                    await this.library.writedp(\n                        `panels.${this.basePanel.name}.buttons.indicator-${a + 1}`,\n                        true,\n                        Definition.genericStateObjects.panel.panels.buttons.indicator,\n                    );\n                }\n            }\n            await this.pageItems[event.id as any]!.onCommand(event.action, event.opt);\n            if (this.unload || this.adapter.unload) {\n                return;\n            }\n            this.blockButtons = this.adapter.setTimeout(() => {\n                this.blockButtons = undefined;\n            }, 500);\n        }\n    }\n\n    async delete(): Promise<void> {\n        await super.delete();\n        if (this.timeoutRotation) {\n            this.adapter.clearTimeout(this.timeoutRotation);\n        }\n        if (this.blockButtons) {\n            this.adapter.clearTimeout(this.blockButtons);\n        }\n    }\n    goLeft(): void {}\n    goRight(): void {}\n\n    get mode(): Types.ScreensaverModeType {\n        if (\n            !this.config ||\n            (this.config.card !== 'screensaver' &&\n                this.config.card !== 'screensaver2' &&\n                this.config.card !== 'screensaver3')\n        ) {\n            return 'standard';\n        }\n        return this.config.mode;\n    }\n    set mode(mode: Types.ScreensaverModeType) {\n        if (\n            !this.config ||\n            (this.config.card !== 'screensaver' &&\n                this.config.card !== 'screensaver2' &&\n                this.config.card !== 'screensaver3')\n        ) {\n            return;\n        }\n        if (pages.isScreenSaverMode(mode)) {\n            this.config.mode = mode;\n        } else {\n            pages.exhaustiveCheck(mode);\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            this.log.error(`Invalid mode: ${mode}`);\n        }\n    }\n\n    overwriteModel(mode: Types.ScreensaverModeTypeAsNumber, init: boolean = false): void {\n        if (mode === Screensaver.mapModeToNumber(this.mode)) {\n            return;\n        }\n        switch (mode) {\n            case 0:\n            case 1: {\n                // overwrite readonly property\n                (this.card as any) = 'screensaver';\n                if (this.config) {\n                    this.config.card = 'screensaver';\n                }\n                break;\n            }\n            case 2: {\n                // overwrite readonly property\n                (this.card as any) = 'screensaver2';\n                if (this.config) {\n                    this.config.card = 'screensaver2';\n                }\n                break;\n            }\n            case 3: {\n                // overwrite readonly property\n                (this.card as any) = 'screensaver3';\n                if (this.config) {\n                    this.config.card = 'screensaver3';\n                }\n                break;\n            }\n            default: {\n                pages.exhaustiveCheck(mode);\n                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                this.log.error(`Invalid mode: ${mode}`);\n                return;\n            }\n        }\n        this.mode = Screensaver.mapNumberToMode(mode);\n        if (!init && this.visibility) {\n            this.sendType();\n            void this.update();\n        }\n    }\n\n    static mapModeToNumber(mode: Types.ScreensaverModeType): Types.ScreensaverModeTypeAsNumber {\n        const index = Types.arrayOfScreensaverModes.findIndex(x => x === mode);\n        return Math.min(\n            Math.max(index, 0),\n            Types.arrayOfScreensaverModes.length - 1,\n        ) as Types.ScreensaverModeTypeAsNumber;\n    }\n\n    static mapNumberToMode(mode: Types.ScreensaverModeTypeAsNumber): Types.ScreensaverModeType {\n        return Types.arrayOfScreensaverModes[mode];\n    }\n}\n"],
  "mappings": "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",
  "names": ["payload"]
}
