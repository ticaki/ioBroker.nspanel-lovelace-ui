{
  "version": 3,
  "sources": ["../../../src/lib/pages/pageMedia.ts"],
  "sourcesContent": ["import { isDataItem, type Dataitem } from '../classes/data-item';\nimport { Color } from '../const/Color';\nimport { Icons } from '../const/icon_mapping';\nimport type { ColorEntryType } from '../types/type-pageItem';\nimport type * as pages from '../types/pages';\nimport * as types from '../types/types';\nimport { type PageInterface } from '../classes/PageInterface';\nimport * as tools from '../const/tools';\nimport type { ConfigManager } from '../classes/config-manager';\nimport { PageMenu } from './pageMenu';\nimport { isMediaButtonActionType } from '../classes/Page';\nimport { getPageSpotify } from './tools/getSpotify';\nimport { getPageAlexa } from './tools/getAlexa';\nimport { getPageMpd } from './tools/getMpd';\nimport { getPageSonos } from './tools/getSonos';\nimport { PageItem } from './pageItem';\nconst PageMediaMessageDefault: pages.PageMediaMessage = {\n    event: 'entityUpd',\n    headline: '',\n    navigation: '~~~~~~~~~',\n    id: '',\n    name: '',\n    titelColor: String(Color.rgb_dec565(Color.White)),\n    artist: '',\n    artistColor: String(Color.rgb_dec565(Color.White)),\n    volume: '',\n    iconplaypause: '',\n    onoffbuttonColor: '',\n    shuffle_icon: '',\n    logo: '~~~~~',\n    options: ['', '', '', '', ''],\n};\n\n/**\n * Represents a media page in the application.\n * Extends the base Page class to provide media-specific functionality.\n */\nexport class PageMedia extends PageMenu {\n    config: pages.cardMediaDataItemOptions;\n    items: pages.cardMediaDataItems[] = [];\n    currentItem: pages.cardMediaDataItems | undefined;\n    protected step: number = 0;\n    private headlinePos: number = 0;\n    private titelPos: number = 0;\n    private artistPos: number = 0;\n    private originalName: string = '';\n    private playerName: string = '';\n    public currentPlayer: string | RegExp;\n    get logo(): PageItem | undefined {\n        return this.currentItem?.logoItem;\n    }\n\n    constructor(config: PageInterface, options: pages.PageBaseConfig) {\n        super(config, options);\n        this.config = options.config as pages.cardMediaDataItemOptions;\n        this.currentPlayer = this.config.ident ?? '';\n        this.minUpdateInterval = 2000;\n    }\n\n    async init(): Promise<void> {\n        if (this.config?.card === 'cardMedia') {\n            const i = await this.createMainItems(this.config, this.enums, this.dpInit);\n            i.ident = this.config.ident ?? '';\n            this.items.push(i);\n\n            const id = this.config.ident ?? '';\n\n            const o = id ? await this.controller.adapter.getForeignObjectAsync(id) : null;\n\n            this.originalName =\n                (o?.common &&\n                    o.common?.name &&\n                    (typeof o.common.name === 'object' ? o.common.name.de || o.common.name.en : o?.common?.name)) ||\n                '';\n        }\n        await super.init();\n    }\n    async createMainItems(\n        c: pages.cardMediaDataItemOptions,\n        enums: string | string[],\n        dpInit: string | RegExp,\n    ): Promise<pages.cardMediaDataItems> {\n        const config = structuredClone(c);\n        // search states for mode auto\n        const tempConfig: Partial<pages.PageBaseConfig['config']> =\n            enums || dpInit\n                ? await this.basePanel.statesControler.getDataItemsFromAuto(dpInit, config, undefined, enums)\n                : config;\n\n        const tempItems: pages.cardMediaDataItems['data'] = await this.basePanel.statesControler.createDataItems(\n            tempConfig?.data,\n            this,\n        );\n        const logo = await this.initPageItems(config.logo);\n\n        return {\n            card: 'cardMedia',\n            ident: config.ident ?? '',\n            logo,\n            logoItem: undefined,\n            dpInit,\n            data: tempItems,\n        };\n    }\n    protected async onVisibilityChange(val: boolean): Promise<void> {\n        if (val) {\n            let index = this.items.findIndex(i => i.ident === this.currentPlayer);\n            index = index === -1 ? 0 : index;\n            if (index === 0) {\n                this.playerName = '';\n            }\n\n            this.currentItem = this.items[index];\n            if (this.currentItem && this.currentItem.logo) {\n                if (!this.currentItem.logoItem) {\n                    const logoItems = await this.createPageItems(this.currentItem.logo, 'logo');\n\n                    this.currentItem.logoItem = logoItems && logoItems.length > 0 ? logoItems[0] : undefined;\n                    if (this.currentItem.logoItem) {\n                        this.currentItem.logoItem.canBeHidden = true;\n                    }\n                }\n            }\n            this.headlinePos = 0;\n            this.titelPos = 0;\n            this.artistPos = 0;\n        } else {\n            for (const item of this.items) {\n                if (item.logoItem) {\n                    await item.logoItem.delete();\n                    item.logoItem = undefined;\n                }\n            }\n        }\n        await super.onVisibilityChange(val);\n    }\n\n    async updateCurrentPlayer(dp: string, name: string): Promise<void> {\n        if (this.currentPlayer === dp) {\n            return;\n        }\n        let index = this.items.findIndex(i => i.ident === dp);\n        let newOne = false;\n        if (index === -1) {\n            if (this.config?.card === 'cardMedia') {\n                const reg = tools.getRegExp(`/^${dp.split('.').join('\\\\.')}/`) || dp;\n                this.items.push(await this.createMainItems(this.config, '', reg));\n                index = this.items.length - 1;\n                this.items[index].ident = dp;\n                await this.controller.statesControler.activateTrigger(this);\n                newOne = true;\n            }\n        }\n        if (index === 0) {\n            this.playerName = '';\n        } else {\n            this.playerName = name;\n        }\n        this.currentItem = this.items[index];\n        if (newOne) {\n            if (this.currentItem && this.currentItem.logo) {\n                if (!this.currentItem.logoItem) {\n                    const logoItems = await this.createPageItems(this.currentItem.logo, 'logo');\n                    this.currentItem.logoItem = logoItems && logoItems.length > 0 ? logoItems[0] : undefined;\n                    if (this.currentItem.logoItem) {\n                        this.currentItem.logoItem.canBeHidden = true;\n                    }\n                }\n            }\n        }\n        this.currentPlayer = dp;\n        await this.update();\n    }\n\n    async update(): Promise<void> {\n        if (!this.visibility || this.sleep) {\n            return;\n        }\n\n        // Find current item by player ident, fallback to first item\n        let index = this.items.findIndex(i => i.ident === this.currentPlayer);\n        index = index === -1 ? 0 : index;\n        if (index === 0) {\n            this.playerName = '';\n        }\n\n        this.currentItem = this.items[index];\n        const item = this.currentItem;\n        if (!item) {\n            return;\n        }\n\n        const message: Partial<pages.PageMediaMessage> = {};\n\n        // ---------------------\n        // Collect metadata\n        // ---------------------\n        let duration = '',\n            elapsed = '',\n            title = '',\n            album = '',\n            artist = '';\n\n        const isPlaying = await this.isPlaying();\n        // Title string\n        {\n            const v = await tools.getValueEntryString(item.data.title);\n            if (v !== null) {\n                title = v;\n            }\n        }\n\n        // Headline: fallback to playerName if needed\n        {\n            const v = item.data.headline && (await item.data.headline.getString());\n            let headline = v ?? '';\n\n            if (!headline) {\n                let suffix = title;\n\n                if (!suffix && this.currentItem.ident) {\n                    const first = this.currentItem.ident.split('.')[0];\n                    switch (first) {\n                        case 'alexa2':\n                            suffix = 'Alexa';\n                            break;\n                        case 'spotify-premium':\n                            suffix = 'Spotify';\n                            break;\n                        case 'mpd':\n                            suffix = 'MPD';\n                            break;\n                        case 'sonos':\n                            suffix = 'Sonos';\n                            break;\n                        default:\n                            suffix = first;\n                            break;\n                    }\n                    if (!this.playerName && this.originalName) {\n                        suffix += `: ${this.originalName}`;\n                    }\n                }\n\n                headline = this.playerName ? `${this.playerName}: ${suffix}` : suffix;\n            }\n            message.headline = headline;\n        }\n\n        // Artist string\n        {\n            const v = await tools.getValueEntryString(item.data.artist);\n            if (v !== null) {\n                artist = v;\n            }\n        }\n\n        // Duration + elapsed\n        if (item.data.duration && item.data.elapsed) {\n            const d = await item.data.duration.getNumber(); // media length in ms\n            if (d) {\n                duration = tools.formatHMS(d);\n            }\n\n            if (item.data.elapsed.type === 'string') {\n                const e = await item.data.elapsed.getString();\n                if (e !== null) {\n                    elapsed = e;\n                }\n            } else if (item.data.elapsed.type === 'number') {\n                const e = await item.data.elapsed.getNumber();\n                if (e != null) {\n                    elapsed = tools.formatHMS(e);\n                }\n            }\n        }\n\n        // Album string\n        if (item.data.album) {\n            const v = await item.data.album.getString();\n            if (v !== null) {\n                album = v;\n            }\n        }\n\n        // ---------------------\n        // Headline scrolling\n        // ---------------------\n        if (message.headline) {\n            const { text, nextPos } = tools.buildScrollingText(message.headline, {\n                maxSize: 28,\n                pos: this.headlinePos,\n            });\n            message.headline = text;\n            this.headlinePos = nextPos;\n        }\n\n        // ---------------------\n        // Title scrolling with duration/elapsed suffix\n        // ---------------------\n        {\n            const suffix = `| ${elapsed}${duration ? `-${duration}` : ''}`;\n            const { text, nextPos } = tools.buildScrollingText(title, {\n                maxSize: 37,\n                suffix,\n                sep: ' ',\n                pos: this.titelPos,\n            });\n            message.name = text;\n            this.titelPos = nextPos;\n        }\n\n        // ---------------------\n        // Artist/Album scrolling\n        // ---------------------\n        if (album || artist) {\n            const div = album && artist ? ' | ' : '';\n            const scrollText = album + div + artist;\n\n            const { text, nextPos } = tools.buildScrollingText(scrollText, {\n                maxSize: 37,\n                pos: this.artistPos,\n            });\n\n            message.artist = text;\n            this.artistPos = nextPos;\n        }\n\n        // ---------------------\n        // Shuffle icon\n        // ---------------------\n        message.shuffle_icon = '';\n        if (item.data.shuffle?.value?.type) {\n            let value: null | true | false = null;\n            if (!item.data.shuffle.enabled || (await item.data.shuffle.enabled.getBoolean()) === true) {\n                switch (item.data.shuffle.value.type) {\n                    case 'string': {\n                        const v = await item.data.shuffle.value.getString();\n                        if (v !== null) {\n                            value = ['OFF', 'FALSE'].indexOf(v.toUpperCase()) === -1;\n                        }\n                        break;\n                    }\n                    case 'number':\n                    case 'boolean': {\n                        value = await item.data.shuffle.value.getBoolean();\n                        break;\n                    }\n                    default: {\n                        value = null;\n                    }\n                }\n            }\n            if (value !== null) {\n                message.shuffle_icon = value ? 'shuffle-variant' : 'shuffle-disabled';\n            }\n        }\n\n        // ---------------------\n        // Volume\n        // ---------------------\n        if (item.data.volume) {\n            const v = await tools.getScaledNumber(item.data.volume);\n            if (v !== null) {\n                message.volume = String(v);\n            }\n        }\n\n        // ---------------------\n        // Play/Pause state (mediaState preferred, fallback isPlaying)\n        // ---------------------\n        if (item.data.mediaState) {\n            const v = await item.data.mediaState.getString();\n            if (v !== null) {\n                message.iconplaypause = !(await this.getMediaState()) ? 'play' : 'pause';\n                if (item.data.stop || item.data.pause) {\n                    message.onoffbuttonColor = v.toUpperCase() !== 'STOP' ? '65535' : '1374';\n                } else {\n                    message.onoffbuttonColor = message.iconplaypause !== 'pause' ? '65535' : '1374';\n                }\n            }\n        } else {\n            message.iconplaypause = isPlaying ? 'pause' : 'play';\n            if (item.data.stop || item.data.pause) {\n                message.onoffbuttonColor = isPlaying ? '65535' : '1374';\n            } else {\n                message.onoffbuttonColor = message.iconplaypause !== 'pause' ? '65535' : '1374';\n            }\n        }\n\n        // ---------------------\n        // Colors (title, artist, onOff)\n        // ---------------------\n        if (item.data.title) {\n            const v = await tools.getIconEntryColor(item.data.title, isPlaying, Color.Red, Color.Gray);\n            if (v !== null) {\n                message.titelColor = v;\n            }\n        }\n        if (item.data.artist) {\n            const v = await tools.getIconEntryColor(item.data.artist, isPlaying, Color.White, Color.Gray);\n            if (v !== null) {\n                message.artistColor = v;\n            }\n        }\n        if (item.data.onOffColor) {\n            const v = await tools.getIconEntryColor(item.data.onOffColor, isPlaying, Color.White);\n            message.onoffbuttonColor = v !== null ? v : 'disable';\n        }\n\n        // ---------------------\n        // Logo\n        // ---------------------\n        if (item.logoItem) {\n            message.logo = tools.getPayload(await item.logoItem.getPageItemPayload());\n        }\n\n        // ---------------------\n        // Options / Navigation\n        // ---------------------\n        const opts: string[] = ['~~~~~', '~~~~~', '~~~~~', '~~~~~', '~~~~~'];\n        const pageItems = (await this.getOptions([])).slice(0, this.maxItems);\n        message.navigation = this.getNavigation();\n\n        const msg: pages.PageMediaMessage = {\n            ...PageMediaMessageDefault,\n            ...message,\n            id: 'media',\n            options: pageItems\n                .concat(opts)\n                .slice(0, 5)\n                .map(o => (o ? o : '~~~~~')) as [string, string, string, string, string],\n        };\n\n        this.sendToPanel(this.getMessage(msg), false);\n    }\n\n    private async getMediaState(): Promise<boolean | null> {\n        if (!this.currentItem) {\n            return null;\n        }\n        const item = this.currentItem.data.mediaState;\n        if (item) {\n            const v = await item.getString();\n            if (v !== null) {\n                return ['PLAY', '1', 'TRUE'].indexOf(v.toUpperCase()) !== -1;\n            }\n            const b = await item.getBoolean();\n            if (b !== null) {\n                return b;\n            }\n        }\n        return null;\n    }\n    private async getOnOffState(): Promise<boolean | null> {\n        if (!this.currentItem) {\n            return null;\n        }\n        const item = this.currentItem.data.mediaState;\n        if (item) {\n            const v = await item.getString();\n            if (v !== null) {\n                return ['STOP', '0', 'FALSE'].indexOf(v.toUpperCase()) === -1;\n            }\n        }\n        return null;\n    }\n\n    private getMessage(message: pages.PageMediaMessage): string {\n        return tools.getPayload(\n            'entityUpd',\n            message.headline,\n            message.navigation,\n            message.id,\n            message.name,\n            message.titelColor,\n            message.artist,\n            message.artistColor,\n            message.volume,\n            Icons.GetIcon(message.iconplaypause),\n            message.onoffbuttonColor,\n            Icons.GetIcon(message.shuffle_icon),\n            message.logo, //'~~~~~'\n            tools.getPayloadArray(message.options),\n        );\n    }\n\n    onStateTrigger = async (): Promise<void> => {\n        await this.update();\n    };\n    async reset(): Promise<void> {\n        this.step = 0;\n        this.headlinePos = 0;\n        this.titelPos = 0;\n    }\n    async onButtonEvent(event: types.IncomingEvent): Promise<void> {\n        if (!this.getVisibility() || this.sleep) {\n            return;\n        }\n        await super.onButtonEvent(event);\n        //if (event.mode !== 'media') return;\n        if (isMediaButtonActionType(event.action)) {\n            this.log.debug(`Receive event: ${JSON.stringify(event)}`);\n        } else {\n            return;\n        }\n        const items = this.currentItem;\n        if (!items) {\n            return;\n        }\n        switch (event.action) {\n            case 'media-back': {\n                items.data.backward && (await items.data.backward.setStateTrue());\n                break;\n            }\n            case 'media-pause': {\n                if (items.data.pause && items.data.play) {\n                    if (await this.isPlaying()) {\n                        await items.data.pause.setStateTrue();\n                    } else {\n                        await items.data.play.setStateTrue();\n                    }\n                } else if (items.data.mediaState) {\n                    // nothing\n                }\n                break;\n            }\n            case 'media-next': {\n                items.data.forward && (await items.data.forward.setStateTrue());\n                break;\n            }\n            case 'media-shuffle': {\n                if (items.data.shuffle?.set?.writeable) {\n                    await items.data.shuffle.set.setStateFlip();\n                } else if (items.data.shuffle?.value?.writeable) {\n                    await items.data.shuffle.value.setStateFlip();\n                } else {\n                    this.log.error(`Missing shuffle controller. Report to dev`);\n                }\n                break;\n            }\n            case 'volumeSlider': {\n                if (items.data.volume) {\n                    const v = parseInt(event.opt);\n                    await tools.setScaledNumber(items.data.volume, v);\n                } else {\n                    this.log.error(`Missing volumen controller. Report to dev`);\n                }\n                break;\n            }\n            case 'mode-speakerlist': {\n                break;\n            }\n            case 'mode-playlist': {\n                break;\n            }\n            case 'mode-tracklist': {\n                break;\n            }\n            case 'mode-repeat': {\n                break;\n            }\n            case 'mode-equalizer': {\n                break;\n            }\n            case 'mode-seek': {\n                break;\n            }\n            case 'mode-crossfade': {\n                break;\n            }\n            case 'mode-favorites': {\n                break;\n            }\n            case 'mode-insel': {\n                break;\n            }\n            case 'media-OnOff':\n            case 'button': {\n                const onoff = await this.isPlaying();\n                if (items.data.mediaState) {\n                    if (items.data.mediaState.writeable) {\n                        await items.data.mediaState.setState(!onoff);\n                        break;\n                    }\n                }\n                if (onoff) {\n                    if (items.data.stop) {\n                        await items.data.stop.setStateTrue();\n                    } else if (items.data.pause) {\n                        await items.data.pause.setStateTrue();\n                    }\n                } else if (items.data.play) {\n                    await items.data.play.setStateTrue();\n                }\n\n                break;\n            }\n        }\n    }\n\n    static async getPage(\n        configManager: ConfigManager,\n        page: ScriptConfig.PageMedia,\n        gridItem: pages.PageBaseConfig,\n        messages: string[],\n        justCheck: boolean = false,\n    ): Promise<{ gridItem: pages.PageBaseConfig; messages: string[] }> {\n        const adapter = configManager.adapter;\n        if (page.type !== 'cardMedia' || !gridItem.config || gridItem.config.card !== 'cardMedia') {\n            const msg = `Error in page ${page.uniqueName}: Not a media page!`;\n            messages.push(msg);\n            adapter.log.warn(msg);\n            return { gridItem, messages };\n        }\n        // check if id valid\n        if (!page.media.id || configManager.validStateId(page.media.id) === false) {\n            const msg = configManager.validStateId(page.media.id)\n                ? `${page.uniqueName}: Media page has no device id!`\n                : `${page.uniqueName}: Media page id ${page.media.id} is not valid!`;\n            messages.push(msg);\n            adapter.log.warn(msg);\n            return { gridItem, messages };\n        }\n\n        // check if instance exist\n        const parts = page.media.id.split('.');\n        const adapterName = parts[0];\n\n        // View aller Instanzen des Adapters holen\n        const view = await adapter.getObjectViewAsync('system', 'instance', {\n            startkey: `system.adapter.${adapterName}.`,\n            endkey: `system.adapter.${adapterName}.\\u9999`,\n        });\n\n        if (!view || !view.rows || view.rows.length === 0) {\n            const msg = `${page.uniqueName}: Media page id - adapter: ${adapterName} has no instance - not exist - wrong id?!`;\n            messages.push(msg);\n            if (!justCheck) {\n                adapter.log.error(msg);\n            }\n            return { gridItem, messages };\n        }\n\n        // Falls keine Instanznummer angegeben wurde (z. B. \"alexa2\"), w\u00E4hle die kleinste gefundene\n        if (parts.length === 1) {\n            const instanceNums = view.rows\n                .map(r => r.id.split('.').pop())\n                .filter(n => n && /^\\d+$/.test(n))\n                .map(n => parseInt(n!, 10))\n                .sort((a, b) => a - b);\n\n            if (instanceNums.length > 0) {\n                const chosen = String(instanceNums[0]);\n                page.media.id = `${adapterName}.${chosen}`;\n                adapter.log.debug(\n                    `${page.uniqueName}: No instance in media id provided, using lowest available: ${page.media.id}`,\n                );\n                // parts f\u00FCr nachfolgende Checks aktualisieren\n                parts.push(chosen);\n            } else {\n                const msg = `${page.uniqueName}: No numeric instance found for adapter ${adapterName}.`;\n                messages.push(msg);\n                if (!justCheck) {\n                    adapter.log.error(msg);\n                }\n                return { gridItem, messages };\n            }\n        }\n\n        // Sicherstellen, dass die gew\u00E4hlte/angegebene Instanz auch wirklich existiert\n        const instanceId = `system.adapter.${parts.slice(0, 2).join('.')}`;\n        if (view.rows.findIndex(v => v.id === instanceId) === -1) {\n            const msg = `${page.uniqueName}: Media page id - adapter: ${parts.slice(0, 2).join('.')} has no instance - not exist - wrong id?!`;\n            messages.push(msg);\n            if (!justCheck) {\n                adapter.log.error(msg);\n            }\n            return { gridItem, messages };\n        }\n\n        gridItem.config.card = 'cardMedia';\n\n        if (page.media.id.startsWith('spotify-premium.')) {\n            return await getPageSpotify(configManager, page, gridItem, messages, justCheck);\n        }\n        if (page.media.id.startsWith('alexa2.')) {\n            return await getPageAlexa(configManager, page, gridItem, messages, justCheck);\n        }\n        if (page.media.id.startsWith('mpd.')) {\n            return await getPageMpd(configManager, page, gridItem, messages, justCheck);\n        }\n        if (page.media.id.startsWith('sonos.')) {\n            return await getPageSonos(configManager, page, gridItem, messages, justCheck);\n        }\n\n        const msg = `${page.uniqueName}: Media page id ${page.media.id} is not supported - only alexa2, spotify-premium, mpd, and sonos!`;\n        messages.push(msg);\n        adapter.log.warn(msg);\n\n        return { gridItem, messages };\n    }\n    public async isPlaying(): Promise<boolean> {\n        return (await this.currentItem?.data.isPlaying?.getBoolean()) ?? false;\n    }\n    /**\n     * Handles a popup request.\n     *\n     * @param id - The ID of the item.\n     * @param popup - The popup type.\n     * @param action - The action to be performed.\n     * @param value - The value associated with the action.\n     * @param _event - The incoming event.\n     * @returns A promise that resolves when the popup request is handled.\n     */\n    public async onPopupRequest(\n        id: number | string,\n        popup: types.PopupType | undefined,\n        // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\n        action: types.ButtonActionType | undefined | string,\n        value: string | undefined,\n        _event: types.IncomingEvent | null = null,\n    ): Promise<void> {\n        if (!this.pageItems || id == '') {\n            this.log.debug(\n                `onPopupRequest: No pageItems or id this is only a warning if u used a pageitem except: 'arrow': ${id}`,\n            );\n            return;\n        }\n        let item: PageItem | undefined;\n        if (isNaN(Number(id)) && typeof id === 'string') {\n            if (id === 'media') {\n                return;\n            }\n\n            if (!(id in this)) {\n                return;\n            }\n            const temp = (this as any)[id];\n            if (!(temp instanceof PageItem)) {\n                this.log.error(`onPopupRequest: id ${id} is not a PageItem!`);\n                return;\n            }\n            item = temp;\n        } else {\n            await super.onPopupRequest(id, popup, action, value, _event);\n            return;\n        }\n        if (!item) {\n            this.log.error(`onPopupRequest: Cannot find PageItem for id ${id}`);\n            return;\n        }\n        let msg: string | null = null;\n        if (action && value !== undefined && (await item.onCommand(action, value))) {\n            return;\n        } else if (types.isPopupType(popup) && action !== 'bExit') {\n            this.basePanel.lastCard = '';\n            await this.basePanel.setActivePage(false);\n            msg = await item.GeneratePopup(popup);\n            this.sleep = false;\n        }\n        if (msg !== null) {\n            this.sleep = true;\n            this.sendToPanel(msg, false);\n        }\n    }\n\n    async delete(): Promise<void> {\n        await super.delete();\n        for (const item of this.items) {\n            if (item.logoItem) {\n                await item.logoItem.delete();\n                item.logoItem = undefined;\n            }\n        }\n        this.items = [];\n        this.currentItem = undefined;\n    }\n}\n\ntype _SelectValueFromBoolean = 'color' | 'string';\n\n/**\n * Retrieves a value based on a boolean condition from a given item.\n *\n * @param item - The item from which to retrieve the value. It can be a record of boolean unions, a change type of keys, or a single data item.\n * @param type - The type of value to select from the boolean condition.\n * @param [value] - The boolean value to determine which value to retrieve. Defaults to true.\n * @returns A promise that resolves to the retrieved value as a string, or null if no value is found.\n */\nexport async function getValueFromBoolean(\n    item:\n        | Record<types.BooleanUnion, Dataitem | undefined>\n        | pages.ChangeTypeOfKeys<ColorEntryType, Dataitem | undefined>\n        | Dataitem\n        | undefined,\n    type: _SelectValueFromBoolean,\n    value: boolean = true,\n): Promise<string | null> {\n    if (item) {\n        if (isDataItem(item)) {\n            const v = await getValueFromData(item, type);\n            if (v !== null) {\n                return v;\n            }\n        } else {\n            const colorOn = item.true && (await getValueFromData(item.true, type));\n            const colorOff = !value && item.false && (await getValueFromData(item.false, type));\n            if (colorOff) {\n                return colorOff;\n            }\n            return colorOn || null;\n        }\n    }\n    return null;\n}\n\n/**\n * Retrieves a value from a Dataitem based on the specified type.\n *\n * @param item - The data item from which to retrieve the value.\n * @param type - The type of value to retrieve, either 'string' or 'color'.\n * @returns A promise that resolves to the retrieved value as a string, or null if no value is found.\n */\nasync function getValueFromData(item: Dataitem, type: _SelectValueFromBoolean): Promise<string | null> {\n    switch (type) {\n        case 'string': {\n            return item.getString();\n        }\n        case 'color': {\n            return item.getRGBDec();\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["msg"]
}
