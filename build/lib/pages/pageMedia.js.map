{
  "version": 3,
  "sources": ["../../../src/lib/pages/pageMedia.ts"],
  "sourcesContent": ["import { isDataItem, type Dataitem } from '../classes/data-item';\nimport { Color } from '../const/Color';\nimport { Icons } from '../const/icon_mapping';\nimport type { ColorEntryType } from '../types/type-pageItem';\nimport type * as pages from '../types/pages';\nimport type { BooleanUnion, IncomingEvent } from '../types/types';\nimport { Page, isMediaButtonActionType } from '../classes/Page';\nimport { type PageInterface } from '../classes/PageInterface';\nimport { getPayload, getPayloadArray, getScaledNumber, setScaledNumber } from '../const/tools';\n\nconst PageMediaMessageDefault: pages.PageMediaMessage = {\n    event: 'entityUpd',\n    headline: '',\n    navigation: '~~~~~~~~~',\n    id: '',\n    name: '',\n    titelColor: String(Color.rgb_dec565(Color.White)),\n    artist: '',\n    artistColor: String(Color.rgb_dec565(Color.White)),\n    volume: '',\n    iconplaypause: '',\n    onoffbuttonColor: '',\n    shuffle_icon: '',\n    logo: '',\n    options: ['', '', '', '', ''],\n};\n\n/**\n * Represents a media page in the application.\n * Extends the base Page class to provide media-specific functionality.\n */\nexport class PageMedia extends Page {\n    config: pages.PageBaseConfig['config'];\n    items: pages.PageBaseConfig['items'];\n    private step: number = 1;\n    private headlinePos: number = 0;\n    private titelPos: number = 0;\n    private nextArrow: boolean = false;\n\n    constructor(config: PageInterface, options: pages.PageBaseConfig) {\n        if (options && options.pageItems) {\n            options.pageItems.unshift({\n                type: 'button',\n                dpInit: '',\n                role: 'button',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'arrow-right-bold-circle-outline' },\n                            color: { type: 'const', constVal: { red: 205, green: 142, blue: 153 } },\n                        },\n                    },\n                    entity1: { value: { type: 'const', constVal: true } },\n                },\n            });\n        }\n        super(config, options);\n\n        this.config = options.config;\n        if (this.items && this.items.card === 'cardMedia') {\n            this.items = options.items;\n        }\n        this.minUpdateInterval = 2000;\n    }\n\n    async init(): Promise<void> {\n        const config = structuredClone(this.config);\n        // search states for mode auto\n        const tempConfig: Partial<pages.PageBaseConfig['config']> =\n            this.enums || this.dpInit\n                ? await this.panel.statesControler.getDataItemsFromAuto(this.dpInit, config, undefined, this.enums)\n                : config;\n        // create Dataitems\n        //this.log.debug(JSON.stringify(tempConfig));\n        const tempItem: Partial<pages.PageBaseConfig['items']> = await this.panel.statesControler.createDataItems(\n            tempConfig,\n            this,\n        );\n        if (tempItem) {\n            tempItem.card = 'cardMedia';\n        }\n        this.items = tempItem as pages.PageBaseConfig['items'];\n        await super.init();\n    }\n    protected async onVisibilityChange(val: boolean): Promise<void> {\n        await super.onVisibilityChange(val);\n        if (val) {\n            this.headlinePos = 0;\n            this.titelPos = 0;\n        }\n    }\n    async update(): Promise<void> {\n        if (!this.visibility) {\n            return;\n        }\n        const item = this.items;\n        if (item === undefined) {\n            return;\n        }\n        const message: Partial<pages.PageMediaMessage> = {};\n        // title\n        {\n            if (item.card !== 'cardMedia') {\n                return;\n            }\n            const test: Record<string, string> = {};\n            test.bla = 'dd';\n            let duration = '0:00',\n                elapsed = '0:00',\n                title = 'unknown';\n\n            if (item.data.title && item.data.title.text) {\n                const v = await item.data.title.text.getString();\n                if (v !== null) {\n                    title = v;\n                }\n            }\n            if (item.data.artist && item.data.artist.text) {\n                const v = await item.data.artist.text.getString();\n                if (v !== null) {\n                    message.artist = v;\n                }\n            }\n            if (item.data.duration && item.data.elapsed) {\n                const d = await item.data.duration.getNumber(); // medialength in seconds\n                if (d !== null) {\n                    const t = new Date().setHours(0, 0, d, 0);\n                    duration = new Date(t).toLocaleTimeString('de-DE', { minute: '2-digit', second: '2-digit' });\n                }\n                if (item.data.elapsed.type === 'string') {\n                    const e = await item.data.elapsed.getString();\n                    if (e !== null) {\n                        elapsed = e;\n                    }\n                } else if (item.data.elapsed.type === 'number') {\n                    const e = await item.data.elapsed.getNumber();\n                    if (e !== null) {\n                        const t = new Date().setHours(0, 0, e, 0);\n                        elapsed = new Date(t).toLocaleTimeString('de-DE', { minute: '2-digit', second: '2-digit' });\n                    }\n                }\n            }\n\n            message.headline = `${title}`;\n\n            {\n                const maxSize = 18;\n                if (message.headline.length > maxSize) {\n                    const s = `${message.headline}        `;\n                    this.headlinePos = this.headlinePos % s.length;\n                    message.headline = (s + message.headline)\n                        .substring(this.headlinePos++ % (message.headline + s).length)\n                        .substring(0, 23);\n                }\n            }\n\n            const maxSize = 35;\n            message.name = `(${elapsed}|${duration})`;\n            if (item.data.album) {\n                const v = await item.data.album.getString();\n                if (v !== null) {\n                    if (`${v} ${message.name}`.length > maxSize) {\n                        const s = `${v}          `;\n                        this.titelPos = this.titelPos % s.length;\n                        message.name = `${v\n                            .substring(this.titelPos++ % `${v} ${message.name}${s}`.length)\n                            .substring(0, 35)} ${message.name}`;\n                    } else {\n                        message.name = `${v} ${message.name}`;\n                    }\n                }\n            }\n        }\n        message.shuffle_icon = '';\n        if (item.data.shuffle && item.data.shuffle.value && item.data.shuffle.value.type) {\n            let value: null | true | false = null;\n            switch (item.data.shuffle.value.type) {\n                case 'string': {\n                    const v = await item.data.shuffle.value.getString();\n                    if (v !== null) {\n                        value = ['OFF', 'FALSE'].indexOf(v.toUpperCase()) === -1;\n                    }\n                    break;\n                }\n                case 'number':\n                case 'boolean': {\n                    value = await item.data.shuffle.value.getBoolean();\n                    break;\n                }\n                case 'object':\n                case 'array':\n                case 'mixed': {\n                    value = null;\n                    break;\n                }\n            }\n            if (value !== null) {\n                message.shuffle_icon = value ? 'shuffle-variant' : 'shuffle-disabled';\n            }\n        }\n        if (item.data.volume) {\n            const v = await getScaledNumber(item.data.volume);\n            if (v !== null) {\n                message.volume = String(v);\n            }\n        }\n        if (item.data.mediaState) {\n            const v = await item.data.mediaState.getString();\n            if (v !== null) {\n                message.iconplaypause = !(await this.getMediaState()) ? 'play' : 'pause';\n                if (item.data.stop) {\n                    message.onoffbuttonColor = v.toUpperCase() !== 'STOP' ? '65535' : '1374';\n                } else {\n                    // no stop control so pause is stop\n                    message.onoffbuttonColor = message.iconplaypause !== 'pause' ? '65535' : '1374';\n                }\n            }\n        }\n\n        if (item.data.title && item.data.title.color) {\n            const v = await getValueFromBoolean(item.data.title.color, 'color');\n            if (v !== null) {\n                message.titelColor = v;\n            }\n        }\n\n        //Logo\n        if (item.data.logo) {\n            message.logo = '~~~~~'; //await this.getItemMessageMedia(await this.getToolItem(item.logo, 'logo', 0));\n        }\n\n        const opts: string[] = ['~~~~~', '~~~~~', '~~~~~', '~~~~~', '~~~~~'];\n        if (this.pageItems) {\n            const localStep = this.pageItems.length > 6 ? 4 : 5;\n            if (this.pageItems.length - 1 <= localStep * (this.step - 1)) {\n                this.step = 1;\n            }\n            // arrow is at index [0]\n            const maxSteps = localStep * this.step + 1;\n            const minStep = localStep * (this.step - 1) + 1;\n\n            for (let a = minStep; a < maxSteps; a++) {\n                const temp = this.pageItems[a];\n                if (temp) {\n                    opts[a - minStep] = await temp.getPageItemPayload();\n                }\n            }\n\n            if (localStep === 4) {\n                this.nextArrow = true;\n                const temp = this.pageItems[0];\n                if (temp) {\n                    opts[4] = await temp.getPageItemPayload();\n                }\n            }\n        }\n        message.navigation = this.getNavigation();\n        const msg: pages.PageMediaMessage = Object.assign(PageMediaMessageDefault, message, {\n            id: 'media',\n            options: opts,\n        });\n        this.sendToPanel(this.getMessage(msg), false);\n        //this.log.warn(JSON.stringify(this.getMessage(msg)));\n    }\n    private async getMediaState(): Promise<boolean | null> {\n        if (!this.items || this.items.card !== 'cardMedia') {\n            return null;\n        }\n        const item = this.items.data.mediaState;\n        if (item) {\n            const v = await item.getString();\n            if (v !== null) {\n                return ['PLAY', '1', 'TRUE'].indexOf(v.toUpperCase()) !== -1;\n            }\n        }\n        return null;\n    }\n    private async getOnOffState(): Promise<boolean | null> {\n        if (!this.items || this.items.card !== 'cardMedia') {\n            return null;\n        }\n        const item = this.items.data.mediaState;\n        if (item) {\n            const v = await item.getString();\n            if (v !== null) {\n                return ['STOP', '0', 'FALSE'].indexOf(v.toUpperCase()) === -1;\n            }\n        }\n        return null;\n    }\n\n    private getMessage(message: pages.PageMediaMessage): string {\n        return getPayload(\n            'entityUpd',\n            message.headline,\n            message.navigation,\n            message.id,\n            message.name,\n            message.titelColor,\n            message.artist,\n            message.artistColor,\n            message.volume,\n            Icons.GetIcon(message.iconplaypause),\n            message.onoffbuttonColor,\n            Icons.GetIcon(message.shuffle_icon),\n            message.logo, //'~~~~~'\n            getPayloadArray(message.options),\n        );\n    }\n\n    onStateTrigger = async (): Promise<void> => {\n        await this.update();\n    };\n    async reset(): Promise<void> {\n        this.step = 0;\n        this.headlinePos = 0;\n        this.titelPos = 0;\n    }\n    async onButtonEvent(event: IncomingEvent): Promise<void> {\n        if (!this.getVisibility() || this.sleep) {\n            return;\n        }\n        //if (event.mode !== 'media') return;\n        if (isMediaButtonActionType(event.action)) {\n            this.log.debug(`Receive event: ${JSON.stringify(event)}`);\n        } else {\n            return;\n        }\n        const items = this.items;\n        if (!items || items.card !== 'cardMedia') {\n            return;\n        }\n        switch (event.action) {\n            case 'media-back': {\n                items.data.backward && (await items.data.backward.setStateTrue());\n                break;\n            }\n            case 'media-pause': {\n                if (items.data.pause && items.data.play) {\n                    if (await this.getMediaState()) {\n                        await items.data.pause.setStateTrue();\n                    } else {\n                        await items.data.play.setStateTrue();\n                    }\n                } else if (items.data.mediaState) {\n                    // nothing\n                }\n                break;\n            }\n            case 'media-next': {\n                items.data.forward && (await items.data.forward.setStateTrue());\n                break;\n            }\n            case 'media-shuffle': {\n                items.data.shuffle &&\n                    ((items.data.shuffle.set && (await items.data.shuffle.set.setStateFlip())) ||\n                        (items.data.shuffle.value && (await items.data.shuffle.value.setStateFlip())));\n                break;\n            }\n            case 'volumeSlider': {\n                if (items.data.volume) {\n                    const v = parseInt(event.opt);\n                    await setScaledNumber(items.data.volume, v);\n                } else {\n                    this.log.error(`Missing volumen controller. Report to dev`);\n                }\n                break;\n            }\n            case 'mode-speakerlist': {\n                break;\n            }\n            case 'mode-playlist': {\n                break;\n            }\n            case 'mode-tracklist': {\n                break;\n            }\n            case 'mode-repeat': {\n                break;\n            }\n            case 'mode-equalizer': {\n                break;\n            }\n            case 'mode-seek': {\n                break;\n            }\n            case 'mode-crossfade': {\n                break;\n            }\n            case 'mode-favorites': {\n                break;\n            }\n            case 'mode-insel': {\n                break;\n            }\n            case 'media-OnOff': {\n                if (items.data.stop) {\n                    if (await this.getOnOffState()) {\n                        await items.data.stop.setStateTrue();\n                    }\n                }\n                break;\n            }\n            case 'button': {\n                if (event.id === '0' && this.nextArrow) {\n                    this.step++;\n                    await this.update();\n                }\n                break;\n            }\n        }\n    }\n}\n\ntype _SelectValueFromBoolean = 'color' | 'string';\n\n/**\n * Retrieves a value based on a boolean condition from a given item.\n *\n * @param item - The item from which to retrieve the value. It can be a record of boolean unions, a change type of keys, or a single data item.\n * @param type - The type of value to select from the boolean condition.\n * @param [value] - The boolean value to determine which value to retrieve. Defaults to true.\n * @returns A promise that resolves to the retrieved value as a string, or null if no value is found.\n */\nexport async function getValueFromBoolean(\n    item:\n        | Record<BooleanUnion, Dataitem | undefined>\n        | pages.ChangeTypeOfKeys<ColorEntryType, Dataitem | undefined>\n        | Dataitem\n        | undefined,\n    type: _SelectValueFromBoolean,\n    value: boolean = true,\n): Promise<string | null> {\n    if (item) {\n        if (isDataItem(item)) {\n            const v = await getValueFromData(item, type);\n            if (v !== null) {\n                return v;\n            }\n        } else {\n            const colorOn = item.true && (await getValueFromData(item.true, type));\n            const colorOff = !value && item.false && (await getValueFromData(item.false, type));\n            if (colorOff) {\n                return colorOff;\n            }\n            return colorOn || null;\n        }\n    }\n    return null;\n}\n\n/**\n * Retrieves a value from a Dataitem based on the specified type.\n *\n * @param item - The data item from which to retrieve the value.\n * @param type - The type of value to retrieve, either 'string' or 'color'.\n * @returns A promise that resolves to the retrieved value as a string, or null if no value is found.\n */\nasync function getValueFromData(item: Dataitem, type: _SelectValueFromBoolean): Promise<string | null> {\n    switch (type) {\n        case 'string': {\n            return item.getString();\n            break;\n        }\n        case 'color': {\n            return item.getRGBDec();\n            break;\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["maxSize"]
}
