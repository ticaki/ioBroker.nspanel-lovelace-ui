{
  "version": 3,
  "sources": ["../../../src/lib/pages/pageMedia.ts"],
  "sourcesContent": ["import { isDataItem, type Dataitem } from '../classes/data-item';\nimport { Color } from '../const/Color';\nimport { Icons } from '../const/icon_mapping';\nimport type { ColorEntryType } from '../types/type-pageItem';\nimport type * as pages from '../types/pages';\nimport type { BooleanUnion, IncomingEvent } from '../types/types';\nimport { type PageInterface } from '../classes/PageInterface';\nimport * as tools from '../const/tools';\n\nimport type { ConfigManager } from '../classes/config-manager';\nimport { PageMenu } from './pageMenu';\nimport { isMediaButtonActionType } from '../classes/Page';\nimport { getPageSpotify } from './tools/getSpotify';\nimport { getPageAlexa } from './tools/getAlexa';\nconst PageMediaMessageDefault: pages.PageMediaMessage = {\n    event: 'entityUpd',\n    headline: '',\n    navigation: '~~~~~~~~~',\n    id: '',\n    name: '',\n    titelColor: String(Color.rgb_dec565(Color.White)),\n    artist: '',\n    artistColor: String(Color.rgb_dec565(Color.White)),\n    volume: '',\n    iconplaypause: '',\n    onoffbuttonColor: '',\n    shuffle_icon: '',\n    logo: '',\n    options: ['', '', '', '', ''],\n};\n\n/**\n * Represents a media page in the application.\n * Extends the base Page class to provide media-specific functionality.\n */\nexport class PageMedia extends PageMenu {\n    config: pages.cardMediaDataItemOptions;\n    items: pages.cardMediaDataItems[] = [];\n    currentItems: pages.cardMediaDataItems | undefined;\n    protected step: number = 0;\n    private headlinePos: number = 0;\n    private titelPos: number = 0;\n    private artistPos: number = 0;\n    private playerName: string = '';\n    public currentPlayer: string | RegExp;\n\n    constructor(config: PageInterface, options: pages.PageBaseConfig) {\n        super(config, options);\n        this.config = options.config as pages.cardMediaDataItemOptions;\n        this.currentPlayer = this.config.ident ?? '';\n        this.minUpdateInterval = 2000;\n    }\n\n    async init(): Promise<void> {\n        if (this.config?.card === 'cardMedia') {\n            const i = await this.createMainItems(this.config, this.enums, this.dpInit);\n            i.ident = this.config.ident ?? '';\n            this.items.push(i);\n        }\n        await super.init();\n    }\n    async createMainItems(\n        c: pages.cardMediaDataItemOptions,\n        enums: string | string[],\n        dpInit: string | RegExp,\n    ): Promise<pages.cardMediaDataItems> {\n        const config = structuredClone(c);\n        // search states for mode auto\n        const tempConfig: Partial<pages.PageBaseConfig['config']> =\n            enums || dpInit\n                ? await this.basePanel.statesControler.getDataItemsFromAuto(dpInit, config, undefined, enums)\n                : config;\n\n        const tempItem: Partial<pages.PageBaseConfig['items']> = await this.basePanel.statesControler.createDataItems(\n            tempConfig,\n            this,\n        );\n        if (tempItem) {\n            tempItem.card = 'cardMedia';\n        }\n        return {\n            ...(tempItem as pages.cardMediaDataItems),\n            dpInit: typeof dpInit === 'string' ? dpInit : dpInit.toString(),\n        };\n    }\n    protected async onVisibilityChange(val: boolean): Promise<void> {\n        await super.onVisibilityChange(val);\n        if (val) {\n            this.headlinePos = 0;\n            this.titelPos = 0;\n        }\n    }\n\n    async updateCurrentPlayer(dp: string, name: string): Promise<void> {\n        if (this.currentPlayer === dp) {\n            return;\n        }\n        let index = this.items.findIndex(i => i.ident === dp);\n        if (index === -1) {\n            if (this.config?.card === 'cardMedia') {\n                const reg = tools.getRegExp(`/^${dp.split('.').join('\\\\.')}/`) || dp;\n                this.items.push(await this.createMainItems(this.config, '', reg));\n                index = this.items.length - 1;\n                this.items[index].ident = dp;\n                await this.controller.statesControler.activateTrigger(this);\n            }\n        }\n        if (index === 0) {\n            this.playerName = '';\n        } else {\n            this.playerName = name;\n        }\n        this.currentItems = this.items[index];\n        this.currentPlayer = dp;\n        await this.update();\n    }\n\n    async update(): Promise<void> {\n        if (!this.visibility) {\n            return;\n        }\n        let index = this.items.findIndex(i => i.ident === this.currentPlayer);\n        index = index === -1 ? 0 : index;\n        if (index === 0) {\n            this.playerName = '';\n        }\n        this.currentItems = this.items[index];\n        const item = this.currentItems;\n        if (item === undefined) {\n            return;\n        }\n        const message: Partial<pages.PageMediaMessage> = {};\n        // title\n        {\n            const test: Record<string, string> = {};\n            test.bla = 'dd';\n            let duration = '',\n                elapsed = '',\n                title = '',\n                album = '',\n                artist = '';\n\n            {\n                const v = await tools.getValueEntryString(item.data.title);\n                if (v !== null) {\n                    title = v;\n                }\n            }\n            {\n                const v = item.data.headline && (await item.data.headline.getString());\n                message.headline = v != null ? v : this.playerName ? `${this.playerName}: ${title}` : title;\n            }\n            {\n                const v = await tools.getValueEntryString(item.data.artist);\n                if (v !== null) {\n                    artist = v;\n                }\n            }\n            if (item.data.duration && item.data.elapsed) {\n                // --- duration ---\n                const d = await item.data.duration.getNumber(); // medialength in milliseconds\n                if (d) {\n                    duration = tools.formatHMS(d);\n                }\n                if (item.data.elapsed.type === 'string') {\n                    const e = await item.data.elapsed.getString();\n                    if (e !== null) {\n                        elapsed = e;\n                    }\n                } else if (item.data.elapsed.type === 'number') {\n                    // --- elapsed ---\n                    const e = await item.data.elapsed.getNumber();\n                    if (e != null) {\n                        elapsed = tools.formatHMS(e);\n                    }\n                }\n            }\n\n            if (item.data.album) {\n                const v = await item.data.album.getString();\n                if (v !== null) {\n                    album = v;\n                }\n            }\n            {\n                const maxSize = 18;\n\n                if (message.headline.length > maxSize) {\n                    const paddingLen = Math.max(1, Math.ceil(maxSize / 2)); // ensure there's never a full-blank frame\n                    const padding = ' '.repeat(paddingLen);\n                    const base = message.headline + padding + message.headline; // loop without blank window\n\n                    // normalize & slice fixed-size window\n                    this.headlinePos = this.headlinePos % (message.headline.length + paddingLen);\n                    message.headline = base.substring(this.headlinePos, this.headlinePos + maxSize);\n\n                    // advance by one char; deine Tick-Logik bestimmt die Geschwindigkeit (z.B. 1 Schritt/2s)\n                    this.headlinePos++;\n                }\n            }\n\n            const maxSize = 38;\n\n            message.name = `| ${elapsed}${duration ? `-${duration}` : ''}`;\n\n            const { text, nextPos } = tools.buildScrollingText(title, {\n                maxSize, // wie bisher: 35\n                suffix: message.name, // der feste rechte Block (elapsed|duration)\n                sep: ' ', // Trenner zwischen Titel und Suffix\n                pos: this.titelPos, // aktuelle Scrollposition \u00FCbernehmen\n            });\n\n            message.name = text;\n            this.titelPos = nextPos;\n            if (album || artist) {\n                const div = album && artist ? ' | ' : '';\n                const scrollText = album + div + artist;\n\n                const { text, nextPos } = tools.buildScrollingText(scrollText, {\n                    maxSize, // Gesamtbreite wie gehabt\n                    pos: this.artistPos, // eigene Scrollposition f\u00FCr Artist/Album\n                });\n\n                message.artist = text;\n                this.artistPos = nextPos;\n            }\n        }\n\n        message.shuffle_icon = '';\n        if (item.data.shuffle && item.data.shuffle.value && item.data.shuffle.value.type) {\n            let value: null | true | false = null;\n            if (!item.data.shuffle.enabled || (await item.data.shuffle.enabled.getBoolean()) === true) {\n                switch (item.data.shuffle.value.type) {\n                    case 'string': {\n                        const v = await item.data.shuffle.value.getString();\n                        if (v !== null) {\n                            value = ['OFF', 'FALSE'].indexOf(v.toUpperCase()) === -1;\n                        }\n                        break;\n                    }\n                    case 'number':\n                    case 'boolean': {\n                        value = await item.data.shuffle.value.getBoolean();\n                        break;\n                    }\n                    case 'object':\n                    case 'array':\n                    case 'mixed': {\n                        value = null;\n                        break;\n                    }\n                }\n            }\n            if (value !== null) {\n                message.shuffle_icon = value ? 'shuffle-variant' : 'shuffle-disabled';\n            }\n        }\n\n        if (item.data.volume) {\n            const v = await tools.getScaledNumber(item.data.volume);\n            if (v !== null) {\n                message.volume = String(v);\n            }\n        }\n        if (item.data.mediaState) {\n            const v = await item.data.mediaState.getString();\n            if (v !== null) {\n                message.iconplaypause = !(await this.getMediaState()) ? 'play' : 'pause';\n                if (item.data.stop || item.data.pause) {\n                    message.onoffbuttonColor = v.toUpperCase() !== 'STOP' ? '65535' : '1374';\n                } else {\n                    // no stop control so pause is stop\n                    message.onoffbuttonColor = message.iconplaypause !== 'pause' ? '65535' : '1374';\n                }\n            }\n        } else if (item.data.isPlaying) {\n            const v = await item.data.isPlaying.getBoolean();\n            if (v !== null) {\n                message.iconplaypause = v ? 'pause' : 'play';\n                if (item.data.stop || item.data.pause) {\n                    message.onoffbuttonColor = v ? '65535' : '1374';\n                } else {\n                    // no stop control so pause is stop\n                    message.onoffbuttonColor = message.iconplaypause !== 'pause' ? '65535' : '1374';\n                }\n            }\n        }\n\n        if (item.data.title) {\n            const v = await tools.getIconEntryColor(item.data.title, await this.isPlaying(), Color.Red, Color.Gray);\n            if (v !== null) {\n                message.titelColor = v;\n            }\n        }\n\n        if (item.data.artist) {\n            const v = await tools.getIconEntryColor(item.data.artist, await this.isPlaying(), Color.White, Color.Gray);\n            if (v !== null) {\n                message.artistColor = v;\n            }\n        }\n\n        //Logo\n        if (item.data.logo) {\n            message.logo = tools.getPayload(\n                `logo`,\n                `${this.name}-logo`,\n                item.data.logo.icon && 'true' in item.data.logo.icon && item.data.logo.icon.true\n                    ? ((await item.data.logo.icon.true.getString()) ?? '')\n                    : '',\n                '4',\n                '5',\n                '6',\n            ); //await this.getItemMessageMedia(await this.getToolItem(item.logo, 'logo', 0));\n        }\n        if (item.data.onOffColor) {\n            const v = await tools.getIconEntryColor(item.data.onOffColor, await this.isPlaying(), Color.White);\n            if (v !== null) {\n                message.onoffbuttonColor = v;\n            } else {\n                message.onoffbuttonColor = 'disable';\n            }\n        }\n\n        const opts: string[] = ['~~~~~', '~~~~~', '~~~~~', '~~~~~', '~~~~~'];\n        const pageItems = (await this.getOptions([])).slice(0, this.maxItems);\n        message.navigation = this.getNavigation();\n        const msg: pages.PageMediaMessage = Object.assign(PageMediaMessageDefault, message, {\n            id: 'media',\n            options: pageItems.concat(opts).slice(0, 5),\n        });\n\n        this.sendToPanel(this.getMessage(msg), false);\n    }\n    private async getMediaState(): Promise<boolean | null> {\n        if (!this.currentItems) {\n            return null;\n        }\n        const item = this.currentItems.data.mediaState;\n        if (item) {\n            const v = await item.getString();\n            if (v !== null) {\n                return ['PLAY', '1', 'TRUE'].indexOf(v.toUpperCase()) !== -1;\n            }\n            const b = await item.getBoolean();\n            if (b !== null) {\n                return b;\n            }\n        }\n        return null;\n    }\n    private async getOnOffState(): Promise<boolean | null> {\n        if (!this.currentItems) {\n            return null;\n        }\n        const item = this.currentItems.data.mediaState;\n        if (item) {\n            const v = await item.getString();\n            if (v !== null) {\n                return ['STOP', '0', 'FALSE'].indexOf(v.toUpperCase()) === -1;\n            }\n        }\n        return null;\n    }\n\n    private getMessage(message: pages.PageMediaMessage): string {\n        return tools.getPayload(\n            'entityUpd',\n            message.headline,\n            message.navigation,\n            message.id,\n            message.name,\n            message.titelColor,\n            message.artist,\n            message.artistColor,\n            message.volume,\n            Icons.GetIcon(message.iconplaypause),\n            message.onoffbuttonColor,\n            Icons.GetIcon(message.shuffle_icon),\n            message.logo, //'~~~~~'\n            tools.getPayloadArray(message.options),\n        );\n    }\n\n    onStateTrigger = async (): Promise<void> => {\n        await this.update();\n    };\n    async reset(): Promise<void> {\n        this.step = 0;\n        this.headlinePos = 0;\n        this.titelPos = 0;\n    }\n    async onButtonEvent(event: IncomingEvent): Promise<void> {\n        if (!this.getVisibility() || this.sleep) {\n            return;\n        }\n        await super.onButtonEvent(event);\n        //if (event.mode !== 'media') return;\n        if (isMediaButtonActionType(event.action)) {\n            this.log.debug(`Receive event: ${JSON.stringify(event)}`);\n        } else {\n            return;\n        }\n        const items = this.currentItems;\n        if (!items) {\n            return;\n        }\n        switch (event.action) {\n            case 'media-back': {\n                items.data.backward && (await items.data.backward.setStateTrue());\n                break;\n            }\n            case 'media-pause': {\n                if (items.data.pause && items.data.play) {\n                    if (await this.isPlaying()) {\n                        await items.data.pause.setStateTrue();\n                    } else {\n                        await items.data.play.setStateTrue();\n                    }\n                } else if (items.data.mediaState) {\n                    // nothing\n                }\n                break;\n            }\n            case 'media-next': {\n                items.data.forward && (await items.data.forward.setStateTrue());\n                break;\n            }\n            case 'media-shuffle': {\n                if (items.data.shuffle?.set?.common.write) {\n                    await items.data.shuffle.set.setStateFlip();\n                } else if (items.data.shuffle?.value?.common.write) {\n                    await items.data.shuffle.value.setStateFlip();\n                } else {\n                    this.log.error(`Missing shuffle controller. Report to dev`);\n                }\n                break;\n            }\n            case 'volumeSlider': {\n                if (items.data.volume) {\n                    const v = parseInt(event.opt);\n                    await tools.setScaledNumber(items.data.volume, v);\n                } else {\n                    this.log.error(`Missing volumen controller. Report to dev`);\n                }\n                break;\n            }\n            case 'mode-speakerlist': {\n                break;\n            }\n            case 'mode-playlist': {\n                break;\n            }\n            case 'mode-tracklist': {\n                break;\n            }\n            case 'mode-repeat': {\n                break;\n            }\n            case 'mode-equalizer': {\n                break;\n            }\n            case 'mode-seek': {\n                break;\n            }\n            case 'mode-crossfade': {\n                break;\n            }\n            case 'mode-favorites': {\n                break;\n            }\n            case 'mode-insel': {\n                break;\n            }\n            case 'media-OnOff': {\n                if (items.data.stop) {\n                    if (await this.getOnOffState()) {\n                        await items.data.stop.setStateTrue();\n                    }\n                }\n                break;\n            }\n            case 'button': {\n                if (event.id === `${this.name}-logo`) {\n                    const onoff = await this.isPlaying();\n                    if (items.data.mediaState) {\n                        if (items.data.mediaState.common.write === true) {\n                            await items.data.mediaState.setState(!onoff);\n                            break;\n                        }\n                    }\n                    if (onoff) {\n                        if (items.data.stop) {\n                            await items.data.stop.setStateTrue();\n                        } else if (items.data.pause) {\n                            await items.data.pause.setStateTrue();\n                        }\n                    } else if (items.data.play) {\n                        await items.data.play.setStateTrue();\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    static async getPage(\n        configManager: ConfigManager,\n        page: ScriptConfig.PageMedia,\n        gridItem: pages.PageBaseConfig,\n        messages: string[],\n    ): Promise<{ gridItem: pages.PageBaseConfig; messages: string[] }> {\n        const adapter = configManager.adapter;\n        if (page.type !== 'cardMedia' || !gridItem.config || gridItem.config.card !== 'cardMedia') {\n            const msg = `Error in page ${page.uniqueName}: Not a media page!`;\n            messages.push(msg);\n            adapter.log.warn(msg);\n            return { gridItem, messages };\n        }\n        // check if id valid\n        if (!page.media.id || configManager.validStateId(page.media.id) === false) {\n            const msg = configManager.validStateId(page.media.id)\n                ? `${page.uniqueName}: Media page has no device id!`\n                : `${page.uniqueName}: Media page id ${page.media.id} is not valid!`;\n            messages.push(msg);\n            adapter.log.warn(msg);\n            return { gridItem, messages };\n        }\n\n        // check if instance exist\n        const view = await adapter.getObjectViewAsync('system', 'instance', {\n            startkey: `system.adapter.${page.media.id.split('.').slice(0, 1).join('.')}.`,\n            endkey: `system.adapter.${page.media.id.split('.').slice(0, 1).join('.')}.\\u9999`,\n        });\n        if (\n            !view ||\n            !view.rows ||\n            view.rows.length === 0 ||\n            view.rows.findIndex(v => v.id === `system.adapter.${page.media.id.split('.').slice(0, 2).join('.')}`) === -1\n        ) {\n            const msg = `${page.uniqueName}: Media page id - adapter: ${page.media.id.split('.').slice(0, 2).join('.')} has no instance - not exist - wrong id?!`;\n            messages.push(msg);\n            adapter.log.error(msg);\n            return { gridItem, messages };\n        }\n\n        gridItem.config.card = 'cardMedia';\n\n        if (page.media.id.startsWith('spotify-premium.')) {\n            return await getPageSpotify(configManager, page, gridItem, messages);\n        }\n        if (page.media.id.startsWith('alexa2.')) {\n            return await getPageAlexa(configManager, page, gridItem, messages);\n        }\n\n        const msg = `${page.uniqueName}: Media page id ${page.media.id} is not supported - only alexa2 and spotify-premium!`;\n        messages.push(msg);\n        adapter.log.warn(msg);\n\n        return { gridItem, messages };\n    }\n    public async isPlaying(): Promise<boolean> {\n        return (await this.currentItems?.data.isPlaying?.getBoolean()) ?? false;\n    }\n\n    async delete(): Promise<void> {\n        await super.delete();\n    }\n}\n\ntype _SelectValueFromBoolean = 'color' | 'string';\n\n/**\n * Retrieves a value based on a boolean condition from a given item.\n *\n * @param item - The item from which to retrieve the value. It can be a record of boolean unions, a change type of keys, or a single data item.\n * @param type - The type of value to select from the boolean condition.\n * @param [value] - The boolean value to determine which value to retrieve. Defaults to true.\n * @returns A promise that resolves to the retrieved value as a string, or null if no value is found.\n */\nexport async function getValueFromBoolean(\n    item:\n        | Record<BooleanUnion, Dataitem | undefined>\n        | pages.ChangeTypeOfKeys<ColorEntryType, Dataitem | undefined>\n        | Dataitem\n        | undefined,\n    type: _SelectValueFromBoolean,\n    value: boolean = true,\n): Promise<string | null> {\n    if (item) {\n        if (isDataItem(item)) {\n            const v = await getValueFromData(item, type);\n            if (v !== null) {\n                return v;\n            }\n        } else {\n            const colorOn = item.true && (await getValueFromData(item.true, type));\n            const colorOff = !value && item.false && (await getValueFromData(item.false, type));\n            if (colorOff) {\n                return colorOff;\n            }\n            return colorOn || null;\n        }\n    }\n    return null;\n}\n\n/**\n * Retrieves a value from a Dataitem based on the specified type.\n *\n * @param item - The data item from which to retrieve the value.\n * @param type - The type of value to retrieve, either 'string' or 'color'.\n * @returns A promise that resolves to the retrieved value as a string, or null if no value is found.\n */\nasync function getValueFromData(item: Dataitem, type: _SelectValueFromBoolean): Promise<string | null> {\n    switch (type) {\n        case 'string': {\n            return item.getString();\n        }\n        case 'color': {\n            return item.getRGBDec();\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["maxSize", "text", "nextPos", "msg"]
}
