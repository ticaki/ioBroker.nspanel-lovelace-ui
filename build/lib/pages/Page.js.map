{
  "version": 3,
  "sources": ["../../../src/lib/pages/Page.ts"],
  "sourcesContent": ["import { AdapterClassDefinition, BaseClass } from '../classes/library';\nimport { Panel } from '../controller/panel';\nimport { BaseClassPanelSend } from '../controller/panel-message';\nimport { BaseClassTriggerdInterface } from '../controller/states-controller';\nimport { MessageItem, messageItemAllInterfaces } from '../types/pageItem';\nimport * as pages from '../types/pages';\nimport { IncomingEvent } from '../types/types';\n\nexport const messageItemDefault: MessageItem = {\n    type: 'input_sel',\n    intNameEntity: '',\n    icon: '',\n    iconColor: '',\n    dislayName: '',\n    optionalValue: '',\n};\n\nexport interface PageInterface extends BaseClassTriggerdInterface {\n    card: pages.PageTypeCards;\n    panel: Panel;\n    id: number;\n}\n//interface Page extends BaseClass | PageConfig\n\nexport class Page extends BaseClassPanelSend {\n    readonly card: pages.PageTypeCards;\n    readonly id: number;\n    protected panel: Panel;\n    //config: Card['config'];\n    constructor(card: PageInterface) {\n        super(card);\n        this.card = card.card;\n        this.id = card.id;\n        this.panel = card.panel;\n    }\n    async init(): Promise<void> {}\n\n    async onButtonEvent(event: IncomingEvent): Promise<void> {\n        this.log.warn(`Event received but no handler! ${JSON.stringify(event)}`);\n    }\n    sendType(): void {\n        this.sendToPanel(`pageType~${this.card}`);\n    }\n\n    protected async onVisibilityChange(val: boolean): Promise<void> {\n        if (val) {\n            this.sendType();\n            this.update();\n        }\n    }\n    public async update(): Promise<void> {\n        this.adapter.log.warn(\n            `<- instance of [${Object.getPrototypeOf(this)}] update() is not defined or call super.onStateTrigger()`,\n        );\n    }\n\n    /**\n     * Create a part of the panel messsage for bottom icons. if event === '' u get '~~~~~~'.\n     * default for event: input_sel\n     * @param msg {Partial<MessageItem>}\n     * @returns string\n     */\n    public getItemMesssage(msg: Partial<messageItemAllInterfaces> | undefined): string {\n        if (!msg || !msg.intNameEntity || !msg.type) return '~~~~~';\n        const id: string[] = [];\n        if (msg.mainId) id.push(msg.mainId);\n        if (msg.subId) id.push(msg.subId);\n        if (msg.intNameEntity) id.push(msg.intNameEntity);\n        return this.getPayload(\n            msg.type ?? messageItemDefault.type,\n            id.join('?') ?? messageItemDefault.intNameEntity,\n            msg.icon ?? messageItemDefault.icon,\n            msg.iconColor ?? messageItemDefault.iconColor,\n            msg.dislayName ?? messageItemDefault.dislayName,\n            msg.optionalValue ?? messageItemDefault.optionalValue,\n        );\n    }\n}\n\nexport class PageItem extends BaseClass {\n    config: PageItemConfig;\n    pageItems: any[] = [];\n    constructor(adapter: AdapterClassDefinition, options: PageItemConfig) {\n        super(adapter, 'Page');\n        this.config = options;\n    }\n    async init(): Promise<void> {}\n}\ntype PageItemConfig = {\n    name: string;\n};\nexport function isMediaButtonActionType(F: MediaButtonActionType | string): F is MediaButtonActionType {\n    switch (F) {\n        case 'media-back':\n        case 'media-pause':\n        case 'media-next':\n        case 'media-shuffle':\n        case 'volumeSlider':\n        case 'mode-speakerlist':\n        case 'mode-playlist':\n        case 'mode-tracklist':\n        case 'mode-repeat':\n        case 'mode-equalizer':\n        case 'mode-seek':\n        case 'mode-crossfade':\n        case 'mode-favorites':\n        case 'mode-insel':\n        case 'media-OnOff':\n        case 'button':\n            return true;\n    }\n    console.error(`${F} isMediaButtonActionType === false`);\n    return false;\n}\ntype MediaButtonActionType = Extract<\n    ButtonActionType,\n    | 'media-back'\n    | 'media-pause'\n    | 'media-next'\n    | 'media-shuffle'\n    | 'volumeSlider'\n    | 'mode-speakerlist'\n    | 'mode-playlist'\n    | 'mode-tracklist'\n    | 'mode-repeat'\n    | 'mode-equalizer'\n    | 'mode-seek'\n    | 'mode-crossfade'\n    | 'mode-favorites'\n    | 'mode-insel'\n    | 'media-OnOff'\n    | 'button'\n>;\n\nexport type ButtonActionType =\n    | 'bExit'\n    | 'bUp'\n    | 'bNext'\n    | 'bSubNext'\n    | 'bPrev'\n    | 'bSubPrev'\n    | 'bHome'\n    | 'notifyAction'\n    | 'OnOff'\n    | 'button'\n    | 'up'\n    | 'stop'\n    | 'down'\n    | 'positionSlider'\n    | 'tiltOpen'\n    | 'tiltStop'\n    | 'tiltSlider'\n    | 'tiltClose'\n    | 'brightnessSlider'\n    | 'colorTempSlider'\n    | 'colorWheel'\n    | 'tempUpd'\n    | 'tempUpdHighLow'\n    | 'media-back'\n    | 'media-pause'\n    | 'media-next'\n    | 'media-shuffle'\n    | 'volumeSlider'\n    | 'mode-speakerlist'\n    | 'mode-playlist'\n    | 'mode-tracklist'\n    | 'mode-repeat'\n    | 'mode-equalizer'\n    | 'mode-seek'\n    | 'mode-crossfade'\n    | 'mode-favorites'\n    | 'mode-insel'\n    | 'media-OnOff'\n    | 'timer-start'\n    | 'timer-pause'\n    | 'timer-cancle'\n    | 'timer-finish'\n    | 'hvac_action'\n    | 'mode-modus1'\n    | 'mode-modus2'\n    | 'mode-modus3'\n    | 'number-set'\n    | 'mode-preset_modes'\n    | 'A1'\n    | 'A2'\n    | 'A3'\n    | 'A4'\n    | 'D1'\n    | 'U1';\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAkD;AAElD,2BAAmC;AAM5B,MAAM,qBAAkC;AAAA,EAC3C,MAAM;AAAA,EACN,eAAe;AAAA,EACf,MAAM;AAAA,EACN,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,eAAe;AACnB;AASO,MAAM,aAAa,wCAAmB;AAAA,EAChC;AAAA,EACA;AAAA,EACC;AAAA,EAEV,YAAY,MAAqB;AAC7B,UAAM,IAAI;AACV,SAAK,OAAO,KAAK;AACjB,SAAK,KAAK,KAAK;AACf,SAAK,QAAQ,KAAK;AAAA,EACtB;AAAA,EACA,MAAM,OAAsB;AAAA,EAAC;AAAA,EAE7B,MAAM,cAAc,OAAqC;AACrD,SAAK,IAAI,KAAK,kCAAkC,KAAK,UAAU,KAAK,GAAG;AAAA,EAC3E;AAAA,EACA,WAAiB;AACb,SAAK,YAAY,YAAY,KAAK,MAAM;AAAA,EAC5C;AAAA,EAEA,MAAgB,mBAAmB,KAA6B;AAC5D,QAAI,KAAK;AACL,WAAK,SAAS;AACd,WAAK,OAAO;AAAA,IAChB;AAAA,EACJ;AAAA,EACA,MAAa,SAAwB;AACjC,SAAK,QAAQ,IAAI;AAAA,MACb,mBAAmB,OAAO,eAAe,IAAI;AAAA,IACjD;AAAA,EACJ;AAAA,EAQO,gBAAgB,KAA4D;AA9DvF;AA+DQ,QAAI,CAAC,OAAO,CAAC,IAAI,iBAAiB,CAAC,IAAI;AAAM,aAAO;AACpD,UAAM,KAAe,CAAC;AACtB,QAAI,IAAI;AAAQ,SAAG,KAAK,IAAI,MAAM;AAClC,QAAI,IAAI;AAAO,SAAG,KAAK,IAAI,KAAK;AAChC,QAAI,IAAI;AAAe,SAAG,KAAK,IAAI,aAAa;AAChD,WAAO,KAAK;AAAA,OACR,SAAI,SAAJ,YAAY,mBAAmB;AAAA,OAC/B,QAAG,KAAK,GAAG,MAAX,YAAgB,mBAAmB;AAAA,OACnC,SAAI,SAAJ,YAAY,mBAAmB;AAAA,OAC/B,SAAI,cAAJ,YAAiB,mBAAmB;AAAA,OACpC,SAAI,eAAJ,YAAkB,mBAAmB;AAAA,OACrC,SAAI,kBAAJ,YAAqB,mBAAmB;AAAA,IAC5C;AAAA,EACJ;AACJ;AAEO,MAAM,iBAAiB,yBAAU;AAAA,EACpC;AAAA,EACA,YAAmB,CAAC;AAAA,EACpB,YAAY,SAAiC,SAAyB;AAClE,UAAM,SAAS,MAAM;AACrB,SAAK,SAAS;AAAA,EAClB;AAAA,EACA,MAAM,OAAsB;AAAA,EAAC;AACjC;AAIO,SAAS,wBAAwB,GAA+D;AACnG,UAAQ,GAAG;AAAA,IACP,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,aAAO;AAAA,EACf;AACA,UAAQ,MAAM,GAAG,qCAAqC;AACtD,SAAO;AACX;",
  "names": []
}
