{
  "version": 3,
  "sources": ["../../../src/lib/pages/pageThermo2.ts"],
  "sourcesContent": ["import { type PageInterface } from '../classes/PageInterface';\nimport {\n    getIconEntryColor,\n    getIconEntryValue,\n    getPayload,\n    getPayloadArray,\n    getValueEntryNumber,\n    setValueEntry,\n} from '../const/tools';\nimport type * as pages from '../types/pages';\nimport type * as Types from '../types/types';\n\nimport type { ConfigManager } from '../classes/config-manager';\nimport { PageMenu } from './pageMenu';\nimport { Color } from '../const/Color';\nimport * as configManagerConst from '../const/config-manager-const';\n\nconst PageThermo2MessageDefault: pages.PageThermo2Message = {\n    event: 'entityUpd',\n    headline: 'Page Thermo',\n    navigation: 'button~bSubPrev~~~~~button~bSubNext~~~~',\n    internalName: 'PageThermo2',\n    dstTemp: '',\n    minTemp: '10',\n    maxTemp: '40',\n    tempStep: '5',\n    unit: '',\n    power: false,\n    options: [\n        '~~~~~',\n        '~~~~~',\n        '~~~~~',\n        '~~~~~',\n        '~~~~~',\n        '~~~~~',\n        '~~~~~',\n        '~~~~~',\n        '~~~~~',\n        '~~~~~',\n        '~~~~~',\n        '~~~~~',\n        '~~~~~',\n        '~~~~~',\n        '~~~~~',\n        '~~~~~',\n    ],\n};\n/*type AtLeastOne<T, K extends keyof T = keyof T> = K extends keyof T ? Pick<T, K> & Partial<Omit<T, K>> : never;\n\ntype MyType = { a: string; b: string; c: string };\ntype MyValidType = AtLeastOne<MyType>;\n\nexport const a: MyValidType = { c: 'c' };*/\n\nexport class PageThermo2 extends PageMenu {\n    //config: pages.cardThermoDataItemOptions;\n    items: pages.cardThermo2DataItems | undefined;\n    heatCycles: number = 1;\n    protected maxItems: number = 8;\n    private headlinePos: number = 0;\n    private titelPos: number = 0;\n    public convertValue: 1 | 10 = 1;\n    public index = 0;\n\n    constructor(config: PageInterface, options: pages.PageBaseConfig) {\n        if (config.card !== 'cardThermo2') {\n            return;\n        }\n        if (options.config && options.config.card == 'cardThermo2') {\n            super(config, options);\n            this.config = options.config;\n            this.iconLeftP = 'arrow-left-bold-outline';\n            this.iconLeft = 'arrow-up-bold';\n            this.iconRightP = 'arrow-right-bold-outline';\n            this.iconRight = 'arrow-down-bold';\n            this.config = options.config;\n            this.config.scrollType = 'page';\n        } else {\n            throw new Error('Missing config!');\n        }\n        if (options.items && options.items.card == 'cardThermo2') {\n            this.items = options.items;\n        }\n        this.filterDuplicateMessages = false;\n        this.minUpdateInterval = 2000;\n    }\n\n    async init(): Promise<void> {\n        const config = structuredClone(this.config);\n        // search states for mode auto\n        const tempConfig: Partial<pages.cardThermo2DataItemOptions> =\n            this.enums || this.dpInit\n                ? await this.basePanel.statesControler.getDataItemsFromAuto(this.dpInit, config, undefined, this.enums)\n                : config;\n        // create Dataitems\n        //this.log.debug(JSON.stringify(tempConfig));\n        const tempItem: Partial<pages.cardThermo2DataItems> = await this.basePanel.statesControler.createDataItems(\n            tempConfig,\n            this,\n        );\n        if (tempItem) {\n            tempItem.card = 'cardThermo2';\n        }\n        this.heatCycles = Array.isArray(tempItem.data) ? tempItem.data.length : 1;\n        if (this.heatCycles > 8 && Array.isArray(tempItem.data)) {\n            this.log.warn(\n                `PageThermo2: Heat cycles are ${this.heatCycles}, but only 8 are supported! Using only 8 cycles.`,\n            );\n            tempItem.data = tempItem.data.slice(0, 8);\n            this.heatCycles = 8;\n        }\n        this.pageItemConfig = this.pageItemConfig || [];\n        if (this.heatCycles > 1 && tempItem?.card === 'cardThermo2') {\n            if (this.config?.card === 'cardThermo2' && this.config?.filterType) {\n                this.config.filterType = this.index;\n            }\n            for (let i = this.heatCycles; i > 0; --i) {\n                await this.basePanel.statesControler.setInternalState(\n                    `///${this.basePanel.name}/${this.name}/${i - 1}`,\n                    i === this.index - 1 ? true : false,\n                    true,\n                    {\n                        type: 'boolean',\n                        role: 'button',\n                        name: `Thermo2 ${this.name} ${i}`,\n                        read: true,\n                        write: true,\n                    },\n                    this.onInternalCommand,\n                );\n                const item2 = Array.isArray(tempConfig?.data) && tempConfig?.data[i - 1];\n\n                this.pageItemConfig.unshift({\n                    role: 'heatcycle',\n                    type: 'button',\n                    dpInit: '',\n                    data: {\n                        icon: {\n                            true: {\n                                value:\n                                    item2 && item2.icon4?.true?.value\n                                        ? item2.icon4.true.value\n                                        : { type: 'const', constVal: `numeric-${i}-circle-outline` },\n                                color:\n                                    item2 && item2.icon4?.true?.color\n                                        ? item2.icon4.true.color\n                                        : {\n                                              type: 'const',\n                                              constVal: Color.Green,\n                                          },\n                            },\n\n                            false: {\n                                value:\n                                    item2 && item2.icon4?.false?.value\n                                        ? item2.icon4.false.value\n                                        : { type: 'const', constVal: `numeric-${i}-circle-outline` },\n                                color:\n                                    item2 && item2.icon4?.false?.color\n                                        ? item2.icon4.false.color\n                                        : {\n                                              type: 'const',\n                                              constVal: Color.Gray,\n                                          },\n                            },\n                        },\n                        entity1: {\n                            value: {\n                                type: 'internal',\n                                dp: `///${this.basePanel.name}/${this.name}/${i - 1}`,\n                                change: 'ts',\n                            },\n                        },\n                        setValue2: { type: 'internal', dp: `///${this.basePanel.name}/${this.name}/${i - 1}` },\n                    },\n                });\n            }\n        }\n\n        this.items = tempItem as pages.cardThermo2DataItems;\n        await super.init();\n    }\n\n    public async update(): Promise<void> {\n        if (!this?.visibility) {\n            return;\n        }\n        const message: Partial<pages.PageThermo2Message> = {};\n        message.options = [];\n        message.navigation = this.getNavigation();\n        if (this.items && this.config?.card === 'cardThermo2') {\n            const data = Array.isArray(this.items.data)\n                ? this.items.data[this.index]\n                    ? this.items.data[this.index]\n                    : null\n                : this.items.data;\n            if (data) {\n                message.headline = this.library.getTranslation(\n                    (data && data.headline && (await data.headline.getString())) ?? '',\n                );\n                const step = Math.round(((await data.stepValue?.getNumber()) || 0.5) * 10);\n                const min = Math.round(((await data.minValue?.getNumber()) || 15) * 10);\n                const max = Math.round(((await data.maxValue?.getNumber()) || 28) * 10);\n                let dstTemp = Math.round(((await getValueEntryNumber(data.entity3)) || 0) * 10);\n                dstTemp = Math.min(Math.max(dstTemp, min), max);\n                dstTemp = Math.round((dstTemp - min) / step) * step + min;\n                message.dstTemp = dstTemp.toString();\n                message.minTemp = min.toString();\n                message.maxTemp = max.toString();\n                message.tempStep = step.toString();\n                message.unit = (await data.entity3?.unit?.getString()) || '\u00B0C';\n                message.power = (await data.power?.getBoolean()) || false;\n                const statesText = this.library.getTranslation((await data.mode?.getString()) || '');\n\n                // No pageitems here\n                // build pageitem strings for default thermo2 values- spezial case\n                for (let i = 0; i < 7; i++) {\n                    message.options[i] = `text~${this.name}.${i}~${\n                        [\n                            await getIconEntryValue(data?.icon1, true, 'thermometer'),\n                            (((await data?.entity1?.value?.getNumber()) || 0) * 10).toString(),\n                            (await data?.entity1?.unit?.getString()) || '\u00B0C',\n                            await getIconEntryValue(data?.icon2, true, 'water-percent'),\n                            (((await data?.entity2?.value?.getNumber()) || 0) * 10).toString(),\n                            (await data?.entity2?.unit?.getString()) || '%',\n                            statesText,\n                        ][i]\n                    }~${\n                        [\n                            await getIconEntryColor(data?.icon1, !!(await data?.power?.getBoolean()), Color.Green),\n                            await getIconEntryColor(data?.icon1, !!(await data?.power?.getBoolean()), Color.Green),\n                            await getIconEntryColor(data?.icon1, !!(await data?.power?.getBoolean()), Color.Green),\n                            await getIconEntryColor(data?.icon2, !!(await data?.power?.getBoolean()), Color.Magenta),\n                            await getIconEntryColor(data?.icon2, !!(await data?.power?.getBoolean()), Color.Magenta),\n                            await getIconEntryColor(data?.icon2, !!(await data?.power?.getBoolean()), Color.Magenta),\n                            await getIconEntryColor(data?.icon5, true, Color.MSYellow),\n                        ][i]\n                    }~~${['', '', '', '', '', '', (await data?.power?.getNumber()) ?? 1][i]}`;\n                }\n            }\n            let arr = (await this.getOptions([])).slice(0, this.maxItems);\n            if (arr && this.config.sortOrder !== 'V') {\n                const temp = ['~~~~~', '~~~~~', '~~~~~', '~~~~~', '~~~~~', '~~~~~', '~~~~~', '~~~~~'];\n                // fill up to 8 items\n                let sort = [];\n                switch (this.config.sortOrder) {\n                    case 'H':\n                        sort = [0, 4, 1, 5, 2, 6, 3, 7];\n                        break;\n                    case 'HM':\n                        sort = [1, 5, 2, 6, 0, 4, 3, 7];\n                        break;\n                    case 'VM':\n                        sort = [3, 0, 1, 2, 7, 4, 5, 6];\n                        break;\n                    case 'HB':\n                        sort = [0, 5, 7, 2, 1, 4, 6, 3];\n                        break;\n                    case 'VB':\n                        sort = [0, 4, 5, 1, 2, 6, 7, 3];\n                        break;\n                    default:\n                        sort = [0, 1, 2, 3, 4, 5, 6, 7];\n                        break;\n                }\n                for (let i = 0; i < 8; i++) {\n                    const index = sort[i];\n                    temp[i] = arr[index] ? arr[index] : '~~~~~';\n                }\n                arr = temp;\n            }\n            message.options = message.options.concat(arr) as typeof message.options;\n\n            const msg: pages.PageThermo2Message = { ...PageThermo2MessageDefault, ...message };\n            const msg2 = this.getMessage(msg);\n            this.sendToPanel(msg2, false);\n        }\n    }\n\n    async onButtonEvent(event: Types.IncomingEvent): Promise<void> {\n        if (event.action === 'tempUpd') {\n            if (!this.items) {\n                return;\n            }\n            const data = Array.isArray(this.items.data)\n                ? this.items.data[this.index]\n                    ? this.items.data[this.index]\n                    : null\n                : this.items.data;\n            if (data) {\n                const newValLow = parseInt(event.opt) / 10;\n                const valLow = (await getValueEntryNumber(data.entity3)) ?? null;\n                if (valLow !== null && newValLow !== valLow) {\n                    await setValueEntry(data.entity3, newValLow);\n                }\n            }\n        } else if (\n            event.action === 'hvac_action' &&\n            this.pageItems &&\n            this.pageItems[Number(event.opt.split('?')[1])]\n        ) {\n            if (await this.pageItems[Number(event.opt.split('?')[1])]!.onCommand('button', '')) {\n                return;\n            }\n        }\n        await super.onButtonEvent(event);\n    }\n\n    private getMessage(message: pages.PageThermo2Message): string {\n        return getPayload(\n            'entityUpd',\n            message.headline,\n            message.navigation,\n            String(this.name),\n            String(message.dstTemp),\n            String(message.minTemp),\n            String(message.maxTemp),\n            message.tempStep,\n            message.unit,\n            !message.power ? '1' : '1',\n            getPayloadArray(message.options),\n        );\n    }\n    protected async onVisibilityChange(val: boolean): Promise<void> {\n        await super.onVisibilityChange(val);\n        if (val) {\n            for (const item of this.pageItems ?? []) {\n                if (item && item.dataItems && item.dataItems.type === 'input_sel') {\n                    if (this.controller) {\n                        await this.controller.statesControler.activateTrigger(item);\n                    }\n                }\n            }\n        } else {\n            for (const item of this.pageItems ?? []) {\n                if (item && item.dataItems && item.dataItems.type === 'input_sel') {\n                    if (this.controller) {\n                        await this.controller.statesControler.deactivateTrigger(item);\n                    }\n                }\n            }\n        }\n    }\n    protected async onStateTrigger(): Promise<void> {\n        await this.update();\n    }\n\n    onInternalCommand = async (id: string, state: Types.nsPanelState | undefined): Promise<Types.nsPanelStateVal> => {\n        if (state?.val) {\n            this.index = parseInt(id.split('/').pop() ?? '0');\n            if (this.config?.card === 'cardThermo2' && this.config?.filterType != null) {\n                this.config.filterType = this.index;\n            }\n            //this.adapter.setTimeout(() => this.update, 100);\n        }\n        if (id == `///${this.basePanel.name}/${this.name}/${this.index}`) {\n            return true;\n        }\n        return false;\n    };\n    static async getPage(\n        configManager: ConfigManager,\n        page: ScriptConfig.PageThermo2,\n        gridItem: pages.PageBaseConfig,\n        messages: string[],\n    ): Promise<{ gridItem: pages.PageBaseConfig; messages: string[] }> {\n        if (page.type !== 'cardThermo2' || !gridItem.config || gridItem.config.card !== 'cardThermo2') {\n            return { gridItem, messages };\n        }\n        const adapter = configManager.adapter;\n        if (!page.thermoItems || !page.thermoItems[0]) {\n            const msg = `${page.uniqueName}: Thermo page has no thermo item or item 0 has no id!`;\n            messages.push(msg);\n            adapter.log.warn(msg);\n            return { gridItem, messages };\n        }\n        gridItem.config.card = 'cardThermo2';\n        gridItem.config.filterType = 0;\n        gridItem.config.scrollType = 'page';\n        gridItem.config.sortOrder = page.sortOrder || 'V';\n        gridItem.config.data = [];\n        let o = undefined;\n        let airCondition = false;\n        const thermoItems = JSON.parse(JSON.stringify(page.thermoItems)) as ScriptConfig.PageThermo2['thermoItems'];\n        let filterIndex = -1;\n        for (let i = 0; i < thermoItems.length; i++) {\n            let actual = '';\n            let humidity = '';\n            let set = '';\n            let power: Types.DataItemsOptions | undefined;\n            let role: ScriptConfig.channelRoles = 'thermostat';\n            let mode: Types.DataItemsOptions | undefined;\n            let foundedStates: configManagerConst.checkedDatapointsUnion | undefined;\n            const item = thermoItems[i];\n            foundedStates = undefined;\n            if (!item) {\n                const msg = `${page.uniqueName} item ${i} is invalid!`;\n                messages.push(msg);\n                adapter.log.error(msg);\n                continue;\n            }\n            let headline = item.name || '';\n\n            if ('id' in item) {\n                if (!item || !item.id || item.id.endsWith('.')) {\n                    const msg = `${page.uniqueName} id2: ${item.id} is invalid!`;\n                    messages.push(msg);\n                    adapter.log.error(msg);\n                    continue;\n                }\n                o = await adapter.getForeignObjectAsync(item.id);\n                if (\n                    !o ||\n                    !o.common ||\n                    !o.common.role ||\n                    (o.common.role !== 'thermostat' && o.common.role !== 'airCondition')\n                ) {\n                    const msg = `${page.uniqueName} id: ${item.id} ${!o || !o.common ? 'has a invalid object' : o.common.role !== 'thermostat' && o.common.role !== 'airCondition' ? `has wrong role: ${o.common.role} check alias.md` : ' something went wrong'} !`;\n                    messages.push(msg);\n                    adapter.log.error(msg);\n                    thermoItems.splice(i--, 1);\n                    continue;\n                }\n                role = o.common.role;\n                try {\n                    foundedStates = await configManager.searchDatapointsForItems(\n                        configManagerConst.requiredScriptDataPoints,\n                        role,\n                        item.id,\n                        messages,\n                    );\n                } catch {\n                    continue;\n                }\n                if (!foundedStates) {\n                    const msg = `${page.uniqueName} id: ${item.id} has no states!`;\n                    messages.push(msg);\n                    adapter.log.error(msg);\n                    continue;\n                }\n                headline = airCondition\n                    ? item.name2 || 'COOLING'\n                    : item.name ||\n                      (typeof o.common.name === 'object'\n                          ? o.common[configManager.adapter.language || 'en']\n                          : o.common.name) ||\n                      'HEATING';\n                actual = foundedStates[role].ACTUAL?.dp || '';\n                humidity = foundedStates[role].HUMIDITY?.dp || '';\n                set = airCondition ? foundedStates[role].SET2?.dp || '' : foundedStates[role].SET?.dp || '';\n                role = o.common.role;\n                power = foundedStates[role].MODESET;\n\n                if (foundedStates[role].MODE || foundedStates[role].MODESET) {\n                    mode = foundedStates[role].MODE || foundedStates[role].MODESET;\n                    if (mode && mode.dp) {\n                        const o2 = await adapter.getForeignObjectAsync(mode.dp);\n                        if (o2?.common?.states) {\n                            mode = {\n                                ...mode,\n                                read: `return ${JSON.stringify(o2.common.states)}[val] || val`,\n                            };\n                        } else if (o.common?.type === 'string') {\n                            mode = {\n                                ...mode,\n                            };\n                        } else {\n                            mode = {\n                                ...mode,\n                                read: `return ${JSON.stringify(\n                                    item.modeList\n                                        ? item.modeList\n                                        : ['OFF', 'AUTO', 'COOL', 'HEAT', 'ECO', 'FAN', 'DRY'],\n                                )}[val] || val`,\n                            };\n                        }\n                    }\n                }\n                if (o.common.role === 'airCondition') {\n                    if (!airCondition) {\n                        airCondition = true;\n                        thermoItems.splice(i, 0, item);\n                    } else if (airCondition) {\n                        airCondition = false;\n                    }\n                }\n            } else {\n                if (!item || !item.thermoId1 || item.thermoId1.endsWith('.')) {\n                    const msg = `${page.uniqueName} thermoId1: ${item.thermoId1} is invalid!`;\n                    messages.push(msg);\n                    adapter.log.error(msg);\n                    continue;\n                }\n                actual = item.thermoId1;\n                o = await adapter.getForeignObjectAsync(item.thermoId1);\n                if (!o || !o.common) {\n                    const msg = `${page.uniqueName} id: ${item.thermoId1} has a invalid object!`;\n                    messages.push(msg);\n                    adapter.log.error(msg);\n                    continue;\n                }\n                if (\n                    !item ||\n                    (item.thermoId2 &&\n                        (item.thermoId2.endsWith('.') || !(await configManager.existsState(item.thermoId2))))\n                ) {\n                    const msg = `${page.uniqueName} thermoId2: ${item.thermoId2} is invalid!`;\n                    messages.push(msg);\n                    adapter.log.error(msg);\n                    continue;\n                }\n                humidity = item.thermoId2 || '';\n                if (\n                    !item ||\n                    (item.modeId && (item.modeId.endsWith('.') || !(await configManager.existsState(item.modeId))))\n                ) {\n                    const msg = `${page.uniqueName} thermoId2: ${item.thermoId2} is invalid!`;\n                    messages.push(msg);\n                    adapter.log.error(msg);\n                    continue;\n                }\n                if (item.modeId) {\n                    let states: string[] | Record<string, string> = [\n                        'OFF',\n                        'AUTO',\n                        'COOL',\n                        'HEAT',\n                        'ECO',\n                        'FAN',\n                        'DRY',\n                    ];\n                    if (!item.modeList || !Array.isArray(item.modeList) || item.modeList.length < 1) {\n                        const o = await adapter.getForeignObjectAsync(item.modeId);\n                        if (o?.common?.states) {\n                            states = o.common.states;\n                        }\n                    } else {\n                        states = item.modeList;\n                    }\n                    mode = { type: 'triggered', dp: item.modeId, read: `return ${JSON.stringify(states)}[val]` };\n                    power = { type: 'triggered', dp: item.modeId, read: `return val !== 0 ? 1 : 0;` };\n                }\n                set = item.set;\n            }\n            for (const im of [item.minValue, item.maxValue, item.stepValue]) {\n                if (im != null && (typeof im !== 'number' || im < 0)) {\n                    const msg = `${page.uniqueName} item: ${i} val: ${im} invalid - Error in minValue, maxValue or stepValue!`;\n                    messages.push(msg);\n                    adapter.log.warn(msg);\n                    continue;\n                }\n            }\n            if (adapter.config.defaultValueCardThermo) {\n                if (item.minValue != null) {\n                    item.minValue /= 10;\n                }\n                if (item.maxValue != null) {\n                    item.maxValue /= 10;\n                }\n                if (item.stepValue != null) {\n                    item.stepValue /= 10;\n                }\n            }\n            const data: pages.cardThermo2DataItemOptions['data'] = {\n                entity3: (await configManager.existsAndWriteableState(set))\n                    ? {\n                          value: { type: 'triggered', dp: set },\n                          set: { type: 'state', dp: set },\n                      }\n                    : undefined,\n                entity1: (await configManager.existsState(actual))\n                    ? {\n                          value: { type: 'triggered', dp: actual || '' },\n                          unit: { type: 'const', constVal: item.unit || '\u00B0C' },\n                      }\n                    : undefined,\n                icon1: {\n                    true: {\n                        value: { type: 'const', constVal: item.icon || 'thermometer' },\n                        color: await configManager.getIconColor(item.onColor, Color.Green),\n                    },\n                },\n\n                icon2: {\n                    true: {\n                        value: { type: 'const', constVal: item.icon2 || 'water-percent' },\n                        color: await configManager.getIconColor(item.onColor2, Color.Magenta),\n                    },\n                },\n                icon4:\n                    role !== 'airCondition' || airCondition\n                        ? {\n                              true: {\n                                  value: item.iconHeatCycle\n                                      ? { type: 'const', constVal: item.iconHeatCycle }\n                                      : undefined,\n                                  color: item.iconHeatCycleOnColor\n                                      ? await configManager.getIconColor(item.iconHeatCycleOnColor, Color.Green)\n                                      : undefined,\n                              },\n\n                              false: {\n                                  value: item.iconHeatCycle\n                                      ? { type: 'const', constVal: item.iconHeatCycle }\n                                      : undefined,\n                                  color: item.iconHeatCycleOffColor\n                                      ? await configManager.getIconColor(item.iconHeatCycleOffColor, Color.Gray)\n                                      : undefined,\n                              },\n                          }\n                        : {\n                              true: {\n                                  value: item.iconHeatCycle2\n                                      ? { type: 'const', constVal: item.iconHeatCycle2 }\n                                      : undefined,\n                                  color: await configManager.getIconColor(item.iconHeatCycleOnColor2, Color.Blue),\n                              },\n\n                              false: {\n                                  value: item.iconHeatCycle2\n                                      ? { type: 'const', constVal: item.iconHeatCycle2 }\n                                      : undefined,\n                                  color: await configManager.getIconColor(item.iconHeatCycleOffColor2, {\n                                      r: 80,\n                                      g: 80,\n                                      b: 140,\n                                  }),\n                              },\n                          },\n                entity2: (await configManager.existsState(humidity))\n                    ? {\n                          value: { type: 'triggered', dp: humidity || '' },\n                          unit: { type: 'const', constVal: item.unit || '%' },\n                      }\n                    : undefined,\n                headline: { type: 'const', constVal: headline || 'HEATING' },\n                minValue:\n                    item.minValue != null\n                        ? {\n                              type: 'const',\n                              constVal: item.minValue,\n                          }\n                        : undefined,\n                maxValue:\n                    item.maxValue != null\n                        ? {\n                              type: 'const',\n                              constVal: item.maxValue,\n                          }\n                        : undefined,\n                stepValue:\n                    item.stepValue != null\n                        ? {\n                              type: 'const',\n                              constVal: item.stepValue,\n                          }\n                        : undefined,\n                power: (await configManager.existsState(item.power))\n                    ? {\n                          type: 'triggered',\n                          dp: item.power,\n                      }\n                    : power,\n                mode: mode,\n            };\n            if (Array.isArray(gridItem.config.data)) {\n                gridItem.config.data.push(data);\n            }\n            if (!foundedStates) {\n                continue;\n            }\n\n            if (role !== 'thermostat' && role !== 'airCondition') {\n                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                const msg = `${page.uniqueName} id: ${o._id} role '${role}' not supported for cardThermo2!`;\n                messages.push(msg);\n                adapter.log.error(msg);\n                continue;\n            }\n            filterIndex++;\n\n            gridItem.pageItems = gridItem.pageItems || [];\n            if (role === 'thermostat' || role === 'airCondition') {\n                if (foundedStates[role].MODESET) {\n                    const dataItem = foundedStates[role].MODESET;\n                    if (dataItem && dataItem.dp) {\n                        const dp = dataItem.dp;\n                        const o = await adapter.getForeignObjectAsync(dp);\n                        if (o?.common) {\n                            let native: { icon: string; color: ScriptConfig.RGB } | undefined =\n                                o.common.native?.nspanelIcons;\n                            if (native != null && !Array.isArray(native)) {\n                                native = undefined;\n                            }\n                            gridItem.pageItems.push({\n                                role: '',\n                                type: 'input_sel',\n                                filter: filterIndex,\n                                dpInit: '',\n                                data: {\n                                    icon: {\n                                        true: {\n                                            value: {\n                                                ...dataItem,\n                                                read: `\n                                                    ${\n                                                        native && native.length > 0 && native.every(e => 'icon' in e)\n                                                            ? `return ${JSON.stringify(native)}.icon[val] || val`\n                                                            : ''\n                                                    }\n                                                    switch(val) {\n                                                    case 0: return 'power-off';\n                                                    case 1: return 'heat-wave';\n                                                    case 2: return 'snowflake';\n                                                    case 3: return 'refresh-auto';\n                                                    }\n                                                `,\n                                            },\n                                            color: {\n                                                ...dataItem,\n                                                read: `\n                                                    ${\n                                                        native && native.length > 0 && native.every(e => 'color' in e)\n                                                            ? `return ${JSON.stringify(native)}.color[val] || Color.Gray`\n                                                            : ''\n                                                    }\n                                                    switch(val) {\n                                                    case 0: return Color.Gray;\n                                                    case 1: return Color.Red;\n                                                    case 2: return Color.Blue;\n                                                    case 3: return Color.MSYellow;\n                                                    }\n                                                `,\n                                            },\n                                        },\n\n                                        false: {\n                                            value: {\n                                                ...dataItem,\n                                                read: `\n                                                    ${\n                                                        native && native.length > 0\n                                                            ? `return ${JSON.stringify(native)}[val] || val`\n                                                            : ''\n                                                    }\n                                                    switch(val) {\n                                                    case 0: return 'power-off';\n                                                    case 1: return 'heat-wave';\n                                                    case 2: return 'snowflake';\n                                                    case 3: return 'refresh-auto';\n                                                    }\n                                                `,\n                                            },\n                                            color: { type: 'const', constVal: Color.Gray },\n                                        },\n                                    },\n                                    entityInSel: {\n                                        value: foundedStates[role].MODESET,\n                                        set: foundedStates[role].MODESET,\n                                    },\n                                    headline: { type: 'const', constVal: o.common.name || 'Mode' },\n                                },\n                            });\n                        }\n                    }\n                } else {\n                    //Automatic\n                    if (foundedStates[role].AUTOMATIC && !foundedStates[role].MANUAL) {\n                        foundedStates[role].MANUAL = JSON.parse(JSON.stringify(foundedStates[role].AUTOMATIC));\n                        if (foundedStates[role].MANUAL!.type === 'triggered') {\n                            foundedStates[role].MANUAL!.read = 'return !val';\n                            foundedStates[role].MANUAL!.write = 'return !val';\n                        }\n                    } else if (!foundedStates[role].AUTOMATIC && foundedStates[role].MANUAL) {\n                        foundedStates[role].AUTOMATIC = JSON.parse(JSON.stringify(foundedStates[role].MANUAL));\n                        if (foundedStates[role].AUTOMATIC!.type === 'triggered') {\n                            foundedStates[role].AUTOMATIC!.read = 'return !val';\n                            foundedStates[role].AUTOMATIC!.write = 'return !val';\n                        }\n                    }\n\n                    if (foundedStates[role].AUTOMATIC) {\n                        gridItem.pageItems.push({\n                            role: 'button',\n                            type: 'button',\n                            filter: filterIndex,\n                            dpInit: '',\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: { type: 'const', constVal: 'alpha-a-circle' },\n                                        color: { type: 'const', constVal: Color.activated },\n                                    },\n                                    false: {\n                                        value: { type: 'const', constVal: 'alpha-a-circle-outline' },\n                                        color: { type: 'const', constVal: Color.deactivated },\n                                    },\n                                },\n                                entity1: {\n                                    value: foundedStates[role].AUTOMATIC,\n                                    set: foundedStates[role].AUTOMATIC,\n                                },\n                            },\n                        });\n                    }\n                    //Manual\n                    if (foundedStates[role].MANUAL) {\n                        gridItem.pageItems.push({\n                            role: 'button',\n                            type: 'button',\n                            filter: filterIndex,\n                            dpInit: '',\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: { type: 'const', constVal: 'alpha-m-circle' },\n                                        color: { type: 'const', constVal: Color.activated },\n                                    },\n                                    false: {\n                                        value: { type: 'const', constVal: 'alpha-m-circle-outline' },\n                                        color: { type: 'const', constVal: Color.deactivated },\n                                    },\n                                },\n                                entity1: {\n                                    value: foundedStates[role].MANUAL,\n                                    set: foundedStates[role].MANUAL,\n                                },\n                            },\n                        });\n                    }\n                    if (foundedStates[role].OFF) {\n                        gridItem.pageItems.push({\n                            role: 'button',\n                            type: 'button',\n                            filter: filterIndex,\n                            dpInit: '',\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: { type: 'const', constVal: 'power-off' },\n                                        color: { type: 'const', constVal: Color.activated },\n                                    },\n                                    false: {\n                                        value: { type: 'const', constVal: 'power-off' },\n                                        color: { type: 'const', constVal: Color.deactivated },\n                                    },\n                                },\n                                entity1: {\n                                    value: foundedStates[role].OFF,\n                                    set: foundedStates[role].OFF,\n                                },\n                            },\n                        });\n                    }\n                }\n\n                // airCondition with mode\n            }\n            if (foundedStates[role].POWER) {\n                gridItem.pageItems.push({\n                    role: 'button',\n                    type: 'button',\n                    filter: filterIndex,\n                    dpInit: '',\n                    data: {\n                        icon: {\n                            true: {\n                                value: { type: 'const', constVal: 'power-standby' },\n                                color: { type: 'const', constVal: Color.activated },\n                            },\n                            false: {\n                                value: { type: 'const', constVal: 'power-standby' },\n                                color: { type: 'const', constVal: Color.deactivated },\n                            },\n                        },\n                        entity1: {\n                            value: foundedStates[role].POWER,\n                            set: foundedStates[role].POWER,\n                        },\n                    },\n                });\n            }\n\n            //Boost\n            if (foundedStates[role].BOOST) {\n                gridItem.pageItems.push({\n                    role: 'button',\n                    type: 'button',\n                    filter: filterIndex,\n                    dpInit: '',\n                    data: {\n                        icon: {\n                            true: {\n                                value: { type: 'const', constVal: 'fast-forward-60' },\n                                color: { type: 'const', constVal: Color.activated },\n                            },\n                            false: {\n                                value: { type: 'const', constVal: 'fast-forward-60' },\n                                color: { type: 'const', constVal: Color.deactivated },\n                            },\n                        },\n                        entity1: {\n                            value: foundedStates[role].BOOST,\n                            set: foundedStates[role].BOOST,\n                        },\n                    },\n                });\n            }\n            //Fenster\n            if (foundedStates[role].WINDOWOPEN) {\n                gridItem.pageItems.push({\n                    role: 'indicator',\n                    type: 'button',\n                    filter: filterIndex,\n                    dpInit: '',\n                    data: {\n                        icon: {\n                            true: {\n                                value: { type: 'const', constVal: 'window-open-variant' },\n                                color: { type: 'const', constVal: Color.open },\n                            },\n                            false: {\n                                value: { type: 'const', constVal: 'window-closed-variant' },\n                                color: { type: 'const', constVal: Color.close },\n                            },\n                        },\n                        entity1: {\n                            value: foundedStates[role].WINDOWOPEN,\n                        },\n                    },\n                });\n            }\n            //Party\n            if (foundedStates[role].PARTY) {\n                gridItem.pageItems.push({\n                    role: 'button',\n                    type: 'button',\n                    filter: filterIndex,\n                    dpInit: '',\n                    data: {\n                        icon: {\n                            true: {\n                                value: { type: 'const', constVal: 'party-popper' },\n                                color: { type: 'const', constVal: Color.activated },\n                            },\n                            false: {\n                                value: { type: 'const', constVal: 'party-popper' },\n                                color: { type: 'const', constVal: Color.deactivated },\n                            },\n                        },\n                        entity1: {\n                            value: foundedStates[role].PARTY,\n                            set: foundedStates[role].PARTY,\n                        },\n                    },\n                });\n            }\n            if (foundedStates[role].MAINTAIN) {\n                gridItem.pageItems.push({\n                    role: 'indicator',\n                    type: 'button',\n                    filter: filterIndex,\n                    dpInit: '',\n                    data: {\n                        icon: {\n                            true: {\n                                value: { type: 'const', constVal: 'account-wrench' },\n                                color: { type: 'const', constVal: Color.bad },\n                            },\n                            false: {\n                                value: { type: 'const', constVal: 'account-wrench' },\n                                color: { type: 'const', constVal: Color.deactivated },\n                            },\n                        },\n                        entity1: {\n                            value: foundedStates[role].MAINTAIN,\n                        },\n                    },\n                });\n            }\n            if (foundedStates[role].UNREACH) {\n                gridItem.pageItems.push({\n                    role: 'indicator',\n                    type: 'button',\n                    filter: filterIndex,\n                    dpInit: '',\n                    data: {\n                        icon: {\n                            true: {\n                                value: { type: 'const', constVal: 'wifi-off' },\n                                color: { type: 'const', constVal: Color.bad },\n                            },\n                            false: {\n                                value: { type: 'const', constVal: 'wifi' },\n                                color: { type: 'const', constVal: Color.good },\n                            },\n                        },\n                        entity1: {\n                            value: foundedStates[role].UNREACH,\n                        },\n                    },\n                });\n            }\n            if (foundedStates[role].MAINTAIN) {\n                gridItem.pageItems.push({\n                    role: 'indicator',\n                    type: 'button',\n                    filter: filterIndex,\n                    dpInit: '',\n                    data: {\n                        icon: {\n                            true: {\n                                value: { type: 'const', constVal: 'account-wrench' },\n                                color: { type: 'const', constVal: Color.true },\n                            },\n                            false: {\n                                value: { type: 'const', constVal: 'account-wrench' },\n                                color: { type: 'const', constVal: Color.deactivated },\n                            },\n                        },\n                        entity1: {\n                            value: foundedStates[role].MAINTAIN,\n                        },\n                    },\n                });\n            }\n            if (foundedStates[role].LOWBAT) {\n                gridItem.pageItems.push({\n                    role: 'indicator',\n                    type: 'button',\n                    filter: filterIndex,\n                    dpInit: '',\n                    data: {\n                        icon: {\n                            true: {\n                                value: { type: 'const', constVal: 'battery-low' },\n                                color: { type: 'const', constVal: Color.bad },\n                            },\n                            false: {\n                                value: { type: 'const', constVal: 'battery-high' },\n                                color: { type: 'const', constVal: Color.good },\n                            },\n                        },\n                        entity1: {\n                            value: foundedStates[role].LOWBAT,\n                        },\n                    },\n                });\n            }\n            if (foundedStates[role].ERROR) {\n                gridItem.pageItems.push({\n                    role: 'indicator',\n                    type: 'button',\n                    filter: filterIndex,\n                    dpInit: '',\n                    data: {\n                        icon: {\n                            true: {\n                                value: { type: 'const', constVal: 'alert-circle' },\n                                color: { type: 'const', constVal: Color.bad },\n                            },\n                            false: {\n                                value: { type: 'const', constVal: 'alert-circle' },\n                                color: { type: 'const', constVal: Color.deactivated },\n                            },\n                        },\n                        entity1: {\n                            value: foundedStates[role].ERROR,\n                        },\n                    },\n                });\n            }\n            if (foundedStates[role].VACATION) {\n                gridItem.pageItems.push({\n                    role: 'indicator',\n                    type: 'button',\n                    filter: filterIndex,\n                    dpInit: '',\n                    data: {\n                        icon: {\n                            true: {\n                                value: { type: 'const', constVal: 'palm-tree' },\n                                color: { type: 'const', constVal: Color.activated },\n                            },\n                            false: {\n                                value: { type: 'const', constVal: 'palm-tree' },\n                                color: { type: 'const', constVal: Color.deactivated },\n                            },\n                        },\n                        entity1: {\n                            value: foundedStates[role].VACATION,\n                        },\n                    },\n                });\n            }\n            if (foundedStates[role].WORKING) {\n                gridItem.pageItems.push({\n                    role: 'indicator',\n                    type: 'button',\n                    filter: filterIndex,\n                    dpInit: '',\n                    data: {\n                        icon: {\n                            true: {\n                                value: { type: 'const', constVal: 'briefcase-check' },\n                                color: { type: 'const', constVal: Color.activated },\n                            },\n                            false: {\n                                value: { type: 'const', constVal: 'briefcase-check' },\n                                color: { type: 'const', constVal: Color.deactivated },\n                            },\n                        },\n                        entity1: {\n                            value: foundedStates[role].WORKING,\n                        },\n                    },\n                });\n            }\n        }\n        return { gridItem, messages };\n    }\n}\n"],
  "mappings": "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",
  "names": ["o"]
}
