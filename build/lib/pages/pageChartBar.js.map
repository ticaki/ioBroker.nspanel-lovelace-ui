{
  "version": 3,
  "sources": ["../../../src/lib/pages/pageChartBar.ts"],
  "sourcesContent": ["import { type PageInterface } from '../classes/PageInterface';\nimport type * as pages from '../types/pages';\nimport { PageChart } from './pageChart';\n\nexport class PageChartBar extends PageChart {\n    constructor(config: PageInterface, options: pages.PageBase) {\n        // Aufruf des Konstruktors der Basisklasse\n        super(config, options);\n    }\n\n    async init(): Promise<void> {\n        const config = structuredClone(this.config);\n        // search states for mode auto\n        const tempConfig: Partial<pages.cardChartDataItemOptions> =\n            this.enums || this.dpInit\n                ? await this.basePanel.statesControler.getDataItemsFromAuto(this.dpInit, config, undefined, this.enums)\n                : config;\n        // create Dataitems\n        //this.log.debug(JSON.stringify(tempConfig));\n        const tempItem: Partial<pages.cardChartDataItems> = await this.basePanel.statesControler.createDataItems(\n            tempConfig,\n            this,\n        );\n        if (tempItem) {\n            tempItem.card = this.card as 'cardChart';\n            this.log.debug(`init Card: ${this.card}`);\n        }\n        this.items = tempItem as pages.cardChartDataItems;\n        await super.init();\n    }\n\n    // \u00DCberschreiben der getChartDataDB-Methode\n    async getChartDataDB(\n        ticksChart: string[] = ['~'],\n        valuesChart = '~',\n    ): Promise<{ ticksChart: string[]; valuesChart: string }> {\n        if (this.items) {\n            const items = this.items;\n\n            const rangeHours = (items.data.rangeHours && (await items.data.rangeHours.getNumber())) || 24;\n            const stateValue = (items.data.setStateForDB && (await items.data.setStateForDB.getString())) || '';\n            const instance = (items.data.dbInstance && (await items.data.dbInstance.getString())) || '';\n            const maxXAxisLabels = (items.data.maxXAxisLabels && (await items.data.maxXAxisLabels.getNumber())) || 4;\n            const factor = (items.data.factorCardChart && (await items.data.factorCardChart.getNumber())) || 1;\n            const tempScale: number[] = [];\n\n            try {\n                const dbDaten = await this.getDataFromDB(stateValue, rangeHours, instance);\n                if (dbDaten && Array.isArray(dbDaten) && dbDaten.length > 0) {\n                    this.log.debug(`Data from DB: ${JSON.stringify(dbDaten)}`);\n\n                    const stepXAchsis = rangeHours / maxXAxisLabels;\n\n                    valuesChart = '';\n                    for (let i = 0; i < rangeHours; i++) {\n                        const deltaHour = rangeHours - i;\n                        const targetDate = new Date(Date.now() - deltaHour * 3600 * 1000);\n\n                        //Check history items for requested hours\n                        for (let j = 0, targetValue = 0; j < dbDaten.length; j++) {\n                            const valueDate = new Date(dbDaten[j].ts);\n                            const value = Math.round((dbDaten[j].val / factor) * 10);\n                            tempScale.push(value);\n\n                            if (valueDate > targetDate) {\n                                if (targetDate.getHours() % stepXAchsis == 0) {\n                                    valuesChart += `${targetValue}^${targetDate.getHours()}:00` + `~`;\n                                } else {\n                                    valuesChart += `${targetValue}~`;\n                                }\n                                break;\n                            } else {\n                                targetValue = value;\n                            }\n                        }\n                    }\n\n                    valuesChart = valuesChart.substring(0, valuesChart.length - 1);\n\n                    // create ticks\n                    const max = Math.max(...tempScale);\n                    const min = 0;\n                    const intervall = Math.max(Number(((max - min) / 5).toFixed()), 10);\n\n                    this.log.debug(`Scale Min: ${min}, Max: ${max} Intervall: ${intervall}`);\n\n                    const tempTickChart: string[] = [];\n                    let currentTick = min;\n                    while (currentTick < max + intervall) {\n                        tempTickChart.push(String(currentTick));\n                        currentTick += intervall;\n                    }\n                    ticksChart = tempTickChart;\n                } else {\n                    this.log.warn(`No data found for state ${stateValue} in the last ${rangeHours} hours`);\n                }\n            } catch (error) {\n                this.log.error(`Error fetching data from DB: ${error as string}`);\n            }\n        }\n\n        return { ticksChart, valuesChart };\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
