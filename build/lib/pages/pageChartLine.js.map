{
  "version": 3,
  "sources": ["../../../src/lib/pages/pageChartLine.ts"],
  "sourcesContent": ["import { PageChart } from './pageChart';\nimport { type PageInterface } from '../classes/PageInterface';\nimport type * as pages from '../types/pages';\n\nexport class PageChartLine extends PageChart {\n    constructor(config: PageInterface, options: pages.PageBase) {\n        // Aufruf des Konstruktors der Basisklasse\n        super(config, options);\n    }\n\n    async init(): Promise<void> {\n        const config = structuredClone(this.config);\n        // search states for mode auto\n        const tempConfig: Partial<pages.cardChartDataItemOptions> =\n            this.enums || this.dpInit\n                ? await this.basePanel.statesControler.getDataItemsFromAuto(this.dpInit, config, undefined, this.enums)\n                : config;\n        // create Dataitems\n        //this.log.debug(JSON.stringify(tempConfig));\n        const tempItem: Partial<pages.cardChartDataItems> = await this.basePanel.statesControler.createDataItems(\n            tempConfig,\n            this,\n        );\n        if (tempItem) {\n            tempItem.card = this.card as 'cardChart';\n            this.log.debug(`init Card: ${this.card}`);\n        }\n        this.items = tempItem as pages.cardChartDataItems;\n        await super.init();\n    }\n\n    // \u00DCberschreiben der getChartData-Methode\n    async getChartData(): Promise<{ ticksChart: string[]; valuesChart: string }> {\n        let ticksChart: string[] = ['~'];\n        let valuesChart = '~';\n\n        if (this.items) {\n            const items = this.items;\n            const dataSource =\n                this.items.data.instanceDataSource && (await this.items.data.instanceDataSource.getNumber());\n\n            switch (dataSource) {\n                case 0: {\n                    // oldScriptVersion bleibt unver\u00E4ndert\n                    const tempTicks = (items.data.ticks && (await items.data.ticks.getObject())) ?? [];\n                    const tempValues = (items.data.value && (await items.data.value.getString())) ?? '';\n                    if (tempTicks && Array.isArray(tempTicks) && tempTicks.length > 0) {\n                        ticksChart = tempTicks;\n                    }\n                    if (tempValues && typeof tempValues === 'string' && tempValues.length > 0) {\n                        valuesChart = tempValues;\n                    }\n                    break;\n                }\n                case 1: {\n                    // AdapterVersion\n                    const hoursRangeFromNow =\n                        (items.data.rangeHours && (await items.data.rangeHours.getNumber())) || 24;\n                    const stateValue = (items.data.setStateForDB && (await items.data.setStateForDB.getString())) || '';\n                    const instance = (items.data.dbInstance && (await items.data.dbInstance.getString())) || '';\n                    const maxXAxisLabels =\n                        (items.data.maxXAxisLabels && (await items.data.maxXAxisLabels.getNumber())) || 4;\n                    const maxXAxisTicks =\n                        (items.data.maxXAxisTicks && (await items.data.maxXAxisTicks.getNumber())) || 60;\n                    const xAxisTicksInterval = maxXAxisTicks > 0 ? maxXAxisTicks * 60 : 60;\n                    const xAxisLabelInterval = maxXAxisLabels > 0 ? maxXAxisLabels * 60 : 120;\n                    const maxX = 1440; // 24h = 1440min\n\n                    const tempScale: number[] = [];\n\n                    try {\n                        const dbDaten = await this.getDataFromDB(stateValue, hoursRangeFromNow, instance);\n                        if (dbDaten && Array.isArray(dbDaten) && dbDaten.length > 0) {\n                            this.log.debug(`Data from DB: ${JSON.stringify(dbDaten)}`);\n\n                            let ticksAndLabels = '';\n                            let coordinates = '';\n\n                            const ticksAndLabelsList = [];\n                            const date = new Date();\n                            date.setMinutes(0, 0, 0);\n                            const ts = Math.round(date.getTime() / 1000);\n                            const tsYesterday = ts - hoursRangeFromNow * 3600;\n\n                            for (\n                                let x = tsYesterday, i = 0;\n                                x < ts;\n                                x += xAxisTicksInterval * 60, i += xAxisTicksInterval\n                            ) {\n                                if (i % xAxisLabelInterval) {\n                                    ticksAndLabelsList.push(i);\n                                } else {\n                                    const currentDate = new Date(x * 1000);\n                                    // Hours part from the timestamp\n                                    const hours = `0${currentDate.getHours()}`;\n                                    // Minutes part from the timestamp\n                                    const minutes = `0${currentDate.getMinutes()}`;\n                                    const formattedTime = `${hours.slice(-2)}:${minutes.slice(-2)}`;\n                                    ticksAndLabelsList.push(`${String(i)}^${formattedTime}`);\n                                }\n                            }\n                            ticksAndLabels = ticksAndLabelsList.join('+');\n\n                            const list = [];\n                            const offSetTime = Math.round(dbDaten[0].ts / 1000);\n                            const lastTs = Math.round(dbDaten[dbDaten.length - 1].ts / 1000);\n                            const counter = dbDaten.length > 1 ? Math.max((lastTs - offSetTime) / maxX, 1) : 1;\n                            for (let i = 0; i < dbDaten.length; i++) {\n                                const time = Math.round((dbDaten[i].ts / 1000 - offSetTime) / counter);\n                                const value = Math.round(dbDaten[i].val * 10);\n                                if (value != null && value != 0) {\n                                    list.push(`${time}:${value}`);\n                                    tempScale.push(value);\n                                }\n                            }\n\n                            coordinates = list.join('~');\n                            valuesChart = `${ticksAndLabels}~${coordinates}`;\n\n                            this.log.debug(`Ticks & Label: ${ticksAndLabels}`);\n                            this.log.debug(`Coordinates: ${coordinates}`);\n\n                            // create ticks\n                            if (tempScale.length > 0) {\n                                // Round min down to nearest 10 and max up to nearest 10\n                                const rawMax = Math.max(...tempScale);\n                                const rawMin = Math.min(...tempScale);\n                                const roundedMin = Math.floor(rawMin / 10) * 10;\n                                const roundedMax = Math.ceil(rawMax / 10) * 10;\n\n                                // ensure at least a minimal span to avoid zero intervall\n                                const span = Math.max(roundedMax - roundedMin, 10);\n                                const intervall = Math.max(Number((span / 5).toFixed()), 10);\n\n                                this.log.debug(\n                                    `Scale Min: ${roundedMin} (raw ${rawMin}), Max: ${roundedMax} (raw ${rawMax}) Intervall: ${intervall}`,\n                                );\n                                const tempTickChart: string[] = [];\n                                let currentTick = roundedMin - intervall * 2;\n                                while (currentTick < roundedMax + intervall) {\n                                    tempTickChart.push(String(currentTick));\n                                    currentTick += intervall;\n                                }\n                                ticksChart = tempTickChart;\n                            }\n                        } else {\n                            this.log.warn(\n                                `No data found for state ${stateValue} in the last ${hoursRangeFromNow} hours`,\n                            );\n                        }\n                    } catch (error) {\n                        this.log.error(`Error fetching data from DB: ${error as string}`);\n                    }\n                    break;\n                }\n                default:\n                    break;\n            }\n        }\n\n        return { ticksChart, valuesChart };\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
