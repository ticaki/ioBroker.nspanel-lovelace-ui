{
  "version": 3,
  "sources": ["../../../src/lib/pages/pageQR.ts"],
  "sourcesContent": ["import { Page, PageInterface } from '../classes/Page';\nimport { Icons } from '../const/icon_mapping';\nimport { getPayload } from '../const/tools';\nimport * as pages from '../types/pages';\nimport { IncomingEvent } from '../types/types';\n\nconst PageQRMessageDefault: pages.PageQRMessage = {\n    event: 'entityUpd',\n    headline: 'Page QR',\n    navigation: 'button~bSubPrev~~~~~button~bSubNext~~~~',\n    textQR: '', //textQR\n    type1: 'text', //type -> text or switch\n    internalName1: 'ssid', //internalName\n    iconId1: Icons.GetIcon('wifi'), //iconId\n    iconColor1: '65535', //iconColor\n    displayName1: 'SSId', //displayName\n    optionalValue1: '', //optionalValue\n    type2: 'text', //type2 -> text or switch\n    internalName2: 'pwd', //internalName2\n    iconId2: Icons.GetIcon('key'), //iconId2\n    iconColor2: '65535', //iconColor2\n    displayName2: 'Password', //displayName2\n    optionalValue2: '', //optionalvalue2\n};\n\n/**\n * untested\n */\nexport class PageQR extends Page {\n    items: pages.PageBaseConfig['items'];\n    private step: number = 1;\n    private headlinePos: number = 0;\n    private titelPos: number = 0;\n    private nextArrow: boolean = false;\n    private status: pages.AlarmStates = 'armed';\n\n    constructor(config: PageInterface, options: pages.PageBaseConfig) {\n        super(config, options);\n        if (options.config && options.config.card == 'cardQR') this.config = options.config;\n        this.minUpdateInterval = 1000;\n    }\n\n    async init(): Promise<void> {\n        const config = structuredClone(this.config);\n        // search states for mode auto\n        const tempConfig: Partial<pages.cardQRDataItemOptions> =\n            this.enums || this.dpInit\n                ? await this.panel.statesControler.getDataItemsFromAuto(this.dpInit, config, undefined, this.enums)\n                : config;\n        // create Dataitems\n        //this.log.debug(JSON.stringify(tempConfig));\n        const tempItem: Partial<pages.cardQRDataItems> = await this.panel.statesControler.createDataItems(\n            tempConfig,\n            this,\n        );\n        this.items = tempItem as pages.cardQRDataItems;\n        // set card because we lose it\n        this.items.card = 'cardQR';\n        await super.init();\n    }\n\n    /**\n     *\n     * @returns\n     */\n    public async update(): Promise<void> {\n        if (!this.visibility) return;\n        const message: Partial<pages.PageQRMessage> = {};\n        const items = this.items;\n        if (!items || items.card !== 'cardQR') return;\n        const data = items.data;\n\n        message.headline = (data.headline && (await data.headline.getTranslatedString())) ?? this.name;\n        message.navigation = this.getNavigation();\n        message.textQR =\n            (data.qrcode && data.qrcode.true && (await data.qrcode.true.getString())) ||\n            'WIFI:T:undefined;S:undefined;P:undefined;H:undefined;';\n        const tempstr = message.textQR.split(';');\n        for (let w = 0; w < tempstr.length - 1; w++) {\n            if (tempstr[w].substring(5, 6) == 'T') {\n                tempstr[w].slice(7) == 'undefined'\n                    ? this.log.warn('Adjust data (T) for the QR page under data. Follow the instructions in the wiki.')\n                    : '';\n            }\n            if (tempstr[w].substring(0, 1) == 'S') {\n                tempstr[w].slice(2) == 'undefined'\n                    ? this.log.warn('Adjust data (S) for the QR page under data. Follow the instructions in the wiki.')\n                    : (message.optionalValue1 = tempstr[w].slice(2));\n            }\n            if (tempstr[w].substring(0, 1) == 'P') {\n                message.optionalValue2 = tempstr[w].slice(2);\n            }\n        }\n\n        if (data.pwdHidden && (await data.pwdHidden.getBoolean())) {\n            message.type2 = 'switch';\n            message.iconColor1 =\n                data.setSwitch && data.setSwitch.setValue1 && (await data.setSwitch.setValue1.getBoolean())\n                    ? '7490'\n                    : '53248';\n            message.iconId2 = '';\n            message.displayName2 =\n                data.setSwitch && data.setSwitch.setValue1 && (await data.setSwitch.setValue1.getBoolean())\n                    ? 'Wlan enabled'\n                    : 'Wlan disabled';\n            message.internalName2 = 'switch';\n            message.optionalValue2 =\n                data.setSwitch && data.setSwitch.setValue1 && (await data.setSwitch.setValue1.getBoolean()) ? '1' : '0';\n        }\n\n        this.sendToPanel(this.getMessage(message));\n    }\n\n    private getMessage(_message: Partial<pages.PageQRMessage>): string {\n        let result: pages.PageQRMessage = PageQRMessageDefault;\n        result = Object.assign(result, _message) as pages.PageQRMessage;\n        return getPayload(\n            'entityUpd',\n            result.headline,\n            result.navigation,\n            result.textQR,\n            result.type1,\n            result.internalName1,\n            result.iconId1,\n            result.iconColor1,\n            result.displayName1,\n            result.optionalValue1,\n            result.type2,\n            result.internalName2,\n            result.iconId2,\n            result.iconColor2,\n            result.displayName2,\n            result.optionalValue2,\n        );\n    }\n\n    protected async onStateTrigger(_id: string): Promise<void> {\n        this.adapter.setTimeout(() => this.update(), 50);\n    }\n    /**\n     *a\n     * @param _event\n     * @returns\n     */\n    async onButtonEvent(_event: IncomingEvent): Promise<void> {\n        const button = _event.action;\n        const value = _event.opt;\n        if (!this.items || this.items.card !== 'cardQR') return;\n        this.log.info(`button: ${button} value ${value}`);\n        if (pages.isQRButtonEvent(button)) {\n            if (this.items.data.setSwitch && this.items.data.setSwitch.setValue1) {\n                this.items.data.setSwitch.setValue1.setStateFlip();\n            }\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
