{
  "version": 3,
  "sources": ["../../../src/lib/pages/pageQR.ts"],
  "sourcesContent": ["import { Page } from '../classes/Page';\nimport { type PageInterface } from '../classes/PageInterface';\nimport { getPayload, getPayloadRemoveTilde } from '../const/tools';\nimport type * as pages from '../types/pages';\nimport * as convertColorScaleBest from '../types/function-and-const';\nimport type { IncomingEvent } from '../types/types';\nimport type { QREntry } from '../types/adminShareConfig';\n\nconst PageQRMessageDefault: pages.PageQRMessage = {\n    event: 'entityUpd',\n    headline: 'Page QR',\n    navigation: 'button~bSubPrev~~~~~button~bSubNext~~~~',\n    textQR: 'disabled', //textQR\n    type1: 'disabled', //type -> text or switch\n    internalName1: '~', //internalName\n    iconId1: '~', //iconId\n    iconColor1: '~', //iconColor\n    displayName1: '~', //displayName\n    optionalValue1: '~', //optionalValue\n    type2: 'disabled', //type2 -> text or switch\n    internalName2: '~', //internalName2\n    iconId2: '~', //iconId2\n    iconColor2: '~', //iconColor2\n    displayName2: '~', //displayName2\n    optionalValue2: '~', //optionalvalue2\n};\n\n/**\n * untested\n */\nexport class PageQR extends Page {\n    items: pages.cardQRDataItems | undefined;\n    index: number = 0;\n\n    constructor(config: PageInterface, options: pages.PageBase) {\n        if (config.card !== 'cardQR') {\n            return;\n        }\n        super(config, options);\n        if (options.config && options.config.card == 'cardQR') {\n            this.config = options.config;\n        } else {\n            throw new Error('Missing config!');\n        }\n        this.index = this.config.index;\n        this.minUpdateInterval = 1000;\n    }\n\n    async init(): Promise<void> {\n        const config = structuredClone(this.config);\n        // search states for mode auto\n        const tempConfig: Partial<pages.cardQRDataItemOptions> =\n            this.enums || this.dpInit\n                ? await this.basePanel.statesControler.getDataItemsFromAuto(this.dpInit, config, undefined, this.enums)\n                : config;\n        // create Dataitems\n        //this.log.debug(JSON.stringify(tempConfig));\n        const tempItem: Partial<pages.cardQRDataItems> = await this.basePanel.statesControler.createDataItems(\n            tempConfig,\n            this,\n        );\n        if (tempItem) {\n            tempItem.card = 'cardQR';\n        }\n        this.items = tempItem as pages.cardQRDataItems;\n        await super.init();\n    }\n\n    /**\n     *\n     * @returns //R\u00FCcksprung\n     */\n    public async update(): Promise<void> {\n        if (!this.visibility) {\n            return;\n        }\n        const message: Partial<pages.PageQRMessage> = {};\n        const config = this.adapter.config.pageConfig?.[this.index] as QREntry | undefined;\n        if (this.items && config != null && config.card === 'cardQR') {\n            const items = this.items;\n\n            message.headline = this.library.getTranslation(\n                (items.data.headline && (await items.data.headline.getString())) ?? config.headline ?? '',\n            );\n            message.navigation = this.getNavigation();\n\n            switch (config.selType) {\n                case 0:\n                    this.log.debug(`qrType = FREE`);\n                    message.textQR = config.SSIDURLTEL;\n                    message.optionalValue1 = '';\n                    break;\n                case 1: {\n                    this.log.debug(`qrType = wifi`);\n                    const pass = config.qrPass || '';\n                    message.textQR = `WIFI:T:${config.wlantype};S:${config.SSIDURLTEL};P:${pass};${config.wlanhidden ? `H:${config.wlanhidden}` : `H:`};`;\n                    message.optionalValue1 = config.SSIDURLTEL;\n                    break;\n                }\n                case 2:\n                    this.log.debug(`qrType = url`);\n                    message.textQR = `URL:${config.SSIDURLTEL}`;\n                    message.optionalValue1 = config.SSIDURLTEL;\n                    break;\n                case 3:\n                    this.log.debug(`qrType = Telephone`);\n                    message.textQR = `TEL:${config.SSIDURLTEL}`;\n                    message.optionalValue1 = config.SSIDURLTEL;\n                    break;\n                default:\n                    this.log.debug(`qrType = none`);\n                    this.sendToPanel(this.getMessage(message), false);\n                    return;\n            }\n\n            if (this.pageItems) {\n                const pageItems = this.pageItems.filter(a => a && a.dataItems);\n                if (pageItems.length > 2) {\n                    this.log.warn(`Bad config -> too many page items`);\n                }\n\n                for (let a = 0; a < pageItems.length; a++) {\n                    const temp = pageItems[a];\n                    if (temp) {\n                        const arr = (await temp.getPageItemPayload()).split('~');\n                        this.log.debug(`0: ${arr[0]} 1: ${arr[1]} 2: ${arr[2]} 3: ${arr[3]} 4: ${arr[4]} 5: ${arr[5]}`);\n                        switch (a) {\n                            case 0:\n                                message.type1 = arr[0];\n                                message.displayName1 = arr[4];\n                                message.internalName1 = arr[1];\n                                message.iconId1 = arr[2];\n                                message.iconColor1 = arr[3];\n                                break;\n                            case 1:\n                                message.type2 = arr[0] == 'button' ? 'switch' : 'text';\n                                message.displayName2 = arr[4];\n                                message.internalName2 = arr[1];\n                                message.iconId2 = arr[2];\n                                message.iconColor2 = arr[3];\n                                message.optionalValue2 = arr[0] == 'button' ? arr[5] : config.pwdhidden ? '' : arr[5];\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        if (message.textQR) {\n            this.log.debug(`textQR: ${message.textQR}`);\n        }\n        this.sendToPanel(this.getMessage(message), false);\n    }\n\n    private getMessage(_message: Partial<pages.PageQRMessage>): string {\n        let result: pages.PageQRMessage = PageQRMessageDefault;\n        result = { ...result, ..._message } as pages.PageQRMessage;\n        return getPayload(\n            getPayloadRemoveTilde('entityUpd', result.headline),\n            result.navigation,\n            getPayloadRemoveTilde(\n                result.textQR,\n                result.type1,\n                result.internalName1,\n                result.iconId1,\n                result.iconColor1,\n                result.displayName1,\n                result.optionalValue1,\n                result.type2,\n                result.internalName2,\n                result.iconId2,\n                result.iconColor2,\n                result.displayName2,\n                result.optionalValue2,\n            ),\n        );\n    }\n\n    protected async onStateTrigger(_id: string): Promise<void> {\n        if (this.unload || this.adapter.unload) {\n            return;\n        }\n        this.adapter.setTimeout(() => this.update(), 50);\n    }\n    /**\n     *a\n     *\n     * @param _event //ButtonEvent z.B. bExit, buttonpress2\n     * @returns //R\u00FCcksprung\n     */\n    async onButtonEvent(_event: IncomingEvent): Promise<void> {\n        const button = _event.action;\n        const value = _event.opt;\n        if (!this.items || this.items.card !== 'cardQR') {\n            return;\n        }\n        this.log.debug(`action: ${button}, value: ${value}`);\n        if (convertColorScaleBest.isQRButtonEvent(button)) {\n            // @ts-expect-error du solltest das nicht l\u00F6schen aus der adapter config wegen sp\u00E4terer konvertierung\n            if (this.adapter.config.pageQRdata[this.index]) {\n                if (\n                    this.pageItems &&\n                    this.pageItems[_event.id as any] &&\n                    this.pageItems[_event.id as any]!.config &&\n                    this.pageItems[_event.id as any]!.config!.type == 'button'\n                ) {\n                    await this.pageItems[_event.id as any]!.onCommand('switch', value);\n                }\n            }\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
