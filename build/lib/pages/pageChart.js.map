{
  "version": 3,
  "sources": ["../../../src/lib/pages/pageChart.ts"],
  "sourcesContent": ["import type { ConfigManager } from '../classes/config-manager';\nimport { Page } from '../classes/Page';\nimport { type PageInterface } from '../classes/PageInterface';\nimport { Color } from '../const/Color';\nimport { getIconEntryColor, getPayload } from '../const/tools';\nimport type { NspanelLovelaceUi } from '../types/NspanelLovelaceUi';\nimport type * as pages from '../types/pages';\nimport type { IncomingEvent } from '../types/types';\n\nconst PageChartMessageDefault: pages.PageChartMessage = {\n    event: 'entityUpd',\n    headline: 'Page Chart',\n    navigation: 'button~bSubPrev~~~~~button~bSubNext~~~~',\n    color: '', //Balkenfarbe\n    text: '', //Bezeichnung y Achse\n    ticks: [], //Werte y Achse\n    value: '', //Werte x Achse\n};\n\n/**\n * untested\n */\nexport class PageChart extends Page {\n    items: pages.cardChartDataItems | undefined;\n    index: number = 0;\n    private step: number = 1;\n    private headlinePos: number = 0;\n    private titelPos: number = 0;\n    private nextArrow: boolean = false;\n\n    constructor(config: PageInterface, options: pages.PageBaseConfig) {\n        if (config.card !== 'cardChart') {\n            return;\n        }\n        super(config, options);\n        if (options.config && options.config.card == 'cardChart') {\n            this.config = options.config;\n        } else {\n            throw new Error('Missing config!');\n        }\n        this.index = this.config.index;\n        this.minUpdateInterval = 2000;\n    }\n\n    async init(): Promise<void> {\n        const config = structuredClone(this.config);\n        // search states for mode auto\n        const tempConfig: Partial<pages.cardChartDataItemOptions> =\n            this.enums || this.dpInit\n                ? await this.panel.statesControler.getDataItemsFromAuto(this.dpInit, config, undefined, this.enums)\n                : config;\n        // create Dataitems\n        //this.log.debug(JSON.stringify(tempConfig));\n        const tempItem: Partial<pages.cardChartDataItems> = await this.panel.statesControler.createDataItems(\n            tempConfig,\n            this,\n        );\n        if (tempItem) {\n            tempItem.card = 'cardChart';\n        }\n        this.items = tempItem as pages.cardChartDataItems;\n        await super.init();\n    }\n\n    /**\n     *\n     * @returns // TODO: remove this\n     */\n    public async update(): Promise<void> {\n        if (!this.visibility) {\n            return;\n        }\n        const message: Partial<pages.PageChartMessage> = {};\n        const config = this.adapter.config.pageChartdata[this.index];\n        if (this.items && config != null) {\n            const items = this.items;\n\n            message.headline = (items.data.headline && (await items.data.headline.getTranslatedString())) ?? this.name;\n            message.navigation = this.getNavigation();\n            message.color = await getIconEntryColor(items.data.color, true, Color.White);\n            message.text = (items.data.text && (await items.data.text.getString())) ?? '';\n            message.value = (items.data.value && (await items.data.value.getString())) ?? '';\n            message.ticks = [];\n            const ticks = items.data.ticks && (await items.data.ticks.getObject());\n            if (ticks && Array.isArray(ticks)) {\n                message.ticks = ticks;\n            } else if (message.value) {\n                const timeValueRegEx = /~\\d+:(\\d+)/g;\n                const sorted: number[] = [...(message.value.matchAll(timeValueRegEx) || [])]\n                    .map(x => parseFloat(x[1]))\n                    .sort((x, y) => (x < y ? -1 : 1));\n                const minValue = sorted[0];\n                const maxValue = sorted[sorted.length - 1];\n                const tick = Math.max(Number(((maxValue - minValue) / 5).toFixed()), 10);\n                let currentTick = minValue - tick;\n                while (currentTick < maxValue + tick) {\n                    message.ticks.push(String(currentTick));\n                    currentTick += tick;\n                }\n            }\n        }\n        if (message.value) {\n            this.log.debug(message.value);\n        }\n        if (message.ticks) {\n            this.log.debug(`Ticks: ${message.ticks.join(',')}`);\n        }\n        this.sendToPanel(this.getMessage(message), false);\n    }\n\n    static async getChartPageConfig(\n        adapter: NspanelLovelaceUi,\n        index: number,\n        configManager: ConfigManager,\n    ): Promise<pages.PageBaseConfig> {\n        const config = adapter.config.pageChartdata[index];\n        let stateExistValue = '';\n        let stateExistTicks = '';\n        if (config) {\n            if (await configManager.existsState(config.setStateForValues)) {\n                stateExistValue = config.setStateForValues;\n            }\n            if (await configManager.existsState(config.setStateForTicks)) {\n                stateExistTicks = config.setStateForTicks;\n            }\n\n            const result: pages.PageBaseConfig = {\n                uniqueID: config.pageName,\n                alwaysOn: config.alwaysOnDisplay ? 'always' : 'none',\n                config: {\n                    card: 'cardChart',\n                    index: index,\n                    data: {\n                        headline: { type: 'const', constVal: config.headline || '' },\n                        text: { type: 'const', constVal: config.txtlabelYAchse || '' },\n                        color: { true: { color: { type: 'const', constVal: Color.Yellow } } },\n                        ticks: { type: 'triggered', dp: stateExistTicks },\n                        value: { type: 'triggered', dp: stateExistValue },\n                    },\n                },\n                pageItems: [],\n            };\n            return result;\n        }\n        throw new Error('No config for cardQR found');\n    }\n\n    private getMessage(_message: Partial<pages.PageChartMessage>): string {\n        let result: pages.PageChartMessage = PageChartMessageDefault;\n        result = Object.assign(result, _message) as pages.PageChartMessage;\n        return getPayload(\n            'entityUpd',\n            result.headline,\n            result.navigation,\n            result.color,\n            result.text,\n            result.ticks.join(':'),\n            result.value,\n        );\n        return '';\n    }\n\n    protected async onStateTrigger(_id: string): Promise<void> {\n        if (this.unload) {\n            return;\n        }\n        this.adapter.setTimeout(() => this.update(), 50);\n    }\n\n    async onButtonEvent(_event: IncomingEvent): Promise<void> {\n        //if (event.page && event.id && this.pageItems) {\n        //    this.pageItems[event.id as any].setPopupAction(event.action, event.opt);\n        //}\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
