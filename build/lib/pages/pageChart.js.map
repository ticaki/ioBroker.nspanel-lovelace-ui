{
  "version": 3,
  "sources": ["../../../src/lib/pages/pageChart.ts"],
  "sourcesContent": ["import type { ConfigManager } from '../classes/config-manager';\nimport { Page } from '../classes/Page';\nimport { type PageInterface } from '../classes/PageInterface';\nimport { Color } from '../const/Color';\nimport { getIconEntryColor, getPayload } from '../const/tools';\nimport type { NspanelLovelaceUi } from '../types/NspanelLovelaceUi';\nimport type * as pages from '../types/pages';\nimport type { IncomingEvent } from '../types/types';\n\nconst PageChartMessageDefault: pages.PageChartMessage = {\n    event: 'entityUpd',\n    headline: 'Page Chart',\n    navigation: 'button~bSubPrev~~~~~button~bSubNext~~~~',\n    color: '', //Balkenfarbe\n    text: '', //Bezeichnung y Achse\n    ticks: [], //Werte y Achse\n    value: '', //Werte x Achse\n};\n\n/**\n * untested\n */\nexport class PageChart extends Page {\n    items: pages.cardChartDataItems | undefined;\n    index: number = 0;\n    card: 'cardChart' | 'cardLChart' = 'cardChart';\n    private checkState: boolean = true;\n    protected adminConfig = this.adapter.config.pageChartdata[this.index];\n\n    constructor(config: PageInterface, options: pages.PageBaseConfig) {\n        if (config.card !== 'cardChart' && config.card !== 'cardLChart') {\n            return;\n        }\n        super(config, options);\n        if (options.config && (options.config.card == 'cardChart' || options.config.card == 'cardLChart')) {\n            this.config = options.config;\n        } else {\n            throw new Error('Missing config!');\n        }\n        this.index = this.config.index;\n        this.minUpdateInterval = 2000;\n    }\n\n    async init(): Promise<void> {\n        const config = structuredClone(this.config);\n        // search states for mode auto\n        const tempConfig: Partial<pages.cardChartDataItemOptions> =\n            this.enums || this.dpInit\n                ? await this.panel.statesControler.getDataItemsFromAuto(this.dpInit, config, undefined, this.enums)\n                : config;\n        // create Dataitems\n        //this.log.debug(JSON.stringify(tempConfig));\n        const tempItem: Partial<pages.cardChartDataItems> = await this.panel.statesControler.createDataItems(\n            tempConfig,\n            this,\n        );\n        if (tempItem) {\n            tempItem.card = this.card;\n        }\n        this.items = tempItem as pages.cardChartDataItems;\n        await super.init();\n    }\n\n    /**\n     *\n     * @returns // TODO: remove this\n     */\n    public async update(): Promise<void> {\n        if (!this.visibility) {\n            return;\n        }\n        const message: Partial<pages.PageChartMessage> = {};\n        message.navigation = this.getNavigation();\n        message.headline = `Error`;\n\n        if (this.checkState) {\n            if (this.items && this.adminConfig != null) {\n                const items = this.items;\n                const { valuesChart, ticksChart } = await this.getChartData();\n\n                message.headline =\n                    (items.data.headline && (await items.data.headline.getTranslatedString())) ?? this.name;\n                message.color = await getIconEntryColor(items.data.color, true, Color.White);\n                message.text = (items.data.text && (await items.data.text.getString())) ?? '';\n                message.value = valuesChart;\n                message.ticks = ticksChart;\n            }\n            if (message.value) {\n                this.log.debug(`Value: ${message.value}`);\n            }\n            if (message.ticks) {\n                this.log.debug(`Ticks: ${message.ticks.join(',')}`);\n            }\n        }\n        this.sendToPanel(this.getMessage(message), false);\n    }\n\n    static async getChartPageConfig(\n        adapter: NspanelLovelaceUi,\n        index: number,\n        configManager: ConfigManager,\n    ): Promise<pages.PageBaseConfig> {\n        const config = adapter.config.pageChartdata[index];\n        let stateExistValue = '';\n        let stateExistTicks = '';\n        if (config) {\n            if (await configManager.existsState(config.setStateForValues)) {\n                stateExistValue = config.setStateForValues;\n            }\n            if (await configManager.existsState(config.setStateForTicks)) {\n                stateExistTicks = config.setStateForTicks;\n            }\n\n            const result: pages.PageBaseConfig = {\n                uniqueID: config.pageName,\n                alwaysOn: config.alwaysOnDisplay ? 'always' : 'none',\n                config: {\n                    card: 'cardChart',\n                    index: index,\n                    data: {\n                        headline: { type: 'const', constVal: config.headline || '' },\n                        text: { type: 'const', constVal: config.txtlabelYAchse || '' },\n                        color: { true: { color: { type: 'const', constVal: config.chart_color } } },\n                        ticks: { type: 'triggered', dp: stateExistTicks },\n                        value: { type: 'triggered', dp: stateExistValue },\n                    },\n                },\n                pageItems: [],\n            };\n            return result;\n        }\n        throw new Error('No config for cardChart found');\n    }\n\n    protected async getChartData(): Promise<{ ticksChart: string[]; valuesChart: string }> {\n        const ticksChart: string[] = [];\n        const valuesChart = '';\n\n        return { ticksChart, valuesChart };\n    }\n\n    protected async getDataFromDB(_id: string, _rangeHours: number, _instance: string): Promise<any[]> {\n        return new Promise((resolve, reject) => {\n            const timeout = this.adapter.setTimeout(() => {\n                reject(new Error(`fehler im system`));\n            }, 5000);\n            this.adapter.sendTo(\n                _instance,\n                'getHistory',\n                {\n                    id: _id,\n                    options: {\n                        start: Date.now() - _rangeHours * 60 * 60 * 1000,\n                        end: Date.now(),\n                        //count: _rangeHours,\n                        //limit: _rangeHours,\n                        //ignoreNull: true,\n                        aggregate: 'onchange',\n                    },\n                },\n                result => {\n                    if (timeout) {\n                        this.adapter.clearTimeout(timeout);\n                    }\n                    if (result && 'result' in result) {\n                        if (Array.isArray(result.result)) {\n                            for (let i = 0; i < result.result.length; i++) {\n                                console.log(\n                                    `Value: ${result.result[i].val}, ISO-Timestring: ${new Date(result.result[i].ts).toISOString()}`,\n                                );\n                            }\n                            resolve(result.result);\n                        }\n                    }\n                    reject(new Error('No data found'));\n                },\n            );\n        });\n    }\n\n    private getMessage(_message: Partial<pages.PageChartMessage>): string {\n        let result: pages.PageChartMessage = PageChartMessageDefault;\n        result = Object.assign(result, _message) as pages.PageChartMessage;\n        return getPayload(\n            'entityUpd',\n            result.headline,\n            result.navigation,\n            result.color,\n            result.text,\n            result.ticks.join(':'),\n            result.value,\n        );\n    }\n\n    protected async onVisibilityChange(val: boolean): Promise<void> {\n        // check if value state exists\n        if (val) {\n            const state = await this.adapter.getForeignStateAsync(this.adminConfig.setStateForValues);\n            if (state && state.val) {\n                this.log.debug(`State ${this.adminConfig.setStateForValues} for Values is exists`);\n            } else {\n                this.log.debug(`State ${this.adminConfig.setStateForValues} for Values is not exists`);\n                this.checkState = false;\n            }\n        }\n        if (val && this.adminConfig.selInstanceDataSource === 1) {\n            const state = await this.adapter.getForeignStateAsync(\n                `system.adapter.${this.adminConfig.selInstance}.alive`,\n            );\n            if (state && state.val) {\n                this.log.debug(`Instance ${this.adminConfig.selInstance} is alive`);\n            } else {\n                this.log.debug(`Instance ${this.adminConfig.selInstance} is not alive`);\n                this.checkState = false;\n            }\n        } else if (val && this.adminConfig.selInstanceDataSource === 0) {\n            // check if ticks state exists\n            const state = await this.adapter.getForeignStateAsync(this.adminConfig.setStateForTicks);\n            if (state && state.val) {\n                this.log.debug(`State ${this.adminConfig.setStateForTicks} for Ticks is exists`);\n            } else {\n                this.log.debug(`State ${this.adminConfig.setStateForTicks} for ticks is not exists`);\n                this.checkState = false;\n            }\n        }\n        await super.onVisibilityChange(val);\n    }\n\n    protected async onStateTrigger(_id: string): Promise<void> {\n        if (this.unload) {\n            return;\n        }\n        this.adapter.setTimeout(() => this.update(), 50);\n    }\n\n    async onButtonEvent(_event: IncomingEvent): Promise<void> {\n        //if (event.page && event.id && this.pageItems) {\n        //    this.pageItems[event.id as any].setPopupAction(event.action, event.opt);\n        //}\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
