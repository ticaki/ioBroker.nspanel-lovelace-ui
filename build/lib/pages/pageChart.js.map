{
  "version": 3,
  "sources": ["../../../src/lib/pages/pageChart.ts"],
  "sourcesContent": ["import type { ConfigManager } from '../classes/config-manager';\nimport { Page } from '../classes/Page';\nimport { type PageInterface } from '../classes/PageInterface';\nimport { Color } from '../const/Color';\nimport { getIconEntryColor, getPayload } from '../const/tools';\nimport type { NspanelLovelaceUi } from '../types/NspanelLovelaceUi';\nimport type * as pages from '../types/pages';\nimport type { IncomingEvent } from '../types/types';\n\nconst PageChartMessageDefault: pages.PageChartMessage = {\n    event: 'entityUpd',\n    headline: 'Page Chart',\n    navigation: 'button~bSubPrev~~~~~button~bSubNext~~~~',\n    color: '', //Balkenfarbe\n    text: '', //Bezeichnung y Achse\n    ticks: [], //Werte y Achse\n    value: '', //Werte x Achse\n};\n\n/**\n * untested\n */\nexport class PageChart extends Page {\n    items: pages.cardChartDataItems | undefined;\n    index: number = 0;\n    private step: number = 1;\n    private headlinePos: number = 0;\n    private titelPos: number = 0;\n    private nextArrow: boolean = false;\n    adminConfig = this.adapter.config.pageChartdata[this.index];\n\n    constructor(config: PageInterface, options: pages.PageBaseConfig) {\n        if (config.card !== 'cardChart') {\n            return;\n        }\n        super(config, options);\n        if (options.config && options.config.card == 'cardChart') {\n            this.config = options.config;\n        } else {\n            throw new Error('Missing config!');\n        }\n        this.index = this.config.index;\n        this.minUpdateInterval = 2000;\n    }\n\n    async init(): Promise<void> {\n        const config = structuredClone(this.config);\n        // search states for mode auto\n        const tempConfig: Partial<pages.cardChartDataItemOptions> =\n            this.enums || this.dpInit\n                ? await this.panel.statesControler.getDataItemsFromAuto(this.dpInit, config, undefined, this.enums)\n                : config;\n        // create Dataitems\n        //this.log.debug(JSON.stringify(tempConfig));\n        const tempItem: Partial<pages.cardChartDataItems> = await this.panel.statesControler.createDataItems(\n            tempConfig,\n            this,\n        );\n        if (tempItem) {\n            tempItem.card = 'cardChart';\n        }\n        this.items = tempItem as pages.cardChartDataItems;\n        await super.init();\n    }\n\n    /**\n     *\n     * @returns // TODO: remove this\n     */\n    public async update(): Promise<void> {\n        if (!this.visibility) {\n            return;\n        }\n        const message: Partial<pages.PageChartMessage> = {};\n        if (this.items && this.adminConfig != null) {\n            const items = this.items;\n            const chartData = await this.getChartData();\n\n            message.headline = (items.data.headline && (await items.data.headline.getTranslatedString())) ?? this.name;\n            message.navigation = this.getNavigation();\n            message.color = await getIconEntryColor(items.data.color, true, Color.White);\n            message.text = (items.data.text && (await items.data.text.getString())) ?? '';\n            message.value = chartData.values;\n            message.ticks = chartData.ticks;\n        }\n        if (message.value) {\n            this.log.debug(message.value);\n        }\n        if (message.ticks) {\n            this.log.debug(`Ticks: ${message.ticks.join(',')}`);\n        }\n        this.sendToPanel(this.getMessage(message), false);\n    }\n\n    static async getChartPageConfig(\n        adapter: NspanelLovelaceUi,\n        index: number,\n        configManager: ConfigManager,\n    ): Promise<pages.PageBaseConfig> {\n        const config = adapter.config.pageChartdata[index];\n        let stateExistValue = '';\n        let stateExistTicks = '';\n        if (config) {\n            if (await configManager.existsState(config.setStateForValues)) {\n                stateExistValue = config.setStateForValues;\n            }\n            if (await configManager.existsState(config.setStateForTicks)) {\n                stateExistTicks = config.setStateForTicks;\n            }\n\n            const result: pages.PageBaseConfig = {\n                uniqueID: config.pageName,\n                alwaysOn: config.alwaysOnDisplay ? 'always' : 'none',\n                config: {\n                    card: 'cardChart',\n                    index: index,\n                    data: {\n                        headline: { type: 'const', constVal: config.headline || '' },\n                        text: { type: 'const', constVal: config.txtlabelYAchse || '' },\n                        color: { true: { color: { type: 'const', constVal: config.chart_color } } },\n                        ticks: { type: 'triggered', dp: stateExistTicks },\n                        value: { type: 'triggered', dp: stateExistValue },\n                    },\n                },\n                pageItems: [],\n            };\n            return result;\n        }\n        throw new Error('No config for cardChart found');\n    }\n\n    private async getChartData(): Promise<{ ticks: string[]; values: string }> {\n        let ticks: string[] = [];\n        let values = '';\n\n        if (this.items && this.adminConfig != null) {\n            const items = this.items;\n\n            switch (this.adminConfig.selInstanceDataSource) {\n                case 0: {\n                    // oldScriptVersion\n                    const tempTicks = (items.data.ticks && (await items.data.ticks.getObject())) ?? [];\n                    const tempValues = (items.data.value && (await items.data.value.getString())) ?? '';\n                    if (tempTicks && Array.isArray(tempTicks)) {\n                        ticks = tempTicks;\n                    } else if (typeof tempValues === 'string') {\n                        const timeValueRegEx = /~\\d+:(\\d+)/g;\n                        const sorted: number[] = [...(tempValues.matchAll(timeValueRegEx) || [])]\n                            .map(x => parseFloat(x[1]))\n                            .sort((x, y) => (x < y ? -1 : 1));\n                        const minValue = sorted[0];\n                        const maxValue = sorted[sorted.length - 1];\n                        const tick = Math.max(Number(((maxValue - minValue) / 5).toFixed()), 10);\n                        let currentTick = minValue - tick;\n                        while (currentTick < maxValue + tick) {\n                            ticks.push(String(currentTick));\n                            currentTick += tick;\n                        }\n                    }\n                    if (tempValues && typeof tempValues === 'string') {\n                        values = tempValues;\n                    }\n                    break;\n                }\n                case 1: {\n                    // AdapterVersion\n                    ticks = [];\n                    values = '';\n                    try {\n                        const dbDaten = await this.getDataFromDB(\n                            this.adminConfig.setStateForValues,\n                            this.adminConfig.rangeHours,\n                            this.adminConfig.selInstance,\n                        );\n                        if (dbDaten && Array.isArray(dbDaten)) {\n                            this.log.debug(`Data from DB: ${JSON.stringify(dbDaten)}`);\n                        }\n                    } catch (error) {\n                        this.log.error(`Error fetching data from DB: ${error}`);\n                    }\n                    break;\n                }\n                default:\n                    break;\n            }\n        }\n\n        return { ticks, values };\n    }\n\n    private async getDataFromDB(_id: string, _rangeHours: number, _instance: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                this.adapter.sendTo(\n                    _instance,\n                    'getHistory',\n                    {\n                        id: _id,\n                        options: {\n                            start: Date.now() - _rangeHours * 60 * 60 * 1000,\n                            end: Date.now(),\n                            aggregate: 'onchange',\n                        },\n                    },\n                    function (result) {\n                        if (result && 'result' in result) {\n                            if (Array.isArray(result.result)) {\n                                for (let i = 0; i < result.result.length; i++) {\n                                    console.log(\n                                        `Value: ${result.result[i].val}, ISO-Timestring: ${new Date(result.result[i].ts).toISOString()}`,\n                                    );\n                                }\n                                if (Array.isArray(result.result)) {\n                                    resolve(result.result);\n                                } else {\n                                    reject(new Error('Unexpected result format'));\n                                }\n                            } else {\n                                reject(new Error('No data found'));\n                            }\n                        }\n                    },\n                );\n            }, 1000);\n        });\n    }\n\n    private getMessage(_message: Partial<pages.PageChartMessage>): string {\n        let result: pages.PageChartMessage = PageChartMessageDefault;\n        result = Object.assign(result, _message) as pages.PageChartMessage;\n        return getPayload(\n            'entityUpd',\n            result.headline,\n            result.navigation,\n            result.color,\n            result.text,\n            result.ticks.join(':'),\n            result.value,\n        );\n    }\n\n    protected async onVisibilityChange(val: boolean): Promise<void> {\n        if (val && this.adminConfig.selInstanceDataSource === 1) {\n            this.adapter\n                .getForeignStateAsync(`system.adapter.${this.adminConfig.selInstance}.alive`)\n                .then(state => {\n                    if (state && state.val) {\n                        this.log.debug(`Instance ${this.adminConfig.selInstance} is alive`);\n                    } else {\n                        this.log.debug(`Instance ${this.adminConfig.selInstance} is not alive`);\n                    }\n                })\n                .catch(e => {\n                    this.log.debug(`Instance ${this.adminConfig.selInstance} not found: ${e}`);\n                });\n        } else if (this.adminConfig.selInstanceDataSource === 0) {\n            // check if value state exists\n            this.adapter\n                .getForeignStateAsync(this.adminConfig.setStateForValues)\n                .then(state => {\n                    if (state && state.val) {\n                        this.log.debug(`State ${this.adminConfig.setStateForValues} for Values is exists`);\n                    } else {\n                        this.log.debug(`State ${this.adminConfig.setStateForValues} for Values is not exists`);\n                    }\n                })\n                .catch(e => {\n                    this.log.debug(`State ${this.adminConfig.setStateForValues} not found: ${e}`);\n                });\n            // check if ticks state exists\n            this.adapter\n                .getForeignStateAsync(this.adminConfig.setStateForTicks)\n                .then(state => {\n                    if (state && state.val) {\n                        this.log.debug(`State ${this.adminConfig.setStateForTicks} for Ticks is exists`);\n                    } else {\n                        this.log.debug(`State ${this.adminConfig.setStateForTicks} for ticks is not exists`);\n                    }\n                })\n                .catch(e => {\n                    this.log.debug(`State ${this.adminConfig.setStateForTicks} not found: ${e}`);\n                });\n        }\n        await super.onVisibilityChange(val);\n    }\n\n    protected async onStateTrigger(_id: string): Promise<void> {\n        if (this.unload) {\n            return;\n        }\n        this.adapter.setTimeout(() => this.update(), 50);\n    }\n\n    async onButtonEvent(_event: IncomingEvent): Promise<void> {\n        //if (event.page && event.id && this.pageItems) {\n        //    this.pageItems[event.id as any].setPopupAction(event.action, event.opt);\n        //}\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
