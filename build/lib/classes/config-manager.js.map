{
  "version": 3,
  "sources": ["../../../src/lib/classes/config-manager.ts"],
  "sourcesContent": ["import { BaseClass } from './library';\nimport type { NspanelLovelaceUi } from '../types/NspanelLovelaceUi';\nimport type * as typePageItem from '../types/type-pageItem';\nimport type * as Types from '../types/types';\nimport { Color, type RGB } from '../const/Color';\nimport type * as pages from '../types/pages';\nimport {\n    checkedDatapoints,\n    type checkedDatapointsUnion,\n    defaultConfig,\n    isButton,\n    isConfig,\n    type mydps,\n    type requiredDatapoints,\n    requiredScriptDataPoints,\n} from '../const/config-manager-const';\nimport type { panelConfigPartial } from '../controller/panel';\nimport { exhaustiveCheck } from '../types/pages';\nimport { isNavigationItemConfigArray, type NavigationItemConfig } from './navigation';\nimport { getStringOrArray } from '../tools/readme';\nimport { PageQR } from '../pages/pageQR';\nimport { StatesControler } from '../controller/states-controller';\n\nexport class ConfigManager extends BaseClass {\n    //private test: ConfigManager.DeviceState;\n    colorOn: RGB = Color.On;\n    colorOff: RGB = Color.Off;\n    colorDefault: RGB = Color.Off;\n    dontWrite: boolean = false;\n    extraConfigLogging: boolean = false;\n\n    readonly scriptVersion = '0.7.0';\n    readonly breakingVersion = '0.6.0';\n\n    statesController: StatesControler;\n    constructor(adapter: NspanelLovelaceUi, dontWrite: boolean = false) {\n        super(adapter, 'config-manager');\n        this.dontWrite = dontWrite;\n        this.statesController = new StatesControler(adapter);\n    }\n\n    /**\n     * Sets the script configuration for the panel.\n     *\n     * @param configuration - The configuration object to set.\n     * @returns - A promise that resolves to an array of messages indicating the result of the operation.\n     *\n     * This method performs the following steps:\n     * 1. Merges the provided configuration with the default configuration.\n     * 2. Validates the configuration.\n     * 3. Checks if the script version meets the required version.\n     * 4. Configures the panel settings including topic, name, and colors.\n     * 5. Configures the screensaver and pages.\n     * 6. Sets up navigation for the panel.\n     * 7. Ensures unique page names and handles duplicates.\n     * 8. Updates the adapter's foreign object with the new configuration.\n     *\n     * If any errors occur during the process, they are logged and included in the returned messages..\n     */\n    async setScriptConfig(configuration: any): Promise<{\n        messages: string[];\n        panelConfig:\n            | (Omit<Partial<panelConfigPartial>, 'pages' | 'navigation'> & {\n                  navigation: NavigationItemConfig[];\n                  pages: pages.PageBaseConfig[];\n              })\n            | undefined;\n    }> {\n        configuration.advancedOptions = Object.assign(\n            defaultConfig.advancedOptions || {},\n            configuration.advancedOptions || {},\n        );\n        const config = Object.assign(defaultConfig, configuration);\n        if (!config || !isConfig(config, this.adapter)) {\n            this.log.error(\n                `Invalid configuration from Script: ${config ? config.panelName || config.panelTopic || JSON.stringify(config) : 'undefined'}`,\n            );\n            return { messages: ['Invalid configuration'], panelConfig: undefined };\n        }\n        let messages: string[] = [];\n\n        this.log.info(`Start converting configuration for ${config.panelName || config.panelTopic}`);\n\n        const version = config.version\n            .split('.')\n            .map((item, i) => parseInt(item) * Math.pow(100, 2 - i))\n            .reduce((a, b) => a + b);\n\n        const requiredVersion = this.scriptVersion\n            .split('.')\n            .map((item, i) => parseInt(item) * Math.pow(100, 2 - i))\n            .reduce((a, b) => a + b);\n\n        const breakingVersion = this.breakingVersion\n            .split('.')\n            .map((item, i) => parseInt(item) * Math.pow(100, 2 - i))\n            .reduce((a, b) => a + b);\n\n        if (version < breakingVersion) {\n            messages.push(\n                `Update Script! Panel for Topic: ${config.panelTopic} - Script version ${config.version} is too low! Aborted! Required version is >=${this.breakingVersion}!`,\n            );\n            this.log.error(messages[messages.length - 1]);\n            return { messages: ['Invalid configuration'], panelConfig: undefined };\n        }\n        if (version < requiredVersion) {\n            messages.push(\n                `Update Script! Panel for Topic: ${config.panelTopic} Script version ${config.version} is lower than the required version ${this.scriptVersion}!`,\n            );\n            this.log.warn(messages[messages.length - 1]);\n        } else if (version > requiredVersion) {\n            messages.push(\n                `Update Adapter! Panel for Topic: ${config.panelTopic} Script version ${config.version} is higher than the required version ${this.scriptVersion}!`,\n            );\n            this.log.warn(messages[messages.length - 1]);\n        } else {\n            messages.push(`Panel for Topic: ${config.panelTopic} Script version ${config.version} is correct!`);\n        }\n\n        // start configuration\n        if (config.advancedOptions && config.advancedOptions.extraConfigLogging) {\n            this.extraConfigLogging = true;\n            config.advancedOptions.extraConfigLogging = false;\n        }\n        let panelConfig: Omit<Partial<panelConfigPartial>, 'pages' | 'navigation'> & {\n            navigation: NavigationItemConfig[];\n            pages: pages.PageBaseConfig[];\n        } = { pages: [], navigation: [] };\n\n        if (!config.panelTopic) {\n            this.log.error(`Required field panelTopic is missing in ${config.panelName || 'unknown'}!`);\n            messages.push('Required field panelTopic is missing');\n            return { messages: messages, panelConfig: undefined };\n        }\n        panelConfig.updated = true;\n        if (config.panelTopic.endsWith('.cmnd.CustomSend')) {\n            panelConfig.topic = config.panelTopic.split('.').slice(0, -2).join('.');\n        } else {\n            panelConfig.topic = config.panelTopic;\n        }\n        if (config.panelName) {\n            panelConfig.name = config.panelName;\n        } else {\n            panelConfig.name = `NSPanel-${config.panelTopic}`;\n        }\n        if (config.defaultOnColor) {\n            this.colorOn = Color.convertScriptRGBtoRGB(config.defaultOnColor);\n        }\n        if (config.defaultOffColor) {\n            this.colorOff = Color.convertScriptRGBtoRGB(config.defaultOffColor);\n        }\n\n        // Screensaver configuration\n        try {\n            const screensaver = await this.getScreensaverConfig(config);\n            if (\n                screensaver &&\n                screensaver.config &&\n                (screensaver.config.card === 'screensaver' ||\n                    screensaver.config.card === 'screensaver2' ||\n                    screensaver.config.card === 'screensaver3') &&\n                config.advancedOptions\n            ) {\n                screensaver.config.screensaverSwipe = !!config.advancedOptions.screensaverSwipe;\n                screensaver.config.screensaverIndicatorButtons = !!config.advancedOptions.screensaverIndicatorButtons;\n            }\n            panelConfig.pages.push(screensaver);\n        } catch (error: any) {\n            messages.push(`Screensaver configuration error - ${error}`);\n            this.log.warn(messages[messages.length - 1]);\n        }\n        if (config.pages.length > 0) {\n            for (let a = 0; a < config.pages.length; a++) {\n                const page = config.pages[a];\n                let uniqueID = '';\n                if (page.type === undefined) {\n                    uniqueID = page.native.uniqueID || '';\n                } else {\n                    uniqueID = page.uniqueName || '';\n                }\n                if (uniqueID === '') {\n                    continue;\n                }\n                panelConfig.navigation.push({\n                    name: uniqueID,\n                    left: undefined,\n                    right: undefined,\n                    page: uniqueID,\n                });\n            }\n            const nav = panelConfig.navigation;\n            if (nav && nav.length > 0) {\n                const index = nav.findIndex(item => item!.name === 'main');\n                if (index !== -1) {\n                    const item = nav.splice(index, 1)[0];\n                    nav.unshift(item);\n                }\n            }\n            if (panelConfig.navigation.length > 1) {\n                panelConfig.navigation = panelConfig.navigation.filter(item => item != null);\n                panelConfig.navigation = panelConfig.navigation.map((item, index, array) => {\n                    if (index === 0) {\n                        return {\n                            ...item!,\n                            left: { single: array[array.length - 1]!.name },\n                            right: { single: array[index + 1]!.name },\n                        };\n                    } else if (index === array.length - 1) {\n                        return {\n                            ...item!,\n                            left: { single: array[index - 1]!.name },\n                            right: { single: array[0]!.name },\n                        };\n                    }\n                    return {\n                        ...item!,\n                        left: { single: array[index - 1]!.name },\n                        right: { single: array[index + 1]!.name },\n                    };\n                });\n                panelConfig.navigation[panelConfig.navigation.length - 1]!.right = { single: '///service' };\n                panelConfig.navigation[0]!.left = { single: '///service' };\n            }\n        }\n        const names: string[] = [];\n        let double = false;\n        for (const page of config.pages) {\n            if (page && page.type !== undefined) {\n                if (names.includes(page.uniqueName)) {\n                    double = true;\n                    this.log.error(messages[messages.length - 1]);\n                    messages.push(`Abort - double uniqueName ${page.uniqueName} in config!`);\n                } else {\n                    names.push(page.uniqueName);\n                }\n            }\n        }\n        if (double) {\n            return { messages, panelConfig: undefined };\n        }\n\n        ({ panelConfig, messages } = await this.getPageConfig(config, panelConfig, messages));\n\n        // merge both navigations. Remove duplicates from panelConfig.navigation\n        const nav1 = config.navigation as NavigationItemConfig[];\n        const nav2 = panelConfig.navigation;\n        if (nav1 != null && isNavigationItemConfigArray(nav1) && isNavigationItemConfigArray(nav2)) {\n            panelConfig.navigation = nav1.concat(nav2);\n            panelConfig.navigation = panelConfig.navigation.filter(\n                (a, p) => a && panelConfig.navigation.findIndex(b => b && a && b.name === a.name) === p,\n            );\n        }\n        // buttons\n        if (isButton(config.buttonLeft)) {\n            panelConfig.buttons = panelConfig.buttons || { left: null, right: null };\n            panelConfig.buttons.left = config.buttonLeft;\n        } else {\n            messages.push(`Button left wrong configured!`);\n            this.log.warn(messages[messages.length - 1]);\n        }\n        if (isButton(config.buttonRight)) {\n            panelConfig.buttons = panelConfig.buttons || { left: null, right: null };\n            panelConfig.buttons.right = config.buttonRight;\n        } else {\n            messages.push(`Button right wrong configured!`);\n            this.log.warn(messages[messages.length - 1]);\n        }\n\n        if (panelConfig.pages.length === 0) {\n            messages.push(`No pages found! This needs to be fixed!`);\n            this.log.error(messages[messages.length - 1]);\n        } else if (panelConfig.navigation.length === 0) {\n            messages.push(`No navigation items found! This needs to be fixed!`);\n            this.log.error(messages[messages.length - 1]);\n        } else if (panelConfig.navigation.findIndex(item => item && item.name === 'main') === -1) {\n            messages.push(`No entry found for \u2018main\u2019 in the navigation!`);\n            this.log.warn(messages[messages.length - 1]);\n        }\n\n        const obj = await this.adapter.getForeignObjectAsync(this.adapter.namespace);\n\n        if (obj && !this.dontWrite) {\n            if (!obj.native.scriptConfigRaw || !Array.isArray(obj.native.scriptConfigRaw)) {\n                obj.native.scriptConfigRaw = [];\n            }\n\n            // remove duplicates\n            obj.native.scriptConfigRaw = obj.native.scriptConfigRaw.filter(\n                (item: any, i: number) =>\n                    obj.native.scriptConfigRaw.findIndex((item2: any) => item2.panelTopic === item.panelTopic) === i,\n            );\n            // remove config with same topic and different name\n            obj.native.scriptConfigRaw = obj.native.scriptConfigRaw.filter(\n                (item: any) => item.panelTopic !== configuration.panelTopic,\n            );\n            obj.native.scriptConfigRaw = obj.native.scriptConfigRaw.filter(\n                (item: any) => this.adapter.config.panels.findIndex(a => a.topic === item.panelTopic) !== -1,\n            );\n\n            obj.native.scriptConfig = obj.native.scriptConfig || [];\n            // remove duplicates\n            obj.native.scriptConfig = obj.native.scriptConfig.filter(\n                (item: any, i: number) =>\n                    obj.native.scriptConfig.findIndex((item2: any) => item2.topic === item.topic) === i,\n            );\n            // remove config with same topic and different name\n            obj.native.scriptConfig = obj.native.scriptConfig.filter((item: any) => item.topic !== panelConfig.topic);\n            obj.native.scriptConfig = obj.native.scriptConfig.filter(\n                (item: any) => this.adapter.config.panels.findIndex(a => a.topic === item.topic) !== -1,\n            );\n\n            obj.native.scriptConfigRaw.push(configuration);\n            obj.native.scriptConfig.push(panelConfig);\n            await this.adapter.setForeignObjectAsync(this.adapter.namespace, obj);\n        }\n        messages.push(`done`);\n        return { messages: messages.map(a => a.replaceAll('Error: ', '')), panelConfig };\n    }\n\n    async getPageConfig(\n        config: ScriptConfig.Config,\n        panelConfig: Omit<Partial<panelConfigPartial>, 'pages' | 'navigation'> & {\n            navigation: NavigationItemConfig[];\n            pages: pages.PageBaseConfig[];\n        },\n        messages: string[],\n    ): Promise<{\n        panelConfig: Omit<Partial<panelConfigPartial>, 'pages' | 'navigation'> & {\n            navigation: NavigationItemConfig[];\n            pages: pages.PageBaseConfig[];\n        };\n        messages: string[];\n    }> {\n        if (panelConfig.pages === undefined) {\n            panelConfig.pages = [];\n        }\n        if (config.pages) {\n            for (const page of config.pages.concat(config.subPages || [])) {\n                if (!page) {\n                    continue;\n                }\n                if (page.type === undefined && page.native) {\n                    if ((config.subPages || []).includes(page)) {\n                        const left = page.prev || page.parent || undefined;\n                        const right = page.next || page.home || undefined;\n                        if (left || right) {\n                            const navItem: NavigationItemConfig = {\n                                name: page.uniqueName,\n                                left: left ? (page.prev ? { single: left } : { double: left }) : undefined,\n                                right: right ? (page.next ? { single: right } : { double: right }) : undefined,\n                                page: page.uniqueName,\n                            };\n                            panelConfig.navigation.push(navItem);\n                        }\n                    }\n                    if (page.heading) {\n                        page.native.config = page.native.config || {};\n                        page.native.config.data = page.native.config.data || {};\n                        page.native.config.data.headline = await this.getFieldAsDataItemConfig(page.heading);\n                    }\n                    panelConfig.pages.push(page.native);\n                    continue;\n                }\n                if (\n                    page.type !== 'cardGrid' &&\n                    page.type !== 'cardGrid2' &&\n                    page.type !== 'cardGrid3' &&\n                    page.type !== 'cardEntities' &&\n                    page.type !== 'cardThermo' &&\n                    page.type !== 'cardQR'\n                ) {\n                    const msg = `${page.heading || 'unknown'} with card type ${page.type} not implemented yet!`;\n                    messages.push(msg);\n                    this.log.warn(msg);\n                    continue;\n                }\n                if (!page.uniqueName) {\n                    messages.push(\n                        `Page ${'heading' in page && page.heading ? page.heading : page.type || 'unknown'} has no uniqueName!`,\n                    );\n                    this.log.error(messages[messages.length - 1]);\n                    continue;\n                }\n\n                if ((config.subPages || []).includes(page)) {\n                    const left = page.prev || page.parent || undefined;\n                    const right = page.next || page.home || undefined;\n                    if (left || right) {\n                        const navItem: NavigationItemConfig = {\n                            name: page.uniqueName,\n                            left: left ? (page.prev ? { single: left } : { double: left }) : undefined,\n                            right: right ? (page.next ? { single: right } : { double: right }) : undefined,\n                            page: page.uniqueName,\n                        };\n                        panelConfig.navigation.push(navItem);\n                    }\n                }\n\n                if (page.type === 'cardQR') {\n                    const index = this.adapter.config.pageQRdata.findIndex(item => item.pageName === page.uniqueName);\n                    if (index === -1) {\n                        messages.push(`No pageQRdata found for ${page.uniqueName}`);\n                        this.log.warn(messages[messages.length - 1]);\n                        continue;\n                    }\n                    panelConfig.pages.push(await PageQR.getQRPageConfig(this.adapter, index, this));\n                    continue;\n                }\n\n                let gridItem: pages.PageBaseConfig = {\n                    dpInit: '',\n                    alwaysOn: 'none',\n                    uniqueID: page.uniqueName || '',\n                    useColor: false,\n                    config: {\n                        card: page.type,\n                        data: {\n                            headline: await this.getFieldAsDataItemConfig(page.heading || ''),\n                        },\n                    },\n                    pageItems: [],\n                };\n                if (\n                    gridItem.config.card === 'cardGrid' ||\n                    gridItem.config.card === 'cardGrid2' ||\n                    gridItem.config.card === 'cardGrid3' ||\n                    gridItem.config.card === 'cardEntities'\n                ) {\n                    gridItem.config.scrollType = 'page';\n                }\n                try {\n                    if (page.type === 'cardThermo') {\n                        ({ gridItem, messages } = await this.getPageThermo(page, gridItem, messages));\n                    }\n                } catch (error: any) {\n                    messages.push(\n                        `Configuration error in page ${page.heading || 'unknown'} with uniqueName ${page.uniqueName} - ${error}`,\n                    );\n                    this.log.warn(messages[messages.length - 1]);\n                    continue;\n                }\n                if (page.items) {\n                    for (const item of page.items) {\n                        if (!item) {\n                            continue;\n                        }\n                        try {\n                            const temp = await this.getPageItemConfig(item, page, messages);\n                            const itemConfig = temp.itemConfig;\n                            messages = temp.messages;\n                            if (itemConfig && gridItem.pageItems) {\n                                gridItem.pageItems.push(itemConfig);\n                            }\n                        } catch (error: any) {\n                            messages.push(\n                                `Configuration error in page ${page.heading || 'unknown'} with uniqueName ${page.uniqueName} - ${error}`,\n                            );\n                            this.log.warn(messages[messages.length - 1]);\n                        }\n                    }\n                    panelConfig.pages.push(gridItem);\n                }\n            }\n        }\n        return { panelConfig, messages };\n    }\n\n    async getPageThermo(\n        page: ScriptConfig.PageThermo,\n        gridItem: pages.PageBaseConfig,\n        messages: string[],\n    ): Promise<{ gridItem: pages.PageBaseConfig; messages: string[] }> {\n        if (page.type !== 'cardThermo' || !gridItem.config || gridItem.config.card !== 'cardThermo') {\n            return { gridItem, messages };\n        }\n        if (!page.items || !page.items[0]) {\n            const msg = `${page.uniqueName}: Thermo page has no item or item 0 has no id!`;\n            messages.push(msg);\n            this.log.warn(msg);\n            return { gridItem, messages };\n        }\n        const item = page.items[0];\n        if (!item || !item.id || item.id.endsWith('.')) {\n            const msg = `${page.uniqueName} id: ${page.items[0].id} is invalid!`;\n            messages.push(msg);\n            this.log.error(msg);\n            return { gridItem, messages };\n        }\n\n        const o = await this.adapter.getForeignObjectAsync(item.id);\n        if (!o || !o.common || !o.common.role) {\n            const msg = `${page.uniqueName} id: ${page.items[0].id} has a invalid object!`;\n            messages.push(msg);\n            this.log.error(msg);\n            return { gridItem, messages };\n        }\n        const role = o.common.role as ScriptConfig.channelRoles;\n\n        if (role !== 'thermostat' && role !== 'airCondition') {\n            const msg = `${page.uniqueName} id: ${page.items[0].id} role '${role}' not supported for cardThermo!`;\n            messages.push(msg);\n            this.log.error(msg);\n            return { gridItem, messages };\n        }\n        let foundedStates: checkedDatapointsUnion | undefined;\n        try {\n            foundedStates = await this.searchDatapointsForItems(requiredScriptDataPoints, role, item.id, messages);\n        } catch {\n            return { gridItem, messages };\n        }\n        gridItem.dpInit = item.id;\n        gridItem = {\n            ...gridItem,\n            card: 'cardThermo' as const,\n            alwaysOn: 'none',\n            useColor: false,\n            items: undefined,\n            config: {\n                card: 'cardThermo',\n                data: {\n                    headline: await this.getFieldAsDataItemConfig(page.heading || 'thermostat'),\n                    mixed1: {\n                        value: { type: 'const', constVal: 'Temperature' },\n                    },\n                    mixed2: foundedStates[role].ACTUAL\n                        ? {\n                              value: foundedStates[role].ACTUAL,\n                              factor: { type: 'const', constVal: 1 },\n                              decimal: { type: 'const', constVal: 1 },\n                              unit: item.unit != null ? await this.getFieldAsDataItemConfig(item.unit) : undefined,\n                          }\n                        : undefined,\n                    mixed3: foundedStates[role].HUMIDITY\n                        ? {\n                              value: { type: 'const', constVal: 'Humidity' },\n                          }\n                        : undefined,\n                    mixed4: foundedStates[role].HUMIDITY\n                        ? {\n                              value: foundedStates[role].HUMIDITY,\n                              factor: { type: 'const', constVal: 1 },\n                              decimal: { type: 'const', constVal: 0 },\n                              unit: { type: 'const', constVal: '%' },\n                          }\n                        : undefined,\n                    tempStep: item.stepValue != null ? await this.getFieldAsDataItemConfig(item.stepValue) : undefined,\n                    minTemp: item.minValue != null ? await this.getFieldAsDataItemConfig(item.minValue) : undefined,\n                    maxTemp: item.maxValue != null ? await this.getFieldAsDataItemConfig(item.maxValue) : undefined,\n                    unit: item.unit != null ? await this.getFieldAsDataItemConfig(item.unit) : undefined,\n                    set1: foundedStates[role].SET,\n                    set2: foundedStates[role].SET2,\n                },\n            },\n            pageItems: [],\n        };\n        gridItem.pageItems = gridItem.pageItems || [];\n        //Automatic\n        if (foundedStates[role].AUTOMATIC && !foundedStates[role].MANUAL) {\n            foundedStates[role].MANUAL = JSON.parse(JSON.stringify(foundedStates[role].AUTOMATIC));\n            if (foundedStates[role].MANUAL!.type === 'triggered') {\n                foundedStates[role].MANUAL!.read = 'return !val';\n                foundedStates[role].MANUAL!.write = 'return !val';\n            }\n        } else if (!foundedStates[role].AUTOMATIC && foundedStates[role].MANUAL) {\n            foundedStates[role].AUTOMATIC = JSON.parse(JSON.stringify(foundedStates[role].MANUAL));\n            if (foundedStates[role].AUTOMATIC!.type === 'triggered') {\n                foundedStates[role].AUTOMATIC!.read = 'return !val';\n                foundedStates[role].AUTOMATIC!.write = 'return !val';\n            }\n        }\n\n        if (foundedStates[role].AUTOMATIC) {\n            gridItem.pageItems.push({\n                role: 'button',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'alpha-a-circle' },\n                            color: { type: 'const', constVal: Color.activated },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'alpha-a-circle-outline' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: foundedStates[role].AUTOMATIC,\n                        set: foundedStates[role].AUTOMATIC,\n                    },\n                },\n            });\n        }\n        //Manual\n        if (foundedStates[role].MANUAL) {\n            gridItem.pageItems.push({\n                role: 'button',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'alpha-m-circle' },\n                            color: { type: 'const', constVal: Color.activated },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'alpha-m-circle-outline' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: foundedStates[role].MANUAL,\n                        set: foundedStates[role].MANUAL,\n                    },\n                },\n            });\n        }\n\n        if (foundedStates[role].POWER) {\n            gridItem.pageItems.push({\n                role: 'button',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'power-standby' },\n                            color: { type: 'const', constVal: Color.activated },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'power-standby' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: foundedStates[role].POWER,\n                        set: foundedStates[role].POWER,\n                    },\n                },\n            });\n        }\n        if (foundedStates[role].OFF) {\n            gridItem.pageItems.push({\n                role: 'button',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'power-off' },\n                            color: { type: 'const', constVal: Color.activated },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'power-off' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: foundedStates[role].OFF,\n                        set: foundedStates[role].OFF,\n                    },\n                },\n            });\n        }\n        //Boost\n        if (foundedStates[role].BOOST) {\n            gridItem.pageItems.push({\n                role: 'button',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'fast-forward-60' },\n                            color: { type: 'const', constVal: Color.activated },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'fast-forward-60' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: foundedStates[role].BOOST,\n                        set: foundedStates[role].BOOST,\n                    },\n                },\n            });\n        }\n        //Fenster\n        if (foundedStates[role].WINDOWOPEN) {\n            gridItem.pageItems.push({\n                role: 'indicator',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'window-open-variant' },\n                            color: { type: 'const', constVal: Color.open },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'window-closed-variant' },\n                            color: { type: 'const', constVal: Color.close },\n                        },\n                    },\n                    entity1: {\n                        value: foundedStates[role].WINDOWOPEN,\n                    },\n                },\n            });\n        }\n        //Party\n        if (foundedStates[role].PARTY) {\n            gridItem.pageItems.push({\n                role: 'button',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'party-popper' },\n                            color: { type: 'const', constVal: Color.activated },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'party-popper' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: foundedStates[role].PARTY,\n                        set: foundedStates[role].PARTY,\n                    },\n                },\n            });\n        }\n        if (foundedStates[role].MAINTAIN) {\n            gridItem.pageItems.push({\n                role: 'indicator',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'account-wrench' },\n                            color: { type: 'const', constVal: Color.bad },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'account-wrench' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: foundedStates[role].MAINTAIN,\n                    },\n                },\n            });\n        }\n        if (foundedStates[role].UNREACH) {\n            gridItem.pageItems.push({\n                role: 'indicator',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'wifi-off' },\n                            color: { type: 'const', constVal: Color.bad },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'wifi' },\n                            color: { type: 'const', constVal: Color.good },\n                        },\n                    },\n                    entity1: {\n                        value: foundedStates[role].UNREACH,\n                    },\n                },\n            });\n        }\n        if (foundedStates[role].MAINTAIN) {\n            gridItem.pageItems.push({\n                role: 'indicator',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'account-wrench' },\n                            color: { type: 'const', constVal: Color.true },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'account-wrench' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: foundedStates[role].MAINTAIN,\n                    },\n                },\n            });\n        }\n        if (foundedStates[role].LOWBAT) {\n            gridItem.pageItems.push({\n                role: 'indicator',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'battery-low' },\n                            color: { type: 'const', constVal: Color.bad },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'battery-high' },\n                            color: { type: 'const', constVal: Color.good },\n                        },\n                    },\n                    entity1: {\n                        value: foundedStates[role].LOWBAT,\n                    },\n                },\n            });\n        }\n        if (foundedStates[role].ERROR) {\n            gridItem.pageItems.push({\n                role: 'indicator',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'alert-circle' },\n                            color: { type: 'const', constVal: Color.bad },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'alert-circle' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: foundedStates[role].ERROR,\n                    },\n                },\n            });\n        }\n        if (foundedStates[role].VACATION) {\n            gridItem.pageItems.push({\n                role: 'indicator',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'palm-tree' },\n                            color: { type: 'const', constVal: Color.activated },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'palm-tree' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: foundedStates[role].VACATION,\n                    },\n                },\n            });\n        }\n        if (foundedStates[role].WORKING) {\n            gridItem.pageItems.push({\n                role: 'indicator',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'briefcase-check' },\n                            color: { type: 'const', constVal: Color.activated },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'briefcase-check' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: foundedStates[role].WORKING,\n                    },\n                },\n            });\n        }\n        if (item.setThermoAlias) {\n            if (item.popupThermoMode1 && item.setThermoAlias[0] && (await this.existsState(item.setThermoAlias[0]))) {\n                gridItem.pageItems.push({\n                    role: '',\n                    type: 'input_sel',\n                    dpInit: '',\n                    data: {\n                        entityInSel: {\n                            value: { type: 'triggered', dp: item.setThermoAlias[0] },\n                        },\n                        color: {\n                            true: await this.getIconColor(item.onColor, this.colorOn),\n                            false: await this.getIconColor(item.onColor, this.colorOn),\n                        },\n                        headline: item.name ? await this.getFieldAsDataItemConfig(item.name) : undefined,\n                        valueList: { type: 'const', constVal: item.popupThermoMode1 },\n                    },\n                });\n            }\n            if (item.popupThermoMode2 && item.setThermoAlias[1] && (await this.existsState(item.setThermoAlias[1]))) {\n                gridItem.pageItems.push({\n                    role: '',\n                    type: 'input_sel',\n                    dpInit: '',\n                    data: {\n                        entityInSel: {\n                            value: { type: 'triggered', dp: item.setThermoAlias[1] },\n                        },\n                        color: {\n                            true: await this.getIconColor(item.onColor, this.colorOn),\n                            false: await this.getIconColor(item.onColor, this.colorOn),\n                        },\n                        headline: item.name ? await this.getFieldAsDataItemConfig(item.name) : undefined,\n                        valueList: { type: 'const', constVal: item.popupThermoMode2 },\n                    },\n                });\n            }\n            if (item.popupThermoMode3 && item.setThermoAlias[2] && (await this.existsState(item.setThermoAlias[2]))) {\n                gridItem.pageItems.push({\n                    role: '',\n                    type: 'input_sel',\n                    dpInit: '',\n                    data: {\n                        entityInSel: {\n                            value: { type: 'triggered', dp: item.setThermoAlias[2] },\n                        },\n                        color: {\n                            true: await this.getIconColor(item.onColor, this.colorOn),\n                            false: await this.getIconColor(item.onColor, this.colorOn),\n                        },\n                        headline: item.name ? await this.getFieldAsDataItemConfig(item.name) : undefined,\n                        valueList: { type: 'const', constVal: item.popupThermoMode3 },\n                    },\n                });\n            }\n        }\n\n        return { gridItem, messages };\n    }\n\n    async getPageNaviItemConfig(\n        item: ScriptConfig.PageItem,\n        page: ScriptConfig.PageType,\n    ): Promise<typePageItem.PageItemDataItemsOptions | undefined> {\n        if (\n            !(\n                page.type === 'cardGrid' ||\n                page.type === 'cardGrid2' ||\n                page.type === 'cardGrid3' ||\n                page.type === 'cardEntities'\n            ) ||\n            !item.targetPage ||\n            !item.navigate\n        ) {\n            this.log.warn(`Page type ${page.type} not supported for navigation item!`);\n            return undefined;\n        }\n        let itemConfig: typePageItem.PageItemDataItemsOptions | undefined = undefined;\n        const specialRole: pages.DeviceRole =\n            page.type === 'cardGrid' || page.type === 'cardGrid2' || page.type === 'cardGrid3'\n                ? 'textNotIcon'\n                : 'iconNotText';\n\n        const obj = item.id && !item.id.endsWith('.') ? await this.adapter.getForeignObjectAsync(item.id) : undefined;\n        if (obj && (!obj.common || !obj.common.role)) {\n            throw new Error(`Role missing in ${page.uniqueName}.${item.id}!`);\n        }\n        const role = obj ? (obj.common.role as ScriptConfig.channelRoles) : null;\n        const commonName =\n            obj && obj.common\n                ? typeof obj.common.name === 'string'\n                    ? obj.common.name\n                    : obj.common.name[this.library.getLocalLanguage()]\n                : undefined;\n\n        const getButtonsTextTrue = async (\n            item: ScriptConfig.PageItem,\n            def1: string,\n        ): Promise<Types.DataItemsOptions> => {\n            return item.buttonText\n                ? await this.getFieldAsDataItemConfig(item.buttonText)\n                : (await this.existsState(`${item.id}.BUTTONTEXT`))\n                  ? { type: 'triggered', dp: `${item.id}.BUTTONTEXT` }\n                  : await this.getFieldAsDataItemConfig(item.name || commonName || def1);\n        };\n        const getButtonsTextFalse = async (\n            item: ScriptConfig.PageItem,\n            def1: string = '',\n        ): Promise<Types.DataItemsOptions> => {\n            return item.buttonTextOff\n                ? await this.getFieldAsDataItemConfig(item.buttonTextOff)\n                : (await this.existsState(`${item.id}.BUTTONTEXTOFF`))\n                  ? { type: 'triggered', dp: `${item.id}.BUTTONTEXTOFF` }\n                  : item.buttonText\n                    ? await this.getFieldAsDataItemConfig(item.buttonText)\n                    : (await this.existsState(`${item.id}.BUTTONTEXT`))\n                      ? { type: 'triggered', dp: `${item.id}.BUTTONTEXT` }\n                      : await this.getFieldAsDataItemConfig(item.name || commonName || def1);\n        };\n        const text = {\n            true: await getButtonsTextTrue(item, role || ''),\n            false: await getButtonsTextFalse(item, role || ''),\n        };\n\n        if (!item.id) {\n            return {\n                type: 'button',\n                data: {\n                    setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    icon: {\n                        true: {\n                            value: {\n                                type: 'const',\n                                constVal: item.icon || 'gesture-tap-button',\n                            },\n                            color: await this.getIconColor(item.onColor, this.colorOn),\n                        },\n                        scale: item.colorScale ? { type: 'const', constVal: item.colorScale } : undefined,\n                        maxBri: undefined,\n                        minBri: undefined,\n                    },\n                    text1: {\n                        true: { type: 'const', constVal: 'press' },\n                    },\n                    text: text,\n                },\n            };\n        }\n\n        if ((obj && (!obj.common || !obj.common.role)) || role == null) {\n            throw new Error(`Role missing in ${page.uniqueName}.${item.id}!`);\n        }\n        if (!requiredScriptDataPoints[role]) {\n            this.log.warn(`Channel role ${role} not supported!`);\n            throw new Error(`Channel role ${role} not supported!`);\n        }\n        const foundedStates: checkedDatapointsUnion = await this.searchDatapointsForItems(\n            requiredScriptDataPoints,\n            role,\n            item.id,\n            [],\n        );\n\n        // check if role and types are correct\n        /*if (role) {\n            if (!(await this.checkRequiredDatapoints(role, item))) {\n                return;\n            }\n        }*/\n\n        switch (role) {\n            case 'socket':\n            case 'light':\n            case 'dimmer':\n            case 'hue':\n            case 'rgb':\n            case 'rgbSingle':\n            case 'ct': {\n                const tempItem: typePageItem.PageItemDataItemsOptions = {\n                    type: 'button',\n                    role: role === 'rgb' ? 'rgbThree' : role,\n                    data: {\n                        icon: {\n                            true: {\n                                value: {\n                                    type: 'const',\n                                    constVal: item.icon || (role === 'socket' ? 'power-socket-de' : 'lightbulb'),\n                                },\n                                color: await this.getIconColor(item.onColor, this.colorOn),\n                            },\n                            false: {\n                                value: {\n                                    type: 'const',\n                                    constVal:\n                                        item.icon2 ||\n                                        item.icon ||\n                                        (role === 'socket' ? 'power-socket-de' : 'lightbulb-outline'),\n                                },\n                                color: await this.getIconColor(item.offColor, this.colorOff),\n                            },\n                            scale: item.colorScale ? { type: 'const', constVal: item.colorScale } : undefined,\n                            maxBri: undefined,\n                            minBri: undefined,\n                        },\n                        text1: {\n                            true: { type: 'const', constVal: 'on' },\n                            false: { type: 'const', constVal: 'off' },\n                        },\n                        text: text,\n                        entity1:\n                            role === 'dimmer' || role == 'hue'\n                                ? { value: foundedStates[role].ON_ACTUAL }\n                                : { value: foundedStates[role].ACTUAL },\n\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                itemConfig = tempItem;\n                break;\n            }\n            case undefined:\n            case 'button': {\n                const tempItem: typePageItem.PageItemDataItemsOptions = {\n                    type: 'button',\n                    role: 'button',\n                    data: {\n                        icon: {\n                            true: {\n                                value: {\n                                    type: 'const',\n                                    constVal: item.icon || 'gesture-tap-button',\n                                },\n                                color: await this.getIconColor(item.onColor, this.colorOn),\n                            },\n                            false: {\n                                value: {\n                                    type: 'const',\n                                    constVal: item.icon2 || item.icon || 'gesture-tap-button',\n                                },\n                                color: await this.getIconColor(item.offColor, this.colorOff),\n                            },\n                            scale: item.colorScale ? { type: 'const', constVal: item.colorScale } : undefined,\n                            maxBri: undefined,\n                            minBri: undefined,\n                        },\n                        text1: {\n                            true: { type: 'const', constVal: 'on' },\n                            false: { type: 'const', constVal: 'off' },\n                        },\n                        text: text,\n                        entity1: role === undefined ? undefined : { value: foundedStates[role].ACTUAL },\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                itemConfig = tempItem;\n                break;\n            }\n            case 'value.humidity':\n            case 'humidity': {\n                let commonUnit = '';\n                if (foundedStates[role].ACTUAL && foundedStates[role].ACTUAL.dp) {\n                    const o = await this.adapter.getForeignObjectAsync(foundedStates[role].ACTUAL.dp);\n                    if (o && o.common && o.common.unit) {\n                        commonUnit = o.common.unit;\n                    }\n                }\n\n                itemConfig = {\n                    type: 'button',\n                    dpInit: item.id,\n                    role: specialRole,\n                    color: {\n                        true: await this.getIconColor(item.onColor, this.colorOn),\n                        false: await this.getIconColor(item.offColor, this.colorOff),\n                        scale: item.colorScale ? item.colorScale : undefined,\n                    },\n                    icon: {\n                        true: item.icon ? { type: 'const', constVal: item.icon } : undefined,\n                        false: item.icon2 ? { type: 'const', constVal: item.icon2 } : undefined,\n                    },\n                    template: 'button.humidity',\n                    data: {\n                        entity1: {\n                            value: foundedStates[role].ACTUAL,\n                            unit:\n                                item.unit || commonUnit\n                                    ? { type: 'const', constVal: item.unit || commonUnit }\n                                    : undefined,\n                        },\n                        text: text,\n\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                break;\n            }\n            case 'value.temperature':\n            case 'temperature':\n            case 'thermostat': {\n                let commonUnit = '';\n                if (foundedStates[role].ACTUAL && foundedStates[role].ACTUAL.dp) {\n                    const o = await this.adapter.getForeignObjectAsync(foundedStates[role].ACTUAL.dp);\n                    if (o && o.common && o.common.unit) {\n                        commonUnit = o.common.unit;\n                    }\n                }\n                itemConfig = {\n                    type: 'button',\n                    dpInit: item.id,\n                    role: specialRole,\n                    template: 'button.temperature',\n                    color: {\n                        true: await this.getIconColor(item.onColor, this.colorOn),\n                        false: await this.getIconColor(item.offColor, this.colorOff),\n                        scale: item.colorScale ? item.colorScale : undefined,\n                    },\n                    icon: {\n                        true: item.icon ? { type: 'const', constVal: item.icon } : undefined,\n                        false: item.icon2 ? { type: 'const', constVal: item.icon2 } : undefined,\n                    },\n                    data: {\n                        entity1: {\n                            value: foundedStates[role].ACTUAL,\n                            unit:\n                                item.unit || commonUnit\n                                    ? { type: 'const', constVal: item.unit || commonUnit }\n                                    : undefined,\n                        },\n                        text: text,\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                break;\n            }\n            case 'gate': {\n                if (await this.checkRequiredDatapoints('gate', item, 'feature')) {\n                    itemConfig = {\n                        template: 'text.gate.isOpen',\n                        dpInit: item.id,\n                        type: 'button',\n                        color: {\n                            true: await this.getIconColor(item.onColor, this.colorOn),\n                            false: await this.getIconColor(item.offColor, this.colorOff),\n                            scale: item.colorScale ? item.colorScale : undefined,\n                        },\n                        icon: {\n                            true: item.icon ? { type: 'const', constVal: item.icon } : undefined,\n                            false: item.icon2 ? { type: 'const', constVal: item.icon2 } : undefined,\n                        },\n                        data: {\n                            text: text,\n                            text1: {\n                                true: { type: 'const', constVal: 'opened' },\n                                false: { type: 'const', constVal: 'closed' },\n                            },\n                            entity1: { value: foundedStates[role].ACTUAL },\n\n                            setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                        },\n                    };\n                } else {\n                    itemConfig = {\n                        template: 'text.gate.isOpen',\n                        dpInit: item.id,\n                        type: 'button',\n                        color: {\n                            true: await this.getIconColor(item.onColor, this.colorOn),\n                            false: await this.getIconColor(item.offColor, this.colorOff),\n                            scale: item.colorScale ? item.colorScale : undefined,\n                        },\n                        icon: {\n                            true: item.icon ? { type: 'const', constVal: item.icon } : undefined,\n                            false: item.icon2 ? { type: 'const', constVal: item.icon2 } : undefined,\n                        },\n                        data: {\n                            entity1: { value: foundedStates[role].ACTUAL },\n                            text: text,\n                            text1: {\n                                true: { type: 'const', constVal: 'opened' },\n                                false: { type: 'const', constVal: 'closed' },\n                            },\n                            setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                        },\n                    };\n                }\n                break;\n            }\n            case 'door': {\n                itemConfig = {\n                    template: 'text.door.isOpen',\n                    dpInit: item.id,\n                    type: 'button',\n                    color: {\n                        true: await this.getIconColor(item.onColor, this.colorOn),\n                        false: await this.getIconColor(item.offColor, this.colorOff),\n                        scale: item.colorScale ? item.colorScale : undefined,\n                    },\n                    icon: {\n                        true: item.icon ? { type: 'const', constVal: item.icon } : undefined,\n                        false: item.icon2 ? { type: 'const', constVal: item.icon2 } : undefined,\n                    },\n                    data: {\n                        entity1: { value: foundedStates[role].ACTUAL },\n                        text1: {\n                            true: { type: 'const', constVal: 'opened' },\n                            false: { type: 'const', constVal: 'closed' },\n                        },\n                        text: text,\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                break;\n            }\n            case 'window': {\n                itemConfig = {\n                    template: 'text.window.isOpen',\n                    dpInit: item.id,\n                    type: 'button',\n                    color: {\n                        true: await this.getIconColor(item.onColor, this.colorOn),\n                        false: await this.getIconColor(item.offColor, this.colorOff),\n                        scale: item.colorScale ? item.colorScale : undefined,\n                    },\n                    icon: {\n                        true: item.icon ? { type: 'const', constVal: item.icon } : undefined,\n                        false: item.icon2 ? { type: 'const', constVal: item.icon2 } : undefined,\n                    },\n                    data: {\n                        entity1: { value: foundedStates[role].ACTUAL },\n                        text1: {\n                            true: { type: 'const', constVal: 'opened' },\n                            false: { type: 'const', constVal: 'closed' },\n                        },\n                        text: text,\n\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                break;\n            }\n            case 'motion': {\n                itemConfig = {\n                    template: 'text.motion',\n                    dpInit: item.id,\n                    type: 'button',\n                    color: {\n                        true: await this.getIconColor(item.onColor, this.colorOn),\n                        false: await this.getIconColor(item.offColor, this.colorOff),\n                        scale: item.colorScale ? item.colorScale : undefined,\n                    },\n                    icon: {\n                        true: item.icon ? { type: 'const', constVal: item.icon } : undefined,\n                        false: item.icon2 ? { type: 'const', constVal: item.icon2 } : undefined,\n                    },\n                    data: {\n                        entity1: { value: foundedStates[role].ACTUAL },\n                        text1: {\n                            true: { type: 'const', constVal: 'motion' },\n                            false: { type: 'const', constVal: 'none' },\n                        },\n                        text: text,\n\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                break;\n            }\n            case 'volume': {\n                let commonUnit = '';\n                if (foundedStates[role].ACTUAL && foundedStates[role].ACTUAL.dp) {\n                    const o = await this.adapter.getForeignObjectAsync(foundedStates[role].ACTUAL.dp);\n                    if (o && o.common && o.common.unit) {\n                        commonUnit = o.common.unit;\n                    }\n                }\n                itemConfig = {\n                    template: 'button.volume',\n                    dpInit: item.id,\n                    type: 'button',\n                    color: {\n                        true: await this.getIconColor(item.onColor, this.colorOn),\n                        false: await this.getIconColor(item.offColor, this.colorOff),\n                        scale: item.colorScale ? item.colorScale : undefined,\n                    },\n                    icon: {\n                        true: item.icon ? { type: 'const', constVal: item.icon } : undefined,\n                        false: item.icon2 ? { type: 'const', constVal: item.icon2 } : undefined,\n                    },\n                    data: {\n                        entity1: {\n                            value: foundedStates[role].ACTUAL,\n                            unit:\n                                item.unit || commonUnit\n                                    ? { type: 'const', constVal: item.unit || commonUnit }\n                                    : undefined,\n                        },\n                        text: text,\n\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                break;\n            }\n            case 'warning': {\n                itemConfig = {\n                    template: 'text.warning',\n                    dpInit: item.id,\n                    type: 'button',\n                    color: {\n                        true: await this.getIconColor(item.onColor || `${item.id}.COLORDEC`, this.colorOn),\n                        false: await this.getIconColor(item.offColor || `${item.id}.COLORDEC`, this.colorOff),\n                        scale: item.colorScale ? item.colorScale : undefined,\n                    },\n                    icon: {\n                        true: item.icon ? { type: 'const', constVal: item.icon } : undefined,\n                        false: item.icon2 ? { type: 'const', constVal: item.icon2 } : undefined,\n                    },\n                    data: {\n                        entity1: { value: foundedStates[role].INFO },\n                        text: text,\n\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                break;\n            }\n            case 'info': {\n                itemConfig = {\n                    template: 'text.info',\n                    dpInit: item.id,\n                    type: 'button',\n                    role: 'info',\n                    color: {\n                        true: await this.getIconColor(item.onColor || `${item.id}.COLORDEC`, this.colorOn),\n                        false: await this.getIconColor(item.offColor || `${item.id}.COLORDEC`, this.colorOff),\n                        scale: item.colorScale,\n                    },\n                    icon: {\n                        true: item.icon ? { type: 'const', constVal: item.icon } : undefined,\n                        false: item.icon2\n                            ? { type: 'const', constVal: item.icon2 }\n                            : item.icon\n                              ? { type: 'const', constVal: item.icon }\n                              : undefined,\n                    },\n                    data: {\n                        text: text,\n                        text1: {\n                            true: foundedStates[role].ACTUAL,\n\n                            false: null,\n                        },\n                        entity1: {\n                            value: foundedStates[role].ACTUAL,\n                        },\n\n                        entity2: {\n                            value: foundedStates[role].ACTUAL,\n                        },\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                break;\n            }\n            case 'blind': {\n                itemConfig = {\n                    template: 'text.shutter.navigation',\n                    dpInit: item.id,\n                    type: 'button',\n                    color: {\n                        true: await this.getIconColor(item.onColor || `${item.id}.COLORDEC`, this.colorOn),\n                        false: await this.getIconColor(item.offColor || `${item.id}.COLORDEC`, this.colorOff),\n                        scale: item.colorScale ?? { val_min: 0, val_max: 100 },\n                    },\n                    icon: {\n                        true: item.icon ? { type: 'const', constVal: item.icon } : undefined,\n                        false: item.icon2 ? { type: 'const', constVal: item.icon2 } : undefined,\n                    },\n                    data: {\n                        text1: {\n                            true: { type: 'const', constVal: 'opened' },\n                            false: { type: 'const', constVal: 'closed' },\n                        },\n                        text: text,\n                        entity1: {\n                            value: foundedStates[role].ACTUAL,\n                            minScale: { type: 'const', constVal: item.minValueLevel ?? 0 },\n                            maxScale: { type: 'const', constVal: item.maxValueLevel ?? 100 },\n                        },\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                break;\n            }\n            case 'timeTable':\n                break;\n            case 'airCondition':\n            case 'lock':\n            case 'slider':\n            case 'buttonSensor':\n            case 'level.timer':\n            case 'level.mode.fan': {\n                throw new Error(\n                    `DP: ${page.uniqueName}.${item.id} - Navigation for channel: ${role} not implemented yet!!`,\n                );\n            }\n            default:\n                exhaustiveCheck(role);\n\n                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                throw new Error(`DP: ${page.uniqueName}.${item.id} - Channel role ${role} is not supported!!!`);\n        }\n        return itemConfig;\n    }\n\n    async searchDatapointsForItems(\n        db: requiredDatapoints,\n        role: ScriptConfig.channelRoles,\n        dpInit: string,\n        messages: string[],\n    ): Promise<checkedDatapointsUnion> {\n        const result: checkedDatapointsUnion = JSON.parse(JSON.stringify(checkedDatapoints));\n        let ups = false;\n        if (db[role] && db[role].data && result[role]) {\n            const data = db[role].data;\n            for (const d in data) {\n                const dp = d as keyof typeof data;\n                if (!data[dp] || !this.statesController) {\n                    continue;\n                }\n                const entry = data[dp];\n                if (dp in result[role]) {\n                    const dp2 = dp as mydps;\n                    result[role][dp2] = await this.statesController.getIdbyAuto(\n                        dpInit,\n                        entry.role,\n                        '',\n                        entry.useKey ? new RegExp(`.${dp}$`.replaceAll('.', '\\\\.')) : undefined,\n                        entry.trigger,\n                        entry.writeable,\n                        entry.type,\n                    );\n\n                    if (!result[role][dp2]) {\n                        if (entry.required || this.extraConfigLogging) {\n                            messages.push(\n                                `${entry.required ? 'Required:' : 'Optional:'} ${dp}: ${dpInit}, channel role: ${role}` +\n                                    ` - missing - searching for ${entry.useKey ? `dp end: ${dp}` + ', ' : ''}` +\n                                    `type: ${JSON.stringify(entry.type)}, role: ${JSON.stringify(entry.role)}` +\n                                    `${entry.writeable ? ', common.write: true' : ''}`,\n                            );\n                            if (entry.required) {\n                                ups = true;\n                                this.log.error(messages[messages.length - 1]);\n                            } else {\n                                this.log.info(messages[messages.length - 1]);\n                            }\n                        }\n                    }\n                }\n            }\n            if (ups) {\n                throw new Error('Missing datapoints! check log for details');\n            }\n        } else {\n            throw new Error(`Role ${role} not supported!`);\n        }\n        return result;\n    }\n\n    async getPageItemConfig(\n        item: ScriptConfig.PageItem,\n        page: ScriptConfig.PageType,\n        messages: string[] = [],\n    ): Promise<{ itemConfig: typePageItem.PageItemDataItemsOptions | undefined; messages: string[] }> {\n        let itemConfig: typePageItem.PageItemDataItemsOptions | undefined = undefined;\n        if (item.navigate) {\n            if (!item.targetPage || typeof item.targetPage !== 'string') {\n                throw new Error(`TargetPage missing in ${(item && item.id) || 'no id'}!`);\n            }\n            return { itemConfig: await this.getPageNaviItemConfig(item, page), messages };\n        }\n        if (item.id && !item.id.endsWith('.')) {\n            const obj = await this.adapter.getForeignObjectAsync(item.id);\n            if (obj) {\n                if (!(obj.common && obj.common.role)) {\n                    throw new Error(`Role missing in^${item.id}!`);\n                }\n                const role = obj.common.role as ScriptConfig.channelRoles;\n                // check if role and types are correct\n                if (!requiredScriptDataPoints[role]) {\n                    this.log.warn(`Channel role ${role} not supported!`);\n                    throw new Error(`Channel role ${role} not supported!`);\n                }\n                const foundedStates: checkedDatapointsUnion = await this.searchDatapointsForItems(\n                    requiredScriptDataPoints,\n                    role,\n                    item.id,\n                    messages,\n                );\n                /*if (!(await this.checkRequiredDatapoints(role, item))) {\n                    return { itemConfig: undefined, messages };\n                }*/\n                const specialRole: pages.DeviceRole =\n                    page.type === 'cardGrid' || page.type === 'cardGrid2' || page.type === 'cardGrid3'\n                        ? 'textNotIcon'\n                        : 'iconNotText';\n                const commonName =\n                    typeof obj.common.name === 'string'\n                        ? obj.common.name\n                        : obj.common.name[this.library.getLocalLanguage()];\n\n                const getButtonsTextTrue = async (\n                    item: ScriptConfig.PageItem,\n                    def1: string,\n                ): Promise<Types.DataItemsOptions> => {\n                    return item.buttonText\n                        ? await this.getFieldAsDataItemConfig(item.buttonText)\n                        : (await this.existsState(`${item.id}.BUTTONTEXT`))\n                          ? { type: 'triggered', dp: `${item.id}.BUTTONTEXT` }\n                          : await this.getFieldAsDataItemConfig(item.name || commonName || def1);\n                };\n                const getButtonsTextFalse = async (\n                    item: ScriptConfig.PageItem,\n                    def1: string = '',\n                ): Promise<Types.DataItemsOptions> => {\n                    return item.buttonTextOff\n                        ? await this.getFieldAsDataItemConfig(item.buttonTextOff)\n                        : (await this.existsState(`${item.id}.BUTTONTEXTOFF`))\n                          ? { type: 'triggered', dp: `${item.id}.BUTTONTEXTOFF` }\n                          : item.buttonText\n                            ? await this.getFieldAsDataItemConfig(item.buttonText)\n                            : (await this.existsState(`${item.id}.BUTTONTEXT`))\n                              ? { type: 'triggered', dp: `${item.id}.BUTTONTEXT` }\n                              : await this.getFieldAsDataItemConfig(item.name || commonName || def1);\n                };\n                const text = {\n                    true: await getButtonsTextTrue(item, role || ''),\n                    false: await getButtonsTextFalse(item, role || ''),\n                };\n                const headline = await getButtonsTextTrue(item, role || '');\n\n                switch (role) {\n                    case 'timeTable': {\n                        itemConfig = {\n                            template: 'text.alias.fahrplan.departure',\n                            dpInit: item.id,\n                        };\n                        break;\n                    }\n                    case 'socket':\n                    case 'light': {\n                        const tempItem: typePageItem.PageItemDataItemsOptions = {\n                            type: 'light',\n                            role: 'light',\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: {\n                                            type: 'const',\n                                            constVal:\n                                                item.icon || (role === 'socket' ? 'power-socket-de' : 'lightbulb'),\n                                        },\n                                        color: await this.getIconColor(item.onColor, this.colorOn),\n                                    },\n                                    false: {\n                                        value: {\n                                            type: 'const',\n                                            constVal:\n                                                item.icon2 ||\n                                                (role === 'socket' ? 'power-socket-de' : 'lightbulb-outline'),\n                                        },\n                                        color: await this.getIconColor(item.offColor, this.colorOff),\n                                    },\n                                    scale: item.colorScale ? { type: 'const', constVal: item.colorScale } : undefined,\n                                    maxBri: undefined,\n                                    minBri: undefined,\n                                },\n                                colorMode: { type: 'const', constVal: false },\n                                headline: headline,\n                                entity1: {\n                                    value: foundedStates[role].ACTUAL,\n                                    set: foundedStates[role].SET,\n                                },\n                            },\n                        };\n                        itemConfig = tempItem;\n\n                        break;\n                    }\n\n                    case 'dimmer': {\n                        const tempItem: typePageItem.PageItemDataItemsOptions = {\n                            type: 'light',\n                            role: 'dimmer',\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon || 'lightbulb',\n                                        },\n                                        color: await this.getIconColor(item.onColor, this.colorOn),\n                                    },\n                                    false: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon2 || 'lightbulb-outline',\n                                        },\n                                        color: await this.getIconColor(item.offColor, this.colorOff),\n                                    },\n                                    scale: item.colorScale ? { type: 'const', constVal: item.colorScale } : undefined,\n                                    maxBri: item.maxValueBrightness\n                                        ? { type: 'const', constVal: item.maxValueBrightness }\n                                        : undefined,\n                                    minBri: item.minValueBrightness\n                                        ? { type: 'const', constVal: item.minValueBrightness }\n                                        : undefined,\n                                },\n                                colorMode: item.colormode ? { type: 'const', constVal: !!item.colormode } : undefined,\n                                dimmer: {\n                                    value: foundedStates[role].ACTUAL,\n                                    set: foundedStates[role].SET,\n                                    maxScale: item.maxValueBrightness\n                                        ? { type: 'const', constVal: item.maxValueBrightness }\n                                        : undefined,\n                                    minScale: item.minValueBrightness\n                                        ? { type: 'const', constVal: item.minValueBrightness }\n                                        : undefined,\n                                },\n                                headline: headline,\n                                text1: {\n                                    true: {\n                                        type: 'const',\n                                        constVal: `Brightness`,\n                                    },\n                                },\n                                entity1: {\n                                    value: foundedStates[role].ON_ACTUAL,\n                                    set: foundedStates[role].ON_SET,\n                                },\n                            },\n                        };\n                        itemConfig = tempItem;\n                        break;\n                    }\n                    case 'rgbSingle':\n                    case 'ct':\n                    case 'rgb':\n                    case 'hue': {\n                        const tempItem: typePageItem.PageItemDataItemsOptions = {\n                            type: 'light',\n                            role:\n                                role === 'hue'\n                                    ? 'hue'\n                                    : role === 'rgb'\n                                      ? 'rgbThree'\n                                      : role === 'rgbSingle'\n                                        ? 'rgbSingle'\n                                        : 'ct',\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon || 'lightbulb',\n                                        },\n                                        color: await this.getIconColor(item.onColor, this.colorOn),\n                                    },\n                                    false: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon2 || 'lightbulb-outline',\n                                        },\n                                        color: await this.getIconColor(item.offColor, this.colorOff),\n                                    },\n                                    scale: item.colorScale ? { type: 'const', constVal: item.colorScale } : undefined,\n                                    maxBri: item.maxValueBrightness\n                                        ? { type: 'const', constVal: item.maxValueBrightness }\n                                        : undefined,\n                                    minBri: item.minValueBrightness\n                                        ? { type: 'const', constVal: item.minValueBrightness }\n                                        : undefined,\n                                },\n                                colorMode: item.colormode ? { type: 'const', constVal: !!item.colormode } : undefined,\n                                dimmer: {\n                                    value: foundedStates[role].DIMMER,\n                                    maxScale: item.maxValueBrightness\n                                        ? { type: 'const', constVal: item.maxValueBrightness }\n                                        : undefined,\n                                    minScale: item.minValueBrightness\n                                        ? { type: 'const', constVal: item.minValueBrightness }\n                                        : undefined,\n                                },\n                                headline: headline,\n                                hue: role !== 'hue' ? undefined : foundedStates[role].HUE,\n                                Red: role !== 'rgb' ? undefined : foundedStates[role].RED,\n                                Green: role !== 'rgb' ? undefined : foundedStates[role].GREEN,\n                                Blue: role !== 'rgb' ? undefined : foundedStates[role].BLUE,\n                                White: role !== 'rgb' ? undefined : { value: foundedStates[role].WHITE },\n                                color:\n                                    role !== 'rgbSingle'\n                                        ? undefined\n                                        : {\n                                              true: foundedStates[role].RGB,\n                                          },\n                                ct: {\n                                    value: foundedStates[role].TEMPERATURE,\n                                    maxScale: item.maxValueColorTemp\n                                        ? { type: 'const', constVal: item.maxValueColorTemp }\n                                        : undefined,\n                                    minScale: item.minValueColorTemp\n                                        ? { type: 'const', constVal: item.minValueColorTemp }\n                                        : undefined,\n                                },\n                                text1: {\n                                    true: {\n                                        type: 'const',\n                                        constVal: `Brightness`,\n                                    },\n                                },\n                                text2: {\n                                    true: {\n                                        type: 'const',\n                                        constVal: `Colour temperature`,\n                                    },\n                                },\n                                text3:\n                                    role === 'ct'\n                                        ? undefined\n                                        : {\n                                              true: {\n                                                  type: 'const',\n                                                  constVal: `Color`,\n                                              },\n                                          },\n                                entity1: {\n                                    value: foundedStates[role].ON_ACTUAL,\n                                    set: foundedStates[role].ON,\n                                },\n                            },\n                        };\n                        itemConfig = tempItem;\n                        break;\n                    }\n                    case 'button': {\n                        const tempItem: typePageItem.PageItemDataItemsOptions = {\n                            type: 'button',\n                            role: 'button',\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon || 'gesture-tap-button',\n                                        },\n                                        color: await this.getIconColor(item.onColor, this.colorOn),\n                                    },\n                                    false: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon2 || 'gesture-tap-button',\n                                        },\n                                        color: await this.getIconColor(item.offColor, this.colorOff),\n                                    },\n                                    scale: item.colorScale ? { type: 'const', constVal: item.colorScale } : undefined,\n                                    maxBri: undefined,\n                                    minBri: undefined,\n                                },\n                                text: text,\n\n                                text1: {\n                                    true: { type: 'const', constVal: 'on' },\n                                    false: { type: 'const', constVal: 'off' },\n                                },\n                                entity1: {\n                                    value: foundedStates[role].SET,\n                                },\n                            },\n                        };\n                        itemConfig = tempItem;\n                        break;\n                    }\n                    case 'blind': {\n                        const tempItem: typePageItem.PageItemDataItemsOptions = {\n                            type: 'shutter',\n                            role: 'blind',\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon || 'window-shutter-open',\n                                        },\n                                        color: await this.getIconColor(item.onColor, this.colorOn),\n                                    },\n                                    false: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon2 || 'window-shutter',\n                                        },\n                                        color: await this.getIconColor(item.offColor, this.colorOff),\n                                    },\n                                    unstable: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon3 || 'window-shutter-alert',\n                                        },\n                                    },\n                                    scale: { type: 'const', constVal: item.colorScale ?? { val_min: 0, val_max: 100 } },\n                                    maxBri: undefined,\n                                    minBri: undefined,\n                                },\n                                text: text,\n                                headline: headline,\n\n                                entity1: {\n                                    value: foundedStates[role].ACTUAL,\n                                    minScale: { type: 'const', constVal: item.minValueLevel ?? 0 },\n\n                                    maxScale: { type: 'const', constVal: item.maxValueLevel ?? 100 },\n\n                                    set: foundedStates[role].SET,\n                                },\n                                entity2: {\n                                    value: foundedStates[role].TILT_ACTUAL,\n                                    minScale: { type: 'const', constVal: item.minValueTilt ?? 100 },\n\n                                    maxScale: { type: 'const', constVal: item.maxValueTilt ?? 0 },\n\n                                    set: foundedStates[role].TILT_SET,\n                                },\n                                up: foundedStates[role].OPEN,\n                                down: foundedStates[role].CLOSE,\n                                stop: foundedStates[role].STOP,\n                                up2: foundedStates[role].TILT_OPEN,\n                                down2: foundedStates[role].TILT_CLOSE,\n                                stop2: foundedStates[role].TILT_STOP,\n                            },\n                        };\n                        itemConfig = tempItem;\n                        break;\n                    }\n                    case 'gate': {\n                        if (await this.checkRequiredDatapoints('gate', item, 'feature')) {\n                            itemConfig = {\n                                type: 'shutter',\n                                role: 'gate',\n                                data: {\n                                    icon: {\n                                        true: {\n                                            value: {\n                                                type: 'const',\n                                                constVal: item.icon || 'garage-open',\n                                            },\n                                            color: await this.getIconColor(item.onColor, this.colorOn),\n                                        },\n                                        false: {\n                                            value: {\n                                                type: 'const',\n                                                constVal: item.icon2 || 'garage',\n                                            },\n                                            color: await this.getIconColor(item.offColor, this.colorOff),\n                                        },\n                                        unstable: {\n                                            value: {\n                                                type: 'const',\n                                                constVal: item.icon3 || 'garage-alert',\n                                            },\n                                        },\n                                        scale: item.colorScale\n                                            ? { type: 'const', constVal: item.colorScale }\n                                            : undefined,\n                                        maxBri: undefined,\n                                        minBri: undefined,\n                                    },\n                                    text: text,\n                                    headline: headline,\n\n                                    entity1: {\n                                        value: foundedStates[role].ACTUAL,\n                                    },\n                                    entity2: undefined,\n                                    up: { type: 'state', dp: `${item.id}.SET`, write: 'return true;' },\n                                    down: { type: 'state', dp: `${item.id}.SET`, write: 'return false;' },\n                                    stop: foundedStates[role].STOP,\n                                },\n                            };\n                            break;\n                        } else {\n                            itemConfig = {\n                                template: 'text.gate.isOpen',\n                                dpInit: item.id,\n                                color: {\n                                    true: await this.getIconColor(item.onColor, this.colorOn),\n                                    false: await this.getIconColor(item.offColor, this.colorOff),\n                                    scale: item.colorScale,\n                                },\n                                data: {\n                                    entity1: { value: foundedStates[role].ACTUAL },\n                                },\n                            };\n                        }\n                        break;\n                    }\n                    case 'motion':\n                    case 'info':\n                    case 'humidity':\n                    case 'value.humidity':\n                    case 'value.temperature':\n                    case 'temperature':\n                    case 'door':\n                    case 'window': {\n                        let iconOn = 'door-open';\n                        let iconOff = 'door-closed';\n                        let iconUnstable = '';\n                        let textOn: undefined | string = undefined;\n                        let textOff: undefined | string = undefined;\n                        let adapterRole: pages.DeviceRole = '';\n                        let commonUnit = '';\n                        switch (role) {\n                            case 'motion': {\n                                iconOn = 'motion-sensor';\n                                iconOff = 'motion-sensor';\n                                iconUnstable = '';\n                                adapterRole = 'iconNotText';\n                                textOn = 'on';\n                                textOff = 'off';\n                                break;\n                            }\n                            case 'door': {\n                                adapterRole = 'iconNotText';\n                                iconOn = 'door-open';\n                                iconOff = 'door-closed';\n                                iconUnstable = 'door-closed';\n                                textOn = 'opened';\n                                textOff = 'closed';\n                                break;\n                            }\n                            case 'window': {\n                                iconOn = 'window-open-variant';\n                                iconOff = 'window-closed-variant';\n                                iconUnstable = 'window-closed-variant';\n                                adapterRole = 'iconNotText';\n                                textOn = 'opened';\n                                textOff = 'closed';\n                                break;\n                            }\n                            case 'info': {\n                                iconOn = 'information-outline';\n                                iconOff = 'information-outline';\n                                adapterRole = specialRole;\n                                break;\n                            }\n                            case 'value.temperature':\n                            case 'temperature': {\n                                iconOn = 'thermometer';\n                                iconOff = 'snowflake-thermometer';\n                                iconUnstable = 'sun-thermometer';\n                                adapterRole = specialRole;\n                                if (foundedStates[role].ACTUAL && foundedStates[role].ACTUAL.dp) {\n                                    const o = await this.adapter.getForeignObjectAsync(foundedStates[role].ACTUAL.dp);\n                                    if (o && o.common && o.common.unit) {\n                                        commonUnit = o.common.unit;\n                                    }\n                                }\n                                break;\n                            }\n                            case 'value.humidity':\n                            case 'humidity': {\n                                iconOn = 'water-percent';\n                                iconOff = 'water-off';\n                                iconUnstable = 'water-percent-alert';\n                                adapterRole = specialRole;\n                                if (foundedStates[role].ACTUAL && foundedStates[role].ACTUAL.dp) {\n                                    const o = await this.adapter.getForeignObjectAsync(foundedStates[role].ACTUAL.dp);\n                                    if (o && o.common && o.common.unit) {\n                                        commonUnit = o.common.unit;\n                                    }\n                                }\n                                break;\n                            }\n                        }\n                        const tempItem: typePageItem.PageItemDataItemsOptions = {\n                            type: 'text',\n                            role: adapterRole,\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: await this.getFieldAsDataItemConfig(item.icon || iconOn),\n\n                                        color: await this.getIconColor(item.onColor, this.colorOn),\n                                        text: (await this.existsState(`${item.id}.ACTUAL`))\n                                            ? {\n                                                  value: foundedStates[role].ACTUAL,\n                                                  unit: item.unit ? { type: 'const', constVal: item.unit } : undefined,\n                                              }\n                                            : undefined,\n                                    },\n                                    false: {\n                                        value: await this.getFieldAsDataItemConfig(item.icon2 || iconOff),\n                                        color: await this.getIconColor(item.offColor, this.colorOff),\n                                        text: (await this.existsState(`${item.id}.ACTUAL`))\n                                            ? {\n                                                  value: foundedStates[role].ACTUAL,\n                                                  unit: item.unit ? { type: 'const', constVal: item.unit } : undefined,\n                                              }\n                                            : undefined,\n                                    },\n                                    unstable: {\n                                        value: await this.getFieldAsDataItemConfig(item.icon3 || iconUnstable),\n                                    },\n                                    scale: item.colorScale ? { type: 'const', constVal: item.colorScale } : undefined,\n                                    maxBri: undefined,\n                                    minBri: undefined,\n                                },\n                                text1: textOn\n                                    ? {\n                                          true: { type: 'const', constVal: textOn },\n                                          false: textOff ? { type: 'const', constVal: textOff } : undefined,\n                                      }\n                                    : undefined,\n                                text: text,\n                                entity1: {\n                                    value: foundedStates[role].ACTUAL,\n                                },\n                                entity2:\n                                    role === 'temperature' ||\n                                    role === 'humidity' ||\n                                    role === 'info' ||\n                                    role === 'value.temperature' ||\n                                    role === 'value.humidity'\n                                        ? {\n                                              value: foundedStates[role].ACTUAL,\n                                              unit:\n                                                  item.unit || commonUnit\n                                                      ? { type: 'const', constVal: item.unit || commonUnit }\n                                                      : undefined,\n                                          }\n                                        : undefined,\n                            },\n                        };\n                        itemConfig = tempItem;\n                        break;\n                    }\n                    case 'thermostat':\n                        break;\n                    case 'volume': {\n                        let commonUnit = '';\n                        if (foundedStates[role].ACTUAL && foundedStates[role].ACTUAL.dp) {\n                            const o = await this.adapter.getForeignObjectAsync(foundedStates[role].ACTUAL.dp);\n                            if (o && o.common && o.common.unit) {\n                                commonUnit = o.common.unit;\n                            }\n                        }\n                        itemConfig = {\n                            template: 'number.volume',\n                            dpInit: item.id,\n                            type: 'number',\n                            role: specialRole,\n                            color: {\n                                true: await this.getIconColor(item.onColor, this.colorOn),\n                                false: await this.getIconColor(item.offColor, this.colorOff),\n                                scale: item.colorScale,\n                            },\n                            icon: {\n                                true: item.icon ? { type: 'const', constVal: item.icon } : undefined,\n                                false: item.icon2 ? { type: 'const', constVal: item.icon2 } : undefined,\n                            },\n                            data: {\n                                entity1: {\n                                    value: foundedStates[role].ACTUAL,\n                                    unit:\n                                        item.unit || commonUnit\n                                            ? { type: 'const', constVal: item.unit || commonUnit }\n                                            : undefined,\n                                },\n                                text: text,\n                            },\n                        };\n                        break;\n                    }\n                    case 'warning':\n                    case 'buttonSensor':\n                    case 'level.timer':\n                    case 'level.mode.fan':\n                    case 'lock':\n                    case 'slider':\n                    case 'airCondition': {\n                        throw new Error(`DP: ${item.id} - Channel role ${role} not implemented yet!!`);\n                        break;\n                    }\n                    default:\n                        exhaustiveCheck(role);\n                        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                        throw new Error(`DP: ${item.id} - Channel role ${role} is not supported!!!`);\n                }\n                return { itemConfig, messages };\n            }\n            throw new Error(`Object ${item.id} not found!`);\n        }\n        return { itemConfig: undefined, messages };\n    }\n\n    async getScreensaverConfig(config: ScriptConfig.Config): Promise<pages.PageBaseConfig> {\n        let pageItems: typePageItem.PageItemDataItemsOptions[] = [];\n        if (config.favoritScreensaverEntity) {\n            for (const item of config.favoritScreensaverEntity) {\n                if (item) {\n                    try {\n                        pageItems.push(await this.getEntityData(item, 'favorit', config));\n                    } catch (error: any) {\n                        throw new Error(`favoritScreensaverEntity - ${error}`);\n                    }\n                }\n            }\n        }\n        if (config.alternateScreensaverEntity) {\n            for (const item of config.alternateScreensaverEntity) {\n                if (item) {\n                    try {\n                        pageItems.push(await this.getEntityData(item, 'alternate', config));\n                    } catch (error: any) {\n                        throw new Error(`alternateScreensaverEntity - ${error}`);\n                    }\n                }\n            }\n        }\n        if (config.bottomScreensaverEntity) {\n            for (const item of config.bottomScreensaverEntity) {\n                if (item) {\n                    try {\n                        pageItems.push(await this.getEntityData(item, 'bottom', config));\n                    } catch (error: any) {\n                        throw new Error(`bottomScreensaverEntity - ${error}`);\n                    }\n                }\n            }\n        }\n        // if weatherEntity is set, add alot weather data to screensaver :)\n        // only works with accuweather atm\n        if (config.weatherEntity) {\n            if (config.weatherEntity.startsWith('accuweather.') && config.weatherEntity.endsWith('.')) {\n                const instance = config.weatherEntity.split('.')[1];\n                if (pageItems.findIndex(x => x.modeScr === 'favorit') === -1) {\n                    pageItems.push({\n                        template: 'text.accuweather.favorit',\n                        dpInit: `/^accuweather\\\\.${instance}.+/`,\n                        modeScr: 'favorit',\n                    });\n                }\n                if (config.weatherAddDefaultItems) {\n                    pageItems = pageItems.concat([\n                        // Bottom 1 - accuWeather.0. Forecast Day 1\n                        {\n                            template: 'text.accuweather.sunriseset',\n                            dpInit: `/^accuweather\\\\.${instance}.Daily.+/`,\n                            modeScr: 'bottom',\n                        },\n                        // Bottom 2 - accuWeather.0. Forecast Day 1\n                        {\n                            template: 'text.accuweather.bot2values',\n                            dpInit: `/^accuweather\\\\.${instance}.+?d1$/g`,\n                            modeScr: 'bottom',\n                        },\n\n                        // Bottom 3 - accuWeather.0. Forecast Day 2\n                        {\n                            template: 'text.accuweather.bot2values',\n                            dpInit: `/^accuweather\\\\.${instance}.+?d2$/`,\n                            modeScr: 'bottom',\n                        },\n\n                        // Bottom 4 - accuWeather.0. Forecast Day 3\n                        {\n                            template: 'text.accuweather.bot2values',\n                            dpInit: `/^accuweather\\\\.${instance}.+?d3$/`,\n                            modeScr: 'bottom',\n                        },\n\n                        // Bottom 5 - accuWeather.0. Forecast Day 4\n                        {\n                            template: 'text.accuweather.bot2values',\n                            dpInit: `/^accuweather\\\\.${instance}.+?d4$/`,\n                            modeScr: 'bottom',\n                        },\n                        // Bottom 6 - accuWeather.0. Forecast Day 5\n                        {\n                            template: 'text.accuweather.bot2values',\n                            dpInit: `/^accuweather\\\\.${instance}.+?d5$/`,\n                            modeScr: 'bottom',\n                        },\n\n                        // Bottom 7 - Windgeschwindigkeit\n                        {\n                            template: 'text.accuweather.windspeed',\n                            dpInit: `/^accuweather\\\\.${instance}./`,\n                            modeScr: 'bottom',\n                        },\n\n                        // Bottom 8 - B\u00F6en\n                        {\n                            template: 'text.accuweather.windgust',\n                            dpInit: `/^accuweather\\\\.${instance}./`,\n                            modeScr: 'bottom',\n                        },\n\n                        // Bottom 9 - Windrichtung\n                        {\n                            template: 'text.accuweather.winddirection',\n                            dpInit: `/^accuweather\\\\.${instance}./`,\n                            modeScr: 'bottom',\n                        },\n\n                        // Bottom 10 - UV-Index\n                        {\n                            template: 'text.accuweather.uvindex',\n                            dpInit: `/^accuweather\\\\.${instance}./`,\n                            modeScr: 'bottom',\n                        },\n                    ]);\n                }\n            }\n        }\n        if (config.indicatorScreensaverEntity) {\n            for (const item of config.indicatorScreensaverEntity) {\n                if (item) {\n                    try {\n                        pageItems.push(await this.getEntityData(item, 'indicator', config));\n                    } catch (error: any) {\n                        throw new Error(`indicatorScreensaverEntity - ${error}`);\n                    }\n                }\n            }\n        }\n        if (config.leftScreensaverEntity) {\n            for (const item of config.leftScreensaverEntity) {\n                if (item) {\n                    try {\n                        pageItems.push(await this.getEntityData(item, 'left', config));\n                    } catch (error: any) {\n                        throw new Error(`leftScreensaverEntity - ${error}`);\n                    }\n                }\n            }\n        }\n        if (config.mrIcon1ScreensaverEntity) {\n            try {\n                pageItems.push(await this.getMrEntityData(config.mrIcon1ScreensaverEntity, 'mricon'));\n            } catch (error: any) {\n                throw new Error(`mrIcon1ScreensaverEntity - ${error}`);\n            }\n        }\n        if (config.mrIcon2ScreensaverEntity) {\n            try {\n                pageItems.push(await this.getMrEntityData(config.mrIcon2ScreensaverEntity, 'mricon'));\n            } catch (error: any) {\n                throw new Error(`mrIcon2ScreensaverEntity - ${error}`);\n            }\n        }\n        this.log.debug(`Screensaver pageItems count: ${pageItems.length}`);\n        pageItems = pageItems.concat([\n            {\n                role: 'text',\n                dpInit: '',\n                type: 'text',\n                modeScr: 'time',\n                data: {\n                    entity2: {\n                        value: {\n                            type: 'internal',\n                            dp: '///time',\n                        },\n                        dateFormat: {\n                            type: 'const',\n                            constVal: { local: 'de', format: { hour: '2-digit', minute: '2-digit' } },\n                        },\n                    },\n                },\n            },\n            {\n                role: 'text',\n                dpInit: '',\n                type: 'text',\n                modeScr: 'date',\n                data: {\n                    entity2: {\n                        value: {\n                            type: 'internal',\n                            dp: '///date',\n                        },\n                        dateFormat: {\n                            type: 'const',\n                            constVal: {\n                                local: 'de',\n                                format: {\n                                    weekday: 'long',\n                                    month: 'short',\n                                    year: 'numeric',\n                                    day: 'numeric',\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n        ]);\n        pageItems = pageItems.concat(config.nativePageItems || []);\n\n        return {\n            dpInit: '',\n            alwaysOn: 'none',\n            uniqueID: 'scr',\n            useColor: false,\n            config: {\n                card: 'screensaver',\n                mode: 'standard',\n                rotationTime: 0,\n                model: 'eu',\n                data: undefined,\n                screensaverIndicatorButtons: false,\n                screensaverSwipe: false,\n            },\n            pageItems: pageItems,\n        };\n    }\n\n    /**\n     * Checks if the required datapoints for a given role and item are present and valid.\n     *\n     * @param role - The role to check the datapoints for.\n     * @param item - The item to check the datapoints for.\n     * @param mode - The mode of checking, can be 'both', 'script', or 'feature'. Defaults to 'both'. 'script' and 'feature' will only check the respective datapoints.\n     * @returns A promise that resolves to true if all required datapoints are present and valid, otherwise throws an error with mode='both'. Return false if mode='feature' or 'script'.\n     * @throws Will throw an error if a required datapoint is missing or invalid and mode='both'.\n     */\n    async checkRequiredDatapoints(\n        role: ScriptConfig.channelRoles,\n        item: ScriptConfig.PageItem,\n        mode: 'both' | 'script' | 'feature' = 'both',\n    ): Promise<boolean> {\n        const _checkScriptDataPoints = async (\n            role: ScriptConfig.channelRoles,\n            item: ScriptConfig.PageItem,\n        ): Promise<boolean> => {\n            let error = '';\n            const subItem = requiredScriptDataPoints[role];\n            if (subItem && subItem.data) {\n                for (const dp in subItem.data) {\n                    if (!(dp in subItem.data)) {\n                        continue;\n                    }\n                    const key = dp as keyof typeof subItem.data;\n\n                    try {\n                        const o =\n                            dp !== '' && !dp.endsWith('.')\n                                ? await this.adapter.getForeignObjectAsync(`${item.id}.${dp}`)\n                                : undefined;\n\n                        if (!o || subItem.data[key] === undefined || !subItem.data[key].required) {\n                            continue;\n                        }\n                        if (\n                            !o ||\n                            !this.checkStringVsStringOrArray(subItem.data[key].role, o.common.role) ||\n                            !this.checkStringVsStringOrArray(subItem.data[key].type, o.common.type) ||\n                            (subItem.data[key].writeable && !o.common.write)\n                        ) {\n                            if (!o) {\n                                throw new Error(\n                                    `Datapoint ${item.id}.${dp} is missing and is required for role ${role}!`,\n                                );\n                            } else {\n                                throw new Error(\n                                    `Datapoint ${item.id}.${dp}:` +\n                                        `${!this.checkStringVsStringOrArray(subItem.data[key].role, o.common.role) ? ` role: ${o.common.role} should be ${getStringOrArray(subItem.data[key].role)})` : ''} ` +\n                                        `${subItem.data[key].type !== 'mixed' && o.common.type !== subItem.data[key].type ? ` type: ${o.common.type} should be ${getStringOrArray(subItem.data[key].type)}` : ''}` +\n                                        `${subItem.data[key].writeable && !o.common.write ? ' must be writeable!' : ''} `,\n                                );\n                            }\n                        }\n                    } catch (err: any) {\n                        error += err.replaceAll('Error: ', '');\n                    }\n                }\n            } else {\n                throw new Error(`Role ${role} is not supported!`);\n            }\n\n            if (error) {\n                throw new Error(error);\n            }\n            return true;\n        };\n        const _checkDataPoints = async (): Promise<boolean> => {\n            return false;\n        };\n        if (mode === 'both' || mode === 'script') {\n            try {\n                if (await _checkScriptDataPoints(role, item)) {\n                    return true;\n                }\n            } catch (error: any) {\n                try {\n                    if (await _checkDataPoints()) {\n                        return true;\n                    }\n                } catch {\n                    if (mode === 'both') {\n                        throw new Error(error);\n                    } else {\n                        return false;\n                    }\n                }\n                throw new Error(error);\n            }\n        } else {\n            try {\n                if (await _checkDataPoints()) {\n                    return true;\n                }\n            } catch (error: any) {\n                if (mode === 'feature') {\n                    throw new Error(error);\n                } else {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    checkStringVsStringOrArray(item: string | string[], test: string | undefined): boolean {\n        if (test === undefined) {\n            return false;\n        }\n        if (Array.isArray(item)) {\n            return item.includes(test);\n        }\n        return item === test;\n    }\n    async getMrEntityData(\n        entity: ScriptConfig.ScreenSaverMRElement,\n        mode: Types.ScreenSaverPlaces,\n    ): Promise<typePageItem.PageItemDataItemsOptions> {\n        const result: Partial<typePageItem.PageItemDataItemsOptions> = {\n            modeScr: mode,\n            type: 'text',\n            data: { entity1: {} },\n        };\n        if (entity.type === 'native') {\n            const temp = JSON.parse(JSON.stringify(entity.native)) as typePageItem.PageItemDataItemsOptions;\n            temp.type = undefined;\n            return temp;\n        } else if (entity.type === 'template') {\n            const temp = JSON.parse(JSON.stringify(entity)) as unknown as typePageItem.PageItemDataItemsOptions;\n            temp.type = undefined;\n            return temp;\n        }\n        if (\n            entity.ScreensaverEntity &&\n            entity.ScreensaverEntity !== `Relay.2` &&\n            entity.ScreensaverEntity !== `Relay.1`\n        ) {\n            result.data!.entity1!.value = await this.getFieldAsDataItemConfig(entity.ScreensaverEntity, true);\n        } else if (entity.ScreensaverEntity) {\n            result.data!.entity1!.value = {\n                type: 'internal',\n                dp: `cmd/power${entity.ScreensaverEntity === `Relay.2` ? 2 : 1}`,\n            };\n        }\n        result.data!.icon = {\n            true: {\n                value: {\n                    type: 'const',\n                    constVal: 'lightbulb',\n                },\n                color: {\n                    type: 'const',\n                    constVal: Color.Yellow,\n                },\n            },\n            false: {\n                value: {\n                    type: 'const',\n                    constVal: 'lightbulb-outline',\n                },\n                color: {\n                    type: 'const',\n                    constVal: Color.HMIOff,\n                },\n            },\n            scale: undefined,\n            maxBri: undefined,\n            minBri: undefined,\n        };\n        if (entity.ScreensaverEntityOnColor) {\n            result.data!.icon.true!.color = await this.getIconColor(entity.ScreensaverEntityOnColor || this.colorOn);\n        }\n        if (entity.ScreensaverEntityOffColor) {\n            result.data!.icon.false!.color = await this.getIconColor(entity.ScreensaverEntityOffColor || this.colorOff);\n        }\n\n        if (entity.ScreensaverEntityIconOn) {\n            result.data!.icon.true!.value = await this.getFieldAsDataItemConfig(entity.ScreensaverEntityIconOn);\n        }\n        if (entity.ScreensaverEntityIconOff) {\n            result.data!.icon.false!.value = await this.getFieldAsDataItemConfig(entity.ScreensaverEntityIconOff);\n        }\n        if (entity.ScreensaverEntityValue) {\n            result.data!.icon.false!.text = {\n                value: await this.getFieldAsDataItemConfig(entity.ScreensaverEntityValue, true),\n                unit: entity.ScreensaverEntityValueUnit\n                    ? await this.getFieldAsDataItemConfig(entity.ScreensaverEntityValueUnit)\n                    : undefined,\n                decimal:\n                    entity.ScreensaverEntityValueDecimalPlace != null\n                        ? { type: 'const', constVal: entity.ScreensaverEntityValueDecimalPlace }\n                        : undefined,\n                factor: undefined,\n            };\n            result.role = 'combined';\n            result.data!.icon.true!.text = result.data!.icon.false!.text;\n        }\n        if (isPageItemDataItemsOptions(result)) {\n            return result;\n        }\n        throw new Error('Invalid data');\n    }\n\n    async getEntityData(\n        entity: ScriptConfig.ScreenSaverElement,\n        mode: Types.ScreenSaverPlaces,\n        defaultColors: {\n            defaultOffColor: ScriptConfig.RGB;\n            defaultOnColor: ScriptConfig.RGB;\n        },\n    ): Promise<typePageItem.PageItemDataItemsOptions> {\n        const result: typePageItem.PageItemDataItemsOptions = {\n            modeScr: mode,\n            type: 'text',\n            data: { entity1: {} },\n        };\n\n        if (entity.type === 'native') {\n            const temp = JSON.parse(JSON.stringify(entity.native)) as typePageItem.PageItemDataItemsOptions;\n            return temp;\n        } else if (entity.type === 'template') {\n            const temp = JSON.parse(JSON.stringify(entity)) as unknown as typePageItem.PageItemDataItemsOptions;\n            delete temp.type;\n            return temp;\n        }\n        if (!result.data.entity1) {\n            throw new Error('Invalid data');\n        }\n        result.data.entity2 = this.library.cloneGenericObject(result.data.entity1);\n\n        if (mode === 'indicator') {\n            // @ts-expect-error ignore this button has all propertys of text\n            result.type = 'button';\n        }\n        let obj;\n        if (entity.ScreensaverEntity && !entity.ScreensaverEntity.endsWith('.')) {\n            obj = await this.adapter.getObjectAsync(entity.ScreensaverEntity);\n            result.data.entity1.value = await this.getFieldAsDataItemConfig(entity.ScreensaverEntity, true);\n            result.data.entity2.value = await this.getFieldAsDataItemConfig(entity.ScreensaverEntity);\n        }\n        const dataType = obj && obj.common && obj.common.type ? obj.common.type : undefined;\n        if (entity.ScreensaverEntityUnitText || entity.ScreensaverEntityUnitText === '') {\n            result.data.entity1.unit = await this.getFieldAsDataItemConfig(entity.ScreensaverEntityUnitText);\n            result.data.entity2.unit = await this.getFieldAsDataItemConfig(entity.ScreensaverEntityUnitText);\n        } else if (obj && obj.common && obj.common.unit) {\n            result.data.entity1.unit = { type: 'const', constVal: obj.common.unit };\n            result.data.entity2.unit = { type: 'const', constVal: obj.common.unit };\n        }\n\n        if (entity.ScreensaverEntityFactor) {\n            result.data.entity1.factor = { type: 'const', constVal: entity.ScreensaverEntityFactor };\n            result.data.entity2.factor = { type: 'const', constVal: entity.ScreensaverEntityFactor };\n        }\n\n        if (entity.ScreensaverEntityDecimalPlaces != null) {\n            result.data.entity1.decimal = { type: 'const', constVal: entity.ScreensaverEntityDecimalPlaces };\n            result.data.entity2.decimal = { type: 'const', constVal: entity.ScreensaverEntityDecimalPlaces };\n        }\n        if (entity.ScreensaverEntityDateFormat) {\n            result.data.entity1.dateFormat = {\n                type: 'const',\n                constVal: { local: 'de', format: entity.ScreensaverEntityDateFormat },\n            };\n            result.data.entity2.dateFormat = {\n                type: 'const',\n                constVal: { local: 'de', format: entity.ScreensaverEntityDateFormat },\n            };\n        }\n\n        let color: Types.DataItemsOptions | undefined = undefined;\n        if (entity.ScreensaverEntityOnColor) {\n            color = await this.getIconColor(entity.ScreensaverEntityOnColor || this.colorOn);\n        } else if (entity.ScreensaverEntityIconColor && !isIconScaleElement(entity.ScreensaverEntityIconColor)) {\n            color = await this.getIconColor(entity.ScreensaverEntityIconColor || this.colorDefault);\n        } else {\n            color = await this.getIconColor(defaultColors.defaultOnColor || this.colorDefault);\n        }\n\n        let colorOff: Types.DataItemsOptions | undefined = undefined;\n        if (entity.ScreensaverEntityOffColor) {\n            colorOff = await this.getIconColor(entity.ScreensaverEntityOffColor);\n        } else if (entity.ScreensaverEntityOffColor !== null) {\n            colorOff = await this.getIconColor(defaultColors.defaultOffColor);\n        }\n\n        if (entity.ScreensaverEntityIconOn) {\n            result.data.icon = {\n                true: { value: await this.getFieldAsDataItemConfig(entity.ScreensaverEntityIconOn) },\n            };\n        }\n        if (\n            dataType === 'number' &&\n            entity.ScreensaverEntityIconSelect &&\n            Array.isArray(entity.ScreensaverEntityIconSelect)\n        ) {\n            const obj = await this.getFieldAsDataItemConfig(entity.ScreensaverEntity);\n            if (obj && obj.type === 'state') {\n                entity.ScreensaverEntityIconSelect.sort((a, b) => a.value - b.value);\n                obj.read = `\n                const items = [${entity.ScreensaverEntityIconSelect.map(item => `{${item.value}, ${item.icon}}`).join(', ')}];\n                for (let i = 1; i < items.length; i++) {\n                    if (val <= items[i].val) {return items[i].icon;}\n                }\n                return items[items.length - 1].icon;`;\n\n                result.data.icon = {\n                    ...result.data.icon,\n                    true: {\n                        value: obj,\n                    },\n                };\n            }\n        }\n        if (color) {\n            result.data.icon = result.data.icon || {};\n            result.data.icon.true = result.data.icon.true || {};\n            result.data.icon.true.color = color;\n        }\n\n        if (entity.ScreensaverEntityIconOff) {\n            result.data.icon = {\n                ...result.data.icon,\n                ...{\n                    false: { value: await this.getFieldAsDataItemConfig(entity.ScreensaverEntityIconOff) },\n                },\n            };\n        }\n        if (color) {\n            result.data.icon = result.data.icon || {};\n            result.data.icon.false = result.data.icon.false || {};\n            result.data.icon.false.color = colorOff;\n        }\n        if (entity.ScreensaverEntityIconColor && isIconScaleElement(entity.ScreensaverEntityIconColor)) {\n            result.data.icon = {\n                ...result.data.icon,\n                scale: {\n                    type: 'const',\n                    constVal: entity.ScreensaverEntityIconColor,\n                },\n            };\n        }\n\n        if (entity.ScreensaverEntityOnText) {\n            result.data.text = { true: await this.getFieldAsDataItemConfig(entity.ScreensaverEntityOnText) };\n        } else if (entity.ScreensaverEntityText) {\n            result.data.text = { true: await this.getFieldAsDataItemConfig(entity.ScreensaverEntityText) };\n        }\n\n        if (entity.ScreensaverEntityOffText) {\n            result.data.text = { false: await this.getFieldAsDataItemConfig(entity.ScreensaverEntityOffText) };\n        }\n\n        if (isPageItemDataItemsOptions(result)) {\n            return result;\n        }\n        throw new Error('Invalid data');\n    }\n\n    async getFieldAsDataItemConfig(\n        possibleId: string | number | ScriptConfig.RGB,\n        isTrigger: boolean = false,\n    ): Promise<Types.DataItemsOptions> {\n        if (typeof possibleId === 'string') {\n            const state =\n                Color.isScriptRGB(possibleId) || possibleId === '' || possibleId.endsWith('.')\n                    ? false\n                    : await this.existsState(possibleId);\n\n            if (!Color.isScriptRGB(possibleId) && state) {\n                if (isTrigger) {\n                    return { type: 'triggered', dp: possibleId };\n                }\n                return { type: 'state', dp: possibleId };\n            }\n        }\n        return { type: 'const', constVal: possibleId };\n    }\n\n    async getIconColor(\n        item: ScriptConfig.RGB | RGB | ScriptConfig.IconScaleElement | string | undefined,\n        def: ScriptConfig.RGB | RGB | undefined = undefined,\n    ): Promise<Types.DataItemsOptions | undefined> {\n        if (isIconScaleElement(item)) {\n            //later\n        } else if (typeof item === 'string' && (await this.existsState(item))) {\n            return await this.getFieldAsDataItemConfig(item);\n        } else if (Color.isRGB(item)) {\n            return { type: 'const', constVal: item };\n        } else if (Color.isScriptRGB(item)) {\n            return { type: 'const', constVal: Color.convertScriptRGBtoRGB(item) };\n        } else if (Color.isRGB(def)) {\n            return { type: 'const', constVal: def };\n        } else if (Color.isScriptRGB(def)) {\n            return { type: 'const', constVal: Color.convertScriptRGBtoRGB(def) };\n        }\n        this.adapter.log.warn(`Invalid color value: ${JSON.stringify(item)}`);\n        return undefined;\n    }\n    async existsState(id: string): Promise<boolean> {\n        if (!id || id.endsWith('.')) {\n            return false;\n        }\n        return (await this.adapter.getForeignStateAsync(id)) != null;\n    }\n\n    async delete(): Promise<void> {\n        await this.statesController.delete();\n    }\n}\n\nfunction isIconScaleElement(obj: any): obj is ScriptConfig.IconScaleElement {\n    return obj && obj.val_min !== undefined && obj.val_max !== undefined;\n}\nfunction isPageItemDataItemsOptions(obj: any): obj is typePageItem.PageItemDataItemsOptions {\n    return obj && obj.modeScr && obj.data;\n}\n"],
  "mappings": "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",
  "names": ["item", "role", "obj"]
}
