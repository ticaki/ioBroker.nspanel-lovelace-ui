{
  "version": 3,
  "sources": ["../../../src/lib/classes/config-manager.ts"],
  "sourcesContent": ["import { Color, type RGB } from '../const/Color';\nimport * as configManagerConst from '../const/config-manager-const';\nimport type { panelConfigPartial } from '../controller/panel';\nimport { StatesControler } from '../controller/states-controller';\nimport { PagePower } from '../pages/pagePower';\nimport { PageChart } from '../pages/pageChart';\nimport { getStringOrArray } from '../tools/readme';\nimport type { NspanelLovelaceUi } from '../types/NspanelLovelaceUi';\nimport * as pages from '../types/pages';\nimport { exhaustiveCheck } from '../types/pages';\nimport type * as typePageItem from '../types/type-pageItem';\nimport * as Types from '../types/types';\nimport { BaseClass } from '../controller/library';\nimport { isNavigationItemConfigArray, type NavigationItemConfig } from './navigation';\nimport * as fs from 'fs';\nimport path from 'path';\nimport { PageThermo2 } from '../pages/pageThermo2';\nimport { PageMedia } from '../pages/pageMedia';\nimport { isPageItemDataItemsOptions } from '../types/type-pageItem';\nimport { getVersionAsNumber } from '../const/tools';\n\nexport class ConfigManager extends BaseClass {\n    //private test: ConfigManager.DeviceState;\n    //colorOn: RGB = Color.On;\n    //colorOff: RGB = Color.Off;\n    colorDefault: RGB = Color.Off;\n    dontWrite: boolean = false;\n    extraConfigLogging: boolean = false;\n\n    readonly breakingVersion = '0.6.0';\n\n    statesController: StatesControler | undefined;\n    constructor(adapter: NspanelLovelaceUi, dontWrite: boolean = false) {\n        super(adapter, 'config-manager');\n        this.dontWrite = dontWrite;\n        this.statesController = new StatesControler(adapter);\n    }\n\n    /**\n     * Sets the script configuration for the panel.\n     *\n     * @param configuration - The configuration object to set.\n     * @returns - A promise that resolves to an array of messages indicating the result of the operation.\n     *\n     * This method performs the following steps:\n     * 1. Merges the provided configuration with the default configuration.\n     * 2. Validates the configuration.\n     * 3. Checks if the script version meets the required version.\n     * 4. Configures the panel settings including topic, name, and colors.\n     * 5. Configures the screensaver and pages.\n     * 6. Sets up navigation for the panel.\n     * 7. Ensures unique page names and handles duplicates.\n     * 8. Updates the adapter's foreign object with the new configuration.\n     *\n     * If any errors occur during the process, they are logged and included in the returned messages..\n     */\n    async setScriptConfig(configuration: any): Promise<{\n        messages: string[];\n        panelConfig:\n            | (Omit<Partial<panelConfigPartial>, 'pages' | 'navigation'> & {\n                  navigation: NavigationItemConfig[];\n                  pages: pages.PageBase[];\n              })\n            | undefined;\n    }> {\n        if (!configuration || typeof configuration !== 'object') {\n            this.log.error(`Invalid configuration from Script: ${configuration || 'undefined'}`);\n            return { messages: ['Abort: Invalid configuration'], panelConfig: undefined };\n        }\n        /* handle global config */\n        if (configManagerConst.isGlobalConfig(configuration)) {\n            let panelConfig = { pages: [], navigation: [], scriptVersion: '' } as Omit<\n                Partial<panelConfigPartial>,\n                'pages' | 'navigation'\n            > & {\n                navigation: NavigationItemConfig[];\n                pages: pages.PageBase[];\n            };\n            let messages: string[] = [];\n            // get all pages from global config\n            const tempConfig = { ...configuration, pages: [] };\n            ({ panelConfig, messages } = await this.getPageConfig(tempConfig as any, panelConfig, messages));\n            const obj = await this.adapter.getForeignObjectAsync(this.adapter.namespace);\n            if (obj && !this.dontWrite) {\n                obj.native = obj.native || {};\n                obj.native.globalConfigRaw = configuration;\n                await this.adapter.setForeignObject(this.adapter.namespace, obj);\n            }\n            messages.push(`done`);\n            return { messages: messages.map(a => a.replaceAll('Error: ', '')), panelConfig };\n        }\n\n        configuration.advancedOptions = {\n            ...(configManagerConst.defaultConfig.advancedOptions || {}),\n            ...(configuration.advancedOptions || {}),\n        };\n\n        const config = {\n            ...configManagerConst.defaultConfig,\n            ...configuration,\n        };\n        if (!config || !configManagerConst.isConfig(config, this.adapter)) {\n            this.log.error(\n                `Invalid configuration from Script: ${config ? config.panelName || config.panelTopic || JSON.stringify(config) : 'undefined'}`,\n            );\n            return { messages: ['Abort: Invalid configuration'], panelConfig: undefined };\n        }\n        const panelItem = this.adapter.config.panels.find(item => item.topic === config.panelTopic);\n        if (!panelItem) {\n            this.log.error(`Panel for Topic: ${config.panelTopic} not found in adapter config!`);\n            return {\n                messages: [\n                    `Abort: Topic: ${config.panelTopic} not found in Adapter configuration! Maybe wrong topic?!`,\n                ],\n                panelConfig: undefined,\n            };\n        }\n        let messages: string[] = [];\n\n        this.log.debug(`Start converting configuration for ${config.panelName || config.panelTopic}`);\n        let file = undefined;\n        if (fs.existsSync(path.join(__dirname, '../../script'))) {\n            file = fs.readFileSync(path.join(__dirname, '../../script/example_sendTo_script_iobroker.ts'), 'utf8');\n        }\n        const vTemp = file?.match(/const.version.+'(\\d\\.\\d\\.\\d)';/) || [];\n        const scriptVersion = vTemp[1] ? vTemp[1] : '';\n        const version = getVersionAsNumber(config.version);\n        const requiredVersion = getVersionAsNumber(scriptVersion);\n        const breakingVersion = getVersionAsNumber(this.breakingVersion);\n\n        if (version < breakingVersion) {\n            messages.push(\n                `Update Script! Panel for Topic: ${config.panelTopic} - name: ${panelItem.name} Script version ${config.version} is too low! Aborted! Required version is >=${this.breakingVersion}!`,\n            );\n            this.log.error(messages[messages.length - 1]);\n            return { messages, panelConfig: undefined };\n        }\n        if (version < requiredVersion) {\n            messages.push(\n                `Update Script! Panel for Topic: ${config.panelTopic} name: ${panelItem.name} Script version ${config.version} is lower than the required version ${scriptVersion}!`,\n            );\n            this.log.warn(messages[messages.length - 1]);\n        } else if (version > requiredVersion) {\n            messages.push(\n                `Update Adapter! Panel for Topic: ${config.panelTopic} name: ${panelItem.name} Script version ${config.version} is higher than the required version ${scriptVersion}!`,\n            );\n            this.log.warn(messages[messages.length - 1]);\n        } else {\n            messages.push(\n                `Panel for Topic: ${config.panelTopic} name: ${panelItem.name} Script version ${config.version} is correct!`,\n            );\n        }\n\n        // start configuration\n\n        {\n            const navigationAdjustRun = (\n                oldUniqueName: string | undefined,\n                newUniqueName: string | undefined,\n                pages: ScriptConfig.PageTypeGlobal[],\n                renamedPages: Record<string, string>,\n                maxRun: number = 3,\n                indexRun: number = 0,\n                runPrefix = '',\n            ): ScriptConfig.PageTypeGlobal[] => {\n                if (!oldUniqueName || !newUniqueName || oldUniqueName === newUniqueName) {\n                    return pages;\n                }\n                if (indexRun++ > maxRun) {\n                    this.log.warn(\n                        `navigationAdjustRun for ${oldUniqueName} to ${newUniqueName} aborted - maxRun ${maxRun} reached!`,\n                    );\n                    return pages;\n                }\n                const pageIndex = pages.findIndex(item => item.uniqueName === oldUniqueName);\n\n                if (pageIndex === -1) {\n                    return pages;\n                }\n                let page = pages[pageIndex];\n                if (!page) {\n                    return pages;\n                }\n                renamedPages[oldUniqueName] = newUniqueName;\n                page = { ...structuredClone(page), uniqueName: newUniqueName };\n                pages.push(page);\n\n                if ('items' in page && page.items) {\n                    for (let i = 0; i < page.items.length; i++) {\n                        const item = page.items[i];\n                        if (item && item.navigate && item.targetPage) {\n                            const origin = item.targetPage;\n\n                            for (const key in renamedPages) {\n                                const value = renamedPages[key];\n                                if (origin === value) {\n                                    item.targetPage = value;\n                                    continue;\n                                }\n                            }\n                            if (renamedPages[item.targetPage]) {\n                                item.targetPage = renamedPages[item.targetPage];\n                                continue;\n                            }\n                            const newName = `${runPrefix}_${item.targetPage}_copy_nav_${Math.floor(Math.random() * 100_000)}`;\n                            if (pages.findIndex(it => it.uniqueName === newName) === -1) {\n                                pages = navigationAdjustRun(\n                                    item.targetPage,\n                                    newName,\n                                    pages,\n                                    renamedPages,\n                                    maxRun,\n                                    indexRun,\n                                    runPrefix,\n                                );\n                            }\n                            item.targetPage = newName;\n                        }\n                    }\n                }\n                for (const t of ['next', 'prev', 'home', 'parent']) {\n                    const tag = t as 'next' | 'prev' | 'home' | 'parent';\n                    if (page[tag] === oldUniqueName) {\n                        for (const key in renamedPages) {\n                            const value = renamedPages[key];\n                            if (page[tag] === value) {\n                                continue;\n                            }\n                        }\n                        if (renamedPages[page[tag]]) {\n                            page[tag] = renamedPages[page[tag]];\n                            continue;\n                        }\n                        const newName = `${runPrefix}_${page[tag]}_copy_nav_${Math.floor(Math.random() * 100_000)}`;\n                        if (pages.findIndex(it => it.uniqueName === newName) === -1) {\n                            pages = navigationAdjustRun(\n                                page[tag],\n                                newName,\n                                pages,\n                                renamedPages,\n                                maxRun,\n                                indexRun,\n                                runPrefix,\n                            );\n                        }\n                        page[tag] = newName;\n                    }\n                }\n                return pages;\n            };\n            // merge global config\n            const obj = await this.adapter.getForeignObjectAsync(this.adapter.namespace);\n            if (obj && obj.native && obj.native.globalConfigRaw) {\n                const globalConfig = obj.native.globalConfigRaw as ScriptConfig.globalPagesConfig;\n                if (globalConfig && configManagerConst.isGlobalConfig(globalConfig)) {\n                    globalConfig.maxNavigationAdjustRuns =\n                        globalConfig.maxNavigationAdjustRuns && globalConfig.maxNavigationAdjustRuns > 0\n                            ? globalConfig.maxNavigationAdjustRuns\n                            : 3;\n                    const removeGlobalPageIndexs: Set<number> = new Set();\n                    // merge global config for pages\n                    for (let i = 0; i < config.pages.length; i++) {\n                        const page = config.pages[i] as ScriptConfig.PageTypeGlobal;\n                        if (page && 'globalLink' in page && page.globalLink) {\n                            const gIndex = globalConfig.subPages.findIndex(item => item.uniqueName === page.globalLink);\n                            const gPage = gIndex !== -1 ? globalConfig.subPages[gIndex] : undefined;\n                            if (gPage) {\n                                for (const t of ['next', 'prev']) {\n                                    const tag = t as 'next' | 'prev';\n                                    if (gPage[tag] != null) {\n                                        const gIndex = globalConfig.subPages.findIndex(\n                                            item => item.uniqueName === gPage[tag],\n                                        );\n                                        const index = config.pages.findIndex(\n                                            item =>\n                                                ('globalLink' in item && item.globalLink === gPage[tag]) ||\n                                                item.uniqueName === gPage[tag],\n                                        );\n                                        if (gIndex !== -1 && index === -1) {\n                                            let msg = `Global page ${gPage.uniqueName} ${tag} link to subPage ${gPage[tag]}. `;\n                                            if (tag === 'next') {\n                                                msg += `Remove ${gPage[tag]} from subPages and add to pages at index ${i + 1}!`;\n                                            } else {\n                                                msg += `This is not recommended! Prev navigation will \"randomly\" change the order of pages! Consider to remove it!`;\n                                            }\n                                            messages.push(msg);\n                                            (config.pages as ScriptConfig.PageTypeGlobal[]).splice(i + 1, 0, {\n                                                globalLink: gPage[tag],\n                                            });\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    for (let i = config.pages.length - 1; i >= 0; i--) {\n                        const page = config.pages[i] as ScriptConfig.PageTypeGlobal;\n                        if (page && 'globalLink' in page && page.globalLink) {\n                            const gIndex = globalConfig.subPages.findIndex(item => item.uniqueName === page.globalLink);\n                            let gPage = gIndex !== -1 ? globalConfig.subPages[gIndex] : undefined;\n                            if (gPage) {\n                                if (page.uniqueName != null && page.uniqueName !== gPage.uniqueName) {\n                                    globalConfig.subPages = navigationAdjustRun(\n                                        gPage.uniqueName,\n                                        page.uniqueName,\n                                        globalConfig.subPages,\n                                        {},\n                                        globalConfig.maxNavigationAdjustRuns,\n                                        0,\n                                        page.uniqueName,\n                                    ) as ScriptConfig.PageType[];\n                                    const index = globalConfig.subPages.findIndex(\n                                        p => p.uniqueName === page.uniqueName,\n                                    );\n                                    if (index !== -1) {\n                                        gPage = globalConfig.subPages[index];\n                                        gPage.uniqueName = page.uniqueName;\n                                    }\n                                } else {\n                                    removeGlobalPageIndexs.add(gIndex);\n                                }\n                                config.pages[i] = {\n                                    ...gPage,\n                                    prev: undefined,\n                                    next: undefined,\n                                    home: undefined,\n                                    parent: undefined,\n                                };\n                                if (page.heading) {\n                                    config.pages[i].heading = page.heading;\n                                }\n                            } else {\n                                config.pages.splice(i, 1);\n                                const msg = `Global page with uniqueName ${page.globalLink} not found!`;\n                                messages.push(msg);\n                                this.log.warn(msg);\n                            }\n                        }\n                    }\n\n                    // merge global config for subPages\n                    for (let i = config.subPages.length - 1; i >= 0; i--) {\n                        const page = config.subPages[i] as ScriptConfig.PageTypeGlobal;\n                        if (page && 'globalLink' in page && page.globalLink) {\n                            const gIndex = globalConfig.subPages.findIndex(item => item.uniqueName === page.globalLink);\n                            let gPage = gIndex !== -1 ? globalConfig.subPages[gIndex] : undefined;\n                            if (gPage) {\n                                if (page.uniqueName != null && page.uniqueName !== gPage.uniqueName) {\n                                    globalConfig.subPages = navigationAdjustRun(\n                                        gPage.uniqueName,\n                                        page.uniqueName,\n                                        globalConfig.subPages,\n                                        {},\n                                        globalConfig.maxNavigationAdjustRuns,\n                                        0,\n                                        page.uniqueName,\n                                    ) as ScriptConfig.PageType[];\n                                    const index = globalConfig.subPages.findIndex(\n                                        p => p.uniqueName === page.uniqueName,\n                                    );\n                                    if (index !== -1) {\n                                        gPage = globalConfig.subPages[index];\n                                        gPage.uniqueName = page.uniqueName;\n                                    }\n                                } else {\n                                    removeGlobalPageIndexs.add(gIndex);\n                                }\n                                const existNav =\n                                    page.prev != null || page.parent != null || page.next != null || page.home != null;\n\n                                config.subPages[i] = {\n                                    ...gPage,\n                                    prev: existNav ? page.prev : gPage.prev,\n                                    parent: existNav ? page.parent : gPage.parent,\n                                    next: existNav ? page.next : gPage.next,\n                                    home: existNav ? page.home : gPage.home,\n                                };\n\n                                if (page.heading) {\n                                    config.subPages[i].heading = page.heading;\n                                }\n                            } else {\n                                config.subPages.splice(i, 1);\n                                const msg = `Global page with uniqueName ${page.globalLink} not found!`;\n                                messages.push(msg);\n                                this.log.warn(msg);\n                            }\n                        }\n                    }\n\n                    for (const index of Array.from(removeGlobalPageIndexs).sort((a, b) => b - a)) {\n                        globalConfig.subPages.splice(index, 1);\n                    }\n                    config.subPages = config.subPages.concat(globalConfig.subPages || []);\n\n                    config.navigation = (config.navigation || []).concat(globalConfig.navigation || []);\n                    config.nativePageItems = (config.nativePageItems || []).concat(globalConfig.nativePageItems || []);\n                }\n            }\n        }\n        if (config.advancedOptions && config.advancedOptions.extraConfigLogging) {\n            this.extraConfigLogging = true;\n            config.advancedOptions.extraConfigLogging = false;\n        }\n\n        config.subPages = config.subPages.filter(\n            item => config.pages.findIndex(item2 => item.uniqueName === item2.uniqueName) === -1,\n        );\n        let panelConfig: Omit<Partial<panelConfigPartial>, 'pages' | 'navigation'> & {\n            navigation: NavigationItemConfig[];\n            pages: pages.PageBase[];\n        } = { pages: [], navigation: [], scriptVersion: config.version };\n\n        if (!config.panelTopic) {\n            this.log.error(`Required field panelTopic is missing in ${config.panelName || 'unknown'}!`);\n            messages.push('Required field panelTopic is missing');\n            return { messages: messages, panelConfig: undefined };\n        }\n        panelConfig.updated = true;\n        if (config.panelTopic.endsWith('.cmnd.CustomSend')) {\n            panelConfig.topic = config.panelTopic.split('.').slice(0, -2).join('.');\n        } else {\n            panelConfig.topic = config.panelTopic;\n        }\n        if (config.panelName) {\n            panelConfig.name = config.panelName;\n        } else {\n            panelConfig.name = `NSPanel-${config.panelTopic}`;\n        }\n        /*if (config.defaultOnColor) {\n            Color. = Color.convertScriptRGBtoRGB(config.defaultOnColor);\n        }\n        if (config.defaultOffColor) {\n            Color. = Color.convertScriptRGBtoRGB(config.defaultOffColor);\n        }*/\n\n        // Screensaver configuration\n        try {\n            const result = await this.getScreensaverConfig(config, messages);\n            const screensaver = result.configArray;\n            messages = result.messages;\n            if (\n                screensaver &&\n                screensaver.config &&\n                (screensaver.config.card === 'screensaver' ||\n                    screensaver.config.card === 'screensaver2' ||\n                    screensaver.config.card === 'screensaver3') &&\n                config.advancedOptions\n            ) {\n                screensaver.config.screensaverSwipe = !!config.advancedOptions.screensaverSwipe;\n                screensaver.config.screensaverIndicatorButtons = !!config.advancedOptions.screensaverIndicatorButtons;\n            }\n            panelConfig.pages.push(screensaver);\n        } catch (error: any) {\n            messages.push(`Screensaver configuration error - ${error}`);\n            this.log.warn(messages[messages.length - 1]);\n        }\n        if (config.pages.length > 0) {\n            for (let a = 0; a < config.pages.length; a++) {\n                const page = config.pages[a];\n                let uniqueID = '';\n                if (page.type === undefined) {\n                    uniqueID = page.native.uniqueID || '';\n                } else {\n                    uniqueID = page.uniqueName || '';\n                }\n                if (uniqueID === '') {\n                    continue;\n                }\n                panelConfig.navigation.push({\n                    name: uniqueID,\n                    left: undefined,\n                    right: undefined,\n                    page: uniqueID,\n                });\n            }\n            const nav = panelConfig.navigation;\n            if (nav && nav.length > 0) {\n                const index = nav.findIndex(item => item!.name === 'main');\n                if (index !== -1) {\n                    const item = nav.splice(index, 1)[0];\n                    nav.unshift(item);\n                }\n            }\n            if (panelConfig.navigation.length > 0) {\n                panelConfig.navigation = panelConfig.navigation.filter(item => item != null);\n                if (panelConfig.navigation.length > 1) {\n                    panelConfig.navigation = panelConfig.navigation.map((item, index, array) => {\n                        if (index === 0) {\n                            return {\n                                ...item!,\n                                left: { single: array[array.length - 1]!.name },\n                                right: { single: array[index + 1]!.name },\n                            };\n                        } else if (index === array.length - 1) {\n                            return {\n                                ...item!,\n                                left: { single: array[index - 1]!.name },\n                                right: { single: array[0]!.name },\n                            };\n                        }\n                        return {\n                            ...item!,\n                            left: { single: array[index - 1]!.name },\n                            right: { single: array[index + 1]!.name },\n                        };\n                    });\n                }\n                panelConfig.navigation[panelConfig.navigation.length - 1]!.right = { single: '///service' };\n                panelConfig.navigation[0]!.left = { single: '///service' };\n            }\n        }\n        const names: string[] = [];\n        let double = false;\n        for (const page of config.pages) {\n            if (page && page.type !== undefined) {\n                if (names.includes(page.uniqueName)) {\n                    double = true;\n                    messages.push(`Abort - double uniqueName ${page.uniqueName} in config!`);\n                    this.log.error(messages[messages.length - 1]);\n                } else {\n                    names.push(page.uniqueName);\n                }\n            }\n        }\n        if (double) {\n            return { messages, panelConfig: undefined };\n        }\n\n        ({ panelConfig, messages } = await this.getPageConfig(config, panelConfig, messages));\n\n        // merge both navigations. Remove duplicates from panelConfig.navigation\n        const nav1 = config.navigation as NavigationItemConfig[];\n        const nav2 = panelConfig.navigation;\n        if (nav1 != null && isNavigationItemConfigArray(nav1) && isNavigationItemConfigArray(nav2)) {\n            panelConfig.navigation = nav1.concat(nav2);\n            panelConfig.navigation = panelConfig.navigation.filter(\n                (a, p) => a && panelConfig.navigation.findIndex(b => b && a && b.name === a.name) === p,\n            );\n        }\n        // buttons\n        if (configManagerConst.isButton(config.buttonLeft)) {\n            panelConfig.buttons = panelConfig.buttons || { left: null, right: null };\n            panelConfig.buttons.left = config.buttonLeft;\n        } else {\n            messages.push(`Button left wrong configured!`);\n            this.log.warn(messages[messages.length - 1]);\n        }\n        if (configManagerConst.isButton(config.buttonRight)) {\n            panelConfig.buttons = panelConfig.buttons || { left: null, right: null };\n            panelConfig.buttons.right = config.buttonRight;\n        } else {\n            messages.push(`Button right wrong configured!`);\n            this.log.warn(messages[messages.length - 1]);\n        }\n\n        if (panelConfig.pages.length === 0) {\n            messages.push(`No pages found! This needs to be fixed!`);\n            this.log.error(messages[messages.length - 1]);\n        } else if (panelConfig.navigation.length === 0) {\n            messages.push(`No navigation items found! This needs to be fixed!`);\n            this.log.error(messages[messages.length - 1]);\n        } else if (panelConfig.navigation.findIndex(item => item && item.name === 'main') === -1) {\n            messages.push(`No entry found for \u2018main\u2019 in the navigation!`);\n            this.log.warn(messages[messages.length - 1]);\n        }\n\n        const obj = await this.adapter.getForeignObjectAsync(this.adapter.namespace);\n\n        if (obj && !this.dontWrite) {\n            if (!obj.native.scriptConfigRaw || !Array.isArray(obj.native.scriptConfigRaw)) {\n                obj.native.scriptConfigRaw = [];\n            }\n\n            // remove duplicates\n            obj.native.scriptConfigRaw = obj.native.scriptConfigRaw.filter(\n                (item: any, i: number) =>\n                    obj.native.scriptConfigRaw.findIndex((item2: any) => item2.panelTopic === item.panelTopic) === i,\n            );\n            // remove config with same topic and different name\n            obj.native.scriptConfigRaw = obj.native.scriptConfigRaw.filter(\n                (item: any) => item.panelTopic !== configuration.panelTopic,\n            );\n            obj.native.scriptConfigRaw = obj.native.scriptConfigRaw.filter(\n                (item: any) => this.adapter.config.panels.findIndex(a => a.topic === item.panelTopic) !== -1,\n            );\n\n            obj.native.scriptConfig = obj.native.scriptConfig || [];\n            // remove duplicates\n            obj.native.scriptConfig = obj.native.scriptConfig.filter(\n                (item: any, i: number) =>\n                    obj.native.scriptConfig.findIndex((item2: any) => item2.topic === item.topic) === i,\n            );\n            // remove config with same topic and different name\n            obj.native.scriptConfig = obj.native.scriptConfig.filter((item: any) => item.topic !== panelConfig.topic);\n            obj.native.scriptConfig = obj.native.scriptConfig.filter(\n                (item: any) => this.adapter.config.panels.findIndex(a => a.topic === item.topic) !== -1,\n            );\n\n            obj.native.scriptConfigRaw.push(configuration);\n            obj.native.scriptConfig.push(panelConfig);\n            await this.adapter.setForeignObjectAsync(this.adapter.namespace, obj);\n        }\n        messages.push(`done`);\n        return { messages: messages.map(a => a.replaceAll('Error: ', '')), panelConfig };\n    }\n\n    async getPageConfig(\n        config: ScriptConfig.Config,\n        panelConfig: Omit<Partial<panelConfigPartial>, 'pages' | 'navigation'> & {\n            navigation: NavigationItemConfig[];\n            pages: pages.PageBase[];\n        },\n        messages: string[],\n    ): Promise<{\n        panelConfig: Omit<Partial<panelConfigPartial>, 'pages' | 'navigation'> & {\n            navigation: NavigationItemConfig[];\n            pages: pages.PageBase[];\n        };\n        messages: string[];\n    }> {\n        if (panelConfig.pages === undefined) {\n            panelConfig.pages = [];\n        }\n        if (config.pages) {\n            const scriptPages = config.pages.concat(config.subPages || []);\n            for (const page of scriptPages) {\n                if (!page) {\n                    continue;\n                }\n                if (page.type === undefined && page.native) {\n                    if ((config.subPages || []).includes(page)) {\n                        let left = page.prev || page.parent || undefined;\n                        let right = page.next || page.home || undefined;\n                        if (left && left === page.uniqueName) {\n                            left = '';\n                            messages.push(\n                                `Page: ${page.native.uniqueID || 'unknown'} has left navigation to itself! Removed!`,\n                            );\n                            this.log.warn(messages[messages.length - 1]);\n                        }\n                        if (right && right === page.uniqueName) {\n                            right = '';\n                            messages.push(\n                                `Page: ${page.native.uniqueID || 'unknown'} has right navigation to itself! Removed!`,\n                            );\n                            this.log.warn(messages[messages.length - 1]);\n                        }\n                        if (left || right) {\n                            const navItem: NavigationItemConfig = {\n                                name: page.native.uniqueID || '',\n                                left: left ? (page.prev ? { single: left } : { double: left }) : undefined,\n                                right: right ? (page.next ? { single: right } : { double: right }) : undefined,\n                                page: page.native.uniqueID,\n                            };\n                            panelConfig.navigation.push(navItem);\n                        } else {\n                            const msg = `Page: ${page.native.uniqueID || 'unknown'} dont have any navigation!`;\n                            messages.push(msg);\n                            //this.log.warn(msg);\n                            continue;\n                        }\n                    }\n                    if (page.heading) {\n                        page.native.config = page.native.config || {};\n                        page.native.config.data = page.native.config.data || {};\n                        page.native.config.data.headline = await this.getFieldAsDataItemConfig(page.heading);\n                    }\n                    panelConfig.pages.push(page.native);\n                    continue;\n                }\n                if (\n                    page.type !== 'cardGrid' &&\n                    page.type !== 'cardGrid2' &&\n                    page.type !== 'cardGrid3' &&\n                    page.type !== 'cardEntities' &&\n                    page.type !== 'cardThermo' &&\n                    page.type !== 'cardThermo2' &&\n                    page.type !== 'cardQR' &&\n                    page.type !== 'cardPower' &&\n                    page.type !== 'cardChart' &&\n                    page.type !== 'cardLChart' &&\n                    page.type !== 'cardMedia' &&\n                    page.type !== 'cardSchedule'\n                ) {\n                    const msg = `${page.heading || 'unknown'} with card type ${page.type} not implemented yet!..`;\n                    messages.push(msg);\n                    this.log.warn(msg);\n                    continue;\n                }\n                if (!page.uniqueName) {\n                    messages.push(\n                        `Page ${'heading' in page && page.heading ? page.heading : page.type || 'unknown'} has no uniqueName!`,\n                    );\n                    this.log.error(messages[messages.length - 1]);\n                    continue;\n                }\n\n                if ((config.subPages || []).includes(page)) {\n                    const left = page.prev || page.parent || undefined;\n                    let right = page.next || page.home || undefined;\n                    if (!left && !right) {\n                        const msg = `Page: ${page.uniqueName} dont have any navigation! Node 'main' provisionally added as home!`;\n                        messages.push(msg);\n                        this.log.warn(msg);\n                        page.home = 'main';\n                        right = page.home;\n                    }\n                    if (left || right) {\n                        const navItem: NavigationItemConfig = {\n                            name: page.uniqueName,\n                            left: left ? (page.prev ? { single: left } : { double: left }) : undefined,\n                            right: right ? (page.next ? { single: right } : { double: right }) : undefined,\n                            page: page.uniqueName,\n                        };\n                        panelConfig.navigation.push(navItem);\n                    }\n                }\n\n                let gridItem: pages.PageBase = {\n                    dpInit: '',\n                    alwaysOn: page.alwaysOnDisplay\n                        ? typeof page.alwaysOnDisplay === 'boolean'\n                            ? 'always'\n                            : 'action'\n                        : 'none',\n                    uniqueID: page.uniqueName || '',\n\n                    hidden: page.hiddenByTrigger || false,\n                    config: {\n                        card: page.type,\n                        data: {\n                            headline: await this.getFieldAsDataItemConfig(page.heading || ''),\n                        },\n                        index: 0,\n                    },\n                    pageItems: [],\n                } as pages.PageBase;\n                if (\n                    (gridItem.config?.card === 'cardGrid' ||\n                        gridItem.config?.card === 'cardGrid2' ||\n                        gridItem.config?.card === 'cardGrid3' ||\n                        gridItem.config?.card === 'cardEntities' ||\n                        gridItem.config?.card === 'cardSchedule' ||\n                        gridItem.config?.card === 'cardThermo2' ||\n                        gridItem.config?.card === 'cardMedia') &&\n                    (page.type === 'cardGrid' ||\n                        page.type === 'cardGrid2' ||\n                        page.type === 'cardGrid3' ||\n                        page.type === 'cardEntities' ||\n                        page.type === 'cardSchedule' ||\n                        page.type === 'cardThermo2' ||\n                        page.type === 'cardMedia')\n                ) {\n                    gridItem.config.scrollType = page.scrollType || 'page';\n                    gridItem.config.scrollPresentation = page.scrollPresentation || 'classic';\n                    if (pages.isPageMenuConfig(gridItem.config) && gridItem.config.scrollPresentation === 'auto') {\n                        gridItem.config.scrollAutoTiming = ('scrollAutoTiming' in page && page.scrollAutoTiming) || 15;\n                    }\n                }\n                try {\n                    if (page.type === 'cardThermo') {\n                        ({ gridItem, messages } = await this.getPageThermo(page, gridItem, messages));\n                    }\n                } catch (error: any) {\n                    messages.push(\n                        `Configuration error in page thermo ${page.heading || 'unknown'} with uniqueName ${page.uniqueName} - ${error}`,\n                    );\n                    this.log.warn(messages[messages.length - 1]);\n                    continue;\n                }\n                try {\n                    if (page.type === 'cardThermo2') {\n                        ({ gridItem, messages } = await PageThermo2.getPage(this, page, gridItem, messages));\n                    }\n                } catch (error: any) {\n                    messages.push(\n                        `Configuration error in page thermo2 ${page.heading || 'unknown'} with uniqueName ${page.uniqueName} - ${error}`,\n                    );\n                    this.log.warn(messages[messages.length - 1]);\n                    continue;\n                }\n                try {\n                    if (page.type === 'cardMedia') {\n                        ({ gridItem, messages } = await PageMedia.getPage(this, page, gridItem, messages));\n                    }\n                } catch (error: any) {\n                    messages.push(\n                        `Configuration error in page media ${page.heading || 'unknown'} with uniqueName ${page.uniqueName} - ${error}`,\n                    );\n                    this.log.warn(messages[messages.length - 1]);\n                    continue;\n                }\n\n                // PagePower einlesen\n                if (page.type === 'cardPower') {\n                    if (!Array.isArray(this.adapter.config.pagePowerdata)) {\n                        messages.push(`No pagePower configured in Admin for ${page.uniqueName}`);\n                        this.log.warn(messages[messages.length - 1]);\n                        continue;\n                    }\n                    const index = this.adapter.config.pagePowerdata.findIndex(\n                        item => item.pageName === page.uniqueName,\n                    );\n                    if (index === -1) {\n                        messages.push(`No pagePowerdata found for ${page.uniqueName}`);\n                        this.log.warn(messages[messages.length - 1]);\n                        continue;\n                    }\n                    try {\n                        ({ gridItem, messages } = await PagePower.getPowerPageConfig(\n                            this,\n                            page,\n                            index,\n                            gridItem,\n                            messages,\n                        ));\n                    } catch (error: any) {\n                        messages.push(\n                            `Configuration error in page power ${page.heading || 'unknown'} with uniqueName ${page.uniqueName} - ${error}`,\n                        );\n                        this.log.warn(messages[messages.length - 1]);\n                        continue;\n                    }\n                }\n                // PageChart einlesen\n                if (page.type === 'cardChart' || page.type === 'cardLChart') {\n                    if (!Array.isArray(this.adapter.config.pageChartdata)) {\n                        messages.push(`No pageChart configured in Admin for ${page.uniqueName}`);\n                        this.log.warn(messages[messages.length - 1]);\n                        continue;\n                    }\n                    const index = this.adapter.config.pageChartdata.findIndex(\n                        item => item.pageName === page.uniqueName,\n                    );\n                    if (index === -1) {\n                        messages.push(`No pageChartdata found for ${page.uniqueName}`);\n                        this.log.warn(messages[messages.length - 1]);\n                        continue;\n                    }\n                    try {\n                        ({ gridItem, messages } = await PageChart.getChartPageConfig(\n                            this,\n                            index,\n                            gridItem,\n                            messages,\n                            page,\n                        ));\n                    } catch (error: any) {\n                        messages.push(\n                            `Configuration error in page chart ${page.heading || 'unknown'} with uniqueName ${page.uniqueName} - ${error}`,\n                        );\n                        this.log.warn(messages[messages.length - 1]);\n                        continue;\n                    }\n                }\n\n                if (page.items) {\n                    for (let a = 0; a < page.items.length; a++) {\n                        const item = page.items[a];\n                        if (!item) {\n                            continue;\n                        }\n                        if (page.type === 'cardThermo' && a === 0) {\n                            continue;\n                        }\n                        try {\n                            const temp = await this.getPageItemConfig(item, page, messages);\n                            const itemConfig = temp.itemConfig;\n                            messages = temp.messages;\n                            if (itemConfig && gridItem.pageItems) {\n                                gridItem.pageItems.push(itemConfig);\n                            }\n                            if (temp.pageConfig) {\n                                temp.pageConfig.parent = page.uniqueName;\n                                scriptPages.push(temp.pageConfig);\n                                config.subPages.push(temp.pageConfig);\n                            }\n                        } catch (error: any) {\n                            messages.push(\n                                `Configuration error in page ${page.heading || 'unknown'} with uniqueName ${page.uniqueName} pageitem - ${error}`,\n                            );\n                            this.log.warn(messages[messages.length - 1]);\n                        }\n                    }\n                }\n                panelConfig.pages.push(gridItem);\n            }\n        }\n        return { panelConfig, messages };\n    }\n\n    async getPageThermo(\n        page: ScriptConfig.PageThermo,\n        gridItem: pages.PageBase,\n        messages: string[],\n    ): Promise<{ gridItem: pages.PageBase; messages: string[] }> {\n        if (page.type !== 'cardThermo' || !gridItem.config || gridItem.config.card !== 'cardThermo') {\n            return { gridItem, messages };\n        }\n        if (!page.items || !page.items[0]) {\n            const msg = `${page.uniqueName}: Thermo page has no item or item 0 has no id!`;\n            messages.push(msg);\n            this.log.warn(msg);\n            return { gridItem, messages };\n        }\n        const item = page.items[0];\n        if (!item || !('id' in item) || !item.id || item.id.endsWith('.')) {\n            const msg = `${page.uniqueName} id: ${'id' in item ? item.id : 'invalid'} is invalid!`;\n            messages.push(msg);\n            this.log.error(msg);\n            return { gridItem, messages };\n        }\n\n        const o = await this.adapter.getForeignObjectAsync(item.id);\n        if (!o || !o.common || !o.common.role) {\n            const msg = `${page.uniqueName} id: ${item.id} has a invalid object!`;\n            messages.push(msg);\n            this.log.error(msg);\n            return { gridItem, messages };\n        }\n        const role = o.common.role as ScriptConfig.channelRoles;\n\n        if (role !== 'thermostat' && role !== 'airCondition') {\n            const msg = `${page.uniqueName} id: ${item.id} role '${role}' not supported for cardThermo!`;\n            messages.push(msg);\n            this.log.error(msg);\n            return { gridItem, messages };\n        }\n        let foundedStates: configManagerConst.checkedDatapointsUnion | undefined;\n        try {\n            foundedStates = await this.searchDatapointsForItems(\n                configManagerConst.requiredScriptDataPoints,\n                role,\n                item.id,\n                messages,\n            );\n        } catch {\n            return { gridItem, messages };\n        }\n        gridItem.dpInit = item.id;\n        gridItem = {\n            ...gridItem,\n            card: 'cardThermo' as const,\n            alwaysOn: 'none',\n\n            items: undefined,\n            config: {\n                card: 'cardThermo',\n                data: {\n                    headline: await this.getFieldAsDataItemConfig(page.heading || 'thermostat'),\n                    mixed1: {\n                        value: { type: 'const', constVal: 'Temperature' },\n                    },\n                    mixed2: foundedStates[role].ACTUAL\n                        ? {\n                              value: foundedStates[role].ACTUAL,\n                              factor: { type: 'const', constVal: 1 },\n                              decimal: { type: 'const', constVal: 1 },\n                              unit: item.unit != null ? await this.getFieldAsDataItemConfig(item.unit) : undefined,\n                          }\n                        : undefined,\n                    mixed3: foundedStates[role].HUMIDITY\n                        ? {\n                              value: { type: 'const', constVal: 'Humidity2' },\n                          }\n                        : undefined,\n                    mixed4: foundedStates[role].HUMIDITY\n                        ? {\n                              value: foundedStates[role].HUMIDITY,\n                              factor: { type: 'const', constVal: 1 },\n                              decimal: { type: 'const', constVal: 0 },\n                              unit: { type: 'const', constVal: '%' },\n                          }\n                        : undefined,\n                    tempStep: item.stepValue != null ? await this.getFieldAsDataItemConfig(item.stepValue) : undefined,\n                    minTemp: item.minValue != null ? await this.getFieldAsDataItemConfig(item.minValue) : undefined,\n                    maxTemp: item.maxValue != null ? await this.getFieldAsDataItemConfig(item.maxValue) : undefined,\n                    unit: item.unit != null ? await this.getFieldAsDataItemConfig(item.unit) : undefined,\n                    set1: foundedStates[role].SET,\n                    set2: role === 'airCondition' ? foundedStates[role].SET2 : undefined,\n                },\n            },\n            pageItems: [],\n        };\n        gridItem.pageItems = gridItem.pageItems || [];\n        if (role === 'thermostat' || (role === 'airCondition' && !foundedStates[role].MODE)) {\n            //Automatic\n            if (foundedStates[role].AUTOMATIC && !foundedStates[role].MANUAL) {\n                foundedStates[role].MANUAL = JSON.parse(JSON.stringify(foundedStates[role].AUTOMATIC));\n                if (foundedStates[role].MANUAL!.type === 'triggered') {\n                    foundedStates[role].MANUAL!.read = 'return !val';\n                    foundedStates[role].MANUAL!.write = 'return !val';\n                }\n            } else if (!foundedStates[role].AUTOMATIC && foundedStates[role].MANUAL) {\n                foundedStates[role].AUTOMATIC = JSON.parse(JSON.stringify(foundedStates[role].MANUAL));\n                if (foundedStates[role].AUTOMATIC!.type === 'triggered') {\n                    foundedStates[role].AUTOMATIC!.read = 'return !val';\n                    foundedStates[role].AUTOMATIC!.write = 'return !val';\n                }\n            }\n\n            if (foundedStates[role].AUTOMATIC) {\n                gridItem.pageItems.push({\n                    role: 'button',\n                    type: 'button',\n                    dpInit: '',\n                    data: {\n                        icon: {\n                            true: {\n                                value: { type: 'const', constVal: 'alpha-a-circle' },\n                                color: { type: 'const', constVal: Color.activated },\n                            },\n                            false: {\n                                value: { type: 'const', constVal: 'alpha-a-circle-outline' },\n                                color: { type: 'const', constVal: Color.deactivated },\n                            },\n                        },\n                        entity1: {\n                            value: foundedStates[role].AUTOMATIC,\n                            set: foundedStates[role].AUTOMATIC,\n                        },\n                    },\n                });\n            }\n            //Manual\n            if (foundedStates[role].MANUAL) {\n                gridItem.pageItems.push({\n                    role: 'button',\n                    type: 'button',\n                    dpInit: '',\n                    data: {\n                        icon: {\n                            true: {\n                                value: { type: 'const', constVal: 'alpha-m-circle' },\n                                color: { type: 'const', constVal: Color.activated },\n                            },\n                            false: {\n                                value: { type: 'const', constVal: 'alpha-m-circle-outline' },\n                                color: { type: 'const', constVal: Color.deactivated },\n                            },\n                        },\n                        entity1: {\n                            value: foundedStates[role].MANUAL,\n                            set: foundedStates[role].MANUAL,\n                        },\n                    },\n                });\n            }\n            if (foundedStates[role].OFF) {\n                gridItem.pageItems.push({\n                    role: 'button',\n                    type: 'button',\n                    dpInit: '',\n                    data: {\n                        icon: {\n                            true: {\n                                value: { type: 'const', constVal: 'power-off' },\n                                color: { type: 'const', constVal: Color.activated },\n                            },\n                            false: {\n                                value: { type: 'const', constVal: 'power-off' },\n                                color: { type: 'const', constVal: Color.deactivated },\n                            },\n                        },\n                        entity1: {\n                            value: foundedStates[role].OFF,\n                            set: foundedStates[role].OFF,\n                        },\n                    },\n                });\n            }\n        } else if (foundedStates[role]?.MODE) {\n            // airCondition with mode\n            let states: string[] | Record<string, string> = ['OFF', 'AUTO', 'COOL', 'HEAT', 'ECO', 'FAN', 'DRY'];\n            if (foundedStates[role].MODE.dp) {\n                const o = await this.adapter.getForeignObjectAsync(foundedStates[role].MODE.dp);\n                if (o?.common?.states) {\n                    states = o.common.states;\n                }\n            }\n\n            const tempItem: typePageItem.PageItemDataItemsOptions = {\n                role: 'button',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'power-off' },\n                            color: { type: 'const', constVal: Color.activated },\n                        },\n                        false: {\n                            value: undefined,\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: { ...foundedStates[role].MODE, read: `return val == index}` },\n                        set: { ...foundedStates[role].MODE, write: `return index}` },\n                    },\n                },\n            };\n            if (tempItem?.data?.icon?.true && tempItem?.data?.icon?.false && tempItem?.data?.entity1) {\n                let index: any =\n                    typeof states == 'object'\n                        ? Array.isArray(states)\n                            ? states.findIndex(item => item === 'OFF')\n                            : states.OFF !== undefined\n                              ? 'OFF'\n                              : -1\n                        : -1;\n                if (index != -1) {\n                    tempItem.data.icon.true.value = { type: 'const', constVal: 'power-off' };\n                    tempItem.data.entity1.value = { ...foundedStates[role].MODE, read: `return val == ${index}` };\n                    tempItem.data.entity1.set = { ...foundedStates[role].MODE, write: `return ${index}` };\n                    gridItem.pageItems.push(JSON.parse(JSON.stringify(tempItem)));\n                }\n                index =\n                    typeof states == 'object'\n                        ? Array.isArray(states)\n                            ? states.findIndex(item => item === 'AUTO')\n                            : states.AUTO !== undefined\n                              ? 'AUTO'\n                              : -1\n                        : -1;\n                if (index != -1) {\n                    tempItem.data.icon.true.value = { type: 'const', constVal: 'alpha-a-circle' };\n                    tempItem.data.icon.false.value = { type: 'const', constVal: 'alpha-a-circle-outline' };\n                    tempItem.data.entity1.value = { ...foundedStates[role].MODE, read: `return val == ${index}` };\n                    tempItem.data.entity1.set = { ...foundedStates[role].MODE, write: `return ${index}` };\n                    gridItem.pageItems.push(JSON.parse(JSON.stringify(tempItem)));\n                }\n                index =\n                    typeof states == 'object'\n                        ? Array.isArray(states)\n                            ? states.findIndex(item => item === 'COOL')\n                            : states.COOL !== undefined\n                              ? 'COOL'\n                              : -1\n                        : -1;\n                if (index != -1) {\n                    tempItem.data.icon.true.value = { type: 'const', constVal: 'snowflake' };\n                    tempItem.data.entity1.value = { ...foundedStates[role].MODE, read: `return val == ${index}` };\n                    tempItem.data.entity1.set = { ...foundedStates[role].MODE, write: `return ${index}` };\n                    gridItem.pageItems.push(JSON.parse(JSON.stringify(tempItem)));\n                }\n\n                let token = 'HEAT';\n                index =\n                    typeof states == 'object'\n                        ? Array.isArray(states)\n                            ? states.findIndex(item => item === token)\n                            : states[token] !== undefined\n                              ? token\n                              : -1\n                        : -1;\n                if (index != -1) {\n                    tempItem.data.icon.true.value = { type: 'const', constVal: 'fire' };\n                    tempItem.data.entity1.value = { ...foundedStates[role].MODE, read: `return val == ${index}` };\n                    tempItem.data.entity1.set = { ...foundedStates[role].MODE, write: `return ${index}` };\n                    gridItem.pageItems.push(JSON.parse(JSON.stringify(tempItem)));\n                }\n\n                token = 'ECO';\n                index =\n                    typeof states == 'object'\n                        ? Array.isArray(states)\n                            ? states.findIndex(item => item === token)\n                            : states[token] !== undefined\n                              ? token\n                              : -1\n                        : -1;\n                if (index != -1) {\n                    tempItem.data.icon.true.value = { type: 'const', constVal: 'alpha-e-circle-outline' };\n                    tempItem.data.entity1.value = { ...foundedStates[role].MODE, read: `return val == ${index}` };\n                    tempItem.data.entity1.set = { ...foundedStates[role].MODE, write: `return ${index}` };\n                    gridItem.pageItems.push(JSON.parse(JSON.stringify(tempItem)));\n                }\n                token = 'FAN_ONLY';\n                index =\n                    typeof states == 'object'\n                        ? Array.isArray(states)\n                            ? states.findIndex(item => item === token)\n                            : states[token] !== undefined\n                              ? token\n                              : -1\n                        : -1;\n                if (index != -1) {\n                    tempItem.data.icon.true.value = { type: 'const', constVal: 'fan' };\n                    tempItem.data.entity1.value = { ...foundedStates[role].MODE, read: `return val == ${index}` };\n                    tempItem.data.entity1.set = { ...foundedStates[role].MODE, write: `return ${index}` };\n                    gridItem.pageItems.push(JSON.parse(JSON.stringify(tempItem)));\n                }\n                token = 'DRY';\n                index =\n                    typeof states == 'object'\n                        ? Array.isArray(states)\n                            ? states.findIndex(item => item === token)\n                            : states[token] !== undefined\n                              ? token\n                              : -1\n                        : -1;\n                if (index != -1) {\n                    tempItem.data.icon.true.value = { type: 'const', constVal: 'water-percent' };\n                    tempItem.data.entity1.value = { ...foundedStates[role].MODE, read: `return val == ${index}` };\n                    tempItem.data.entity1.set = { ...foundedStates[role].MODE, write: `return ${index}` };\n                    gridItem.pageItems.push(JSON.parse(JSON.stringify(tempItem)));\n                }\n            }\n        }\n        if (foundedStates[role].POWER) {\n            gridItem.pageItems.push({\n                role: 'button',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'power-standby' },\n                            color: { type: 'const', constVal: Color.activated },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'power-standby' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: foundedStates[role].POWER,\n                        set: foundedStates[role].POWER,\n                    },\n                },\n            });\n        }\n\n        //Boost\n        if (foundedStates[role].BOOST) {\n            gridItem.pageItems.push({\n                role: 'button',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'fast-forward-60' },\n                            color: { type: 'const', constVal: Color.activated },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'fast-forward-60' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: foundedStates[role].BOOST,\n                        set: foundedStates[role].BOOST,\n                    },\n                },\n            });\n        }\n        //Fenster\n        if (foundedStates[role].WINDOWOPEN) {\n            gridItem.pageItems.push({\n                role: 'indicator',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'window-open-variant' },\n                            color: { type: 'const', constVal: Color.open },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'window-closed-variant' },\n                            color: { type: 'const', constVal: Color.close },\n                        },\n                    },\n                    entity1: {\n                        value: foundedStates[role].WINDOWOPEN,\n                    },\n                },\n            });\n        }\n        //Party\n        if (foundedStates[role].PARTY) {\n            gridItem.pageItems.push({\n                role: 'button',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'party-popper' },\n                            color: { type: 'const', constVal: Color.activated },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'party-popper' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: foundedStates[role].PARTY,\n                        set: foundedStates[role].PARTY,\n                    },\n                },\n            });\n        }\n        if (foundedStates[role].MAINTAIN) {\n            gridItem.pageItems.push({\n                role: 'indicator',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'account-wrench' },\n                            color: { type: 'const', constVal: Color.bad },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'account-wrench' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: foundedStates[role].MAINTAIN,\n                    },\n                },\n            });\n        }\n        if (foundedStates[role].UNREACH) {\n            gridItem.pageItems.push({\n                role: 'indicator',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'wifi-off' },\n                            color: { type: 'const', constVal: Color.bad },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'wifi' },\n                            color: { type: 'const', constVal: Color.good },\n                        },\n                    },\n                    entity1: {\n                        value: foundedStates[role].UNREACH,\n                    },\n                },\n            });\n        }\n        if (foundedStates[role].MAINTAIN) {\n            gridItem.pageItems.push({\n                role: 'indicator',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'account-wrench' },\n                            color: { type: 'const', constVal: Color.true },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'account-wrench' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: foundedStates[role].MAINTAIN,\n                    },\n                },\n            });\n        }\n        if (foundedStates[role].LOWBAT) {\n            gridItem.pageItems.push({\n                role: 'indicator',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'battery-low' },\n                            color: { type: 'const', constVal: Color.bad },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'battery-high' },\n                            color: { type: 'const', constVal: Color.good },\n                        },\n                    },\n                    entity1: {\n                        value: foundedStates[role].LOWBAT,\n                    },\n                },\n            });\n        }\n        if (foundedStates[role].ERROR) {\n            gridItem.pageItems.push({\n                role: 'indicator',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'alert-circle' },\n                            color: { type: 'const', constVal: Color.bad },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'alert-circle' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: foundedStates[role].ERROR,\n                    },\n                },\n            });\n        }\n        if (foundedStates[role].VACATION) {\n            gridItem.pageItems.push({\n                role: 'indicator',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'palm-tree' },\n                            color: { type: 'const', constVal: Color.activated },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'palm-tree' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: foundedStates[role].VACATION,\n                    },\n                },\n            });\n        }\n        if (foundedStates[role].WORKING) {\n            gridItem.pageItems.push({\n                role: 'indicator',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'briefcase-check' },\n                            color: { type: 'const', constVal: Color.activated },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'briefcase-check' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: foundedStates[role].WORKING,\n                    },\n                },\n            });\n        }\n        if (item.setThermoAlias) {\n            if (item.popupThermoMode1 && item.setThermoAlias[0] && (await this.existsState(item.setThermoAlias[0]))) {\n                gridItem.pageItems.push({\n                    role: '',\n                    type: 'input_sel',\n                    dpInit: '',\n                    data: {\n                        entityInSel: {\n                            value: { type: 'triggered', dp: item.setThermoAlias[0] },\n                        },\n                        color: {\n                            true: await this.getIconColor(item.onColor, Color.activated),\n                            false: await this.getIconColor(item.onColor, Color.deactivated),\n                        },\n                        headline: item.name ? await this.getFieldAsDataItemConfig(item.name) : undefined,\n                        valueList: { type: 'const', constVal: item.popupThermoMode1 },\n                    },\n                });\n            }\n            if (item.popupThermoMode2 && item.setThermoAlias[1] && (await this.existsState(item.setThermoAlias[1]))) {\n                gridItem.pageItems.push({\n                    role: '',\n                    type: 'input_sel',\n                    dpInit: '',\n                    data: {\n                        entityInSel: {\n                            value: { type: 'triggered', dp: item.setThermoAlias[1] },\n                        },\n                        color: {\n                            true: await this.getIconColor(item.onColor, Color.activated),\n                            false: await this.getIconColor(item.onColor, Color.deactivated),\n                        },\n                        headline: item.name ? await this.getFieldAsDataItemConfig(item.name) : undefined,\n                        valueList: { type: 'const', constVal: item.popupThermoMode2 },\n                    },\n                });\n            }\n            if (item.popupThermoMode3 && item.setThermoAlias[2] && (await this.existsState(item.setThermoAlias[2]))) {\n                gridItem.pageItems.push({\n                    role: '',\n                    type: 'input_sel',\n                    dpInit: '',\n                    data: {\n                        entityInSel: {\n                            value: { type: 'triggered', dp: item.setThermoAlias[2] },\n                        },\n                        color: {\n                            true: await this.getIconColor(item.onColor, Color.activated),\n                            false: await this.getIconColor(item.onColor, Color.deactivated),\n                        },\n                        headline: item.name ? await this.getFieldAsDataItemConfig(item.name) : undefined,\n                        valueList: { type: 'const', constVal: item.popupThermoMode3 },\n                    },\n                });\n            }\n        }\n\n        return { gridItem, messages };\n    }\n\n    isNativePageItem(item: ScriptConfig.PageItem): item is ScriptConfig.PageItemNative {\n        return 'native' in item && item.native !== undefined && item.native !== null;\n    }\n    isPageBaseItem(item: ScriptConfig.PageItem): item is ScriptConfig.PageBaseItem {\n        return !('native' in item);\n    }\n\n    async getPageNaviItemConfig(\n        item: ScriptConfig.PageItem,\n        page: ScriptConfig.PageType,\n    ): Promise<typePageItem.PageItemDataItemsOptions | undefined> {\n        if (this.isNativePageItem(item)) {\n            if (!isPageItemDataItemsOptions(item.native)) {\n                throw new Error(`Native item is not a valid PageItemDataItemsOptions`);\n            }\n            if (item.navigate && !item.targetPage) {\n                throw new Error(`Navigate true but no targetPage defined in native item`);\n            }\n\n            return {\n                ...item.native,\n                data: {\n                    ...item.native.data,\n                    setNavi: { type: 'const', constVal: item.targetPage },\n                },\n            } as typePageItem.PageItemDataItemsOptions;\n        }\n\n        if (!pages.isCardMenuRole(page.type) || !item.navigate || !item.targetPage) {\n            this.log.warn(`Page type ${page.type} not supported for navigation item!`);\n            return undefined;\n        }\n        let itemConfig: typePageItem.PageItemDataItemsOptions | undefined = undefined;\n\n        const obj =\n            'id' in item && item.id && !item.id.endsWith('.')\n                ? await this.adapter.getForeignObjectAsync(item.id)\n                : undefined;\n        if (obj && (!obj.common || !obj.common.role)) {\n            throw new Error(`Role missing in ${page.uniqueName}.${'id' in item ? item.id : ''}!`);\n        }\n\n        const role = obj ? (obj.common.role as ScriptConfig.channelRoles) : null;\n        const commonName =\n            obj && obj.common\n                ? typeof obj.common.name === 'string'\n                    ? obj.common.name\n                    : obj.common.name[this.library.getLocalLanguage()]\n                : undefined;\n\n        const getButtonsTextTrue = async (\n            item: ScriptConfig.PageBaseItem,\n            def1: string,\n        ): Promise<Types.DataItemsOptions> => {\n            return item.buttonText\n                ? await this.getFieldAsDataItemConfig(item.buttonText, true)\n                : item.id && (await this.existsState(`${item.id}.BUTTONTEXT`))\n                  ? { type: 'triggered', dp: `${item.id}.BUTTONTEXT` }\n                  : await this.getFieldAsDataItemConfig(item.name || commonName || def1, true);\n        };\n\n        const getButtonsTextFalse = async (\n            item: ScriptConfig.PageBaseItem,\n            def1: string,\n        ): Promise<Types.DataItemsOptions> => {\n            return item.buttonTextOff\n                ? await this.getFieldAsDataItemConfig(item.buttonTextOff, true)\n                : item.id && (await this.existsState(`${item.id}.BUTTONTEXTOFF`))\n                  ? { type: 'triggered', dp: `${item.id}.BUTTONTEXTOFF` }\n                  : await getButtonsTextTrue(item, def1);\n        };\n        const text = {\n            true: {\n                value: await getButtonsTextTrue(item, role || ''),\n                prefix: item.prefixName ? await this.getFieldAsDataItemConfig(item.prefixName) : undefined,\n                suffix: item.suffixName ? await this.getFieldAsDataItemConfig(item.suffixName) : undefined,\n            },\n            false: {\n                value: await getButtonsTextFalse(item, role || ''),\n                prefix: item.prefixName ? await this.getFieldAsDataItemConfig(item.prefixName) : undefined,\n                suffix: item.suffixName ? await this.getFieldAsDataItemConfig(item.suffixName) : undefined,\n            },\n            textSize: item.fontSize ? { type: 'const', constVal: item.fontSize } : undefined,\n        };\n\n        const iconTextDefaults: {\n            unit?: Types.DataItemsOptions | null | undefined;\n            textSize?: Types.DataItemsOptions | null | undefined;\n            prefix?: Types.DataItemsOptions | null | undefined;\n            suffix?: Types.DataItemsOptions | null | undefined;\n        } = {\n            unit: item.unit ? { type: 'const', constVal: item.unit } : undefined,\n            textSize: item.fontSize ? { type: 'const', constVal: item.fontSize } : undefined,\n            prefix:\n                pages.isCardEntitiesType(page.type) && item.prefixValue\n                    ? await this.getFieldAsDataItemConfig(item.prefixValue)\n                    : undefined,\n            suffix:\n                pages.isCardEntitiesType(page.type) && item.suffixValue\n                    ? await this.getFieldAsDataItemConfig(item.suffixValue)\n                    : undefined,\n        };\n\n        if (!item.id) {\n            return {\n                type: 'button',\n                data: {\n                    setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    icon: {\n                        true: {\n                            value: {\n                                type: 'const',\n                                constVal: item.icon || 'gesture-tap-button',\n                            },\n                            color: await this.getIconColor(item.onColor, Color.activated),\n                        },\n                        scale: Types.isIconColorScaleElement(item.colorScale)\n                            ? { type: 'const', constVal: item.colorScale }\n                            : undefined,\n                        maxBri: undefined,\n                        minBri: undefined,\n                    },\n                    text1: {\n                        true: { type: 'const', constVal: 'press' },\n                    },\n                    text: text,\n                },\n            };\n        }\n\n        if (role == null) {\n            throw new Error(`Role missing in ${page.uniqueName}.${item.id}!`);\n        }\n        if (!configManagerConst.requiredScriptDataPoints[role]) {\n            this.log.warn(`Channel role ${role} not supported!`);\n            throw new Error(`Channel role ${role} not supported!`);\n        }\n        const foundedStates: configManagerConst.checkedDatapointsUnion = await this.searchDatapointsForItems(\n            configManagerConst.requiredScriptDataPoints,\n            role,\n            item.id,\n            [],\n        );\n\n        let valueDisplayRole: pages.DeviceRole = 'iconNotText';\n        if (pages.isCardGridType(page.type) && item.useValue) {\n            const actual = foundedStates?.[role]?.ACTUAL;\n            let t: string | undefined;\n\n            if (actual?.dp) {\n                const o = await this.adapter.getForeignObjectAsync(actual.dp);\n                t = o?.common?.type as string | undefined;\n            } else {\n                t = actual?.type; // falls du den Typ schon tr\u00E4gst\n            }\n\n            valueDisplayRole = t === 'string' || t === 'number' || t === 'mixed' ? 'textNotIcon' : 'iconNotText';\n        }\n        this.log.debug(\n            `page: '${page.type}' Item: '${item.id}', role: '${role}', valueDisplayRole: '${valueDisplayRole}', useValue: ${item.useValue}`,\n        );\n\n        item.icon2 = item.icon2 || item.icon;\n        switch (role) {\n            case 'socket': {\n                let icon: AllIcons | undefined;\n                let icon2: AllIcons | undefined;\n                if (item.role) {\n                    switch (item.role) {\n                        case 'socket': {\n                            icon = 'power-socket-de';\n                            icon2 = 'power-socket-de';\n                            break;\n                        }\n                    }\n                }\n                icon = item.icon || icon || 'power';\n                icon2 = item.icon2 || icon2 || 'power-standby';\n                const tempItem: typePageItem.PageItemDataItemsOptions = {\n                    type: 'button',\n                    role: 'button',\n                    data: {\n                        icon: {\n                            true: {\n                                value: {\n                                    type: 'const',\n                                    constVal: String(icon),\n                                },\n                                color: await this.getIconColor(item.onColor, Color.on),\n                            },\n                            false: {\n                                value: {\n                                    type: 'const',\n                                    constVal: icon2,\n                                },\n                                color: await this.getIconColor(item.offColor, Color.off),\n                            },\n                            scale: Types.isIconColorScaleElement(item.colorScale)\n                                ? { type: 'const', constVal: item.colorScale }\n                                : undefined,\n                            maxBri: undefined,\n                            minBri: undefined,\n                        },\n                        text1: {\n                            true: { type: 'const', constVal: 'on' },\n                            false: { type: 'const', constVal: 'off' },\n                        },\n                        text: text,\n                        entity1: {\n                            value: foundedStates[role].ACTUAL,\n                        },\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                itemConfig = tempItem;\n                break;\n            }\n            case 'light':\n            case 'dimmer':\n            case 'hue':\n            case 'rgb':\n            case 'rgbSingle':\n            case 'ct': {\n                const tempItem: typePageItem.PageItemDataItemsOptions = {\n                    type: 'button',\n                    role: role === 'rgb' ? 'rgbThree' : role,\n                    data: {\n                        icon: {\n                            true: {\n                                value: {\n                                    type: 'const',\n                                    constVal: item.icon || 'lightbulb',\n                                },\n                                color: await this.getIconColor(item.onColor, Color.light),\n                            },\n                            false: {\n                                value: {\n                                    type: 'const',\n                                    constVal: item.icon2 || 'lightbulb-outline',\n                                },\n                                color: await this.getIconColor(item.offColor, Color.dark),\n                            },\n                            scale: Types.isIconColorScaleElement(item.colorScale)\n                                ? { type: 'const', constVal: item.colorScale }\n                                : undefined,\n                            maxBri: undefined,\n                            minBri: undefined,\n                        },\n                        text1: {\n                            true: { type: 'const', constVal: 'on' },\n                            false: { type: 'const', constVal: 'off' },\n                        },\n                        text: text,\n                        entity1: { value: foundedStates[role].ON_ACTUAL },\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                itemConfig = tempItem;\n                break;\n            }\n            case undefined:\n            case 'button': {\n                const tempItem: typePageItem.PageItemDataItemsOptions = {\n                    type: 'button',\n                    role: '',\n                    data: {\n                        icon: {\n                            true: {\n                                value: {\n                                    type: 'const',\n                                    constVal: item.icon || 'gesture-tap-button',\n                                },\n                                color: await this.getIconColor(item.onColor, Color.activated),\n                            },\n                            false: {\n                                value: {\n                                    type: 'const',\n                                    constVal: item.icon2 || 'gesture-tap-button',\n                                },\n                                color: await this.getIconColor(item.offColor, Color.deactivated),\n                            },\n                            scale: Types.isIconColorScaleElement(item.colorScale)\n                                ? { type: 'const', constVal: item.colorScale }\n                                : undefined,\n                            maxBri: undefined,\n                            minBri: undefined,\n                        },\n                        text1: {\n                            true: { type: 'const', constVal: 'on' },\n                            false: { type: 'const', constVal: 'off' },\n                        },\n                        text: text,\n                        entity1: {\n                            value: foundedStates[role].ACTUAL,\n                        },\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                itemConfig = tempItem;\n                break;\n            }\n            case 'value.humidity':\n            case 'humidity': {\n                let commonUnit = '';\n                if (foundedStates[role].ACTUAL && foundedStates[role].ACTUAL.dp) {\n                    const o = await this.adapter.getForeignObjectAsync(foundedStates[role].ACTUAL.dp);\n                    if (o && o.common && o.common.unit) {\n                        commonUnit = o.common.unit;\n                    }\n                }\n\n                itemConfig = {\n                    type: 'button',\n                    dpInit: item.id,\n                    role: valueDisplayRole,\n                    template: 'button.humidity',\n                    data: {\n                        entity1: {\n                            value: foundedStates[role].ACTUAL,\n                            unit:\n                                item.unit || commonUnit\n                                    ? { type: 'const', constVal: item.unit || commonUnit }\n                                    : undefined,\n                        },\n                        icon: {\n                            true: {\n                                value: item.icon ? { type: 'const', constVal: item.icon } : undefined,\n                                color: await this.getIconColor(item.onColor, Color.cold),\n                                text: {\n                                    ...iconTextDefaults,\n                                    value: foundedStates[role].ACTUAL,\n                                },\n                            },\n                            false: {\n                                value: item.icon2 ? { type: 'const', constVal: item.icon2 } : undefined,\n                                color: await this.getIconColor(item.offColor, Color.hot),\n                                text: {\n                                    ...iconTextDefaults,\n                                    value: foundedStates[role].ACTUAL,\n                                },\n                            },\n                            scale: Types.isIconColorScaleElement(item.colorScale)\n                                ? { type: 'const', constVal: item.colorScale }\n                                : {\n                                      type: 'const',\n                                      constVal: { val_min: 0, val_max: 100, val_best: 50, mode: 'triGrad' },\n                                  },\n                        },\n                        text: text,\n\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                break;\n            }\n            case 'value.temperature':\n            case 'temperature':\n            case 'airCondition':\n            case 'thermostat': {\n                let commonUnit = '';\n                if (foundedStates[role].ACTUAL && foundedStates[role].ACTUAL.dp) {\n                    const o = await this.adapter.getForeignObjectAsync(foundedStates[role].ACTUAL.dp);\n                    if (o && o.common && o.common.unit) {\n                        commonUnit = o.common.unit;\n                    }\n                }\n                itemConfig = {\n                    type: 'button',\n                    dpInit: item.id,\n                    role: valueDisplayRole,\n                    template: 'button.temperature',\n                    data: {\n                        entity1: {\n                            value: foundedStates[role].ACTUAL,\n                            unit:\n                                item.unit || commonUnit\n                                    ? { type: 'const', constVal: item.unit || commonUnit }\n                                    : undefined,\n                        },\n                        icon: {\n                            true: {\n                                value: item.icon ? { type: 'const', constVal: item.icon } : undefined,\n                                color: await this.getIconColor(item.onColor, Color.hot),\n                                text: {\n                                    ...iconTextDefaults,\n                                    value: foundedStates[role].ACTUAL,\n                                },\n                            },\n                            false: {\n                                value: item.icon2 ? { type: 'const', constVal: item.icon2 } : undefined,\n                                color: await this.getIconColor(item.offColor, Color.cold),\n                                text: {\n                                    ...iconTextDefaults,\n                                    value: foundedStates[role].ACTUAL,\n                                },\n                            },\n                            scale: Types.isIconColorScaleElement(item.colorScale)\n                                ? { type: 'const', constVal: item.colorScale }\n                                : undefined,\n                        },\n                        text: text,\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                break;\n            }\n            case 'gate': {\n                let tempMinScale = 100;\n                let tempMaxScale = 0;\n                if (this.adapter.config.shutterClosedIsZero) {\n                    tempMinScale = 0;\n                    tempMaxScale = 100;\n                }\n                if (await this.checkRequiredDatapoints('gate', item, 'feature')) {\n                    itemConfig = {\n                        template: 'text.gate.isOpen',\n                        dpInit: item.id,\n                        type: 'button',\n                        color: {\n                            true: await this.getIconColor(item.onColor, Color.open),\n                            false: await this.getIconColor(item.offColor, Color.close),\n                            scale: Types.isIconColorScaleElement(item.colorScale) ? item.colorScale : undefined,\n                        },\n                        icon: {\n                            true: item.icon ? { type: 'const', constVal: item.icon } : undefined,\n                            false: item.icon2 ? { type: 'const', constVal: item.icon2 } : undefined,\n                        },\n                        data: {\n                            text: text,\n                            text1: {\n                                true: { type: 'const', constVal: 'opened' },\n                                false: { type: 'const', constVal: 'closed' },\n                            },\n                            entity1: {\n                                value: foundedStates[role].ACTUAL,\n                                minScale: { type: 'const', constVal: item.minValueLevel ?? tempMinScale },\n                                maxScale: { type: 'const', constVal: item.maxValueLevel ?? tempMaxScale },\n                            },\n\n                            setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                        },\n                    };\n                } else {\n                    itemConfig = {\n                        template: 'text.gate.isOpen',\n                        dpInit: item.id,\n                        type: 'button',\n                        color: {\n                            true: await this.getIconColor(item.onColor, Color.open),\n                            false: await this.getIconColor(item.offColor, Color.close),\n                            scale: Types.isIconColorScaleElement(item.colorScale) ? item.colorScale : undefined,\n                        },\n                        icon: {\n                            true: item.icon ? { type: 'const', constVal: item.icon } : undefined,\n                            false: item.icon2 ? { type: 'const', constVal: item.icon2 } : undefined,\n                        },\n                        data: {\n                            entity1: { value: foundedStates[role].ACTUAL },\n\n                            text: text,\n                            text1: {\n                                true: { type: 'const', constVal: 'opened' },\n                                false: { type: 'const', constVal: 'closed' },\n                            },\n                            setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                        },\n                    };\n                }\n                break;\n            }\n            case 'door': {\n                itemConfig = {\n                    template: 'text.door.isOpen',\n                    dpInit: item.id,\n                    type: 'button',\n                    color: {\n                        true: await this.getIconColor(item.onColor, Color.open),\n                        false: await this.getIconColor(item.offColor, Color.close),\n                        scale: Types.isIconColorScaleElement(item.colorScale) ? item.colorScale : undefined,\n                    },\n                    icon: {\n                        true: item.icon ? { type: 'const', constVal: item.icon } : undefined,\n                        false: item.icon2 ? { type: 'const', constVal: item.icon2 } : undefined,\n                    },\n                    data: {\n                        entity1: { value: foundedStates[role].ACTUAL },\n                        text1: {\n                            true: { type: 'const', constVal: 'opened' },\n                            false: { type: 'const', constVal: 'closed' },\n                        },\n                        text: text,\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                break;\n            }\n            case 'window': {\n                itemConfig = {\n                    template: 'text.window.isOpen',\n                    dpInit: item.id,\n                    type: 'button',\n                    color: {\n                        true: await this.getIconColor(item.onColor, Color.open),\n                        false: await this.getIconColor(item.offColor, Color.close),\n                        scale: Types.isIconColorScaleElement(item.colorScale) ? item.colorScale : undefined,\n                    },\n                    icon: {\n                        true: item.icon ? { type: 'const', constVal: item.icon } : undefined,\n                        false: item.icon2 ? { type: 'const', constVal: item.icon2 } : undefined,\n                    },\n                    data: {\n                        entity1: { value: foundedStates[role].ACTUAL },\n                        text1: {\n                            true: { type: 'const', constVal: 'opened' },\n                            false: { type: 'const', constVal: 'closed' },\n                        },\n                        text: text,\n\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                break;\n            }\n            case 'media': {\n                itemConfig = {\n                    template: undefined,\n                    type: 'button',\n                    role: 'iconNotText',\n                    dpInit: item.id,\n                    data: {\n                        icon: {\n                            true: {\n                                value: {\n                                    type: 'const',\n                                    constVal: item.icon || 'play-box-multiple',\n                                },\n                                color: await this.getIconColor(item.onColor, Color.activated),\n                            },\n                            false: {\n                                value: {\n                                    type: 'const',\n                                    constVal: item.icon2 || 'play-box-multiple-outline',\n                                },\n                                color: await this.getIconColor(item.offColor, Color.deactivated),\n                            },\n                            scale: Types.isIconColorScaleElement(item.colorScale)\n                                ? { type: 'const', constVal: item.colorScale }\n                                : undefined,\n                        },\n                        text: text,\n                        entity1: {\n                            value: foundedStates[role].STATE,\n                        },\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                break;\n            }\n            case 'motion': {\n                itemConfig = {\n                    template: 'text.motion',\n                    dpInit: item.id,\n                    type: 'button',\n                    color: {\n                        true: await this.getIconColor(item.onColor, Color.attention),\n                        false: await this.getIconColor(item.offColor, Color.deactivated),\n                        scale: Types.isIconColorScaleElement(item.colorScale) ? item.colorScale : undefined,\n                    },\n                    icon: {\n                        true: item.icon ? { type: 'const', constVal: item.icon } : undefined,\n                        false: item.icon2 ? { type: 'const', constVal: item.icon2 } : undefined,\n                    },\n                    data: {\n                        entity1: { value: foundedStates[role].ACTUAL },\n                        text1: {\n                            true: { type: 'const', constVal: 'motion' },\n                            false: { type: 'const', constVal: 'none' },\n                        },\n                        text: text,\n\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                break;\n            }\n            case 'volume': {\n                let commonUnit = '';\n                if (foundedStates[role].ACTUAL && foundedStates[role].ACTUAL.dp) {\n                    const o = await this.adapter.getForeignObjectAsync(foundedStates[role].ACTUAL.dp);\n                    if (o && o.common && o.common.unit) {\n                        commonUnit = o.common.unit;\n                    }\n                }\n                itemConfig = {\n                    template: 'button.volume',\n                    dpInit: item.id,\n                    type: 'button',\n                    role: valueDisplayRole,\n                    color: {\n                        true: await this.getIconColor(item.onColor, Color.activated),\n                        false: await this.getIconColor(item.offColor, Color.deactivated),\n                        scale: Types.isIconColorScaleElement(item.colorScale) ? item.colorScale : undefined,\n                    },\n                    icon: {\n                        true: item.icon ? { type: 'const', constVal: item.icon } : undefined,\n                        false: item.icon2 ? { type: 'const', constVal: item.icon2 } : undefined,\n                    },\n                    data: {\n                        entity1: {\n                            value: foundedStates[role].ACTUAL,\n                            unit:\n                                item.unit || commonUnit\n                                    ? { type: 'const', constVal: item.unit || commonUnit }\n                                    : undefined,\n                        },\n                        text: text,\n                        icon: {\n                            false: {\n                                value: { type: 'const', constVal: 'volume-mute' },\n                                text: {\n                                    value: foundedStates[role].ACTUAL,\n                                    unit: { type: 'const', constVal: '%' },\n                                },\n                                color: { type: 'const', constVal: Color.off },\n                            },\n                            true: {\n                                value: foundedStates[role].ACTUAL\n                                    ? {\n                                          ...foundedStates[role].ACTUAL,\n                                          read: `{\n                                                            if (val > 66) {\n                                                                return 'volume-high';\n                                                            }\n                                                            if (val > 33) {\n                                                                return 'volume-medium';\n                                                            }\n                                                            if (val > 0) {\n                                                                return 'volume-low';\n                                                            }\n                                                            return 'volume-mute';\n                                                        }`,\n                                      }\n                                    : undefined,\n                                text: {\n                                    value: foundedStates[role].ACTUAL,\n                                    unit: { type: 'const', constVal: '%' },\n                                },\n                                color: { type: 'const', constVal: Color.on },\n                            },\n                        },\n\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                break;\n            }\n            case 'warning': {\n                itemConfig = {\n                    template: 'text.warning',\n                    dpInit: item.id,\n                    type: 'button',\n                    color: {\n                        true: await this.getIconColor(item.onColor, Color.attention),\n                        false: await this.getIconColor(item.offColor, Color.deactivated),\n                        scale: Types.isIconColorScaleElement(item.colorScale) ? item.colorScale : undefined,\n                    },\n                    icon: {\n                        true: item.icon ? { type: 'const', constVal: item.icon } : undefined,\n                        false: item.icon2 ? { type: 'const', constVal: item.icon2 } : undefined,\n                    },\n                    data: {\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                break;\n            }\n            case 'info': {\n                let adapterRole: pages.DeviceRole = '';\n                if (foundedStates[role].ACTUAL && foundedStates[role].ACTUAL.dp) {\n                    const o = await this.adapter.getForeignObjectAsync(foundedStates[role].ACTUAL.dp);\n                    if (o?.common?.type === 'boolean') {\n                        adapterRole = 'iconNotText';\n                    } else {\n                        adapterRole = valueDisplayRole;\n                    }\n                }\n                itemConfig = {\n                    type: 'button',\n                    role: adapterRole,\n                    template: undefined,\n                    data: {\n                        icon: {\n                            true: {\n                                value: item.icon\n                                    ? { type: 'const', constVal: item.icon }\n                                    : {\n                                          type: 'const',\n                                          constVal: 'information-outline',\n                                      },\n                                color: await this.getIconColor(item.onColor || `${item.id}.COLORDEC`, Color.activated),\n                                text: {\n                                    value: foundedStates[role].ACTUAL,\n                                },\n                            },\n                            false: {\n                                value: item.icon2\n                                    ? { type: 'const', constVal: item.icon2 }\n                                    : item.icon\n                                      ? { type: 'const', constVal: item.icon }\n                                      : {\n                                            type: 'const',\n                                            constVal: 'information-off-outline',\n                                        },\n                                color: await this.getIconColor(\n                                    item.offColor || `${item.id}.COLORDEC`,\n                                    Color.deactivated,\n                                ),\n                                text: {\n                                    value: foundedStates[role].ACTUAL,\n                                },\n                            },\n                            scale: Types.isIconColorScaleElement(item.colorScale)\n                                ? { type: 'const', constVal: item.colorScale }\n                                : undefined,\n                        },\n                        text: text,\n                        text1: {\n                            true: foundedStates[role].ACTUAL,\n                        },\n                        entity1: {\n                            value: foundedStates[role].ACTUAL,\n                        },\n\n                        entity2: {\n                            value: foundedStates[role].ACTUAL,\n                        },\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                break;\n            }\n            case 'blind': {\n                let tempMinScale = 100;\n                let tempMaxScale = 0;\n                if (this.adapter.config.shutterClosedIsZero) {\n                    tempMinScale = 0;\n                    tempMaxScale = 100;\n                }\n                itemConfig = {\n                    template: 'text.shutter.navigation',\n                    dpInit: item.id,\n                    type: 'button',\n                    role: valueDisplayRole,\n                    color: {\n                        true: await this.getIconColor(item.onColor, Color.open),\n                        false: await this.getIconColor(item.offColor, Color.close),\n                        scale: Types.isIconColorScaleElement(item.colorScale) ? item.colorScale : undefined,\n                    },\n                    icon: {\n                        true: item.icon ? { type: 'const', constVal: item.icon } : undefined,\n                        false: item.icon2 ? { type: 'const', constVal: item.icon2 } : undefined,\n                    },\n                    data: {\n                        text1: {\n                            true: { type: 'const', constVal: 'opened' },\n                            false: { type: 'const', constVal: 'closed' },\n                        },\n                        text: text,\n                        entity1: {\n                            value: foundedStates[role].ACTUAL,\n                            minScale: { type: 'const', constVal: item.minValueLevel ?? tempMinScale },\n                            maxScale: { type: 'const', constVal: item.maxValueLevel ?? tempMaxScale },\n                        },\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                break;\n            }\n\n            case 'select': {\n                itemConfig = {\n                    type: 'button',\n                    dpInit: item.id,\n                    role: '',\n                    template: 'button.select',\n                    color: {\n                        true: await this.getIconColor(item.onColor, Color.activated),\n                        false: await this.getIconColor(item.offColor, Color.deactivated),\n                        scale: Types.isIconColorScaleElement(item.colorScale) ? item.colorScale : undefined,\n                    },\n                    icon: {\n                        true: item.icon ? { type: 'const', constVal: item.icon } : undefined,\n                        false: item.icon2 ? { type: 'const', constVal: item.icon2 } : undefined,\n                    },\n                    data: {\n                        entity1: {\n                            value: foundedStates[role].ACTUAL,\n                            //set: foundedStates[role].SET,\n                        },\n                        text: text,\n\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                break;\n            }\n            case 'lock': {\n                itemConfig = {\n                    template: 'text.lock',\n                    dpInit: item.id,\n                    type: 'button',\n                    role: '',\n                    color: {\n                        true: await this.getIconColor(item.onColor, Color.open),\n                        false: await this.getIconColor(item.offColor, Color.close),\n                        scale: Types.isIconColorScaleElement(item.colorScale) ? item.colorScale : undefined,\n                    },\n                    icon: {\n                        true: item.icon ? { type: 'const', constVal: item.icon } : undefined,\n                        false: item.icon2 ? { type: 'const', constVal: item.icon2 } : undefined,\n                    },\n                    data: {\n                        text: text,\n                        entity1: foundedStates[role].ACTUAL\n                            ? { value: foundedStates[role].ACTUAL }\n                            : { value: foundedStates[role].SET },\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                break;\n            }\n            case 'slider': {\n                let commonUnit = '';\n                if (foundedStates[role].ACTUAL && foundedStates[role].ACTUAL.dp) {\n                    const o = await this.adapter.getForeignObjectAsync(foundedStates[role].ACTUAL.dp);\n                    if (o && o.common && o.common.unit) {\n                        commonUnit = o.common.unit;\n                    }\n                }\n                itemConfig = {\n                    template: 'button.slider',\n                    dpInit: item.id,\n                    type: 'button',\n                    role: valueDisplayRole,\n                    color: {\n                        true: await this.getIconColor(item.onColor, Color.good),\n                        false: await this.getIconColor(item.offColor, Color.bad),\n                        scale: Types.isIconColorScaleElement(item.colorScale) ? item.colorScale : undefined,\n                    },\n                    icon: {\n                        true: item.icon ? { type: 'const', constVal: item.icon } : undefined,\n                        false: item.icon2 ? { type: 'const', constVal: item.icon2 } : undefined,\n                    },\n                    data: {\n                        entity1: {\n                            value: foundedStates[role].ACTUAL,\n                            unit:\n                                item.unit || commonUnit\n                                    ? { type: 'const', constVal: item.unit || commonUnit }\n                                    : undefined,\n                        },\n                        text: text,\n\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                break;\n            }\n            case 'level.timer': {\n                itemConfig = {\n                    role: 'button',\n                    type: 'button',\n                    dpInit: '',\n\n                    data: {\n                        icon: {\n                            true: {\n                                value: { type: 'const', constVal: item.icon || 'timer' },\n                                color: await this.getIconColor(item.onColor, Color.activated),\n                            },\n                            false: {\n                                value: { type: 'const', constVal: item.icon2 || 'timer' },\n                                color: await this.getIconColor(item.offColor, Color.deactivated),\n                            },\n                            scale: Types.isIconColorScaleElement(item.colorScale)\n                                ? { type: 'const', constVal: item.colorScale }\n                                : undefined,\n                        },\n                        entity1: foundedStates[role].ACTUAL\n                            ? {\n                                  value: foundedStates[role].ACTUAL,\n                              }\n                            : undefined,\n\n                        text: text,\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                break;\n            }\n            //case 'cie':\n            case 'sensor.alarm.flood': {\n                throw new Error(\n                    `DP: ${page.uniqueName}.${item.id} - Navigation for channel: ${role} not implemented yet!!`,\n                );\n            }\n            case 'level.mode.fan': {\n                itemConfig = {\n                    type: 'button',\n                    dpInit: item.id,\n                    role: '',\n                    data: {\n                        icon: {\n                            true: {\n                                value: { type: 'const', constVal: item.icon || 'fan' },\n                                color: { type: 'const', constVal: item.onColor || Color.Green },\n                            },\n                            false: {\n                                value: { type: 'const', constVal: item.icon2 || 'fan-off' },\n                                color: { type: 'const', constVal: item.offColor || Color.Red },\n                            },\n                        },\n                        entity1: {\n                            value: foundedStates[role].ACTUAL,\n                            //set: foundedStates[role].SET,\n                        },\n                        text: text,\n\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                break;\n            }\n            case 'timeTable': {\n                itemConfig = {\n                    template: 'button.alias.fahrplan.departure',\n                    dpInit: item.id,\n                    type: 'button',\n                    data: {\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                break;\n            }\n            default:\n                exhaustiveCheck(role);\n\n                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                throw new Error(`DP: ${page.uniqueName}.${item.id} - Channel role ${role} is not supported!!!`);\n        }\n        if (!itemConfig) {\n            this.log.warn(\n                `No configuration generated for item \"${item.id}\" on page \"${page.uniqueName}\" (role: ${role}).`,\n            );\n            return undefined;\n        }\n\n        if (item.filter != null) {\n            itemConfig.filter = item.filter;\n        }\n        if (item.enabled === false) {\n            if (!itemConfig.data) {\n                itemConfig.data = {};\n            }\n            itemConfig.data.enabled = { type: 'const', constVal: false };\n        } else if (await this.existsState(`${item.id}.ENABLED`)) {\n            if (!itemConfig.data) {\n                itemConfig.data = {};\n            }\n            itemConfig.data.enabled = { type: 'triggered', dp: `${item.id}.ENABLED` };\n        }\n        return itemConfig;\n    }\n\n    async searchDatapointsForItems(\n        db: configManagerConst.requiredDatapoints,\n        role: ScriptConfig.channelRoles,\n        dpInit: string,\n        messages: string[],\n    ): Promise<configManagerConst.checkedDatapointsUnion> {\n        const result: configManagerConst.checkedDatapointsUnion = JSON.parse(\n            JSON.stringify(configManagerConst.checkedDatapoints),\n        );\n\n        let ups = false;\n\n        if (db[role] && db[role].data && result[role]) {\n            const data = db[role].data;\n\n            for (const d of Object.keys(data) as Array<keyof typeof data>) {\n                const dp = d;\n                if (!data[dp] || !this.statesController) {\n                    continue;\n                }\n\n                const entry = data[dp];\n                if (dp in result[role]) {\n                    const dp2 = dp as configManagerConst.mydps;\n                    const expectedId = `${dpInit}.${dp}`;\n                    if (!entry.useKey || (await this.existsState(expectedId))) {\n                        result[role][dp2] = await this.statesController.getIdbyAuto({\n                            dpInit: entry.useKey ? expectedId : dpInit,\n                            role: entry.role,\n                            enums: '',\n                            regexp: entry.useKey ? new RegExp(`\\\\.${dp}$`) : undefined,\n                            triggered: entry.trigger,\n                            writeable: entry.writeable,\n                            commonType: entry.type,\n                        });\n                    } else {\n                        result[role][dp2] = undefined;\n                    }\n\n                    // Fallback auf alternate\n                    const alternate = entry.alternate as keyof typeof data;\n                    if (!result[role][dp2] && alternate && data[alternate]) {\n                        const expectedAltId = `${dpInit}.${alternate}`;\n                        const entry2 = data[alternate];\n                        if (!entry2.useKey || (await this.existsState(expectedAltId))) {\n                            result[role][dp2] = await this.statesController.getIdbyAuto({\n                                dpInit: entry2.useKey ? expectedAltId : dpInit,\n                                role: entry2.role,\n                                enums: '',\n                                regexp: entry.useKey ? new RegExp(`\\\\.${alternate}$`) : undefined,\n                                triggered: entry.trigger,\n                                writeable: entry2.writeable,\n                                commonType: entry.type,\n                            });\n                        }\n                    }\n\n                    if (!result[role][dp2]) {\n                        if (entry.required || this.extraConfigLogging) {\n                            messages.push(\n                                `${entry.required ? 'Required:' : 'Optional:'} ${String(dp)}: ${dpInit}, channel role: ${role}` +\n                                    ` - missing - searching for ${entry.useKey ? `dp: ${expectedId}, ` : ''}` +\n                                    `type: ${JSON.stringify(entry.type)}, role: ${JSON.stringify(entry.role)}` +\n                                    `${entry.writeable ? ', common.write: true' : ''}`,\n                            );\n                            if (entry.required) {\n                                ups = true;\n                                this.log.error(messages[messages.length - 1]);\n                            } else {\n                                this.log.info(messages[messages.length - 1]);\n                            }\n                        }\n                    }\n                } else {\n                    this.log.error(\n                        `Channel role ${role} - key: ${String(dp)} not found in checkedDatapoints! Please check code!`,\n                    );\n                }\n            }\n\n            if (ups) {\n                throw new Error('Missing datapoints! check log for details');\n            }\n        } else {\n            throw new Error(`Role ${role} not supported!`);\n        }\n\n        return result;\n    }\n\n    async getPageItemConfig(\n        item: ScriptConfig.PageItem,\n        page: ScriptConfig.PageType,\n        messages: string[] = [],\n    ): Promise<{\n        itemConfig: typePageItem.PageItemDataItemsOptions | undefined;\n        messages: string[];\n        pageConfig?: ScriptConfig.PageType;\n    }> {\n        let itemConfig: typePageItem.PageItemDataItemsOptions | undefined = undefined;\n        if (item.navigate) {\n            if (!item.targetPage || typeof item.targetPage !== 'string') {\n                throw new Error(`TargetPage missing in ${(item && 'id' in item && item.id) || 'no id'}!`);\n            }\n            return { itemConfig: await this.getPageNaviItemConfig(item, page), messages };\n        }\n        if (this.isNativePageItem(item)) {\n            if (!isPageItemDataItemsOptions(item.native)) {\n                throw new Error(`Native item is not a valid PageItemDataItemsOptions`);\n            }\n            itemConfig = item.native;\n            return { itemConfig, messages };\n        }\n        if ('id' in item && item.id) {\n            if (['delete', 'empty'].includes(item.id)) {\n                return { itemConfig: { type: 'empty', data: undefined }, messages };\n            }\n            if (item.id.endsWith('.')) {\n                item.id = item.id\n                    .split('.')\n                    .filter(a => a)\n                    .join('.');\n                if (!item.id) {\n                    throw new Error(`ID missing in item or only dots found!`);\n                }\n            }\n            const obj = await this.adapter.getForeignObjectAsync(item.id);\n            if (obj) {\n                if (!(obj.common && obj.common.role)) {\n                    throw new Error(`Role missing in^${item.id}!`);\n                }\n                const role = obj.common.role as ScriptConfig.channelRoles;\n                // check if role and types are correct\n                if (!configManagerConst.requiredScriptDataPoints[role]) {\n                    this.log.warn(`Channel role ${role} not supported!`);\n                    throw new Error(`Channel role ${role} not supported!`);\n                }\n                const foundedStates: configManagerConst.checkedDatapointsUnion = await this.searchDatapointsForItems(\n                    configManagerConst.requiredScriptDataPoints,\n                    role,\n                    item.id,\n                    messages,\n                );\n                /*if (!(await this.checkRequiredDatapoints(role, item))) {\n                    return { itemConfig: undefined, messages };\n                }*/\n                let valueDisplayRole: pages.DeviceRole = 'iconNotText';\n                if (pages.isCardGridType(page.type) && item.useValue) {\n                    const actual = foundedStates?.[role]?.ACTUAL;\n                    let t: string | undefined;\n\n                    if (actual?.dp) {\n                        const o = await this.adapter.getForeignObjectAsync(actual.dp);\n                        t = o?.common?.type as string | undefined;\n                    } else {\n                        t = actual?.type; // falls du den Typ schon tr\u00E4gst\n                    }\n\n                    valueDisplayRole =\n                        t === 'string' || t === 'number' || t === 'mixed' ? 'textNotIcon' : 'iconNotText';\n                }\n                this.log.debug(\n                    `page: '${page.type}' Item: '${item.id}', role: '${role}', valueDisplayRole: '${valueDisplayRole}', useValue: ${item.useValue}`,\n                );\n\n                const commonName =\n                    typeof obj.common.name === 'string'\n                        ? obj.common.name\n                        : obj.common.name[this.library.getLocalLanguage()];\n\n                const getButtonsTextTrue = async (\n                    item: ScriptConfig.PageBaseItem,\n                    def1: string,\n                ): Promise<Types.DataItemsOptions> => {\n                    return item.buttonText\n                        ? await this.getFieldAsDataItemConfig(item.buttonText, true)\n                        : item.id && (await this.existsState(`${item.id}.BUTTONTEXT`))\n                          ? { type: 'triggered', dp: `${item.id}.BUTTONTEXT` }\n                          : await this.getFieldAsDataItemConfig(item.name || commonName || def1, true);\n                };\n\n                const getButtonsTextFalse = async (\n                    item: ScriptConfig.PageBaseItem,\n                    def1: string,\n                ): Promise<Types.DataItemsOptions> => {\n                    return item.buttonTextOff\n                        ? await this.getFieldAsDataItemConfig(item.buttonTextOff, true)\n                        : item.id && (await this.existsState(`${item.id}.BUTTONTEXTOFF`))\n                          ? { type: 'triggered', dp: `${item.id}.BUTTONTEXTOFF` }\n                          : await getButtonsTextTrue(item, def1);\n                };\n                const text = {\n                    true: {\n                        value: await getButtonsTextTrue(item, role || ''),\n                        prefix: item.prefixName ? await this.getFieldAsDataItemConfig(item.prefixName) : undefined,\n                        suffix: item.suffixName ? await this.getFieldAsDataItemConfig(item.suffixName) : undefined,\n                    },\n                    false: {\n                        value: await getButtonsTextFalse(item, role || ''),\n                        prefix: item.prefixName ? await this.getFieldAsDataItemConfig(item.prefixName) : undefined,\n                        suffix: item.suffixName ? await this.getFieldAsDataItemConfig(item.suffixName) : undefined,\n                    },\n                    textSize: item.fontSize ? { type: 'const', constVal: item.fontSize } : undefined,\n                };\n                const headline = await getButtonsTextTrue(item, role || '');\n\n                item.icon2 = item.icon2 || item.icon;\n\n                const iconTextDefaults: {\n                    unit?: Types.DataItemsOptions | null | undefined;\n                    textSize?: Types.DataItemsOptions | null | undefined;\n                    prefix?: Types.DataItemsOptions | null | undefined;\n                    suffix?: Types.DataItemsOptions | null | undefined;\n                } = {\n                    unit: item.unit ? { type: 'const', constVal: item.unit } : undefined,\n                    textSize: item.fontSize ? { type: 'const', constVal: item.fontSize } : undefined,\n                    prefix:\n                        pages.isCardEntitiesType(page.type) && item.prefixValue\n                            ? await this.getFieldAsDataItemConfig(item.prefixValue)\n                            : undefined,\n                    suffix:\n                        pages.isCardEntitiesType(page.type) && item.suffixValue\n                            ? await this.getFieldAsDataItemConfig(item.suffixValue)\n                            : undefined,\n                };\n\n                let pageConfig: ScriptConfig.PageType | undefined = undefined;\n                switch (role) {\n                    case 'timeTable': {\n                        itemConfig = {\n                            template: 'text.alias.fahrplan.departure',\n                            dpInit: item.id,\n                        };\n                        break;\n                    }\n                    case 'socket': {\n                        let icon: AllIcons | undefined;\n                        let icon2: AllIcons | undefined;\n                        if (item.role) {\n                            switch (item.role) {\n                                case 'socket': {\n                                    icon = 'power-socket-de';\n                                    icon2 = 'power-socket-de';\n                                    break;\n                                }\n                            }\n                        }\n                        icon = item.icon || icon || 'power';\n                        icon2 = item.icon2 || icon2 || 'power-standby';\n                        const tempItem: typePageItem.PageItemDataItemsOptions = {\n                            type: 'switch',\n                            role: '',\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: { type: 'const', constVal: icon },\n                                        color: await this.getIconColor(item.onColor, Color.on),\n                                    },\n                                    false: {\n                                        value: { type: 'const', constVal: icon2 },\n                                        color: await this.getIconColor(item.offColor, Color.off),\n                                    },\n                                    scale: Types.isIconColorScaleElement(item.colorScale)\n                                        ? { type: 'const', constVal: item.colorScale }\n                                        : undefined,\n                                    maxBri: undefined,\n                                    minBri: undefined,\n                                },\n                                text: text,\n                                entity1: {\n                                    value: foundedStates[role].ACTUAL,\n                                    set: foundedStates[role].SET,\n                                },\n                            },\n                        };\n                        itemConfig = tempItem;\n\n                        break;\n                    }\n                    case 'light': {\n                        const tempItem: typePageItem.PageItemDataItemsOptions = {\n                            type: 'light',\n                            role: 'light',\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon || 'lightbulb',\n                                        },\n                                        color: await this.getIconColor(item.onColor, Color.light),\n                                    },\n                                    false: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon2 || 'lightbulb-outline',\n                                        },\n                                        color: await this.getIconColor(item.offColor, Color.dark),\n                                    },\n                                    scale: Types.isIconColorScaleElement(item.colorScale)\n                                        ? { type: 'const', constVal: item.colorScale }\n                                        : undefined,\n                                    maxBri: undefined,\n                                    minBri: undefined,\n                                },\n                                colorMode: { type: 'const', constVal: false },\n                                headline: headline,\n                                entity1: {\n                                    value: foundedStates[role].ON_ACTUAL,\n                                    set: foundedStates[role].SET,\n                                },\n                            },\n                        };\n                        itemConfig = tempItem;\n\n                        break;\n                    }\n\n                    case 'dimmer': {\n                        const tempItem: typePageItem.PageItemDataItemsOptions = {\n                            type: 'light',\n                            role: 'dimmer',\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon || 'lightbulb',\n                                        },\n                                        color: await this.getIconColor(item.onColor, Color.light),\n                                    },\n                                    false: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon2 || 'lightbulb-outline',\n                                        },\n                                        color: await this.getIconColor(item.offColor, Color.dark),\n                                    },\n                                    scale: Types.isIconColorScaleElement(item.colorScale)\n                                        ? { type: 'const', constVal: item.colorScale }\n                                        : undefined,\n                                    maxBri: item.maxValueBrightness\n                                        ? { type: 'const', constVal: item.maxValueBrightness }\n                                        : undefined,\n                                    minBri: item.minValueBrightness\n                                        ? { type: 'const', constVal: item.minValueBrightness }\n                                        : undefined,\n                                },\n                                colorMode: item.colormode ? { type: 'const', constVal: !!item.colormode } : undefined,\n                                dimmer: {\n                                    value: foundedStates[role].ACTUAL,\n                                    set: foundedStates[role].SET,\n                                    maxScale: item.maxValueBrightness\n                                        ? { type: 'const', constVal: item.maxValueBrightness }\n                                        : undefined,\n                                    minScale: item.minValueBrightness\n                                        ? { type: 'const', constVal: item.minValueBrightness }\n                                        : undefined,\n                                },\n                                headline: headline,\n                                text1: {\n                                    true: {\n                                        type: 'const',\n                                        constVal: `Brightness`,\n                                    },\n                                },\n                                entity1: {\n                                    value: foundedStates[role].ON_ACTUAL,\n                                    set: foundedStates[role].ON_SET,\n                                },\n                            },\n                        };\n                        itemConfig = tempItem;\n                        break;\n                    }\n                    case 'rgbSingle':\n                    case 'ct':\n                    case 'rgb':\n                    case 'hue': {\n                        let isKelvin = true;\n                        if (foundedStates[role].TEMPERATURE?.dp) {\n                            const state = await this.adapter.getForeignStateAsync(foundedStates[role].TEMPERATURE.dp);\n                            if (state && typeof state.val === 'number' && state.val <= 1000) {\n                                isKelvin = false;\n                            }\n                        }\n                        let valueList2: any = undefined;\n                        const selectExist = item.inSel_Alias && (await this.existsState(item.inSel_Alias));\n                        if (selectExist && item.inSel_Alias) {\n                            const select = await this.adapter.getForeignObjectAsync(item.inSel_Alias);\n                            if (select && select.common && select.common.type === 'string') {\n                                valueList2 = item.modeList ? { type: 'const', constVal: item.modeList } : undefined;\n                            }\n                        }\n                        const tempItem: typePageItem.PageItemDataItemsOptions = {\n                            type: 'light',\n                            role:\n                                role === 'hue'\n                                    ? 'hue'\n                                    : role === 'rgb'\n                                      ? 'rgbThree'\n                                      : role === 'rgbSingle'\n                                        ? 'rgbSingle'\n                                        : 'ct',\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon || 'lightbulb',\n                                        },\n                                        color: await this.getIconColor(item.onColor, Color.light),\n                                    },\n                                    false: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon2 || 'lightbulb-outline',\n                                        },\n                                        color: await this.getIconColor(item.offColor, Color.dark),\n                                    },\n                                    scale: Types.isIconColorScaleElement(item.colorScale)\n                                        ? { type: 'const', constVal: item.colorScale }\n                                        : undefined,\n                                    maxBri: item.maxValueBrightness\n                                        ? { type: 'const', constVal: item.maxValueBrightness }\n                                        : undefined,\n                                    minBri: item.minValueBrightness\n                                        ? { type: 'const', constVal: item.minValueBrightness }\n                                        : undefined,\n                                },\n                                colorMode: item.colormode ? { type: 'const', constVal: !!item.colormode } : undefined,\n                                dimmer: {\n                                    value: foundedStates[role].DIMMER,\n                                    maxScale: item.maxValueBrightness\n                                        ? { type: 'const', constVal: item.maxValueBrightness }\n                                        : undefined,\n                                    minScale: item.minValueBrightness\n                                        ? { type: 'const', constVal: item.minValueBrightness }\n                                        : undefined,\n                                },\n                                headline: headline,\n                                hue: role !== 'hue' ? undefined : foundedStates[role].HUE,\n                                Red: role !== 'rgb' ? undefined : foundedStates[role].RED,\n                                Green: role !== 'rgb' ? undefined : foundedStates[role].GREEN,\n                                Blue: role !== 'rgb' ? undefined : foundedStates[role].BLUE,\n                                //White: role !== 'rgb' ? undefined : { value: foundedStates[role].WHITE },\n                                color:\n                                    role !== 'rgbSingle'\n                                        ? undefined\n                                        : {\n                                              true: foundedStates[role].RGB,\n                                          },\n                                ct: {\n                                    value: foundedStates[role].TEMPERATURE,\n                                    maxScale: item.maxValueColorTemp\n                                        ? { type: 'const', constVal: item.maxValueColorTemp }\n                                        : undefined,\n                                    minScale: item.minValueColorTemp\n                                        ? { type: 'const', constVal: item.minValueColorTemp }\n                                        : undefined,\n                                    mode: { type: 'const', constVal: isKelvin ? 'kelvin' : 'mired' },\n                                },\n                                text1: {\n                                    true: {\n                                        type: 'const',\n                                        constVal: `Brightness`,\n                                    },\n                                },\n                                text2: {\n                                    true: {\n                                        type: 'const',\n                                        constVal: `Colour temperature`,\n                                    },\n                                },\n                                text3:\n                                    role === 'ct'\n                                        ? undefined\n                                        : {\n                                              true: {\n                                                  type: 'const',\n                                                  constVal: `Color`,\n                                              },\n                                          },\n                                entity1: {\n                                    value: foundedStates[role].ON_ACTUAL,\n                                    set: foundedStates[role].ON,\n                                },\n                                valueList: item.modeList ? { type: 'const', constVal: item.modeList } : undefined,\n                                valueList2: valueList2,\n                                entityInSel: {\n                                    value:\n                                        item.inSel_Alias && selectExist\n                                            ? { type: 'triggered', dp: item.inSel_Alias }\n                                            : undefined,\n                                    set:\n                                        item.inSel_Alias && selectExist\n                                            ? { type: 'triggered', dp: item.inSel_Alias }\n                                            : undefined,\n                                },\n                            },\n                        };\n                        itemConfig = tempItem;\n                        break;\n                    }\n                    case 'button': {\n                        const tempItem: typePageItem.PageItemDataItemsOptions = {\n                            type: 'button',\n                            role: 'button',\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon || 'gesture-tap-button',\n                                        },\n                                        color: await this.getIconColor(item.onColor, Color.activated),\n                                    },\n                                    false: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon2 || 'gesture-tap-button',\n                                        },\n                                        color: await this.getIconColor(item.offColor, Color.deactivated),\n                                    },\n                                    scale: Types.isIconColorScaleElement(item.colorScale)\n                                        ? { type: 'const', constVal: item.colorScale }\n                                        : undefined,\n                                    maxBri: undefined,\n                                    minBri: undefined,\n                                },\n                                text: text,\n\n                                text1: {\n                                    true: { type: 'const', constVal: 'press' },\n                                },\n                                setValue2: foundedStates[role].SET,\n                            },\n                        };\n                        itemConfig = tempItem;\n                        break;\n                    }\n                    case 'blind': {\n                        if (\n                            foundedStates[role].TILT_OPEN ||\n                            foundedStates[role].TILT_CLOSE ||\n                            foundedStates[role].TILT_STOP\n                        ) {\n                            const tempItem: typePageItem.PageItemDataItemsOptions = {\n                                type: 'shutter',\n                                role: 'blind',\n                                data: {\n                                    icon: {\n                                        true: {\n                                            value: {\n                                                type: 'const',\n                                                constVal: item.icon || 'window-shutter-open',\n                                            },\n                                            color: await this.getIconColor(item.onColor, Color.open),\n                                        },\n                                        false: {\n                                            value: {\n                                                type: 'const',\n                                                constVal: item.icon2 || 'window-shutter',\n                                            },\n                                            color: await this.getIconColor(item.offColor, Color.close),\n                                        },\n                                        unstable: {\n                                            value: {\n                                                type: 'const',\n                                                constVal: item.icon3 || 'window-shutter-alert',\n                                            },\n                                        },\n                                        scale: {\n                                            type: 'const',\n                                            constVal: Types.isIconColorScaleElement(item.colorScale)\n                                                ? item.colorScale\n                                                : {\n                                                      val_min: 0,\n                                                      val_max: 100,\n                                                  },\n                                        },\n                                        maxBri: undefined,\n                                        minBri: undefined,\n                                    },\n                                    text: { true: { type: 'const', constVal: item.secondRow ?? '' } },\n                                    headline: headline,\n\n                                    entity1: {\n                                        value: foundedStates[role].ACTUAL,\n                                        minScale: { type: 'const', constVal: item.minValueLevel ?? 0 },\n\n                                        maxScale: { type: 'const', constVal: item.maxValueLevel ?? 100 },\n\n                                        set: foundedStates[role].SET,\n                                    },\n                                    entity2: {\n                                        value: foundedStates[role].TILT_ACTUAL,\n                                        minScale: { type: 'const', constVal: item.minValueTilt ?? 0 },\n\n                                        maxScale: { type: 'const', constVal: item.maxValueTilt ?? 100 },\n\n                                        set: foundedStates[role].TILT_SET,\n                                    },\n                                    up: foundedStates[role].OPEN,\n                                    down: foundedStates[role].CLOSE,\n                                    stop: foundedStates[role].STOP,\n                                    up2: foundedStates[role].TILT_OPEN,\n                                    down2: foundedStates[role].TILT_CLOSE,\n                                    stop2: foundedStates[role].TILT_STOP,\n                                },\n                            };\n                            itemConfig = tempItem;\n                        } else {\n                            const I2 = (item.shutterIcons && item.shutterIcons[0]) ?? undefined;\n                            const R2 =\n                                item.shutterIcons &&\n                                item.shutterIcons[0] &&\n                                item.shutterIcons[0].id &&\n                                (await this.existsState(item.shutterIcons[0].id))\n                                    ? item.shutterIcons[0].id\n                                    : undefined;\n                            const S2 = R2 && (await this.existsAndWriteableState(R2)) ? R2 : undefined;\n                            const I3 = (item.shutterIcons && item.shutterIcons[1]) ?? undefined;\n                            const R3 =\n                                item.shutterIcons &&\n                                item.shutterIcons[1] &&\n                                item.shutterIcons[1].id &&\n                                (await this.existsState(item.shutterIcons[1].id))\n                                    ? item.shutterIcons[1].id\n                                    : undefined;\n                            const S3 = R3 && (await this.existsAndWriteableState(R3)) ? R3 : undefined;\n                            const I4 = (item.shutterIcons && item.shutterIcons[2]) ?? undefined;\n                            const R4 =\n                                item.shutterIcons &&\n                                item.shutterIcons[2] &&\n                                item.shutterIcons[2].id &&\n                                (await this.existsState(item.shutterIcons[2].id))\n                                    ? item.shutterIcons[2].id\n                                    : undefined;\n                            const S4 = R4 && (await this.existsAndWriteableState(R4)) ? R4 : undefined;\n                            const tempItem: typePageItem.PageItemDataItemsOptions = {\n                                type: 'shutter2',\n                                role: 'blind',\n                                data: {\n                                    icon: {\n                                        true: {\n                                            value: {\n                                                type: 'const',\n                                                constVal: item.icon || 'window-shutter-open',\n                                            },\n                                            color: await this.getIconColor(item.onColor, Color.open),\n                                        },\n                                        false: {\n                                            value: {\n                                                type: 'const',\n                                                constVal: item.icon2 || 'window-shutter',\n                                            },\n                                            color: await this.getIconColor(item.offColor, Color.close),\n                                        },\n                                        unstable: {\n                                            value: {\n                                                type: 'const',\n                                                constVal: item.icon3 || 'window-shutter-alert',\n                                            },\n                                        },\n                                        scale: {\n                                            type: 'const',\n                                            constVal: Types.isIconColorScaleElement(item.colorScale) ?? {\n                                                val_min: 0,\n                                                val_max: 100,\n                                            },\n                                        },\n                                        maxBri: undefined,\n                                        minBri: undefined,\n                                    },\n                                    text: { true: { type: 'const', constVal: item.secondRow ?? '' } },\n                                    headline: headline,\n\n                                    entity1: {\n                                        value: foundedStates[role].ACTUAL,\n                                        minScale: { type: 'const', constVal: item.minValueLevel ?? 0 },\n\n                                        maxScale: { type: 'const', constVal: item.maxValueLevel ?? 100 },\n\n                                        set: foundedStates[role].SET,\n                                    },\n                                    entity2: R2\n                                        ? {\n                                              value: { type: 'triggered', dp: R2 },\n                                              set: S2 ? { type: 'state', dp: S2 } : undefined,\n                                          }\n                                        : undefined,\n                                    icon2: I2\n                                        ? {\n                                              true: {\n                                                  value: {\n                                                      type: 'const',\n                                                      constVal: I2?.icon || 'window-shutter',\n                                                  },\n                                                  color: await this.getIconColor(I2?.iconOnColor, Color.open),\n                                              },\n                                              false: {\n                                                  value: {\n                                                      type: 'const',\n                                                      constVal: I2?.icon2 || 'window-shutter',\n                                                  },\n                                                  color: await this.getIconColor(I2?.iconOffColor, Color.close),\n                                              },\n                                          }\n                                        : undefined,\n                                    entity3: R3\n                                        ? {\n                                              value: { type: 'triggered', dp: R3 },\n                                              set: S3 ? { type: 'state', dp: S3 } : undefined,\n                                          }\n                                        : undefined,\n                                    icon3: I3\n                                        ? {\n                                              true: {\n                                                  value: {\n                                                      type: 'const',\n                                                      constVal: I3?.icon || 'window-shutter',\n                                                  },\n                                                  color: await this.getIconColor(I3?.iconOnColor, Color.open),\n                                              },\n                                              false: {\n                                                  value: {\n                                                      type: 'const',\n                                                      constVal: I3?.icon2 || 'window-shutter',\n                                                  },\n                                                  color: await this.getIconColor(I3?.iconOffColor, Color.close),\n                                              },\n                                          }\n                                        : undefined,\n                                    entity4: R4\n                                        ? {\n                                              value: { type: 'triggered', dp: R4 },\n                                              set: S4 ? { type: 'state', dp: S4 } : undefined,\n                                          }\n                                        : undefined,\n                                    icon4: I4\n                                        ? {\n                                              true: {\n                                                  value: {\n                                                      type: 'const',\n                                                      constVal: I4?.icon || 'window-shutter',\n                                                  },\n                                                  color: await this.getIconColor(I4?.iconOnColor, Color.open),\n                                              },\n                                              false: {\n                                                  value: {\n                                                      type: 'const',\n                                                      constVal: I4?.icon2 || 'window-shutter',\n                                                  },\n                                                  color: await this.getIconColor(I4?.iconOffColor, Color.close),\n                                              },\n                                          }\n                                        : undefined,\n                                    up: foundedStates[role].OPEN,\n                                    down: foundedStates[role].CLOSE,\n                                    stop: foundedStates[role].STOP,\n                                },\n                            };\n                            itemConfig = tempItem;\n                        }\n                        break;\n                    }\n                    case 'gate': {\n                        if (await this.checkRequiredDatapoints('gate', item, 'feature')) {\n                            itemConfig = {\n                                type: 'shutter',\n                                role: 'gate',\n                                data: {\n                                    icon: {\n                                        true: {\n                                            value: {\n                                                type: 'const',\n                                                constVal: item.icon || 'garage-open',\n                                            },\n                                            color: await this.getIconColor(item.onColor, Color.open),\n                                        },\n                                        false: {\n                                            value: {\n                                                type: 'const',\n                                                constVal: item.icon2 || 'garage',\n                                            },\n                                            color: await this.getIconColor(item.offColor, Color.close),\n                                        },\n                                        unstable: {\n                                            value: {\n                                                type: 'const',\n                                                constVal: item.icon3 || 'garage-alert',\n                                            },\n                                        },\n                                        scale: item.colorScale\n                                            ? { type: 'const', constVal: item.colorScale }\n                                            : undefined,\n                                        maxBri: undefined,\n                                        minBri: undefined,\n                                    },\n                                    text: text,\n                                    headline: headline,\n\n                                    entity1: {\n                                        value: foundedStates[role].ACTUAL,\n                                    },\n                                    entity2: undefined,\n                                    up:\n                                        foundedStates[role].SET?.type === 'state'\n                                            ? {\n                                                  ...foundedStates[role].SET,\n                                                  type: 'state',\n                                                  dp: `${item.id}.SET`,\n                                                  write: 'return true;',\n                                              }\n                                            : undefined,\n                                    down:\n                                        foundedStates[role].SET?.type === 'state'\n                                            ? {\n                                                  ...foundedStates[role].SET,\n                                                  type: 'state',\n                                                  dp: `${item.id}.SET`,\n                                                  write: 'return false;',\n                                              }\n                                            : undefined,\n                                    stop: foundedStates[role].STOP,\n                                },\n                            };\n                            break;\n                        } else {\n                            itemConfig = {\n                                template: 'text.gate.isOpen',\n                                dpInit: item.id,\n                                color: {\n                                    true: await this.getIconColor(item.onColor, Color.open),\n                                    false: await this.getIconColor(item.offColor, Color.close),\n                                    scale: Types.isIconColorScaleElement(item.colorScale) ? item.colorScale : undefined,\n                                },\n                                data: {\n                                    entity1: { value: foundedStates[role].ACTUAL },\n                                },\n                            };\n                        }\n                        break;\n                    }\n                    case 'motion':\n                    case 'humidity':\n                    case 'value.humidity':\n                    case 'thermostat':\n                    case 'airCondition':\n                    case 'value.temperature':\n                    case 'temperature':\n                    case 'door':\n                    case 'window': {\n                        let iconOn = 'door-open';\n                        let iconOff = 'door-closed';\n                        let iconUnstable = '';\n                        let textOn: undefined | string = undefined;\n                        let textOff: undefined | string = undefined;\n                        let adapterRole: pages.DeviceRole = '';\n                        let commonUnit = '';\n                        let scaleVal = {};\n                        switch (role) {\n                            case 'motion': {\n                                iconOn = 'motion-sensor';\n                                iconOff = 'motion-sensor';\n                                iconUnstable = '';\n                                adapterRole = 'iconNotText';\n                                textOn = 'motion';\n                                textOff = 'none';\n                                break;\n                            }\n                            case 'door': {\n                                adapterRole = 'iconNotText';\n                                iconOn = 'door-open';\n                                iconOff = 'door-closed';\n                                iconUnstable = 'door-closed';\n                                textOn = 'opened';\n                                textOff = 'closed';\n                                break;\n                            }\n                            case 'window': {\n                                iconOn = 'window-open-variant';\n                                iconOff = 'window-closed-variant';\n                                iconUnstable = 'window-closed-variant';\n                                adapterRole = 'iconNotText';\n                                textOn = 'opened';\n                                textOff = 'closed';\n                                break;\n                            }\n                            case 'thermostat':\n                            case 'airCondition':\n                            case 'value.temperature':\n                            case 'temperature': {\n                                iconOn = 'thermometer';\n                                iconOff = 'snowflake-thermometer';\n                                iconUnstable = 'sun-thermometer';\n                                adapterRole = valueDisplayRole;\n                                if (foundedStates[role].ACTUAL && foundedStates[role].ACTUAL.dp) {\n                                    const o = await this.adapter.getForeignObjectAsync(foundedStates[role].ACTUAL.dp);\n                                    if (o && o.common && o.common.unit) {\n                                        commonUnit = o.common.unit;\n                                    }\n                                }\n                                scaleVal = { val_min: 40, val_max: -10, val_best: 25, mode: 'quadriGradAnchor' };\n                                break;\n                            }\n                            case 'value.humidity':\n                            case 'humidity': {\n                                iconOn = 'water-percent';\n                                iconOff = 'water-off';\n                                iconUnstable = 'water-percent-alert';\n                                adapterRole = valueDisplayRole;\n                                if (foundedStates[role].ACTUAL && foundedStates[role].ACTUAL.dp) {\n                                    const o = await this.adapter.getForeignObjectAsync(foundedStates[role].ACTUAL.dp);\n                                    if (o && o.common && o.common.unit) {\n                                        commonUnit = o.common.unit;\n                                    }\n                                }\n                                scaleVal = { val_min: 0, val_max: 100, val_best: 50, mode: 'triGrad' };\n                                break;\n                            }\n                        }\n                        const tempItem: typePageItem.PageItemDataItemsOptions = {\n                            type: 'text',\n                            role: adapterRole,\n                            template: '',\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: await this.getFieldAsDataItemConfig(item.icon || iconOn),\n                                        color: await this.getIconColor(\n                                            item.onColor || `${item.id}.COLORDEC`,\n                                            Color.good,\n                                        ),\n\n                                        text: (await this.existsState(`${item.id}.ACTUAL`))\n                                            ? {\n                                                  ...iconTextDefaults,\n                                                  value: foundedStates[role].ACTUAL,\n                                              }\n                                            : undefined,\n                                    },\n                                    false: {\n                                        value: await this.getFieldAsDataItemConfig(item.icon2 || iconOff),\n                                        color: await this.getIconColor(\n                                            item.offColor || `${item.id}.COLORDEC`,\n                                            Color.bad,\n                                        ),\n                                        text: (await this.existsState(`${item.id}.ACTUAL`))\n                                            ? {\n                                                  ...iconTextDefaults,\n                                                  value: foundedStates[role].ACTUAL,\n                                              }\n                                            : undefined,\n                                    },\n                                    unstable: {\n                                        value: await this.getFieldAsDataItemConfig(item.icon3 || iconUnstable),\n                                    },\n                                    scale: Types.isIconColorScaleElement(item.colorScale)\n                                        ? { type: 'const', constVal: item.colorScale }\n                                        : { type: 'const', constVal: scaleVal },\n                                    maxBri: undefined,\n                                    minBri: undefined,\n                                },\n                                text1: textOn\n                                    ? {\n                                          true: { type: 'const', constVal: textOn },\n                                          false: textOff ? { type: 'const', constVal: textOff } : undefined,\n                                      }\n                                    : undefined,\n                                text: text,\n                                entity1: {\n                                    value: foundedStates[role].ACTUAL,\n                                },\n                                entity2:\n                                    role === 'temperature' ||\n                                    role === 'humidity' ||\n                                    role === 'value.temperature' ||\n                                    role === 'value.humidity'\n                                        ? {\n                                              value: foundedStates[role].ACTUAL,\n                                              prefix:\n                                                  pages.isCardEntitiesType(page.type) && item.prefixValue\n                                                      ? await this.getFieldAsDataItemConfig(item.prefixValue)\n                                                      : undefined,\n                                              suffix:\n                                                  pages.isCardEntitiesType(page.type) && item.suffixValue\n                                                      ? await this.getFieldAsDataItemConfig(item.suffixValue)\n                                                      : undefined,\n                                              unit:\n                                                  item.unit || commonUnit\n                                                      ? { type: 'const', constVal: item.unit || commonUnit }\n                                                      : undefined,\n                                          }\n                                        : undefined,\n                            },\n                        };\n                        itemConfig = tempItem;\n                        break;\n                    }\n                    case 'info': {\n                        let adapterRole: pages.DeviceRole = '';\n                        let commonUnit = '';\n                        if (foundedStates[role].ACTUAL && foundedStates[role].ACTUAL.dp) {\n                            const o = await this.adapter.getForeignObjectAsync(foundedStates[role].ACTUAL.dp);\n                            if (o && o.common) {\n                                if (o.common.unit) {\n                                    commonUnit = o.common.unit;\n                                }\n                                if (o.common.type === 'boolean') {\n                                    adapterRole = 'iconNotText';\n                                } else {\n                                    adapterRole = valueDisplayRole;\n                                }\n                            }\n                        }\n\n                        const icontemp = item.icon2 || item.icon;\n                        const tempItem: typePageItem.PageItemDataItemsOptions = {\n                            type: 'text',\n                            role: adapterRole,\n                            template: '',\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: item.icon\n                                            ? await this.getFieldAsDataItemConfig(item.icon)\n                                            : (await this.existsState(`${item.id}.USERICON`))\n                                              ? { type: 'triggered', dp: `${item.id}.USERICON` }\n                                              : { type: 'const', constVal: 'information-outline' },\n                                        color: item.onColor\n                                            ? await this.getIconColor(item.onColor, Color.good)\n                                            : (await this.existsState(`${item.id}.COLORDEC`))\n                                              ? { type: 'triggered', dp: `${item.id}.COLORDEC` }\n                                              : { type: 'const', constVal: Color.bad },\n                                        text: (await this.existsState(`${item.id}.ACTUAL`))\n                                            ? {\n                                                  ...iconTextDefaults,\n                                                  value: foundedStates[role].ACTUAL,\n                                              }\n                                            : undefined,\n                                    },\n                                    false: {\n                                        value: icontemp\n                                            ? await this.getFieldAsDataItemConfig(icontemp)\n                                            : (await this.existsState(`${item.id}.USERICON`))\n                                              ? { type: 'triggered', dp: `${item.id}.USERICON` }\n                                              : { type: 'const', constVal: 'information-off-outline' },\n                                        color: item.offColor\n                                            ? await this.getIconColor(item.offColor, Color.good)\n                                            : (await this.existsState(`${item.id}.COLORDEC`))\n                                              ? { type: 'triggered', dp: `${item.id}.COLORDEC` }\n                                              : { type: 'const', constVal: Color.bad },\n                                        text: (await this.existsState(`${item.id}.ACTUAL`))\n                                            ? {\n                                                  ...iconTextDefaults,\n                                                  value: foundedStates[role].ACTUAL,\n                                              }\n                                            : undefined,\n                                    },\n                                },\n                                text: text,\n                                text1: { true: foundedStates[role].ACTUAL },\n                                entity1: { value: foundedStates[role].ACTUAL },\n                                entity2: {\n                                    value: foundedStates[role].ACTUAL,\n                                    unit: item.unit\n                                        ? { type: 'const', constVal: item.unit }\n                                        : { type: 'const', constVal: commonUnit },\n                                    prefix:\n                                        pages.isCardEntitiesType(page.type) && item.prefixValue\n                                            ? await this.getFieldAsDataItemConfig(item.prefixValue)\n                                            : undefined,\n                                    suffix:\n                                        pages.isCardEntitiesType(page.type) && item.suffixValue\n                                            ? await this.getFieldAsDataItemConfig(item.suffixValue)\n                                            : undefined,\n                                },\n                            },\n                        };\n                        itemConfig = tempItem;\n                        break;\n                    }\n                    case 'volume': {\n                        let commonUnit = '';\n                        if (foundedStates[role].ACTUAL && foundedStates[role].ACTUAL.dp) {\n                            const o = await this.adapter.getForeignObjectAsync(foundedStates[role].ACTUAL.dp);\n                            if (o && o.common && o.common.unit) {\n                                commonUnit = o.common.unit;\n                            }\n                        }\n                        const icontemp = item.icon2 || item.icon;\n                        itemConfig = {\n                            template: 'number.volume',\n                            dpInit: item.id,\n                            type: 'number',\n                            role: valueDisplayRole,\n                            color: {\n                                true: await this.getIconColor(item.onColor, Color.on),\n                                false: await this.getIconColor(item.offColor, Color.off),\n                                scale: Types.isIconColorScaleElement(item.colorScale) ? item.colorScale : undefined,\n                            },\n                            icon: {\n                                true: item.icon ? { type: 'const', constVal: item.icon } : undefined,\n                                false: icontemp ? { type: 'const', constVal: icontemp } : undefined,\n                            },\n                            data: {\n                                entity1: {\n                                    value: foundedStates[role].ACTUAL,\n                                    unit:\n                                        item.unit || commonUnit\n                                            ? { type: 'const', constVal: item.unit || commonUnit }\n                                            : undefined,\n                                    set: foundedStates[role].SET,\n                                },\n                                minValue1: item.minValue ? { type: 'const', constVal: item.minValue } : undefined,\n                                maxValue1: item.maxValue ? { type: 'const', constVal: item.maxValue } : undefined,\n                                switch1: foundedStates[role].MUTE,\n                                text: text,\n                                icon: {\n                                    false: {\n                                        value: { type: 'const', constVal: 'volume-mute' },\n                                        text: {\n                                            value: foundedStates[role].ACTUAL,\n                                            unit: { type: 'const', constVal: '%' },\n                                            textSize: item.fontSize\n                                                ? { type: 'const', constVal: item.fontSize }\n                                                : undefined,\n                                        },\n                                        color: { type: 'const', constVal: Color.off },\n                                    },\n                                    true: {\n                                        value: foundedStates[role].ACTUAL\n                                            ? {\n                                                  ...foundedStates[role].ACTUAL,\n                                                  read: `{\n                                                            if (val > 66) {\n                                                                return 'volume-high';\n                                                            }\n                                                            if (val > 33) {\n                                                                return 'volume-medium';\n                                                            }\n                                                            if (val > 0) {\n                                                                return 'volume-low';\n                                                            }\n                                                            return 'volume-mute';\n                                                        }`,\n                                              }\n                                            : undefined,\n                                        text: {\n                                            value: foundedStates[role].ACTUAL,\n                                            unit: { type: 'const', constVal: '%' },\n                                            textSize: item.fontSize\n                                                ? { type: 'const', constVal: item.fontSize }\n                                                : undefined,\n                                        },\n                                        color: { type: 'const', constVal: Color.on },\n                                    },\n                                },\n                            },\n                        };\n                        break;\n                    }\n                    case 'select': {\n                        item.icon2 = item.icon2 || item.icon;\n                        // Use source of select.SET if valueList is not defined and SET has no common.states\n                        if (!item.modeList && foundedStates[role].SET && foundedStates[role].SET.dp) {\n                            const o = await this.adapter.getForeignObjectAsync(foundedStates[role].SET.dp);\n                            if (o && o.common && !o.common.states) {\n                                const alias = o.common.alias?.id;\n                                if (alias) {\n                                    const aliasObj = await this.adapter.getForeignObjectAsync(alias);\n                                    if (\n                                        aliasObj &&\n                                        aliasObj.type === 'state' &&\n                                        aliasObj.common &&\n                                        aliasObj.common.states\n                                    ) {\n                                        if (foundedStates[role].SET.dp === foundedStates[role].ACTUAL?.dp) {\n                                            foundedStates[role].ACTUAL = { ...foundedStates[role].SET, dp: alias };\n                                        }\n                                        foundedStates[role].SET = { ...foundedStates[role].SET, dp: alias };\n                                    }\n                                }\n                            }\n                        }\n\n                        itemConfig = {\n                            type: 'input_sel',\n                            dpInit: item.id,\n                            role: '',\n                            /* color: {\n                                true: await this.getIconColor(item.onColor, Color.),\n                                false: await this.getIconColor(item.offColor, Color.),\n                                scale: Types.isIconColorScaleElement(item.colorScale) ? item.colorScale : undefined,\n                            },\n                            icon: {\n                                true: item.icon ? { type: 'const', constVal: item.icon } : undefined,\n                                false: item.icon2 ? { type: 'const', constVal: item.icon2 } : undefined,\n                            }, */\n                            data: {\n                                entityInSel: {\n                                    value: foundedStates[role].ACTUAL,\n                                    set: foundedStates[role].SET,\n                                },\n                                text: { true: foundedStates[role].ACTUAL },\n                                valueList: item.modeList ? { type: 'const', constVal: item.modeList } : undefined,\n                                icon: {\n                                    true: {\n                                        value: { type: 'const', constVal: item.icon || 'clipboard-list-outline' },\n                                        color: { type: 'const', constVal: item.onColor || Color.Green },\n                                    },\n                                    false: {\n                                        value: { type: 'const', constVal: item.icon2 || 'clipboard-list' },\n                                        color: { type: 'const', constVal: item.offColor || Color.Red },\n                                    },\n                                },\n                                headline: { type: 'const', constVal: item.name || commonName || role },\n                            },\n                        };\n                        break;\n                    }\n                    case 'lock': {\n                        item.icon2 = item.icon2 || item.icon;\n\n                        itemConfig = {\n                            type: 'shutter',\n                            role: '',\n                            icon: {\n                                true: item.icon ? { type: 'const', constVal: item.icon } : undefined,\n                                false: item.icon2 ? { type: 'const', constVal: item.icon2 } : undefined,\n                            },\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: await this.getFieldAsDataItemConfig(item.icon || 'lock-open-variant'),\n                                        color: await this.getIconColor(item.onColor, Color.open),\n                                    },\n\n                                    false: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon2 || 'lock',\n                                        },\n                                        color: await this.getIconColor(item.offColor, Color.close),\n                                    },\n                                },\n                                text: {\n                                    true: { type: 'const', constVal: 'lockOpen' },\n                                    false: { type: 'const', constVal: 'lockClosed' },\n                                },\n                                headline: headline,\n\n                                entity1: {\n                                    value: foundedStates[role].ACTUAL,\n                                },\n                                entity2: undefined,\n                                valueList: item.modeList\n                                    ? { type: 'const', constVal: item.modeList }\n                                    : {\n                                          type: 'const',\n                                          constVal: ['lock-open-check-outline', 'lock-open-variant', 'lock'],\n                                      },\n                                up: foundedStates[role].OPEN,\n                                stop: foundedStates[role].SET\n                                    ? JSON.parse(\n                                          JSON.stringify({\n                                              ...foundedStates[role].SET,\n                                              type: 'state',\n                                              write: 'return true',\n                                          }),\n                                      )\n                                    : undefined,\n                                down: foundedStates[role].SET\n                                    ? JSON.parse(\n                                          JSON.stringify({\n                                              ...foundedStates[role].SET,\n                                              type: 'state',\n                                              write: 'return false',\n                                          }),\n                                      )\n                                    : undefined,\n                                up2: undefined,\n                                down2: undefined,\n                                stop2: undefined,\n                            },\n                        };\n                        break;\n                    }\n                    case 'slider': {\n                        itemConfig = {\n                            dpInit: item.id,\n                            type: 'number',\n                            role: valueDisplayRole,\n                            template: '',\n\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: item.icon\n                                            ? { type: 'const', constVal: item.icon }\n                                            : { type: 'const', constVal: 'plus-minus-variant' },\n                                        text: {\n                                            ...iconTextDefaults,\n                                            value: foundedStates[role].ACTUAL,\n                                        },\n                                        color: await this.getIconColor(item.onColor, Color.activated),\n                                    },\n                                    false: item.icon2\n                                        ? {\n                                              value: item.icon2 ? { type: 'const', constVal: item.icon2 } : undefined,\n                                              text: {\n                                                  ...iconTextDefaults,\n                                                  value: foundedStates[role].ACTUAL,\n                                              },\n                                              color: await this.getIconColor(item.offColor, Color.deactivated),\n                                          }\n                                        : undefined,\n                                    scale: Types.isIconColorScaleElement(item.colorScale)\n                                        ? { type: 'const', constVal: item.colorScale }\n                                        : undefined,\n                                },\n                                entity1: {\n                                    value:\n                                        item.sliderItems &&\n                                        item.sliderItems[0] &&\n                                        item.sliderItems[0].id &&\n                                        (await this.existsAndWriteableState(item.sliderItems[0].id))\n                                            ? { type: 'triggered', dp: item.sliderItems[0].id }\n                                            : foundedStates[role].ACTUAL,\n                                    set:\n                                        item.sliderItems &&\n                                        item.sliderItems[0] &&\n                                        item.sliderItems[0].id &&\n                                        (await this.existsAndWriteableState(item.sliderItems[0].id))\n                                            ? { type: 'triggered', dp: item.sliderItems[0].id }\n                                            : foundedStates[role].SET,\n                                },\n\n                                heading1: {\n                                    type: 'const',\n                                    constVal:\n                                        item.sliderItems && item.sliderItems[0]\n                                            ? item.sliderItems[0].heading\n                                            : 'Slider 1',\n                                },\n                                minValue1:\n                                    item.sliderItems && item.sliderItems[0] && item.sliderItems[0].minValue\n                                        ? { type: 'const', constVal: item.sliderItems[0].minValue }\n                                        : undefined,\n                                maxValue1:\n                                    item.sliderItems && item.sliderItems[0] && item.sliderItems[0].maxValue\n                                        ? { type: 'const', constVal: item.sliderItems[0].maxValue }\n                                        : undefined,\n                                zero1:\n                                    item.sliderItems && item.sliderItems[0] && item.sliderItems[0].zeroValue\n                                        ? { type: 'const', constVal: item.sliderItems[0].zeroValue }\n                                        : undefined,\n                                steps1:\n                                    item.sliderItems && item.sliderItems[0] && item.sliderItems[0].stepValue\n                                        ? { type: 'const', constVal: item.sliderItems[0].stepValue }\n                                        : undefined,\n\n                                entity2: {\n                                    value:\n                                        item.sliderItems &&\n                                        item.sliderItems[1] &&\n                                        item.sliderItems[1].id &&\n                                        (await this.existsAndWriteableState(item.sliderItems[1].id))\n                                            ? { type: 'triggered', dp: item.sliderItems[1].id }\n                                            : foundedStates[role].ACTUAL2,\n                                    set:\n                                        item.sliderItems &&\n                                        item.sliderItems[1] &&\n                                        item.sliderItems[1].id &&\n                                        (await this.existsAndWriteableState(item.sliderItems[1].id))\n                                            ? { type: 'triggered', dp: item.sliderItems[1].id }\n                                            : foundedStates[role].SET2,\n                                },\n                                heading2: {\n                                    type: 'const',\n                                    constVal:\n                                        item.sliderItems && item.sliderItems[1]\n                                            ? item.sliderItems[1].heading\n                                            : 'Slider 2',\n                                },\n                                minValue2:\n                                    item.sliderItems && item.sliderItems[1] && item.sliderItems[1].minValue\n                                        ? { type: 'const', constVal: item.sliderItems[1].minValue }\n                                        : undefined,\n                                maxValue2:\n                                    item.sliderItems && item.sliderItems[1] && item.sliderItems[1].maxValue\n                                        ? { type: 'const', constVal: item.sliderItems[1].maxValue }\n                                        : undefined,\n                                zero2:\n                                    item.sliderItems && item.sliderItems[1] && item.sliderItems[1].zeroValue\n                                        ? { type: 'const', constVal: item.sliderItems[1].zeroValue }\n                                        : undefined,\n                                steps2:\n                                    item.sliderItems && item.sliderItems[1] && item.sliderItems[1].stepValue\n                                        ? { type: 'const', constVal: item.sliderItems[1].stepValue }\n                                        : undefined,\n                                entity3: {\n                                    value:\n                                        item.sliderItems &&\n                                        item.sliderItems[2] &&\n                                        item.sliderItems[2].id &&\n                                        (await this.existsAndWriteableState(item.sliderItems[2].id))\n                                            ? { type: 'triggered', dp: item.sliderItems[2].id }\n                                            : foundedStates[role].ACTUAL3,\n                                    set:\n                                        item.sliderItems &&\n                                        item.sliderItems[2] &&\n                                        item.sliderItems[2].id &&\n                                        (await this.existsAndWriteableState(item.sliderItems[2].id))\n                                            ? { type: 'triggered', dp: item.sliderItems[2].id }\n                                            : foundedStates[role].SET3,\n                                },\n                                heading3: {\n                                    type: 'const',\n                                    constVal:\n                                        item.sliderItems && item.sliderItems[2]\n                                            ? item.sliderItems[2].heading\n                                            : 'Slider 3',\n                                },\n                                minValue3:\n                                    item.sliderItems && item.sliderItems[2] && item.sliderItems[2].minValue\n                                        ? { type: 'const', constVal: item.sliderItems[2].minValue }\n                                        : undefined,\n                                maxValue3:\n                                    item.sliderItems && item.sliderItems[2] && item.sliderItems[2].maxValue\n                                        ? { type: 'const', constVal: item.sliderItems[2].maxValue }\n                                        : undefined,\n                                zero3:\n                                    item.sliderItems && item.sliderItems[2] && item.sliderItems[2].zeroValue\n                                        ? { type: 'const', constVal: item.sliderItems[2].zeroValue }\n                                        : undefined,\n                                steps3:\n                                    item.sliderItems && item.sliderItems[2] && item.sliderItems[2].stepValue\n                                        ? { type: 'const', constVal: item.sliderItems[2].stepValue }\n                                        : undefined,\n\n                                text: {\n                                    true: { type: 'const', constVal: item.name || 'slider' },\n                                    false: undefined,\n                                },\n                            },\n                        };\n                        break;\n                    }\n                    case 'warning': {\n                        itemConfig = {\n                            template: 'text.warning',\n                            role: 'text',\n                            type: 'text',\n                            dpInit: item.id,\n\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: { type: 'const', constVal: item.icon || 'alert-decagram-outline' },\n                                        color: await this.getIconColor(item.onColor, Color.attention),\n                                    },\n                                    false: {\n                                        value: { type: 'const', constVal: item.icon2 || 'alert-decagram-outline' },\n                                        color: await this.getIconColor(item.offColor, Color.deactivated),\n                                    },\n                                },\n                            },\n                        };\n                        break;\n                    }\n                    case 'level.timer': {\n                        let isAlarm = false;\n                        if (foundedStates[role].ACTUAL && foundedStates[role].ACTUAL.dp) {\n                            const o = await this.adapter.getForeignObjectAsync(foundedStates[role].ACTUAL.dp);\n                            if (o && o.common && o.common.role === 'date') {\n                                isAlarm = true;\n                            }\n                        }\n                        const icon = isAlarm\n                            ? foundedStates[role].SET\n                                ? 'clock-edit-outline'\n                                : 'alarm'\n                            : foundedStates[role].SET\n                              ? 'timer-edit-outline'\n                              : foundedStates[role].ACTUAL\n                                ? 'timer-outline'\n                                : 'timer';\n                        const iconFalse = isAlarm\n                            ? 'alarm-off'\n                            : foundedStates[role].SET\n                              ? 'timer-off-outline'\n                              : foundedStates[role].ACTUAL\n                                ? 'timer-off-outline'\n                                : 'timer-off';\n                        item.icon2 = item.icon2 || item.icon;\n\n                        itemConfig = {\n                            role: 'timer',\n                            type: 'timer',\n                            dpInit: '',\n\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon || icon || 'timer',\n                                        },\n                                        color: await this.getIconColor(item.onColor, Color.activated),\n                                    },\n                                    false: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon2 || iconFalse || 'timer',\n                                        },\n                                        color: await this.getIconColor(item.offColor, Color.deactivated),\n                                    },\n                                    scale: Types.isIconColorScaleElement(item.colorScale)\n                                        ? { type: 'const', constVal: item.colorScale }\n                                        : undefined,\n                                    maxBri: undefined,\n                                    minBri: undefined,\n                                },\n                                entity1: { value: foundedStates[role].ACTUAL, set: foundedStates[role].SET },\n                                headline: { type: 'const', constVal: 'Timer' },\n\n                                setValue1: foundedStates[role].STATE,\n                                setValue2: foundedStates[role].STATUS,\n                            },\n                        };\n                        break;\n                    }\n                    case 'sensor.alarm.flood': {\n                        throw new Error(`DP: ${item.id} - Channel role ${role} not implemented yet!!`);\n                    }\n                    case 'level.mode.fan': {\n                        //let states: string[] | Record<string, string> = ['State 1', 'State 2', 'State 3'];\n                        let states: string[] | undefined;\n                        let keys: string[] | undefined;\n                        if (foundedStates[role].MODE?.dp) {\n                            const o = await this.adapter.getForeignObjectAsync(foundedStates[role].MODE.dp);\n                            if (o?.common?.states) {\n                                states = Object.values(o.common.states).map(String);\n                                keys = Object.keys(o.common.states).map(String);\n                            }\n                        }\n\n                        itemConfig = {\n                            role: 'fan',\n                            type: 'fan',\n                            dpInit: '',\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: { type: 'const', constVal: item.icon || 'fan' },\n                                        color: { type: 'const', constVal: item.onColor || Color.Green },\n                                    },\n                                    false: {\n                                        value: { type: 'const', constVal: item.icon2 || 'fan-off' },\n                                        color: { type: 'const', constVal: item.offColor || Color.Red },\n                                    },\n                                },\n                                entity1: {\n                                    value: foundedStates[role].ACTUAL,\n                                    set: foundedStates[role].SET,\n                                },\n                                speed: {\n                                    value: foundedStates[role].SPEED,\n                                    maxScale: { type: 'const', constVal: item.maxValueLevel || 100 },\n                                },\n                                headline: { type: 'const', constVal: item.name || commonName || role },\n                                text: { true: { type: 'const', constVal: 'Speed' }, false: undefined },\n\n                                //entityInSel: { value: { type: 'const', constVal: '2' } },\n                                entityInSel: { value: foundedStates[role].MODE },\n\n                                /**\n                                 * valueList string[]/stringify oder string?string?string?string stelle korreliert mit setList  {input_sel}\n                                 */\n                                //valueList: { type: 'const', constVal: '1?2?3?4?5' },\n\n                                valueList: item.modeList\n                                    ? { type: 'const', constVal: item.modeList }\n                                    : {\n                                          type: 'const',\n                                          constVal: Array.isArray(keys) ? keys : [],\n                                      },\n                                valueList2: item.modeList\n                                    ? undefined\n                                    : { type: 'const', constVal: Array.isArray(states) ? states : [] },\n                                /* valueList: {\n                                    type: 'const',\n                                    constVal: Array.isArray(states) ? states.join('?') : JSON.stringify(states),\n                                }, */\n                            },\n                        };\n                        break;\n                    }\n                    case 'media': {\n                        const offIcon = item.icon2 || item.icon;\n                        let id = foundedStates[role].STATE?.dp || item.id;\n                        let defaultColorOn = Color.on;\n                        let defaultColorOff = Color.off;\n                        let defaultIconOn = 'pause';\n                        let defaultIconOff = 'play';\n                        let nav: Types.DataItemsOptions | undefined = undefined;\n                        if (!(await this.existsState(id))) {\n                            throw new Error(`DP: ${item.id} - media STATE ${id} not found!`);\n                        }\n                        if (!item.asControl) {\n                            const o = await this.adapter.getForeignObjectAsync(id);\n                            if (!o || !o.common.alias?.id) {\n                                throw new Error(`DP: ${item.id} - media STATE ${id} has no alias!`);\n                            }\n\n                            id = o.common.alias.id;\n                            if (!(await this.existsState(id))) {\n                                throw new Error(`DP: ${item.id} - media ALIAS STATE ${id} not found!`);\n                            }\n                            const { messages } = await PageMedia.getPage(\n                                this,\n                                {\n                                    media: { id },\n                                    uniqueName: `media-${item.id}`,\n                                    type: 'cardMedia',\n                                    items: [],\n                                    heading: '',\n                                },\n                                {\n                                    template: undefined,\n                                    dpInit: id,\n                                    uniqueID: `media-${item.id}`,\n                                    pageItems: [],\n                                    config: { card: 'cardMedia', data: {} },\n                                    alwaysOn: 'none',\n                                } as pages.PageBase,\n                                [],\n                                true,\n                            );\n                            if (messages[0] !== 'done') {\n                                throw new Error(`DP: ${item.id} - media ALIAS STATE ${id} not supported!`);\n                            }\n                            pageConfig = {\n                                type: 'cardMedia',\n                                uniqueName: `media-${item.id}`,\n                                media: { id },\n                                heading: '',\n                                items: [],\n                            };\n                            nav = { type: 'const', constVal: `media-${item.id}` };\n                            defaultColorOn = Color.activated;\n                            defaultColorOff = Color.deactivated;\n                            defaultIconOn = 'play-box-multiple';\n                            defaultIconOff = 'play-box-multiple-outline';\n                        }\n                        itemConfig = {\n                            role: '',\n                            type: 'button',\n                            dpInit: item.id,\n                            template: undefined,\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: item.icon\n                                            ? { type: 'const', constVal: item.icon }\n                                            : { type: 'const', constVal: defaultIconOn },\n                                        color: await this.getIconColor(item.onColor, defaultColorOn),\n                                    },\n                                    false: {\n                                        value: offIcon\n                                            ? { type: 'const', constVal: offIcon }\n                                            : { type: 'const', constVal: defaultIconOff },\n                                        color: await this.getIconColor(item.offColor, defaultColorOff),\n                                    },\n                                    scale: Types.isIconColorScaleElement(item.colorScale)\n                                        ? { type: 'const', constVal: item.colorScale }\n                                        : undefined,\n                                },\n                                text: text,\n                                text1: {\n                                    true: headline,\n                                },\n                                entity1: {\n                                    value: foundedStates[role].STATE,\n                                },\n                                setNavi: nav,\n                            },\n                        };\n                        break;\n                    }\n                    default: {\n                        exhaustiveCheck(role);\n                        const roleStr = typeof role === 'string' ? role : String(role);\n                        throw new Error(`DP: ${item.id} - Channel role ${roleStr} is not supported!!!`);\n                    }\n                }\n                if (item.filter != null && itemConfig) {\n                    itemConfig.filter = item.filter;\n                }\n                if (item.enabled === false && itemConfig) {\n                    if (!itemConfig.data) {\n                        itemConfig.data = {};\n                    }\n                    itemConfig.data.enabled = { type: 'const', constVal: false };\n                } else if (itemConfig && (await this.existsState(`${item.id}.ENABLED`))) {\n                    if (!itemConfig.data) {\n                        itemConfig.data = {};\n                    }\n                    itemConfig.data.enabled = { type: 'triggered', dp: `${item.id}.ENABLED` };\n                }\n                return { itemConfig, messages, pageConfig };\n            }\n            throw new Error(`Object ${item.id} not found!`);\n        }\n        return { itemConfig: undefined, messages };\n    }\n\n    async getScreensaverConfig(\n        config: ScriptConfig.Config,\n        messages: string[] = [],\n    ): Promise<{ configArray: pages.PageBase; messages: string[] }> {\n        let pageItems: typePageItem.PageItemDataItemsOptions[] = [];\n\n        const loadElementSection = async (\n            items: ScriptConfig.ScreenSaverElement[] | undefined,\n            mode: 'favorit' | 'alternate' | 'bottom',\n            errorLabel: string,\n        ): Promise<typePageItem.PageItemDataItemsOptions[]> => {\n            if (!items || items.length === 0) {\n                return [];\n            }\n            const tasks = items.map(item =>\n                this.getEntityData(item, mode, config).catch(err => {\n                    const msg = `${errorLabel} - ${String(err)}`;\n                    messages.push(msg);\n                    this.log.error(msg);\n                    return null;\n                }),\n            );\n            const res = await Promise.all(tasks);\n            return res.filter((r): r is typePageItem.PageItemDataItemsOptions => !!r);\n        };\n        const loadNotifySection = async (\n            items: ScriptConfig.ScreenSaverNotifyElement[] | undefined,\n            mode: 'notify',\n            errorLabel: string,\n        ): Promise<typePageItem.PageItemDataItemsOptions[]> => {\n            if (!items || items.length === 0) {\n                return [];\n            }\n            const tasks = items.map(item =>\n                this.getNotifyEntityData(item, mode).catch(err => {\n                    const msg = `${errorLabel} - ${String(err)}`;\n                    messages.push(msg);\n                    this.log.error(msg);\n                    return null;\n                }),\n            );\n            const res = await Promise.all(tasks);\n            return res.filter((r): r is typePageItem.PageItemDataItemsOptions => !!r);\n        };\n\n        const loadElementSectionUndef = async (\n            items: ScriptConfig.ScreenSaverElementWithUndefined[] | undefined,\n            mode: 'left' | 'indicator',\n            errorLabel: string,\n        ): Promise<typePageItem.PageItemDataItemsOptions[]> => {\n            if (!items || items.length === 0) {\n                return [];\n            }\n            const tasks = items.map(item => {\n                if (!item) {\n                    return Promise.resolve<typePageItem.PageItemDataItemsOptions | null>(null);\n                }\n                return this.getEntityData(item, mode, config).catch(err => {\n                    const msg = `${errorLabel} - ${String(err)}`;\n                    messages.push(msg);\n                    this.log.error(msg);\n                    return null;\n                });\n            });\n            const res = await Promise.all(tasks);\n            return res.filter((r): r is typePageItem.PageItemDataItemsOptions => !!r);\n        };\n\n        const loadMrIcon = async (\n            entity: ScriptConfig.ScreenSaverMRElement | undefined,\n            errorLabel: string,\n        ): Promise<typePageItem.PageItemDataItemsOptions[]> => {\n            if (!entity) {\n                return [];\n            }\n            try {\n                const r = await this.getMrEntityData(entity, 'mricon');\n                return [r];\n            } catch (err) {\n                {\n                    const msg = `${errorLabel} - ${String(err)}`;\n                    messages.push(msg);\n                    this.log.error(msg);\n                    return [];\n                }\n            }\n        };\n\n        // Abschnitte parallel laden\n        const countBefore = {\n            favorit: config.favoritScreensaverEntity?.length || 0,\n            alternate: config.alternateScreensaverEntity?.length || 0,\n            left: config.leftScreensaverEntity?.length || 0,\n            bottom: config.bottomScreensaverEntity?.length || 0,\n            indicator: config.indicatorScreensaverEntity?.length || 0,\n            mrIcon1: config.mrIcon1ScreensaverEntity ? 1 : 0,\n            mrIcon2: config.mrIcon2ScreensaverEntity ? 1 : 0,\n            notify: config.notifyScreensaverEntity?.length || 0,\n        };\n\n        const blocks = await Promise.all<typePageItem.PageItemDataItemsOptions[]>([\n            loadElementSection(config.favoritScreensaverEntity, 'favorit', 'favoritScreensaverEntity'),\n            loadElementSection(config.alternateScreensaverEntity, 'alternate', 'alternateScreensaverEntity'),\n            loadElementSectionUndef(config.leftScreensaverEntity, 'left', 'leftScreensaverEntity'),\n            loadElementSection(config.bottomScreensaverEntity, 'bottom', 'bottomScreensaverEntity'),\n            loadElementSectionUndef(config.indicatorScreensaverEntity, 'indicator', 'indicatorScreensaverEntity'),\n            loadMrIcon(config.mrIcon1ScreensaverEntity, 'mrIcon1ScreensaverEntity'),\n            loadMrIcon(config.mrIcon2ScreensaverEntity, 'mrIcon2ScreensaverEntity'),\n            loadNotifySection(config.notifyScreensaverEntity, 'notify', 'notifyScreensaverEntity'),\n        ]);\n\n        // In fixer Block-Reihenfolge zusammenf\u00FChren\n        const blockNames = [\n            'favorit',\n            'alternate',\n            'left',\n            'bottom',\n            'indicator',\n            'mrIcon1',\n            'mrIcon2',\n            'notify',\n        ] as const;\n        for (let i = 0; i < blocks.length; i++) {\n            const arr = blocks[i];\n            const blockName = blockNames[i];\n            const expectedCount = Object.values(countBefore)[i];\n            if (arr.length < expectedCount) {\n                const msg = `Warning: ${blockName}ScreensaverEntity - loaded ${arr.length} of ${expectedCount} configured items`;\n                messages.push(msg);\n                this.log.warn(msg);\n            }\n            pageItems.push(...arr);\n        }\n        // if weatherEntity is set, add alot weather data to screensaver :)\n        if (this.adapter.config.weatherEntity) {\n            config.weatherEntity = this.adapter.config.weatherEntity;\n        }\n        if (config.weatherEntity) {\n            config.weatherEntity = `${config.weatherEntity.split('.').slice(0, 2).join('.')}.`;\n            const toAdd: typeof pageItems = [];\n            const add = config.weatherAddDefaultItems;\n            const addAll = add === true;\n            const want = (k: keyof ScriptConfig.WeatherAddDefaultItemsJson): boolean =>\n                addAll ||\n                (add != null &&\n                    typeof add === 'object' &&\n                    (add as Record<string, boolean | undefined>)[k] !== undefined &&\n                    (add as Record<string, boolean | undefined>)[k] === true);\n\n            if (config.weatherEntity.startsWith('accuweather.') && config.weatherEntity.endsWith('.')) {\n                const instance = config.weatherEntity.split('.')[1];\n                if (pageItems.findIndex(x => x.modeScr === 'favorit') === -1) {\n                    pageItems.push({\n                        template: 'text.accuweather.favorit',\n                        dpInit: `/^accuweather\\\\.${instance}.+/`,\n                        modeScr: 'favorit',\n                    });\n                }\n\n                {\n                    if (want('sunriseSet')) {\n                        toAdd.push({\n                            template: 'text.accuweather.sunriseset',\n                            dpInit: `/^accuweather\\\\.${instance}.Daily.+/`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('forecastDay1')) {\n                        toAdd.push({\n                            template: 'text.accuweather.bot2values',\n                            dpInit: `/^accuweather\\\\.${instance}.+?d1$/g`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('forecastDay2')) {\n                        toAdd.push({\n                            template: 'text.accuweather.bot2values',\n                            dpInit: `/^accuweather\\\\.${instance}.+?d2$/`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('forecastDay3')) {\n                        toAdd.push({\n                            template: 'text.accuweather.bot2values',\n                            dpInit: `/^accuweather\\\\.${instance}.+?d3$/`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('forecastDay4')) {\n                        toAdd.push({\n                            template: 'text.accuweather.bot2values',\n                            dpInit: `/^accuweather\\\\.${instance}.+?d4$/`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('forecastDay5')) {\n                        toAdd.push({\n                            template: 'text.accuweather.bot2values',\n                            dpInit: `/^accuweather\\\\.${instance}.+?d5$/`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('windSpeed')) {\n                        toAdd.push({\n                            template: 'text.accuweather.windspeed',\n                            dpInit: `/^accuweather\\\\.${instance}./`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('windGust')) {\n                        toAdd.push({\n                            template: 'text.accuweather.windgust',\n                            dpInit: `/^accuweather\\\\.${instance}./`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('windDirection')) {\n                        toAdd.push({\n                            template: 'text.accuweather.winddirection',\n                            dpInit: `/^accuweather\\\\.${instance}./`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('uvIndex')) {\n                        toAdd.push({\n                            template: 'text.accuweather.uvindex',\n                            dpInit: `/^accuweather\\\\.${instance}./`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                }\n            } else if (config.weatherEntity.startsWith('openweathermap.') && config.weatherEntity.endsWith('.')) {\n                const instance = config.weatherEntity.split('.')[1];\n                if (pageItems.findIndex(x => x.modeScr === 'favorit') === -1) {\n                    pageItems.push({\n                        template: 'text.openweathermap.favorit',\n                        dpInit: `/^openweathermap\\\\.${instance}.+/`,\n                        modeScr: 'favorit',\n                    });\n                }\n\n                {\n                    if (want('sunriseSet')) {\n                        toAdd.push({\n                            template: 'text.openweathermap.sunriseset',\n                            dpInit: `/^openweathermap\\\\.${instance}\\\\.forecast\\\\.current.+/`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('forecastDay1')) {\n                        toAdd.push({\n                            template: 'text.openweathermap.bot2values',\n                            dpInit: `/^openweathermap\\\\.${instance}.+?\\\\.day0/`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('forecastDay2')) {\n                        toAdd.push({\n                            template: 'text.openweathermap.bot2values',\n                            dpInit: `/^openweathermap\\\\.${instance}.+?\\\\.day1/`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('forecastDay3')) {\n                        toAdd.push({\n                            template: 'text.openweathermap.bot2values',\n                            dpInit: `/^openweathermap\\\\.${instance}.+?\\\\.day2/`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('forecastDay4')) {\n                        toAdd.push({\n                            template: 'text.openweathermap.bot2values',\n                            dpInit: `/^openweathermap\\\\.${instance}.+?\\\\.day3/`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('forecastDay5')) {\n                        toAdd.push({\n                            template: 'text.openweathermap.bot2values',\n                            dpInit: `/^openweathermap\\\\.${instance}.+?\\\\.day4/`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('forecastDay6')) {\n                        toAdd.push({\n                            template: 'text.openweathermap.bot2values',\n                            dpInit: `/^openweathermap\\\\.${instance}.+?\\\\.day5/`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('windSpeed')) {\n                        toAdd.push({\n                            template: 'text.openweathermap.windspeed',\n                            dpInit: `/^openweathermap\\\\.${instance}./`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('windGust')) {\n                        toAdd.push({\n                            template: 'text.openweathermap.windgust',\n                            dpInit: `/^openweathermap\\\\.${instance}./`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('windDirection')) {\n                        toAdd.push({\n                            template: 'text.openweathermap.winddirection',\n                            dpInit: `/^openweathermap\\\\.${instance}./`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                }\n            } else if (config.weatherEntity.startsWith('pirate-weather.') && config.weatherEntity.endsWith('.')) {\n                const instance = config.weatherEntity.split('.')[1];\n                if (pageItems.findIndex(x => x.modeScr === 'favorit') === -1) {\n                    pageItems.push({\n                        template: 'text.pirate-weather.favorit',\n                        dpInit: `/^pirate-weather\\\\.${instance}\\\\.weather\\\\.currently\\\\./`,\n                        modeScr: 'favorit',\n                    });\n                }\n\n                {\n                    if (want('sunriseSet')) {\n                        toAdd.push({\n                            template: 'text.pirate-weather.sunriseset',\n                            dpInit: `/^pirate-weather\\\\.${instance}\\\\.weather\\\\.daily\\\\.00.+/`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('forecastDay1')) {\n                        toAdd.push({\n                            template: 'text.pirate-weather.bot2values',\n                            dpInit: `/^pirate-weather\\\\.${instance}.+?\\\\.daily\\\\.01/`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('forecastDay2')) {\n                        toAdd.push({\n                            template: 'text.pirate-weather.bot2values',\n                            dpInit: `/^pirate-weather\\\\.${instance}.+?\\\\.daily\\\\.02/`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('forecastDay3')) {\n                        toAdd.push({\n                            template: 'text.pirate-weather.bot2values',\n                            dpInit: `/^pirate-weather\\\\.${instance}.+?\\\\.daily\\\\.03/`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('forecastDay4')) {\n                        toAdd.push({\n                            template: 'text.pirate-weather.bot2values',\n                            dpInit: `/^pirate-weather\\\\.${instance}.+?\\\\.daily\\\\.04/`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('forecastDay5')) {\n                        toAdd.push({\n                            template: 'text.pirate-weather.bot2values',\n                            dpInit: `/^pirate-weather\\\\.${instance}.+?\\\\.daily\\\\.05/`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('forecastDay6')) {\n                        toAdd.push({\n                            template: 'text.pirate-weather.bot2values',\n                            dpInit: `/^pirate-weather\\\\.${instance}.+?\\\\.daily\\\\.06/`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('windSpeed')) {\n                        toAdd.push({\n                            template: 'text.pirate-weather.windspeed',\n                            dpInit: `/^pirate-weather\\\\.${instance}\\\\.weather\\\\.currently./`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('windGust')) {\n                        toAdd.push({\n                            template: 'text.pirate-weather.windgust',\n                            dpInit: `/^pirate-weather\\\\.${instance}\\\\.weather\\\\.currently./`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('windDirection')) {\n                        toAdd.push({\n                            template: 'text.pirate-weather.winddirection',\n                            dpInit: `/^pirate-weather\\\\.${instance}\\\\.weather\\\\.currently./`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('uvIndex')) {\n                        toAdd.push({\n                            template: 'text.pirate-weather.uvindex',\n                            dpInit: `/^pirate-weather\\\\.${instance}\\\\.weather\\\\.currently./`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                }\n            } else if (config.weatherEntity.startsWith('brightsky.') && config.weatherEntity.endsWith('.')) {\n                const instance = config.weatherEntity.split('.')[1];\n                if (pageItems.findIndex(x => x.modeScr === 'favorit') === -1) {\n                    pageItems.push({\n                        template: 'text.brightsky.favorit',\n                        dpInit: `/^brightsky\\\\.${instance}\\\\.current\\\\./`,\n                        modeScr: 'favorit',\n                    });\n                }\n\n                {\n                    if (want('sunriseSet')) {\n                        toAdd.push({\n                            template: 'text.brightsky.sunriseset',\n                            dpInit: `/^brightsky\\\\.${instance}\\\\.daily\\\\.00.+/`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('forecastDay1')) {\n                        toAdd.push({\n                            template: 'text.brightsky.bot2values',\n                            dpInit: `/^brightsky\\\\.${instance}\\\\.daily\\\\.01/`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('forecastDay2')) {\n                        toAdd.push({\n                            template: 'text.brightsky.bot2values',\n                            dpInit: `/^brightsky\\\\.${instance}\\\\.daily\\\\.02/`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('forecastDay3')) {\n                        toAdd.push({\n                            template: 'text.brightsky.bot2values',\n                            dpInit: `/^brightsky\\\\.${instance}\\\\.daily\\\\.03/`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('forecastDay4')) {\n                        toAdd.push({\n                            template: 'text.brightsky.bot2values',\n                            dpInit: `/^brightsky\\\\.${instance}\\\\.daily\\\\.04/`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('forecastDay5')) {\n                        toAdd.push({\n                            template: 'text.brightsky.bot2values',\n                            dpInit: `/^brightsky\\\\.${instance}\\\\.daily\\\\.05/`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('forecastDay6')) {\n                        toAdd.push({\n                            template: 'text.brightsky.bot2values',\n                            dpInit: `/^brightsky\\\\.${instance}\\\\.daily\\\\.06/`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('windSpeed')) {\n                        toAdd.push({\n                            template: 'text.brightsky.windspeed',\n                            dpInit: `/^brightsky\\\\.${instance}\\\\.current./`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('windGust')) {\n                        toAdd.push({\n                            template: 'text.brightsky.windgust',\n                            dpInit: `/^brightsky\\\\.${instance}\\\\.current./`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('windDirection')) {\n                        toAdd.push({\n                            template: 'text.brightsky.winddirection',\n                            dpInit: `/^brightsky\\\\.${instance}\\\\.current./`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                    if (want('solar')) {\n                        toAdd.push({\n                            template: 'text.brightsky.solar',\n                            dpInit: `/^brightsky\\\\.${instance}\\\\.current./`,\n                            modeScr: 'bottom',\n                        });\n                    }\n                }\n            } else {\n                // Check for unsupported weather adapter\n                const adapterPrefix = config.weatherEntity.split('.')[0];\n                if (\n                    adapterPrefix !== 'accuweather' &&\n                    adapterPrefix !== 'openweathermap' &&\n                    adapterPrefix !== 'pirate-weather' &&\n                    adapterPrefix !== 'brightsky'\n                ) {\n                    const msg = `Weather adapter '${adapterPrefix}' is not supported. Supported adapters: accuweather, openweathermap, pirate-weather, brightsky`;\n                    messages.push(msg);\n                    this.log.warn(msg);\n                }\n            }\n            if (toAdd.length) {\n                pageItems = pageItems.concat(toAdd);\n            }\n        }\n\n        this.log.debug(`Screensaver pageItems count: ${pageItems.length}`);\n        // Formating the date\n        const format = {\n            weekday: 'long',\n            month: '2-digit',\n            year: 'numeric',\n            day: 'numeric',\n        };\n\n        if (!this.adapter.config.weekdayFormat) {\n            format.weekday = 'short';\n        }\n        if (!this.adapter.config.yearFormat) {\n            format.year = '2-digit';\n        }\n        switch (this.adapter.config.monthFormat) {\n            case 0:\n                format.month = 'long';\n                break;\n            case 1:\n                format.month = 'short';\n                break;\n            case 2:\n            default:\n                format.month = '2-digit';\n                break;\n        }\n\n        pageItems = pageItems.concat([\n            {\n                role: 'text',\n                dpInit: '',\n                type: 'text',\n                modeScr: 'time',\n                data: {\n                    entity2: {\n                        value: {\n                            type: 'internal',\n                            dp: '///time',\n                        },\n                        dateFormat: {\n                            type: 'const',\n                            constVal: { local: 'de', format: { hour: '2-digit', minute: '2-digit' } },\n                        },\n                    },\n                },\n            },\n            {\n                role: 'text',\n                dpInit: '',\n                type: 'text',\n                modeScr: 'date',\n                data: {\n                    entity2: {\n                        value: {\n                            type: 'internal',\n                            dp: '///date',\n                        },\n                        dateFormat: {\n                            type: 'const',\n                            constVal: {\n                                local: this.adapter.language || 'en',\n                                format,\n                            },\n                        },\n                    },\n                },\n            },\n        ]);\n        pageItems = pageItems.concat(config.nativePageItems || []);\n\n        const configArray: pages.PageBase = {\n            dpInit: '',\n            alwaysOn: 'none',\n            uniqueID: 'scr',\n\n            config: {\n                card: 'screensaver',\n                mode: 'standard',\n                rotationTime: 0,\n                model: 'eu',\n                data: undefined,\n                screensaverIndicatorButtons: false,\n                screensaverSwipe: false,\n            },\n            pageItems: pageItems,\n        } as pages.PageBase;\n\n        return { configArray, messages };\n    }\n\n    /**\n     * Checks if the required datapoints for a given role and item are present and valid.\n     *\n     * @param role - The role to check the datapoints for.\n     * @param item - The item to check the datapoints for.\n     * @param mode - The mode of checking, can be 'both', 'script', or 'feature'. Defaults to 'both'. 'script' and 'feature' will only check the respective datapoints.\n     * @returns A promise that resolves to true if all required datapoints are present and valid, otherwise throws an error with mode='both'. Return false if mode='feature' or 'script'.\n     * @throws Will throw an error if a required datapoint is missing or invalid and mode='both'.\n     */\n    async checkRequiredDatapoints(\n        role: ScriptConfig.channelRoles,\n        item: ScriptConfig.PageBaseItem,\n        mode: 'both' | 'script' | 'feature' = 'both',\n    ): Promise<boolean> {\n        const _checkScriptDataPoints = async (\n            role: ScriptConfig.channelRoles,\n            item: ScriptConfig.PageBaseItem,\n        ): Promise<boolean> => {\n            let error = '';\n            const subItem = configManagerConst.requiredScriptDataPoints[role];\n            if (subItem && subItem.data) {\n                for (const dp in subItem.data) {\n                    if (!(dp in subItem.data)) {\n                        continue;\n                    }\n                    const key = dp as keyof typeof subItem.data;\n\n                    try {\n                        const o =\n                            dp !== '' && !dp.endsWith('.')\n                                ? await this.adapter.getForeignObjectAsync(`${item.id}.${dp}`)\n                                : undefined;\n\n                        if (!o || subItem.data[key] === undefined || !subItem.data[key].required) {\n                            continue;\n                        }\n                        if (\n                            !o ||\n                            !this.checkStringVsStringOrArray(subItem.data[key].role, o.common.role) ||\n                            !this.checkStringVsStringOrArray(subItem.data[key].type, o.common.type) ||\n                            (subItem.data[key].writeable && !o.common.write)\n                        ) {\n                            if (!o) {\n                                throw new Error(\n                                    `Datapoint ${item.id}.${dp} is missing and is required for role ${role}!`,\n                                );\n                            } else {\n                                throw new Error(\n                                    `Datapoint ${item.id}.${dp}:` +\n                                        `${!this.checkStringVsStringOrArray(subItem.data[key].role, o.common.role) ? ` role: ${o.common.role} should be ${getStringOrArray(subItem.data[key].role)})` : ''} ` +\n                                        `${subItem.data[key].type !== 'mixed' && o.common.type !== subItem.data[key].type ? ` type: ${o.common.type} should be ${getStringOrArray(subItem.data[key].type)}` : ''}` +\n                                        `${subItem.data[key].writeable && !o.common.write ? ' must be writeable!' : ''} `,\n                                );\n                            }\n                        }\n                    } catch (err: any) {\n                        error += err.replaceAll('Error: ', '');\n                    }\n                }\n            } else {\n                throw new Error(`Role ${role} is not supported!`);\n            }\n\n            if (error) {\n                throw new Error(error);\n            }\n            return true;\n        };\n        const _checkDataPoints = async (): Promise<boolean> => {\n            return false;\n        };\n        if (mode === 'both' || mode === 'script') {\n            try {\n                if (await _checkScriptDataPoints(role, item)) {\n                    return true;\n                }\n            } catch (error: any) {\n                try {\n                    if (await _checkDataPoints()) {\n                        return true;\n                    }\n                } catch {\n                    if (mode === 'both') {\n                        throw new Error(error);\n                    } else {\n                        return false;\n                    }\n                }\n                throw new Error(error);\n            }\n        } else {\n            try {\n                if (await _checkDataPoints()) {\n                    return true;\n                }\n            } catch (error: any) {\n                if (mode === 'feature') {\n                    throw new Error(error);\n                } else {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    checkStringVsStringOrArray(item: string | string[], test: string | undefined): boolean {\n        if (test === undefined) {\n            return false;\n        }\n        if (Array.isArray(item)) {\n            return item.includes(test);\n        }\n        return item === test;\n    }\n    async getMrEntityData(\n        entity: ScriptConfig.ScreenSaverMRElement,\n        mode: Types.ScreenSaverPlaces,\n    ): Promise<typePageItem.PageItemDataItemsOptions> {\n        const result: Partial<typePageItem.PageItemDataItemsOptions> = {\n            modeScr: mode,\n            type: 'text',\n            data: { entity1: {} },\n        };\n        if (entity.type === 'native') {\n            const temp = JSON.parse(JSON.stringify(entity.native)) as typePageItem.PageItemDataItemsOptions;\n            temp.type = undefined;\n            return temp;\n        } else if (entity.type === 'template') {\n            const temp = JSON.parse(JSON.stringify(entity)) as unknown as typePageItem.PageItemDataItemsOptions;\n            temp.type = undefined;\n            return temp;\n        }\n        if (\n            entity.ScreensaverEntity &&\n            entity.ScreensaverEntity !== `Relay.2` &&\n            entity.ScreensaverEntity !== `Relay.1`\n        ) {\n            result.data!.entity1!.value = await this.getFieldAsDataItemConfig(entity.ScreensaverEntity, true);\n        } else if (entity.ScreensaverEntity) {\n            result.data!.entity1!.value = {\n                type: 'internal',\n                dp: `cmd/power${entity.ScreensaverEntity === `Relay.2` ? 2 : 1}`,\n            };\n        }\n        result.data!.icon = {\n            true: {\n                value: {\n                    type: 'const',\n                    constVal: 'lightbulb',\n                },\n                color: {\n                    type: 'const',\n                    constVal: Color.Yellow,\n                },\n            },\n            false: {\n                value: {\n                    type: 'const',\n                    constVal: 'lightbulb-outline',\n                },\n                color: {\n                    type: 'const',\n                    constVal: Color.HMIOff,\n                },\n            },\n            scale: undefined,\n            maxBri: undefined,\n            minBri: undefined,\n        };\n        if (entity.ScreensaverEntityOnColor) {\n            result.data!.icon.true!.color = await this.getIconColor(entity.ScreensaverEntityOnColor || Color.on);\n        }\n        if (entity.ScreensaverEntityOffColor) {\n            result.data!.icon.false!.color = await this.getIconColor(entity.ScreensaverEntityOffColor || Color.off);\n        }\n\n        if (entity.ScreensaverEntityIconOn) {\n            result.data!.icon.true!.value = await this.getFieldAsDataItemConfig(entity.ScreensaverEntityIconOn);\n        }\n        if (entity.ScreensaverEntityIconOff) {\n            result.data!.icon.false!.value = await this.getFieldAsDataItemConfig(entity.ScreensaverEntityIconOff);\n        }\n        if (entity.ScreensaverEntityValue) {\n            result.data!.icon.false!.text = {\n                value: await this.getFieldAsDataItemConfig(entity.ScreensaverEntityValue, true),\n                unit: entity.ScreensaverEntityValueUnit\n                    ? await this.getFieldAsDataItemConfig(entity.ScreensaverEntityValueUnit)\n                    : undefined,\n                decimal:\n                    entity.ScreensaverEntityValueDecimalPlace != null\n                        ? { type: 'const', constVal: entity.ScreensaverEntityValueDecimalPlace }\n                        : undefined,\n                factor: undefined,\n            };\n            result.role = 'combined';\n            result.data!.icon.true!.text = result.data!.icon.false!.text;\n        }\n        if (isScreensaverPageItemDataItemsOptions(result)) {\n            return result;\n        }\n        throw new Error('Invalid data');\n    }\n\n    async getNotifyEntityData(\n        entity: ScriptConfig.ScreenSaverNotifyElement,\n        mode: Types.ScreenSaverPlaces,\n    ): Promise<typePageItem.PageItemDataItemsOptions> {\n        const result: typePageItem.PageItemDataItemsOptions = {\n            modeScr: mode,\n            role: '',\n            type: 'text',\n            data: { entity1: {} },\n        };\n        if (entity.type === 'native') {\n            const temp = structuredClone(entity.native) as typePageItem.PageItemDataItemsOptions;\n            return temp;\n        } else if (entity.type === 'template') {\n            const temp = structuredClone(entity) as unknown as typePageItem.PageItemDataItemsOptions;\n            delete temp.type;\n            return temp;\n        }\n        if (!result.data.entity1) {\n            throw new Error('Invalid data');\n        }\n        result.data.entity1.value = await this.getFieldAsDataItemConfig(entity.Headline || ' ', true);\n        if (entity.HeadlinePrefix) {\n            result.data.entity1.prefix = await this.getFieldAsDataItemConfig(entity.HeadlinePrefix);\n        }\n        if (entity.HeadlineUnit) {\n            result.data.entity1.unit = await this.getFieldAsDataItemConfig(entity.HeadlineUnit);\n        }\n        result.data.entity1.suffix = {\n            type: 'const',\n            constVal: `<sp!it>${typeof entity.Priority === 'number' ? entity.Priority : 99}<sp!it>${entity.buzzer ? (entity.buzzer === true ? '1,2,3,0xF54' : entity.buzzer) : ''}`,\n        };\n        result.data.entity2 = structuredClone(result.data.entity1);\n        if (entity.Text) {\n            result.data.text = {\n                true: {\n                    value: await this.getFieldAsDataItemConfig(entity.Text, true),\n                    prefix: entity.TextPrefix ? await this.getFieldAsDataItemConfig(entity.TextPrefix) : undefined,\n                    suffix: entity.TextSuffix ? await this.getFieldAsDataItemConfig(entity.TextSuffix) : undefined,\n                },\n            };\n        }\n        if (entity.HeadlineIcon) {\n            result.data.icon = {\n                true: { value: await this.getFieldAsDataItemConfig(entity.HeadlineIcon) },\n            };\n        }\n\n        if ('Enabled' in entity && entity.Enabled != null) {\n            if (Array.isArray(entity.Enabled)) {\n                for (const en of entity.Enabled) {\n                    if (typeof en === 'string' && (await this.existsState(en))) {\n                        result.data.enabled = result.data.enabled || [];\n                        if (Array.isArray(result.data.enabled)) {\n                            result.data.enabled.push({\n                                type: 'triggered',\n                                dp: en,\n                                read:\n                                    'VisibleCondition' in entity && entity.VisibleCondition\n                                        ? `return ${entity.VisibleCondition};`\n                                        : undefined,\n                            });\n                        }\n                    } else {\n                        result.data.enabled = result.data.enabled || [];\n                        if (Array.isArray(result.data.enabled)) {\n                            result.data.enabled.push({\n                                type: 'const',\n                                constVal: false,\n                            });\n                        }\n                    }\n                }\n                if (!result.data.enabled || !Array.isArray(result.data.enabled) || result.data.enabled.length === 0) {\n                    throw new Error(\n                        `No valid Enabled states in Notify element with Headline ${entity.Headline} and Text ${entity.Text}`,\n                    );\n                }\n            } else if (typeof entity.Enabled === 'string') {\n                if (await this.existsState(entity.Enabled)) {\n                    result.data.enabled = await this.getFieldAsDataItemConfig(entity.Enabled, true);\n                    if ('VisibleCondition' in entity && entity.VisibleCondition && result.data.enabled) {\n                        result.data.enabled = {\n                            ...result.data.enabled,\n                            read: `return ${entity.VisibleCondition};`,\n                        };\n                    }\n                } else {\n                    throw new Error(`Enabled state ${entity.Enabled} does not exist!`);\n                }\n            }\n        } else {\n            throw new Error(\n                `No Enabled or VisibleCondition in Notify element with Headline ${entity.Headline} and Text ${entity.Text}`,\n            );\n        }\n        if (entity.isDismissiblePerEvent) {\n            result.role = 'isDismissiblePerEvent';\n            if (entity.dismissibleIDGlobal) {\n                result.dismissibleIDGlobal = entity.dismissibleIDGlobal;\n            }\n        }\n        return result;\n    }\n\n    async getEntityData(\n        entity: ScriptConfig.ScreenSaverElement,\n        mode: Types.ScreenSaverPlaces,\n        defaultColors: {\n            defaultOffColor: ScriptConfig.RGB;\n            defaultOnColor: ScriptConfig.RGB;\n        },\n    ): Promise<typePageItem.PageItemDataItemsOptions> {\n        const result: typePageItem.PageItemDataItemsOptions = {\n            modeScr: mode,\n            type: 'text',\n            data: { entity1: {} },\n        };\n        if (entity.type === 'native') {\n            const temp = structuredClone(entity.native) as typePageItem.PageItemDataItemsOptions;\n            return temp;\n        } else if (entity.type === 'template') {\n            const temp = structuredClone(entity) as unknown as typePageItem.PageItemDataItemsOptions;\n\n            if ('enabled' in temp) {\n                if (Array.isArray(temp.enabled)) {\n                    for (const en of temp.enabled) {\n                        if (typeof en === 'string' && (await this.existsState(en))) {\n                            result.data.enabled = result.data.enabled || [];\n                            if (Array.isArray(result.data.enabled)) {\n                                result.data.enabled.push({\n                                    type: 'triggered',\n                                    dp: en,\n                                    read:\n                                        'visibleCondition' in temp &&\n                                        typeof temp.visibleCondition === 'string' &&\n                                        temp.visibleCondition\n                                            ? `return ${temp.visibleCondition};`\n                                            : undefined,\n                                });\n                            }\n                        }\n                    }\n                } else if (temp.enabled !== undefined) {\n                    if (temp.enabled === false) {\n                        throw new Error(\n                            `Template ${entity.template} for modeScr: ${entity.modeScr} is hardcoded disabled! This makes no sense!`,\n                        );\n                    }\n                    if (typeof temp.enabled === 'string') {\n                        if (await this.existsState(temp.enabled)) {\n                            temp.data = temp.data || {};\n                            temp.data.enabled = await this.getFieldAsDataItemConfig(temp.enabled, true);\n                        } else {\n                            throw new Error(`Enabled state ${temp.enabled} does not exist!`);\n                        }\n                    }\n\n                    if ('visibleCondition' in temp) {\n                        if (typeof temp.visibleCondition === 'string' && temp.data?.enabled && temp.visibleCondition) {\n                            temp.data.enabled = {\n                                ...temp.data.enabled,\n                                read: `\n                                    val = ${!Array.isArray(temp.data.enabled) && typeof temp.data.enabled?.read === 'string' ? `(val) => {${temp.data.enabled.read}}(val);` : null} ?? val\n                                    return ${temp.visibleCondition};`,\n                            };\n                        }\n                        delete temp.visibleCondition;\n                    }\n                }\n            }\n            'visibleCondition' in temp && delete temp.visibleCondition;\n            'enabled' in temp && delete temp.enabled;\n            delete temp.type;\n            return temp;\n        }\n\n        if (!result.data.entity1) {\n            throw new Error('Invalid data');\n        }\n        result.data.entity2 = structuredClone(result.data.entity1);\n\n        let obj;\n        if (entity.ScreensaverEntity && !entity.ScreensaverEntity.endsWith('.')) {\n            obj = await this.adapter.getForeignObjectAsync(entity.ScreensaverEntity);\n            result.data.entity1.value = await this.getFieldAsDataItemConfig(entity.ScreensaverEntity, true);\n            result.data.entity2.value = await this.getFieldAsDataItemConfig(entity.ScreensaverEntity);\n        }\n        if (mode === 'indicator') {\n            // @ts-expect-error ignore this button has all propertys of text\n            result.type = 'button';\n\n            if ('ScreensaverEntityButton' in entity && entity.ScreensaverEntityButton) {\n                result.data.setValue2 = (await this.existsAndWriteableState(entity.ScreensaverEntityButton))\n                    ? { type: 'state', dp: entity.ScreensaverEntityButton }\n                    : undefined;\n            } else if ('ScreensaverEntitySwitch' in entity && entity.ScreensaverEntitySwitch) {\n                result.data.setValue1 = (await this.existsAndWriteableState(entity.ScreensaverEntitySwitch))\n                    ? { type: 'state', dp: entity.ScreensaverEntitySwitch }\n                    : undefined;\n            } else if ('ScreensaverEntityNaviToPage' in entity && entity.ScreensaverEntityNaviToPage) {\n                result.data.setNavi = {\n                    type: 'const',\n                    constVal: entity.ScreensaverEntityNaviToPage,\n                };\n            }\n        }\n        const dataType = obj && obj.common && obj.common.type ? obj.common.type : undefined;\n        if (entity.ScreensaverEntityUnitText || entity.ScreensaverEntityUnitText === '') {\n            result.data.entity1.unit = await this.getFieldAsDataItemConfig(entity.ScreensaverEntityUnitText);\n            result.data.entity2.unit = await this.getFieldAsDataItemConfig(entity.ScreensaverEntityUnitText);\n        } else if (obj && obj.common && obj.common.unit) {\n            result.data.entity1.unit = { type: 'const', constVal: obj.common.unit };\n            result.data.entity2.unit = { type: 'const', constVal: obj.common.unit };\n        }\n\n        if (entity.ScreensaverEntityFactor) {\n            result.data.entity1.factor = { type: 'const', constVal: entity.ScreensaverEntityFactor };\n            result.data.entity2.factor = { type: 'const', constVal: entity.ScreensaverEntityFactor };\n        }\n\n        if (entity.ScreensaverEntityDecimalPlaces != null) {\n            result.data.entity1.decimal = { type: 'const', constVal: entity.ScreensaverEntityDecimalPlaces };\n            result.data.entity2.decimal = { type: 'const', constVal: entity.ScreensaverEntityDecimalPlaces };\n        }\n        if (entity.ScreensaverEntityDateFormat) {\n            result.data.entity1.dateFormat = {\n                type: 'const',\n                constVal: { local: 'de', format: entity.ScreensaverEntityDateFormat },\n            };\n            result.data.entity2.dateFormat = {\n                type: 'const',\n                constVal: { local: 'de', format: entity.ScreensaverEntityDateFormat },\n            };\n        }\n\n        let color: Types.DataItemsOptions | undefined = undefined;\n        if (entity.ScreensaverEntityOnColor) {\n            color = await this.getIconColor(entity.ScreensaverEntityOnColor || Color.on);\n        } else if (entity.ScreensaverEntityIconColor && !isIconScaleElement(entity.ScreensaverEntityIconColor)) {\n            color = await this.getIconColor(entity.ScreensaverEntityIconColor || this.colorDefault);\n        } else {\n            color = await this.getIconColor(defaultColors.defaultOnColor || this.colorDefault);\n        }\n\n        let colorOff: Types.DataItemsOptions | undefined = undefined;\n        if (entity.ScreensaverEntityOffColor) {\n            colorOff = await this.getIconColor(entity.ScreensaverEntityOffColor);\n        } else if (entity.ScreensaverEntityOffColor !== null) {\n            colorOff = await this.getIconColor(defaultColors.defaultOffColor);\n        }\n\n        if (entity.ScreensaverEntityIconOn) {\n            result.data.icon = {\n                true: { value: await this.getFieldAsDataItemConfig(entity.ScreensaverEntityIconOn) },\n            };\n        }\n        if ('ScreensaverEntityEnabled' in entity && entity.ScreensaverEntityEnabled != null) {\n            if (!Array.isArray(entity.ScreensaverEntityEnabled)) {\n                if (await this.existsState(entity.ScreensaverEntityEnabled)) {\n                    result.data.enabled = await this.getFieldAsDataItemConfig(\n                        entity.ScreensaverEntityEnabled ? entity.ScreensaverEntityEnabled : true,\n                        true,\n                    );\n                    if (\n                        'ScreensaverEntityVisibleCondition' in entity &&\n                        entity.ScreensaverEntityVisibleCondition &&\n                        typeof entity.ScreensaverEntityVisibleCondition === 'string' &&\n                        result.data.enabled\n                    ) {\n                        result.data.enabled = {\n                            ...result.data.enabled,\n                            read: `\n                return ${entity.ScreensaverEntityVisibleCondition};\n                `,\n                        };\n                    }\n                } else {\n                    throw new Error(\n                        `ScreensaverEntityEnabled state ${entity.ScreensaverEntityEnabled} does not exist!`,\n                    );\n                }\n            } else {\n                throw new Error('ScreensaverEntityEnabled must be a string!');\n            }\n        } else if (\n            'ScreensaverEntityVisibleCondition' in entity &&\n            entity.ScreensaverEntityVisibleCondition &&\n            result.data.entity1.value\n        ) {\n            result.data.enabled = {\n                ...result.data.entity1.value,\n                read: `\n                return ${entity.ScreensaverEntityVisibleCondition};\n                `,\n            };\n        }\n        if (\n            dataType === 'number' &&\n            entity.ScreensaverEntityIconSelect &&\n            Array.isArray(entity.ScreensaverEntityIconSelect)\n        ) {\n            const obj = await this.getFieldAsDataItemConfig(entity.ScreensaverEntity);\n            if (obj && obj.type === 'state') {\n                entity.ScreensaverEntityIconSelect.sort((a, b) => a.value - b.value);\n                // read function for icon selection\n                obj.read = `\n                    const items = [${entity.ScreensaverEntityIconSelect.map(item => `{val: ${item.value}, icon: \"${item.icon}\"}`).join(', ')}];\n                    for (let i = 1; i < items.length; i++) {\n                        if (val <= items[i].val) {return items[i].icon;}\n                    }\n                    return items[items.length - 1].icon;`;\n\n                result.data.icon = {\n                    ...result.data.icon,\n                    true: {\n                        value: obj,\n                    },\n                };\n            }\n        }\n        if (color) {\n            result.data.icon = result.data.icon || {};\n            result.data.icon.true = result.data.icon.true || {};\n            result.data.icon.true.color = color;\n        }\n\n        if (entity.ScreensaverEntityIconOff) {\n            result.data.icon = {\n                ...result.data.icon,\n                ...{\n                    false: { value: await this.getFieldAsDataItemConfig(entity.ScreensaverEntityIconOff) },\n                },\n            };\n        }\n        if (color) {\n            result.data.icon = result.data.icon || {};\n            result.data.icon.false = result.data.icon.false || {};\n            result.data.icon.false.color = colorOff;\n        }\n        if (entity.ScreensaverEntityIconColor && isIconScaleElement(entity.ScreensaverEntityIconColor)) {\n            result.data.icon = {\n                ...result.data.icon,\n                scale: {\n                    type: 'const',\n                    constVal: entity.ScreensaverEntityIconColor,\n                },\n            };\n        }\n\n        if (entity.ScreensaverEntityOnText) {\n            result.data.text = { true: await this.getFieldAsDataItemConfig(entity.ScreensaverEntityOnText) };\n        } else if (entity.ScreensaverEntityText) {\n            result.data.text = { true: await this.getFieldAsDataItemConfig(entity.ScreensaverEntityText) };\n        }\n\n        if (entity.ScreensaverEntityOffText) {\n            result.data.text = { false: await this.getFieldAsDataItemConfig(entity.ScreensaverEntityOffText) };\n        }\n\n        if (isScreensaverPageItemDataItemsOptions(result)) {\n            return result;\n        }\n        throw new Error('Invalid data');\n    }\n\n    async getFieldAsDataItemConfig(\n        possibleId: string | number | ScriptConfig.RGB | boolean,\n        isTrigger: boolean = false,\n    ): Promise<Types.DataItemsOptions> {\n        if (typeof possibleId === 'string') {\n            const state =\n                Color.isScriptRGB(possibleId) || possibleId === '' || possibleId.endsWith('.')\n                    ? false\n                    : await this.existsState(possibleId);\n\n            if (!Color.isScriptRGB(possibleId) && state) {\n                if (isTrigger) {\n                    return { type: 'triggered', dp: possibleId };\n                }\n                return { type: 'state', dp: possibleId };\n            }\n        }\n        return { type: 'const', constVal: possibleId };\n    }\n\n    async getIconColor(\n        item: ScriptConfig.RGB | RGB | ScriptConfig.IconScaleElement | string | undefined,\n        def: ScriptConfig.RGB | RGB | string | undefined = undefined,\n    ): Promise<Types.DataItemsOptions | undefined> {\n        if (isIconScaleElement(item)) {\n            //later\n        } else if (typeof item === 'string' && (await this.existsState(item))) {\n            return await this.getFieldAsDataItemConfig(item);\n        } else if (Color.isRGB(item)) {\n            return { type: 'const', constVal: item };\n        } else if (Color.isScriptRGB(item)) {\n            return { type: 'const', constVal: Color.convertScriptRGBtoRGB(item) };\n        } else if (Color.isRGB(def)) {\n            return { type: 'const', constVal: def };\n        } else if (Color.isScriptRGB(def)) {\n            return { type: 'const', constVal: Color.convertScriptRGBtoRGB(def) };\n        } else if (typeof item === 'string' && item?.startsWith('default.color.from.start.')) {\n            return { type: 'const', constVal: item };\n        } else if (typeof def === 'string' && def?.startsWith('default.color.from.start.')) {\n            return { type: 'const', constVal: def };\n        }\n        return undefined;\n    }\n    validStateId(id: string): boolean {\n        return !!id && !id.endsWith('.');\n    }\n    async existsState(id: string): Promise<boolean> {\n        if (this.validStateId(id) === false) {\n            return false;\n        }\n        const o = await this.statesController?.getObjectAsync(id);\n        if (!o || o.type !== 'state') {\n            return false;\n        }\n        return true;\n    }\n\n    async existsAndWriteableState(id: string): Promise<boolean> {\n        if (this.validStateId(id) === false) {\n            return false;\n        }\n        const o = await this.statesController?.getObjectAsync(id);\n        if (!o || o.type !== 'state') {\n            return false;\n        }\n        return o.common?.write === true;\n    }\n\n    async delete(): Promise<void> {\n        await this.statesController?.delete();\n        this.statesController = undefined;\n    }\n\n    static async getConfig(\n        adapter: NspanelLovelaceUi,\n        scriptConfig: Partial<panelConfigPartial>[],\n    ): Promise<panelConfigPartial[]> {\n        const result: panelConfigPartial[] = [];\n        if (scriptConfig.length === 0) {\n            const topics = (adapter.config.panels || [])\n                .map(p => p?.topic)\n                .filter(Boolean)\n                .join(', ');\n            if (!adapter.config.testCase) {\n                adapter.log.error(`No compatible config found for topics: ${topics}. Adapter paused!`);\n                throw new Error(`No compatible config found for topics: ${topics}. Adapter paused!`);\n            }\n            adapter.log.warn(`No compatible config found for topics: ${topics}. Continuing due to testCase=true.`);\n        }\n        if (scriptConfig) {\n            // merge all pages into every pages array\n            for (let b = 0; b < scriptConfig.length; b++) {\n                for (let c = b <= 0 ? 1 : b - 1; c < scriptConfig.length; c++) {\n                    if (c === b || !scriptConfig[c] || !scriptConfig[b].pages || !scriptConfig[c].pages) {\n                        continue;\n                    }\n                    let pages = structuredClone(scriptConfig[c].pages);\n                    if (pages) {\n                        pages = pages.filter(a => {\n                            if (\n                                a.config?.card === 'screensaver' ||\n                                a.config?.card === 'screensaver2' ||\n                                a.config?.card === 'screensaver3'\n                            ) {\n                                return false;\n                            }\n                            if (scriptConfig[b].pages!.find(b => b.uniqueID === a.uniqueID)) {\n                                return false;\n                            }\n                            return true;\n                        });\n\n                        scriptConfig[b].pages = scriptConfig[b].pages!.concat(pages);\n                    }\n                }\n            }\n            for (let b = 0; b < scriptConfig.length; b++) {\n                const s = scriptConfig[b];\n                if (!s || !s.pages) {\n                    continue;\n                }\n                const panel = {} as Partial<panelConfigPartial>;\n\n                if (!panel.pages) {\n                    panel.pages = [];\n                }\n                if (!panel.navigation) {\n                    panel.navigation = [];\n                }\n                panel.pages = panel.pages.filter(a => {\n                    if (s.pages!.find(b => b.uniqueID === a.uniqueID)) {\n                        return false;\n                    }\n                    return true;\n                });\n                panel.navigation = panel.navigation.filter(a => {\n                    if (s.navigation && s.navigation.find(b => a == null || b == null || b.name === a.name)) {\n                        return false;\n                    }\n                    return true;\n                });\n                s.navigation = (panel.navigation || []).concat(s.navigation || []);\n                s.pages = (panel.pages || []).concat(s.pages || []);\n                result[b] = {\n                    ...{},\n                    ...result[b],\n                    ...panel,\n                    ...s,\n                };\n            }\n            //adapter.mainConfiguration[0].timeout = adapter.config.timeout;\n        }\n        return result;\n    }\n}\n\nfunction isIconScaleElement(obj: any): obj is ScriptConfig.IconScaleElement {\n    return obj && obj.val_min !== undefined && obj.val_max !== undefined;\n}\nfunction isScreensaverPageItemDataItemsOptions(obj: any): obj is typePageItem.PageItemDataItemsOptions {\n    return obj && obj.modeScr && obj.data;\n}\n"],
  "mappings": "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",
  "names": ["panelConfig", "messages", "obj", "path", "pages", "gIndex", "o", "item", "role", "b"]
}
