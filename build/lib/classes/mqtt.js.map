{
  "version": 3,
  "sources": ["../../../src/lib/classes/mqtt.ts"],
  "sourcesContent": ["import mqtt, { type IClientPublishOptions } from 'mqtt'; // import namespace \"mqtt\"\nimport { Level } from 'level';\n\n//@ts-expect-error no types\nimport aedesPersistencelevel from 'aedes-persistence-level';\n\nimport { BaseClass, type AdapterClassDefinition } from './library';\n\nimport Aedes, { type Client } from 'aedes';\nimport { createServer, type Server } from 'net';\nimport { randomUUID } from 'node:crypto';\n\nexport type callbackMessageType = (topic: string, message: string) => void;\n\nexport class MQTTClientClass extends BaseClass {\n    client: mqtt.MqttClient;\n    data: any = {};\n    ready: boolean = false;\n    public messageCallback: callbackMessageType;\n    clientId: string;\n    private subscriptDB: { topic: string; callback: callbackMessageType }[] = [];\n\n    constructor(\n        adapter: AdapterClassDefinition,\n        ip: string,\n        port: number,\n        username: string,\n        password: string,\n        callback: callbackMessageType,\n    ) {\n        super(adapter, 'mqttClient');\n        this.clientId = `iobroker_${randomUUID()}`;\n        this.messageCallback = callback;\n        this.client = mqtt.connect(`mqtt://${ip}:${port}`, {\n            username: username,\n            password: password,\n            clientId: this.clientId,\n        });\n        this.client.on('connect', () => {\n            this.log.info(`Connection is active.`);\n            void this.adapter.setState('info.connection', true, true);\n            this.ready = true;\n        });\n        this.client.on('disconnect', () => {\n            this.log.info(`Disconnected.`);\n            this.ready = false;\n            void this.adapter.setState('info.connection', false, true);\n            this.log.debug(`disconnected`);\n        });\n        this.client.on('error', err => {\n            this.ready = false;\n            // eslint-disable-next-line @typescript-eslint/no-base-to-string\n            this.log.error(`${String(err)}`);\n        });\n\n        this.client.on('close', () => {\n            this.ready = false;\n            void this.adapter.setState('info.connection', false, true);\n            this.log.info(`Connection is closed.`);\n        });\n\n        this.client.on('message', (topic, message) => {\n            const callbacks = this.subscriptDB.filter(i => {\n                return topic.startsWith(i.topic.replace('/#', ''));\n            });\n            /*this.log.debug(\n                `Incoming message for ${callbacks.length} subproceses. topic: ${topic} message: ${message}}`,\n            );*/\n            callbacks.forEach(c => c.callback(topic, message.toString()));\n        });\n    }\n\n    async publish(topic: string, message: string, opt?: IClientPublishOptions): Promise<void> {\n        //this.log.debug(`Publishing topic: ${topic} with message: ${message}.`);\n        await this.client.publishAsync(topic, message, opt);\n    }\n\n    subscript(topic: string, callback: callbackMessageType): void {\n        if (this.subscriptDB.findIndex(m => m.topic === topic && m.callback === callback) !== -1) {\n            return;\n        }\n        const aNewOne = this.subscriptDB.findIndex(m => m.topic === topic) === -1;\n        this.subscriptDB.push({ topic, callback });\n        if (aNewOne) {\n            this.log.debug(`subscripe to: ${topic}`);\n\n            this.client.subscribe(topic, err => {\n                if (err) {\n                    this.log.error(`On subscribe: ${err}`);\n                }\n            });\n        }\n    }\n    destroy(): void {\n        this.client.end();\n    }\n}\n\nexport class MQTTServerClass extends BaseClass {\n    aedes: Aedes;\n    server: Server;\n    ready: boolean = false;\n    constructor(adapter: AdapterClassDefinition, port: number, username: string, password: string, path: string) {\n        super(adapter, 'mqttServer');\n        const persistence = aedesPersistencelevel(new Level(path));\n        this.aedes = new Aedes({ persistence: persistence });\n        this.server = createServer(this.aedes.handle);\n\n        this.server.listen(port, () => {\n            this.ready = true;\n            this.log.info(`Started and listening on port ${port}`);\n        });\n        this.aedes.authenticate = (\n            client: Client,\n            un: Readonly<string | undefined>,\n            pw: Readonly<Buffer | undefined>,\n            callback: any,\n        ) => {\n            const confirm = username === un && password == pw!.toString();\n            if (!confirm) {\n                this.log.warn(`Login denied client: ${client.id}. User name or password wrong!`);\n            } else {\n                this.log.info(`Client ${client.id} login successful.`);\n            }\n            callback(null, confirm);\n        };\n    }\n    destroy(): void {\n        this.aedes.close();\n        this.server.close();\n    }\n}\n"],
  "mappings": "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",
  "names": ["mqtt", "aedesPersistencelevel", "Aedes"]
}
