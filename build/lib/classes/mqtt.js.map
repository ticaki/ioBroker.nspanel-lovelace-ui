{
  "version": 3,
  "sources": ["../../../src/lib/classes/mqtt.ts"],
  "sourcesContent": ["import mqtt, { type IClientPublishOptions } from 'mqtt'; // import namespace \"mqtt\"\nimport { Level } from 'level';\n\n//@ts-expect-error no types\nimport aedesPersistencelevel from 'aedes-persistence-level';\nimport * as factory from 'aedes-server-factory';\nimport { BaseClass, type AdapterClassDefinition } from './library';\n\nimport Aedes, { type Client } from 'aedes';\nimport { type Server } from 'net';\nimport { randomUUID } from 'node:crypto';\nimport * as forge from 'node-forge';\nexport type callbackMessageType = (topic: string, message: string) => void;\nexport type callbackConnectType = () => Promise<void>;\n\n// RSA-Schl\u00FCsselpaar erzeugen (4096 Bit f\u00FCr hohe Sicherheit)\n\nexport class MQTTClientClass extends BaseClass {\n    client: mqtt.MqttClient;\n    data: any = {};\n    ready: boolean = false;\n    public messageCallback: callbackMessageType;\n    clientId: string;\n    private subscriptDB: { topic: string; callback: callbackMessageType }[] = [];\n\n    constructor(\n        adapter: AdapterClassDefinition,\n        ip: string,\n        port: number,\n        username: string,\n        password: string,\n        tls: boolean,\n        callback: callbackMessageType,\n        onConnect?: callbackConnectType,\n        onDisconnect?: callbackConnectType,\n    ) {\n        super(adapter, 'mqttClient');\n        this.clientId = `iobroker_${randomUUID()}`;\n        this.messageCallback = callback;\n        this.client = mqtt.connect(`${tls ? 'tls' : 'mqtt'}://${ip}:${port}`, {\n            username: username,\n            password: password,\n            clientId: this.clientId,\n            rejectUnauthorized: false,\n        });\n        this.client.on('connect', () => {\n            this.log.info(`Connection is active.`);\n            this.ready = true;\n            if (onConnect) {\n                void onConnect();\n            }\n        });\n        this.client.on('disconnect', () => {\n            this.log.info(`Disconnected.`);\n            this.ready = false;\n            this.log.debug(`disconnected`);\n            if (onDisconnect) {\n                void onDisconnect();\n            }\n        });\n        this.client.on('error', err => {\n            this.ready = false;\n            // eslint-disable-next-line @typescript-eslint/no-base-to-string\n            this.log.error(`${String(err)}`);\n        });\n\n        this.client.on('close', () => {\n            this.ready = false;\n            this.log.info(`Connection is closed.`);\n            if (onDisconnect) {\n                void onDisconnect();\n            }\n        });\n\n        this.client.on('message', (topic, message) => {\n            const callbacks = this.subscriptDB.filter(i => {\n                return topic.startsWith(i.topic.replace('/#', ''));\n            });\n            /*this.log.debug(\n                `Incoming message for ${callbacks.length} subproceses. topic: ${topic} message: ${message}}`,\n            );*/\n            callbacks.forEach(c => c.callback(topic, message.toString()));\n        });\n    }\n\n    async publish(topic: string, message: string, opt?: IClientPublishOptions): Promise<void> {\n        if (!this.client.connected) {\n            //this.log.debug(`Not connected. Can't publish topic: ${topic} with message: ${message}.`);\n            return;\n        }\n        await this.client.publishAsync(topic, message, opt);\n    }\n\n    unsubscribe(topic: string): void {\n        const index = this.subscriptDB.findIndex(m => m.topic === topic);\n        if (index !== -1) {\n            this.subscriptDB.splice(index, 1);\n            this.log.debug(`unsubscribe from: ${topic}`);\n            this.client.unsubscribe(topic);\n        }\n    }\n\n    async subscript(topic: string, callback: callbackMessageType): Promise<void> {\n        if (this.subscriptDB.findIndex(m => m.topic === topic && m.callback === callback) !== -1) {\n            return;\n        }\n        const aNewOne = this.subscriptDB.findIndex(m => m.topic === topic) === -1;\n        this.subscriptDB.push({ topic, callback });\n        if (aNewOne) {\n            this.log.debug(`subscripe to: ${topic}`);\n\n            await this.client.subscribeAsync(topic, { qos: 1 });\n        }\n    }\n    async destroy(): Promise<void> {\n        await this.delete();\n        const endMqttClient = (): Promise<void> => {\n            return new Promise(resolve => {\n                this.client.end(false, () => {\n                    resolve();\n                });\n            });\n        };\n        await endMqttClient();\n    }\n}\n\nexport class MQTTServerClass extends BaseClass {\n    aedes: Aedes;\n    server: Server;\n    ready: boolean = false;\n\n    static async createMQTTServer(\n        adapter: AdapterClassDefinition,\n        port: number,\n        username: string,\n        password: string,\n        path: string,\n    ): Promise<MQTTServerClass> {\n        let keys: Record<string, string> = {};\n        if (\n            !(await adapter.fileExistsAsync(adapter.namespace, 'keys/private-key.pem')) ||\n            !(await adapter.fileExistsAsync(adapter.namespace, 'keys/public-key.pem')) ||\n            !(await adapter.fileExistsAsync(adapter.namespace, 'keys/certificate.pem'))\n        ) {\n            const prekeys = forge.pki.rsa.generateKeyPair(4096);\n            keys.privateKey = forge.pki.privateKeyToPem(prekeys.privateKey);\n            keys.publicKey = forge.pki.publicKeyToPem(prekeys.publicKey);\n\n            // Zertifikat erstellen\n            const cert = forge.pki.createCertificate();\n            cert.publicKey = prekeys.publicKey;\n            cert.serialNumber = '01'; // Eine eindeutige Seriennummer als HEX\n            cert.validity.notBefore = new Date();\n            cert.validity.notAfter = new Date();\n            cert.validity.notAfter.setFullYear(cert.validity.notBefore.getFullYear() + 1); // 1 Jahr g\u00FCltig\n\n            // Zertifikats-Infos (X.509 Subject & Issuer)\n            const attrs = [\n                { name: 'commonName', value: 'localhost' },\n                { name: 'countryName', value: 'DE' },\n                { name: 'organizationName', value: 'Meine Firma' },\n            ];\n            cert.setSubject(attrs);\n            cert.setIssuer(attrs);\n\n            // Selbstsignieren mit SHA-256\n            cert.sign(prekeys.privateKey, forge.md.sha256.create());\n\n            // PEM-Format exportieren\n            keys.certPem = forge.pki.certificateToPem(cert);\n\n            // In Dateien speichern\n\n            // Schl\u00FCssel in Dateien speichern\n            await adapter.writeFileAsync(adapter.namespace, 'keys/private-key.pem', keys.privateKey);\n            await adapter.writeFileAsync(adapter.namespace, 'keys/public-key.pem', keys.publicKey);\n            await adapter.writeFileAsync(adapter.namespace, 'keys/certificate.pem', keys.certPem);\n        } else {\n            keys = {\n                publicKey: (await adapter.readFileAsync(adapter.namespace, 'keys/public-key.pem')).file.toString(),\n                privateKey: (await adapter.readFileAsync(adapter.namespace, 'keys/private-key.pem')).file.toString(),\n                certPem: (await adapter.readFileAsync(adapter.namespace, 'keys/certificate.pem')).file.toString(),\n            };\n        }\n        return new MQTTServerClass(adapter, port, username, password, path, keys);\n    }\n\n    constructor(\n        adapter: AdapterClassDefinition,\n        port: number,\n        username: string,\n        password: string,\n        path: string,\n        keyPair: Record<string, string>,\n    ) {\n        super(adapter, 'mqttServer');\n        const persistence = aedesPersistencelevel(new Level(path));\n\n        this.aedes = new Aedes({ persistence: persistence });\n        this.server = factory.createServer(this.aedes, {\n            tls: {\n                key: Buffer.from(keyPair.privateKey),\n                cert: Buffer.from(keyPair.certPem),\n            },\n        });\n        //this.server = createServer(this.aedes.handle);\n\n        this.server.listen(port, () => {\n            this.ready = true;\n            this.log.info(`Started and listening on port ${port}`);\n        });\n        this.aedes.authenticate = (\n            client: Client,\n            un: Readonly<string | undefined>,\n            pw: Readonly<Buffer | undefined>,\n            callback: any,\n        ) => {\n            const confirm = username === un && password == pw?.toString();\n            if (!confirm) {\n                this.log.warn(`Login denied client: ${client.id}. User name or password wrong! ${pw?.toString()}`);\n            } else {\n                this.log.info(`Client ${client.id} login successful.`);\n            }\n            callback(null, confirm);\n        };\n    }\n    destroy(): void {\n        void this.delete();\n        this.aedes.close();\n        this.server.close();\n    }\n}\n"],
  "mappings": "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",
  "names": ["mqtt", "aedesPersistencelevel", "Aedes"]
}
