{
  "version": 3,
  "sources": ["../../../src/lib/classes/http-server.ts"],
  "sourcesContent": ["import http from 'http';\nimport { BaseClass } from '../controller/library';\nimport type { NspanelLovelaceUi } from '../types/NspanelLovelaceUi';\nimport fs from 'fs';\n\nexport class HttpServer extends BaseClass {\n    server: http.Server;\n    constructor(adapter: NspanelLovelaceUi, name: string, ip: string, port: number, fileName: string) {\n        super(adapter, name);\n        this.log.debug(`Starting http server on ${ip}:${port} to serve ${fileName}`);\n        this.server = http\n            .createServer({ keepAlive: true }, (req, res) => {\n                this.log.debug(`Request received: ${req.url}`);\n\n                fs.stat(fileName + req.url, (err, stats) => {\n                    if (err) {\n                        res.writeHead(404);\n                        res.write('File not found!', err => {\n                            if (err) {\n                                this.adapter.log.error(`Error writing file: ${err}`);\n                            }\n                            res.end();\n                            //void this.delete();\n                        });\n                    } else {\n                        this.log.debug(`Content-Length: ${stats.size} bytes`);\n                        res.writeHead(200, {\n                            Server: 'nginx', // Simuliere den Original-Server\n                            Date: new Date().toUTCString(), // Muss korrekt sein\n                            'Content-Length': stats.size,\n                            Connection: 'keep-alive',\n                            'Last-Modified': stats.mtime.toUTCString(),\n                            ETag: `\"${stats.size.toString(16)}-${Date.now().toString(16)}\"`,\n                            'Accept-Ranges': 'bytes',\n                        });\n                        const fileStream = fs.createReadStream(fileName + req.url, { highWaterMark: 64 * 1024 });\n                        fileStream.pipe(res);\n\n                        //void this.delete();\n                    }\n                });\n            })\n            .listen(port, ip);\n    }\n    async delete(): Promise<void> {\n        this.log.debug('Closing http server');\n        this.server.close();\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAiB;AACjB,qBAA0B;AAE1B,gBAAe;AAER,MAAM,mBAAmB,yBAAU;AAAA,EACtC;AAAA,EACA,YAAY,SAA4B,MAAc,IAAY,MAAc,UAAkB;AAC9F,UAAM,SAAS,IAAI;AACnB,SAAK,IAAI,MAAM,2BAA2B,EAAE,IAAI,IAAI,aAAa,QAAQ,EAAE;AAC3E,SAAK,SAAS,YAAAA,QACT,aAAa,EAAE,WAAW,KAAK,GAAG,CAAC,KAAK,QAAQ;AAC7C,WAAK,IAAI,MAAM,qBAAqB,IAAI,GAAG,EAAE;AAE7C,gBAAAC,QAAG,KAAK,WAAW,IAAI,KAAK,CAAC,KAAK,UAAU;AACxC,YAAI,KAAK;AACL,cAAI,UAAU,GAAG;AACjB,cAAI,MAAM,mBAAmB,CAAAC,SAAO;AAChC,gBAAIA,MAAK;AACL,mBAAK,QAAQ,IAAI,MAAM,uBAAuBA,IAAG,EAAE;AAAA,YACvD;AACA,gBAAI,IAAI;AAAA,UAEZ,CAAC;AAAA,QACL,OAAO;AACH,eAAK,IAAI,MAAM,mBAAmB,MAAM,IAAI,QAAQ;AACpD,cAAI,UAAU,KAAK;AAAA,YACf,QAAQ;AAAA;AAAA,YACR,OAAM,oBAAI,KAAK,GAAE,YAAY;AAAA;AAAA,YAC7B,kBAAkB,MAAM;AAAA,YACxB,YAAY;AAAA,YACZ,iBAAiB,MAAM,MAAM,YAAY;AAAA,YACzC,MAAM,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC,IAAI,KAAK,IAAI,EAAE,SAAS,EAAE,CAAC;AAAA,YAC5D,iBAAiB;AAAA,UACrB,CAAC;AACD,gBAAM,aAAa,UAAAD,QAAG,iBAAiB,WAAW,IAAI,KAAK,EAAE,eAAe,KAAK,KAAK,CAAC;AACvF,qBAAW,KAAK,GAAG;AAAA,QAGvB;AAAA,MACJ,CAAC;AAAA,IACL,CAAC,EACA,OAAO,MAAM,EAAE;AAAA,EACxB;AAAA,EACA,MAAM,SAAwB;AAC1B,SAAK,IAAI,MAAM,qBAAqB;AACpC,SAAK,OAAO,MAAM;AAAA,EACtB;AACJ;",
  "names": ["http", "fs", "err"]
}
