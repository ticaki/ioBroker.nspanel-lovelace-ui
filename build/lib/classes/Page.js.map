{
  "version": 3,
  "sources": ["../../../src/lib/classes/Page.ts"],
  "sourcesContent": ["import * as pages from '../types/pages';\nimport { BaseClassPage } from './baseClassPage';\nimport * as types from '../types/types';\nimport { PageItem } from '../pages/pageItem';\nimport { deepAssign, getPayload, getPayloadRemoveTilde, getRegExp } from '../const/tools';\nimport type { PageItemDataItemsOptions, PageItemOptionsTemplate } from '../types/type-pageItem';\nimport { pageItemTemplates } from '../templates/templateArray';\nimport type { PageInterface, PageItemInterface } from './PageInterface';\nimport { Icons } from '../const/icon_mapping';\nimport { Color, type RGB } from '../const/Color';\n\n//interface Page extends BaseClass | PageConfig..\nexport type PageConfigAll = pages.PageBase;\n\nexport class Page extends BaseClassPage {\n    readonly card: pages.PageTypeCards;\n    readonly id: string;\n    private lastCardCounter: number = 0;\n    //protected overridePageItemsDpInit: string | RegExp = '';\n    public readonly isScreensaver: boolean;\n    public hidden: boolean = false;\n\n    /**\n     * Direct reference to the parent page,\n     * bypassing navigation logic.\n     */\n    public directParentPage: Page | undefined;\n\n    /**\n     * Direct reference to the child page,\n     * bypassing navigation logic.\n     */\n    public directChildPage: Page | undefined; //readonly enums: string | string[];\n    config: pages.PageBase['config'];\n    //config: Card['config'];\n\n    /**\n     * Constructs a new Page instance.\n     * Initializes page properties, processes device and dpInit patterns, and sets up the configuration.\n     * This is the base constructor for all page types (Grid, Media, Entities, etc.).\n     *\n     * @param card - Page interface containing card type, ID, and data point initialization pattern\n     * @param pageItemsConfig - Optional page configuration including items, enums, device references\n     * @param isScreensaver - Whether this page is a screensaver (default: false)\n     */\n    constructor(card: PageInterface, pageItemsConfig: pages.PageBase | undefined, isScreensaver: boolean = false) {\n        super(card, pageItemsConfig && pageItemsConfig.alwaysOn, pageItemsConfig && pageItemsConfig.pageItems);\n        this.isScreensaver = isScreensaver;\n        this.card = card.card;\n        this.id = card.id;\n        this.hidden = pageItemsConfig && 'hidden' in pageItemsConfig ? !!pageItemsConfig.hidden : false;\n        this.enums =\n            pageItemsConfig && 'enums' in pageItemsConfig && pageItemsConfig.enums ? pageItemsConfig.enums : '';\n        this.device =\n            pageItemsConfig && 'device' in pageItemsConfig && pageItemsConfig.device ? pageItemsConfig.device : '';\n        if (this.device) {\n            card.dpInit = typeof card.dpInit === 'string' ? card.dpInit.replace('#\u00B0^\u00B0#', this.device) : card.dpInit;\n        }\n        if (card.dpInit && typeof card.dpInit === 'string') {\n            const reg = getRegExp(card.dpInit);\n            if (reg) {\n                card.dpInit = reg;\n            }\n        }\n        this.dpInit = card.dpInit ?? '';\n        this.config = pageItemsConfig && pageItemsConfig.config;\n    }\n\n    /**\n     * Initializes the page and all its PageItems.\n     * Processes templates, resolves data point patterns (dpInit/enums), and creates PageItem instances.\n     * Must be called after construction and before the page is displayed.\n     * Derived classes may override this to add page-specific initialization logic.\n     *\n     * @returns Promise that resolves when all PageItems are initialized\n     */\n    async init(): Promise<void> {\n        // do the work f\u00FCr PageItems only one time - changes in ObjectDB need a adapter restart.\n        if (this.pageItemConfig) {\n            for (let a = 0; a < this.pageItemConfig.length; a++) {\n                let options = this.pageItemConfig[a];\n                if (options === undefined) {\n                    continue;\n                }\n\n                // switch type text to button as indicator for cardThermo\n                if (options.type === 'text' && this && this.card === 'cardThermo') {\n                    options.type = 'button' as any;\n                    options.role = 'indicator';\n                }\n\n                options = await this.getItemFromTemplate(options);\n                if (!options) {\n                    this.log.error(`Dont get a template for ${a} in ${this.name}`);\n                    continue;\n                }\n\n                options.dpInit =\n                    typeof options.dpInit === 'string' && options.device\n                        ? options.dpInit.replace('#\u00B0^\u00B0#', options.device)\n                        : options.dpInit;\n\n                if (options.dpInit && typeof options.dpInit === 'string') {\n                    const reg = getRegExp(options.dpInit, { startsWith: true });\n                    if (reg) {\n                        options.dpInit = reg;\n                    }\n                }\n                // search states for mode auto\n                const dpInit = (this.dpInit ? this.dpInit : options.dpInit) ?? '';\n                const enums = this.enums ? this.enums : options.enums;\n                if (!dpInit && !enums) {\n                    //this.log.debug(`No dpInit or enums for pageItem ${a} in ${this.name}`);\n                }\n\n                options.data =\n                    dpInit || enums\n                        ? await this.basePanel.statesControler.getDataItemsFromAuto(\n                              dpInit,\n                              options.data,\n                              'appendix' in options ? options.appendix : undefined,\n                              this.enums ? this.enums : options.enums,\n                          )\n                        : options.data;\n                options = structuredClone(options);\n                if (options) {\n                    options.dpInit = dpInit;\n                }\n                this.pageItemConfig[a] = await this.initPageItems(options);\n            }\n        }\n    }\n\n    /**\n     * Initializes a single PageItem configuration.\n     * Resolves data items from auto-discovery (dpInit patterns or enums) and clones the configuration.\n     * Used during page initialization and when dynamically creating PageItems.\n     *\n     * @param item - PageItem configuration to initialize\n     * @param overrideDpInit - Optional override for data point initialization pattern\n     * @returns Promise resolving to the initialized PageItem configuration, or undefined if invalid\n     */\n    async initPageItems(\n        item: PageItemDataItemsOptions | undefined,\n        overrideDpInit: string | RegExp = '',\n    ): Promise<PageItemDataItemsOptions | undefined> {\n        let options = item;\n        if (options === undefined) {\n            return undefined;\n        }\n        const dpInit = (overrideDpInit || (this.dpInit ? this.dpInit : options.dpInit)) ?? '';\n        const enums = this.enums ? this.enums : options.enums;\n\n        options.data =\n            dpInit || enums\n                ? await this.basePanel.statesControler.getDataItemsFromAuto(\n                      dpInit,\n                      options.data,\n                      'appendix' in options ? options.appendix : undefined,\n                      this.enums ? this.enums : options.enums,\n                  )\n                : options.data;\n        options = JSON.parse(JSON.stringify(options));\n        if (options) {\n            options.dpInit = dpInit;\n        }\n        return options;\n    }\n\n    /**\n     * Resolves a PageItem configuration from its template definition.\n     * Templates provide pre-configured settings for common device types (lights, shutters, etc.).\n     * Supports template inheritance and deep merging of color/icon overrides.\n     * Validates adapter compatibility and type consistency.\n     *\n     * @param options - PageItem configuration with template reference\n     * @param subtemplate - Optional sub-template identifier for recursive resolution\n     * @param loop - Recursion depth counter to prevent infinite loops (max 10)\n     * @returns Promise resolving to the merged configuration, or undefined if template not found/invalid\n     */\n    async getItemFromTemplate(\n        options: PageItemDataItemsOptions,\n        subtemplate: types.TemplateIdent = '',\n        loop: number = 0,\n    ): Promise<PageItemDataItemsOptions | undefined> {\n        if ('template' in options && options.template) {\n            const template: PageItemOptionsTemplate | undefined = subtemplate\n                ? pageItemTemplates[subtemplate]\n                : pageItemTemplates[options.template];\n            const name = options.template;\n            if (!template) {\n                this.log.error(`Dont find template ${options.template}`);\n                return undefined;\n            }\n            if (\n                template.adapter &&\n                typeof options.dpInit === 'string' &&\n                !options.dpInit.includes(template.adapter) &&\n                typeof this.dpInit === 'string' &&\n                !this.dpInit.includes(template.adapter)\n            ) {\n                this.log.error(\n                    `Missing dbInit or dbInit not starts with${template.adapter} for template ${options.template}`,\n                );\n                return undefined;\n            }\n\n            const newTemplate = structuredClone(template) as Partial<PageItemOptionsTemplate>;\n            delete newTemplate.adapter;\n            if (\n                options.type &&\n                options.type !== template.type &&\n                !(options.type == 'button' && template.type == 'text')\n            ) {\n                // eslint-disable-next-line @typescript-eslint/no-base-to-string\n                this.log.error(`Type: ${String(options.type)} is not equal with ${template.type}`);\n                return undefined;\n            }\n            const colorTrue = (options.color || {}).true;\n            const colorFalse = (options.color || {}).false;\n            const colorScale = (options.color || {}).scale;\n            const iconTrue = (options.icon || {}).true;\n            const iconFalse = (options.icon || {}).false;\n\n            options.type = options.type || template.type;\n            options.role = options.role || template.role;\n            options = deepAssign(newTemplate, options);\n            if (template.template !== undefined) {\n                if (loop > 10) {\n                    throw new Error(\n                        `Endless loop in getItemFromTemplate() detected! From ${template.template} for ${name}. Bye Bye`,\n                    );\n                }\n                const o = await this.getItemFromTemplate(options, template.template, ++loop);\n                if (o !== undefined) {\n                    options = o;\n                } else {\n                    this.log.warn(`Dont get a template from ${template.template} for ${name}`);\n                }\n            }\n            if (options.data) {\n                options.data.icon = options.data.icon ?? {};\n                if (colorTrue) {\n                    options.data.icon.true = options.data.icon.true ?? {};\n                    options.data.icon.true.color = colorTrue;\n                }\n                if (iconTrue) {\n                    options.data.icon.true = options.data.icon.true ?? {};\n                    options.data.icon.true.value = iconTrue;\n                }\n                if (colorFalse) {\n                    options.data.icon.false = options.data.icon.false ?? {};\n                    options.data.icon.false.color = colorFalse;\n                }\n                if (iconFalse) {\n                    options.data.icon.false = options.data.icon.false ?? {};\n                    options.data.icon.false.value = iconFalse;\n                }\n                if (colorScale) {\n                    options.data.icon.scale = { type: 'const', constVal: colorScale };\n                }\n            }\n        }\n        return options;\n    }\n\n    /**\n     * Handles incoming button events from the NSPanel.\n     * Base implementation logs a warning; derived classes should override this to handle\n     * page-specific button interactions (navigation, media controls, alarm actions, etc.).\n     *\n     * @param event - The incoming event from the panel containing button action and value\n     */\n    async onButtonEvent(event: types.IncomingEvent): Promise<void> {\n        this.log.warn(`Event received but no handler! ${JSON.stringify(event)}`);\n    }\n\n    /**\n     * Sends the page type command to the NSPanel to prepare the display.\n     * Determines whether to force-send based on card type and panel state.\n     * Some card types (Chart, Thermo) always force-send to ensure correct rendering.\n     * Implements throttling to avoid redundant type commands (sends every 15th call if unchanged).\n     *\n     * @param force - Optional flag to force sending the pageType command regardless of cache\n     */\n    sendType(force?: boolean): void {\n        let forceSend = force || false;\n        let renderCurrentPage = false;\n        switch (this.card) {\n            //case 'cardBurnRec':\n            case 'cardChart':\n            case 'cardLChart':\n            case 'cardThermo':\n                forceSend = true;\n            //@disable-next-line no-fallthrough\n            case 'cardEntities':\n            case 'cardGrid':\n            case 'cardGrid2':\n            case 'cardGrid3':\n            case 'cardMedia':\n            case 'cardUnlock':\n            case 'cardQR':\n            case 'cardAlarm':\n            case 'cardPower':\n            case 'screensaver':\n            case 'screensaver2':\n            case 'screensaver3':\n            case 'cardItemSpecial':\n            case 'cardSchedule':\n            case 'cardThermo2':\n                renderCurrentPage = true;\n                break;\n            case 'popupNotify':\n            case 'popupNotify2':\n                renderCurrentPage = false;\n                break;\n            default:\n                pages.exhaustiveCheck(this.card);\n                break;\n        }\n        if (forceSend || this.basePanel.lastCard !== this.card) {\n            this.basePanel.lastSendTypeDate = Date.now();\n            this.log.debug(`Register last send type ${this.card} block for ${this.basePanel.blockTouchEventsForMs}ms`);\n            this.sendToPanel(`pageType~${this.card}`, renderCurrentPage);\n        } else {\n            if (this.lastCardCounter++ > 15) {\n                this.lastCardCounter = 0;\n                this.basePanel.lastSendTypeDate = Date.now();\n                this.log.debug(\n                    `Register last send type ${this.card} block for ${this.basePanel.blockTouchEventsForMs}ms`,\n                );\n                this.sendToPanel(`pageType~${this.card}`, renderCurrentPage);\n            }\n        }\n        this.basePanel.lastCard = this.card;\n    }\n\n    /**\n     * Creates PageItem instances from configuration.\n     * Constructs PageItem objects for interactive elements (lights, buttons, shutters, etc.).\n     * Used during page initialization and when dynamically adding items to a page.\n     *\n     * @param pageItemsConfig - Single or array of PageItem configurations\n     * @param ident - Optional identifier prefix for the PageItems (used in naming)\n     * @returns Promise resolving to array of created PageItem instances (may contain undefined for invalid configs)\n     */\n    async createPageItems(\n        pageItemsConfig: PageItemDataItemsOptions | (PageItemDataItemsOptions | undefined)[] | undefined,\n        ident: string = '',\n    ): Promise<(PageItem | undefined)[] | undefined> {\n        const result = [];\n        if (pageItemsConfig) {\n            if (!Array.isArray(pageItemsConfig)) {\n                pageItemsConfig = [pageItemsConfig];\n            }\n            for (let a = 0; a < pageItemsConfig.length; a++) {\n                const config: Omit<PageItemInterface, 'pageItemsConfig'> = {\n                    name: ident ? ident : `${this.name}|PI`,\n                    adapter: this.adapter,\n                    panel: this.basePanel,\n                    card: 'cardItemSpecial',\n                    id: `${this.id}?${ident ? ident : a}`,\n                    parent: this,\n                };\n                result[a] = await PageItem.getPageItem(config, pageItemsConfig[a]);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Generates the navigation payload string for the NSPanel.\n     * If a direct parent page exists, shows an \"up\" arrow for back navigation.\n     * Otherwise delegates to the panel's navigation controller for normal nav behavior.\n     *\n     * @param side - Optional side to generate navigation for ('left' or 'right'); if omitted, returns both\n     * @returns Formatted navigation payload string for MQTT transmission\n     */\n    protected getNavigation(side?: 'left' | 'right'): string {\n        if (this.directParentPage) {\n            let left = '';\n            let right = '';\n            if (!side || side === 'left') {\n                left = getPayloadRemoveTilde(\n                    'button',\n                    'bUp',\n                    Icons.GetIcon('arrow-up-bold'),\n                    String(Color.rgb_dec565(Color.navParent as RGB)),\n                    '',\n                    '',\n                );\n            }\n            if (!side || side === 'right') {\n                right = getPayload('', '', '', '', '', '');\n            }\n            if (!side) {\n                return getPayload(left, right);\n            }\n            return side === 'left' ? left : right;\n        }\n\n        return this.basePanel.navigation.buildNavigationString(side);\n    }\n\n    /**\n     * Handles left navigation button press.\n     * If a direct parent page exists, navigates to it (for popup/child pages).\n     * Otherwise delegates to the panel's navigation controller (history-based navigation).\n     */\n    goLeft(): void {\n        if (this.directParentPage) {\n            void this.basePanel.setActivePage(this.directParentPage, false);\n            return;\n        }\n        this.basePanel.navigation.goLeft();\n    }\n\n    /**\n     * Handles right navigation button press.\n     * If a direct parent page exists, does nothing (right nav disabled for child pages).\n     * Otherwise delegates to the panel's navigation controller (forward navigation).\n     */\n    goRight(): void {\n        if (this.directParentPage) {\n            return;\n        }\n        this.basePanel.navigation.goRight();\n    }\n\n    /**\n     * Called when the page becomes visible or hidden.\n     * When visible: creates PageItems, sends page type, and triggers initial update.\n     * When hidden: deletes all PageItems to free resources and unsubscribe from states.\n     * Derived classes should call super.onVisibilityChange() if overriding.\n     *\n     * @param val - true if page is becoming visible, false if being hidden\n     */\n    protected async onVisibilityChange(val: boolean): Promise<void> {\n        if (val) {\n            if (!this.pageItems || this.pageItems.length === 0) {\n                this.pageItems = await this.createPageItems(this.pageItemConfig);\n            }\n            //if (this.card !== 'cardLChart') {\n            this.sendType();\n            //}\n            await this.update();\n        } else {\n            if (this.pageItems) {\n                for (const item of this.pageItems) {\n                    item && (await item.delete());\n                }\n                this.pageItems = [];\n            }\n        }\n    }\n\n    /**\n     * Returns the data point initialization pattern for child pages.\n     * Base implementation returns empty string; derived classes (like PageMenu)\n     * override this to pass dpInit patterns to dynamically created child pages.\n     *\n     * @returns Data point pattern (string or RegExp) for child page initialization\n     */\n    getdpInitForChild(): string | RegExp {\n        return '';\n    }\n\n    /**\n     * Registers a page as the last active page.\n     * Base implementation does nothing; derived classes (like PageMenu with pagination)\n     * override this to track navigation history or maintain parent-child relationships.\n     *\n     * @param _p - The page to register as last active (may be undefined)\n     */\n    setLastPage(_p: Page | undefined): void {}\n\n    /**\n     * Removes a page from the last active page tracking.\n     * Base implementation does nothing; derived classes (like PageMenu)\n     * override this to clean up navigation history or parent-child relationships.\n     *\n     * @param _p - The page to remove from tracking (may be undefined)\n     */\n    removeLastPage(_p: Page | undefined): void {}\n\n    /**\n     * Updates the page content and sends data to the NSPanel.\n     * Base implementation logs a warning; all derived page classes MUST override this\n     * to implement page-specific rendering logic (e.g., grid items, media player state, chart data).\n     * Called when the page becomes visible or when subscribed states change.\n     */\n    public async update(): Promise<void> {\n        this.adapter.log.warn(\n            `<- instance of [${Object.getPrototypeOf(this)}] update() is not defined or call super.onStateTrigger()`,\n        );\n    }\n\n    /**\n     * Handles popup requests from the NSPanel (e.g., light color picker, shutter position).\n     * Routes the request to the appropriate PageItem, executes commands, or generates popup payloads.\n     * Called when user interacts with a PageItem that triggers a popup dialog.\n     *\n     * @param id - The PageItem index or identifier\n     * @param popup - The type of popup to display (e.g., 'popupLight', 'popupShutter')\n     * @param action - The button action performed in the popup (e.g., 'OnOff', 'brightnessSlider')\n     * @param value - The value from the action (e.g., slider position, color RGB)\n     * @param _event - The raw incoming event from the panel (optional)\n     * @returns Promise that resolves when popup is handled and sent to panel\n     */\n    public async onPopupRequest(\n        id: number | string,\n        popup: types.PopupType | undefined,\n        // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\n        action: types.ButtonActionType | undefined | string,\n        value: string | undefined,\n        _event: types.IncomingEvent | null = null,\n    ): Promise<void> {\n        if (!this.pageItems || id == '') {\n            this.log.debug(\n                `onPopupRequest: No pageItems or id this is only a warning if u used a pageitem except: 'arrow': ${id}`,\n            );\n            return;\n        }\n        let item: PageItem | undefined;\n        if (isNaN(Number(id)) && typeof id === 'string') {\n            this.log.error(\n                `onPopupRequest: id should be a number but is a string: ${id}. Page name: ${this.name}, Page id: ${this.id}, Page card: ${this.card}`,\n            );\n        } else {\n            const i = typeof id === 'number' ? id : parseInt(id);\n            item = this.pageItems[i];\n        }\n        if (!item) {\n            return;\n        }\n        let msg: string | null = null;\n        if (action && value !== undefined && (await item.onCommand(action, value))) {\n            return;\n        } else if (types.isPopupType(popup) && action !== 'bExit') {\n            this.basePanel.lastCard = '';\n            msg = await item.GeneratePopup(popup);\n        }\n        if (msg !== null) {\n            this.sleep = true;\n            this.sendToPanel(msg, false);\n        }\n    }\n\n    /**\n     * Cleans up the page and all its resources.\n     * Recursively deletes child/parent page references, destroys all PageItems,\n     * and calls the base class cleanup (unsubscribes states, clears timers).\n     * Must be called when a page is removed from navigation or the adapter unloads.\n     *\n     * @returns Promise that resolves when cleanup is complete\n     */\n    async delete(): Promise<void> {\n        this.unload = true;\n\n        if (this.directChildPage) {\n            await this.directChildPage.delete();\n            this.directChildPage = undefined;\n        }\n        if (this.directParentPage) {\n            this.directParentPage.directChildPage = undefined;\n            this.directParentPage = undefined;\n        }\n        if (this.pageItems) {\n            for (const item of this.pageItems) {\n                item && (await item.delete());\n            }\n        }\n        this.pageItems = [];\n        this.pageItemConfig = [];\n        await super.delete();\n    }\n}\n\n/**\n * Type guard to check if a string is a valid media button action type.\n * Used in media page implementations to validate incoming button events.\n *\n * @param F - The string to check\n * @returns true if F is a valid MediaButtonActionType, false otherwise\n */\nexport function isMediaButtonActionType(F: string): F is MediaButtonActionType {\n    switch (F) {\n        case 'media-back':\n        case 'media-pause':\n        case 'media-next':\n        case 'media-shuffle':\n        case 'volumeSlider':\n        case 'mode-speakerlist':\n        case 'mode-playlist':\n        case 'mode-tracklist':\n        case 'mode-repeat':\n        case 'mode-equalizer':\n        case 'mode-seek':\n        case 'mode-crossfade':\n        case 'mode-favorites':\n        case 'mode-insel':\n        case 'media-OnOff':\n        case 'button':\n            return true;\n    }\n    console.error(`${F} isMediaButtonActionType === false`);\n    return false;\n}\ntype MediaButtonActionType = Extract<\n    types.ButtonActionType,\n    | 'media-back'\n    | 'media-pause'\n    | 'media-next'\n    | 'media-shuffle'\n    | 'volumeSlider'\n    | 'mode-speakerlist'\n    | 'mode-playlist'\n    | 'mode-tracklist'\n    | 'mode-repeat'\n    | 'mode-equalizer'\n    | 'mode-seek'\n    | 'mode-crossfade'\n    | 'mode-favorites'\n    | 'mode-insel'\n    | 'media-OnOff'\n    | 'button'\n>;\n"],
  "mappings": "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",
  "names": []
}
