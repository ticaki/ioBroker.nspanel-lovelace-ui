{
  "version": 3,
  "sources": ["../../../src/lib/classes/navigation.ts"],
  "sourcesContent": ["import { Panel } from '../controller/panel';\nimport { AdapterClassDefinition, BaseClass } from './library';\nimport { Color } from '../const/Color';\nimport { Icons } from '../const/icon_mapping';\nimport { Page } from './Page';\nimport { getPayload } from '../const/tools';\nimport { genericStateObjects } from '../const/definition';\ntype optionalActionsType = 'notifications';\nexport type NavigationItemConfig = {\n    name: string;\n    left?: {\n        single?: string;\n        double?: string;\n    };\n    right?: {\n        single?: string;\n        double?: string;\n    };\n    page: string;\n    optional?: optionalActionsType;\n} | null;\n\ntype NavigationItem = {\n    left: {\n        single?: number;\n        double?: number;\n    };\n    right: {\n        single?: number;\n        double?: number;\n    };\n    page: Page;\n    index: number;\n} | null;\n\nexport interface NavigationConfig {\n    adapter: AdapterClassDefinition;\n    panel: Panel;\n    navigationConfig: NavigationItemConfig[];\n}\n\nexport class Navigation extends BaseClass {\n    panel: Panel;\n    private database: NavigationItem[] = [];\n    private navigationConfig: NavigationItemConfig[];\n    private mainPage = 'main';\n    private doubleClickTimeout: ioBroker.Timeout | undefined;\n    private _currentItem: number = 0;\n    public get currentItem(): number {\n        return this._currentItem;\n    }\n    public set currentItem(value: number) {\n        const c = this.navigationConfig[value];\n        if (c) {\n            const states = this.buildCommonStates();\n            genericStateObjects.panel.panels.cmd.goToNavigationPoint.common.states = states;\n            this.library.writedp(\n                `panels.${this.panel.name}.cmd.goToNavigationPoint`,\n                c.name,\n                genericStateObjects.panel.panels.cmd.goToNavigationPoint,\n            );\n        }\n        this._currentItem = value;\n    }\n    constructor(config: NavigationConfig) {\n        super(config.adapter, `${config.panel.name}-navigation`);\n        this.panel = config.panel;\n        this.navigationConfig = config.navigationConfig;\n    }\n\n    init(): void {\n        this.database = [];\n        let b = 1;\n        let serviceLeft: string = '';\n        let serviceRight: string = '';\n        let serviceID: number = -1;\n        for (let a = 0; a < this.navigationConfig.length; a++) {\n            const c = this.navigationConfig[a];\n            if (!c) continue;\n            if (c.left && c.left.single === '///service') serviceRight = c.name;\n            if (c.right && c.right.single === '///service') serviceLeft = c.name;\n            if (c.name === '///service') serviceID = a;\n            const pageID = this.panel.getPagebyUniqueID(c.page);\n            this.database[c.name === 'main' ? 0 : b++] =\n                pageID !== null ? { page: pageID, left: {}, right: {}, index: a } : null;\n        }\n        if (serviceID !== -1) {\n            const c = this.navigationConfig[serviceID];\n            if (c) {\n                if (serviceLeft) c.left = { single: serviceLeft };\n                if (serviceRight) c.right = { single: serviceRight };\n            }\n        }\n        for (let a = 0; a < this.database.length; a++) {\n            const c = this.navigationConfig[a];\n            const i = this.database[a];\n            if (!c || !i) continue;\n            for (const k of ['left', 'right']) {\n                const nk = k as 'left' | 'right';\n                const r = c[nk];\n                if (!r) continue;\n                for (const k2 of ['single', 'double']) {\n                    const nk2 = k2 as 'single' | 'double';\n                    const r2 = r[nk2];\n                    if (!r2) continue;\n                    const index = this.navigationConfig.findIndex((a) => a && a.name === r2);\n                    if (index !== -1) {\n                        i[nk][nk2] = index;\n                    } else {\n                        this.log.warn(`Dont find a navigation node with name ${r2}`);\n                    }\n                }\n            }\n        }\n    }\n    async setPageByIndex(index: number | undefined): Promise<void> {\n        if (index !== -1 && index !== undefined) {\n            const item = this.database[index];\n            if (item) {\n                this.currentItem = index;\n                await this.panel.setActivePage(this.database[index]!.page);\n                await this.optionalActions(item);\n            }\n        }\n    }\n\n    setTargetPageByName(n: string): void {\n        const index = this.navigationConfig.findIndex((a) => a && a.name === n);\n        if (index !== -1) {\n            this.setPageByIndex(index);\n        } else {\n            this.log.warn(`Dont find navigation target for ${n}`);\n        }\n    }\n    setMainPageByName(n: string): void {\n        const index = this.navigationConfig.findIndex((a) => a && a.name === n);\n        if (index !== -1 && this.database[index]) {\n            this.mainPage = this.navigationConfig[index]!.name;\n        } else {\n            this.log.warn(`Dont find navigation main page for ${n}`);\n        }\n    }\n\n    buildCommonStates(): Record<string, string> {\n        const result: Record<string, string> = {};\n        for (const n of this.navigationConfig) {\n            if (n) result[n.name] = n.name;\n        }\n        return result;\n    }\n    goLeft(): void {\n        this.go('left');\n    }\n    goRight(): void {\n        this.go('right');\n    }\n    private go(d: 'left' | 'right', single: boolean = false): void {\n        const i = this.database[this.currentItem];\n        // zweiter Klick\n        if (this.doubleClickTimeout && !single) {\n            this.adapter.clearTimeout(this.doubleClickTimeout);\n            this.doubleClickTimeout = undefined;\n            if (i && i[d] && i[d].double) {\n                const index = i[d].double;\n                this.setPageByIndex(index);\n            }\n            this.log.debug('Navigation double click work.');\n            // erster Klick und check obs ein Ziel f\u00FCr den 2. Klick gibt.\n        } else if (!single && i && i[d] && i[d].double) {\n            this.doubleClickTimeout = this.adapter.setTimeout(\n                (...arg: any): void => {\n                    this.go(arg[0], arg[1]);\n                },\n                this.adapter.config.doubleClickTime,\n                d,\n                true,\n            );\n            return;\n            // erster Klick und timeout ist durch oder forced.\n        } else {\n            this.adapter.clearTimeout(this.doubleClickTimeout);\n            this.doubleClickTimeout = undefined;\n            if (i && i[d] && i[d].single !== undefined) {\n                const index = i[d].single;\n                this.setPageByIndex(index);\n                this.log.debug(`Navigation single click with target ${i[d].single} work.`);\n                return;\n            } else if (i && i[d] && i[d].double !== undefined) {\n                const index = i[d].double;\n                this.setPageByIndex(index);\n                this.log.debug(`Navigation single click (use double target) with target ${i[d].double} work.`);\n                return;\n            }\n            this.log.debug('Navigation single click not work.');\n        }\n    }\n\n    async optionalActions(item: NavigationItem): Promise<void> {\n        if (!item) return;\n        const nItem = this.navigationConfig[item.index];\n        if (!nItem) return;\n        if (nItem.optional === 'notifications') {\n            if (this.panel.controller.systemNotification.getNotificationIndex(this.panel.notifyIndex) !== -1) {\n                await this.panel.statesControler.setInternalState(\n                    `${this.panel.name}/cmd/NotificationNext2`,\n                    true,\n                    false,\n                );\n            }\n        }\n    }\n\n    buildNavigationString(side?: 'left' | 'right'): string {\n        const item = this.database[this.currentItem];\n        if (!item) return '';\n        let navigationString = '';\n        if (!side || side === 'left') {\n            if (\n                item.left.single !== undefined &&\n                (item.left.double === undefined || this.doubleClickTimeout === undefined)\n            ) {\n                navigationString = getPayload(\n                    'button',\n                    'bSubPrev',\n                    item.left.double === undefined\n                        ? Icons.GetIcon('arrow-left-bold')\n                        : Icons.GetIcon('arrow-top-left-bold-outline'),\n                    String(Color.rgb_dec565(Color.White)),\n                    '',\n                    '',\n                );\n            } else if (item.left.double !== undefined) {\n                navigationString = getPayload(\n                    'button',\n                    'bUp',\n                    Icons.GetIcon('arrow-up-bold'),\n                    String(Color.rgb_dec565(Color.White)),\n                    '',\n                    '',\n                );\n            } else {\n                navigationString = getPayload('', '', '', '', '', '');\n            }\n        }\n        let navigationString2 = '';\n        //Right icon\n        if (!side || side === 'right') {\n            if (\n                item.right.single !== undefined &&\n                (item.right.double === undefined || this.doubleClickTimeout === undefined)\n            ) {\n                navigationString2 = getPayload(\n                    'button',\n                    'bSubNext',\n                    item.right.double === undefined\n                        ? Icons.GetIcon('arrow-right-bold')\n                        : Icons.GetIcon('arrow-top-right-bold-outline'),\n                    String(Color.rgb_dec565(Color.White)),\n                    '',\n                    '',\n                );\n            } else if (item.right.double !== undefined) {\n                navigationString2 = getPayload(\n                    'button',\n                    'bHome',\n                    Icons.GetIcon('home'),\n                    String(Color.rgb_dec565(Color.White)),\n                    '',\n                    '',\n                );\n            } else {\n                navigationString2 = getPayload('', '', '', '', '', '');\n            }\n        }\n        if (side === 'left') return navigationString;\n        else if (side === 'right') return navigationString2;\n        return getPayload(navigationString, navigationString2);\n    }\n\n    /**\n     *\n     */\n    resetPosition(): void {\n        const index = this.navigationConfig.findIndex((a) => a && a.name === this.mainPage);\n        if (index !== -1 && this.database[index]) {\n            this.currentItem = index;\n        }\n    }\n    getCurrentMainPoint(): string {\n        const index = this.navigationConfig.findIndex((a) => a && a.name === this.mainPage);\n        if (index === -1) return 'main';\n        const item = this.navigationConfig[index];\n        return item ? item.name : 'main';\n    }\n    getCurrentPage(): Page {\n        const page = this.database[this.currentItem];\n        if (page === null || page === undefined) {\n            const index = this.database.findIndex((a) => a && a.page !== null);\n            return this.database[index]!.page;\n        }\n        return page.page;\n    }\n\n    async setCurrentPage(): Promise<void> {\n        let page = this.database[this.currentItem];\n        if (page === null || page === undefined) {\n            const index = this.database.findIndex((a) => a && a.page !== null);\n            page = this.database[index];\n        }\n        if (page) await this.setPageByIndex(page.index);\n    }\n    async delete(): Promise<void> {\n        await super.delete();\n        if (this.doubleClickTimeout) this.adapter.clearTimeout(this.doubleClickTimeout);\n    }\n}\n"],
  "mappings": "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",
  "names": ["a"]
}
