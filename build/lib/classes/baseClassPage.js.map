{
  "version": 3,
  "sources": ["../../../src/lib/classes/baseClassPage.ts"],
  "sourcesContent": ["import type { PageInterface } from './PageInterface';\nimport type { PageItem } from '../pages/pageItem';\nimport type { PageItemDataItemsOptions } from '../types/type-pageItem';\nimport type { Panel } from '../controller/panel';\nimport { BaseClass } from '../controller/library';\nimport { genericStateObjects } from '../const/definition';\nimport type { Controller } from '../controller/controller';\nimport type { IClientPublishOptions } from 'mqtt';\nimport type { AlwaysOnMode } from '../types/types';\n\n/**\n * Basisklasse f\u00FCr alles das auf Statestriggern soll - also jede card / popup\n * \u00FCbernimmt auch die Sichtbarkeitssteuerung das triggern wird pausiert wenn nicht sichtbar\n * mit async onStateTrigger(): Promise<void> {} k\u00F6nnen abgeleitete Klassen auf Triggerereignisse reagieren\n */\nexport class BaseTriggeredPage extends BaseClass {\n    private updateTimeout: ioBroker.Timeout | undefined;\n    private doUpdate: boolean = true;\n    protected minUpdateInterval: number;\n    protected visibility: boolean = false;\n    public alwaysOn: AlwaysOnMode;\n    private alwaysOnState: ioBroker.Timeout | undefined;\n    private lastMessage: string = '';\n    readonly basePanel: Panel;\n    protected filterDuplicateMessages: boolean = true;\n    neverDeactivateTrigger: boolean = false;\n    sleep: boolean = false;\n    parent: BaseTriggeredPage | undefined = undefined;\n    canBeHidden: boolean = false;\n    triggerParent: boolean = false;\n    dpInit: string | RegExp = '';\n    protected blockUpdateUntilTime: Date | null = null;\n    protected enums: string | string[] = '';\n    protected device: string = '';\n    protected sendToPanel: (\n        payload: string,\n        ackForType: boolean,\n        force?: boolean,\n        opt?: IClientPublishOptions,\n    ) => void = (payload: string, ackForType: boolean, force?: boolean, opt?: IClientPublishOptions) => {\n        if (this.filterDuplicateMessages && payload == this.lastMessage) {\n            return;\n        }\n        this.lastMessage = payload;\n        this.sendToPanelClass(payload, ackForType, force, opt);\n    };\n    resetLastMessage(): void {\n        this.lastMessage = '';\n    }\n\n    constructor(card: BaseTriggeredPageInterface, alwaysOn: AlwaysOnMode = 'none') {\n        super(card.adapter, card.name);\n        this.minUpdateInterval = 400;\n        if (!this.adapter.controller) {\n            throw new Error('No controller! bye bye');\n        }\n        this.alwaysOn = alwaysOn;\n        this.basePanel = card.panel;\n    }\n\n    protected sendToPanelClass(\n        payload: string,\n        ackForType: boolean,\n        force?: boolean,\n        opt?: IClientPublishOptions,\n    ): void {\n        this.basePanel.panelSend.addMessage(payload, ackForType, force, opt);\n    }\n    get controller(): Controller {\n        // checked in constructor\n        return this.adapter.controller!;\n    }\n    async reset(): Promise<void> {}\n\n    readonly onStateTriggerSuperDoNotOverride = async (dp: string, from: BaseTriggeredPage): Promise<boolean> => {\n        if (this.unload || this.adapter.unload) {\n            return false;\n        }\n        if (\n            !this.visibility &&\n            !(\n                this.neverDeactivateTrigger ||\n                (this.canBeHidden && this.parent?.visibility) ||\n                from.neverDeactivateTrigger\n            )\n        ) {\n            this.log.debug(`[${this.basePanel.friendlyName} ${this.name}] Page not visible, ignore trigger!`);\n            return false;\n        }\n\n        if (this.sleep && !this.neverDeactivateTrigger) {\n            return false;\n        }\n\n        if (this.blockUpdateUntilTime) {\n            if (this.blockUpdateUntilTime.getTime() > new Date().getTime()) {\n                if (this.updateTimeout) {\n                    this.adapter.clearTimeout(this.updateTimeout);\n                }\n                this.updateTimeout = this.adapter.setTimeout(\n                    async () => {\n                        if (this.unload || this.adapter.unload) {\n                            return;\n                        }\n                        this.updateTimeout = undefined;\n                        if (this.doUpdate) {\n                            this.doUpdate = false;\n                            await this.onStateTrigger(dp, from);\n                        }\n                    },\n                    this.blockUpdateUntilTime.getTime() - new Date().getTime() + 20,\n                );\n            }\n            this.blockUpdateUntilTime = null;\n        }\n        if (this.updateTimeout) {\n            this.doUpdate = true;\n            return false;\n        }\n\n        this.updateTimeout = this.adapter.setTimeout(async () => {\n            if (this.unload || this.adapter.unload) {\n                return;\n            }\n            this.updateTimeout = undefined;\n            if (this.doUpdate) {\n                if (this.alwaysOnState) {\n                    this.adapter.clearTimeout(this.alwaysOnState);\n                }\n                if (this.alwaysOn === 'action') {\n                    if (this.unload || this.adapter.unload) {\n                        return;\n                    }\n                    this.alwaysOnState = this.adapter.setTimeout(\n                        () => {\n                            this.basePanel.sendScreensaverTimeout(this.basePanel.timeout);\n                        },\n                        this.basePanel.timeout * 1000 || 5000,\n                    );\n                }\n                this.doUpdate = false;\n                await this.onStateTrigger(dp, from);\n            }\n        }, this.minUpdateInterval ?? 50);\n        if (this.alwaysOnState) {\n            this.adapter.clearTimeout(this.alwaysOnState);\n        }\n        if (this.alwaysOn === 'action') {\n            if (this.unload || this.adapter.unload) {\n                return false;\n            }\n            this.alwaysOnState = this.adapter.setTimeout(\n                () => {\n                    this.basePanel.sendScreensaverTimeout(this.basePanel.timeout);\n                },\n                this.basePanel.timeout * 1000 || 5000,\n            );\n        }\n        await this.onStateTrigger(dp, from);\n        return true;\n    };\n\n    protected async onStateTrigger(_dp: string, _from: BaseTriggeredPage): Promise<void> {\n        this.adapter.log.warn(\n            `<- instance of [${Object.getPrototypeOf(this)}] is triggert but dont react or call super.onStateTrigger()`,\n        );\n    }\n\n    private stopTriggerTimeout(): void {\n        if (this.updateTimeout) {\n            this.adapter.clearTimeout(this.updateTimeout);\n            this.updateTimeout = undefined;\n        }\n    }\n    async delete(): Promise<void> {\n        await super.delete();\n        await this.setVisibility(false);\n        this.parent = undefined;\n        if (this.alwaysOnState) {\n            this.adapter.clearTimeout(this.alwaysOnState);\n        }\n        this.stopTriggerTimeout();\n    }\n    getVisibility = (): boolean => {\n        return this.visibility;\n    };\n    setVisibility = async (v: boolean): Promise<void> => {\n        if (v !== this.visibility) {\n            this.visibility = v;\n            if (this.visibility) {\n                if (this.unload || this.adapter.unload) {\n                    return;\n                }\n\n                this.log.debug(`[${this.basePanel.friendlyName}] Switch page to visible!`);\n                this.resetLastMessage();\n                this.controller && (await this.controller.statesControler.activateTrigger(this));\n\n                this.basePanel.info.nspanel.currentPage = this.name;\n                await this.library.writedp(\n                    `panels.${this.basePanel.name}.info.nspanel.currentPage`,\n                    this.name,\n                    genericStateObjects.panel.panels.info.nspanel.currentPage,\n                );\n            } else {\n                if (this.alwaysOnState) {\n                    this.adapter.clearTimeout(this.alwaysOnState);\n                }\n                this.log.debug(`[${this.basePanel.friendlyName}] Switch page to invisible!`);\n                if (!this.neverDeactivateTrigger) {\n                    this.stopTriggerTimeout();\n                    this.controller && (await this.controller.statesControler.deactivateTrigger(this));\n                }\n            }\n            if (this.unload || this.adapter.unload) {\n                return;\n            }\n            await this.onVisibilityChange(v);\n            if (this.visibility) {\n                if (this.alwaysOn != 'ignore') {\n                    if (this.alwaysOn != 'none') {\n                        if (this.alwaysOn === 'action') {\n                            if (this.unload || this.adapter.unload) {\n                                return;\n                            }\n                            this.alwaysOnState = this.adapter.setTimeout(\n                                async () => {\n                                    this.basePanel.sendScreensaverTimeout(this.basePanel.timeout);\n                                },\n                                this.basePanel.timeout * 2 * 1000 || 5000,\n                            );\n                        } else {\n                            this.basePanel.sendScreensaverTimeout(0);\n                        }\n                    } else {\n                        this.basePanel.sendScreensaverTimeout(this.basePanel.timeout);\n                    }\n                }\n            }\n        } else {\n            this.visibility = v;\n            // bin mir nicht sicher ob das f\u00FCr alles passt.\n            if (this.unload || this.adapter.unload) {\n                return;\n            }\n            if (this.visibility) {\n                await this.onVisibilityChange(v);\n            }\n        }\n    };\n    /**\n     * Event when visibility is on Change.\n     *\n     * @param val true/false\n     */\n    protected async onVisibilityChange(val: boolean): Promise<void> {\n        val;\n        this.adapter.log.warn(\n            `<- instance of [${this.name}] not react on onVisibilityChange(), or call super.onVisibilityChange()`,\n        );\n    }\n}\nexport class BaseClassPage extends BaseTriggeredPage {\n    pageItemConfig: (PageItemDataItemsOptions | undefined)[] | undefined;\n    pageItems: (PageItem | undefined)[] | undefined;\n    constructor(\n        card: PageInterface,\n        alwaysOn: AlwaysOnMode = 'none',\n        pageItemsConfig: (PageItemDataItemsOptions | undefined)[] | undefined,\n    ) {\n        super(card, alwaysOn);\n        this.pageItemConfig = pageItemsConfig;\n    }\n    async getEnabledPageItems(): Promise<(PageItem | undefined)[] | undefined> {\n        if (this.pageItems) {\n            const pageItems = [];\n            for (let a = 0; a < this.pageItems.length; a++) {\n                if (this.pageItems[a] == null) {\n                    continue;\n                }\n                if (await this.pageItems[a]!.isEnabled()) {\n                    pageItems.push(this.pageItems[a]);\n                }\n            }\n            return pageItems;\n        }\n        return this.pageItems;\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
