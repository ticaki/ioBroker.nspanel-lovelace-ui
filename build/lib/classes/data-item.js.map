{
  "version": 3,
  "sources": ["../../../src/lib/classes/data-item.ts"],
  "sourcesContent": ["import { Color, type RGB } from '../const/Color';\nimport { BaseClass } from './library';\nimport type { StatesControler } from '../controller/states-controller';\nimport type { BaseClassTriggerd } from '../classes/BaseClassPage';\n\nimport * as NSPanel from '../types/types';\n\nexport class Dataitem extends BaseClass {\n    options: NSPanel.DataItemsOptions;\n    //private obj: ioBroker.Object | null | undefined;\n    stateDB: StatesControler;\n    type: ioBroker.CommonType | undefined = undefined;\n    parent: BaseClassTriggerd;\n    common: Partial<ioBroker.StateCommon> = {};\n    private _writeable: boolean = false;\n    /**\n     * Call isValidAndInit() after constructor and check return value - if false, this object is not configured correctly.\n     *\n     * @param adapter this of adapter\n     * @param options {NSPanel.DataItemsOptions}\n     * @param parent {BaseClassTriggerd}\n     * @param db {StatesControler}\n     */\n    constructor(adapter: any, options: NSPanel.DataItemsOptions, parent: BaseClassTriggerd, db: StatesControler) {\n        super(adapter, options.name || '');\n        this.options = options;\n        this.stateDB = db;\n        this.parent = parent;\n        switch (this.options.type) {\n            case 'const':\n                this.options.constVal = Color.getColorFromDefault(this.options.constVal);\n                this.setTypeFromValue(this.options.constVal);\n                break;\n            case 'state':\n            case 'triggered':\n                this.type = this.options.forceType ? this.options.forceType : undefined;\n                // all work is done in isValidAndInit\n                break;\n            case 'internalState':\n            case 'internal': {\n                if (!this.options.dp.startsWith('///')) {\n                    this.options.dp = `${this.parent.panel.name}/${this.options.dp}`;\n                }\n                this.type = undefined;\n            }\n        }\n    }\n    public get writeable(): boolean {\n        return this._writeable;\n    }\n    /**\n     * Init and check dp is valid\n     *\n     * @returns if false value is not valid\n     */\n    async isValidAndInit(): Promise<boolean> {\n        switch (this.options.type) {\n            case 'const':\n                return !(this.options.constVal === undefined || this.options.constVal === null);\n            case 'state':\n            case 'internal':\n            case 'internalState':\n            case 'triggered': {\n                if (!this.options.dp) {\n                    return false;\n                }\n                this.options.dp = this.options.dp.replace(\n                    '${this.namespace}',\n                    `${this.adapter.namespace}.panels.${this.parent.panel.name}`,\n                );\n                const obj = await this.stateDB.getObjectAsync(this.options.dp);\n                if (!obj || obj.type != 'state' || !obj.common) {\n                    this.log.warn(`801: ${this.options.dp} has a invalid state object!`);\n                    return false;\n                    //throw new Error(`801: ${this.options.dp} has no state object! Bye Bye`);\n                }\n                this.type = this.type || obj.common.type;\n                this.options.role = obj.common.role;\n                this._writeable = !!obj.common.write;\n                this.common = obj.common;\n                if (this.options.type == 'triggered') {\n                    await this.stateDB.setTrigger(this.options.dp, this.parent, false, undefined, this.options.change);\n                } else if (this.options.type == 'internal') {\n                    await this.stateDB.setTrigger(this.options.dp, this.parent, true, undefined, this.options.change);\n                } else if (this.options.type == 'internalState') {\n                    await this.stateDB.setTrigger(this.options.dp, this.parent, true, false);\n                }\n                try {\n                    const value = await this.stateDB.getState(this.options.dp);\n                    return value !== null && value !== undefined;\n                } catch (e: any) {\n                    this.log.error(`Error 1001: ${typeof e === 'string' ? e.replaceAll('Error: ', '') : e}`);\n                    return false;\n                }\n            }\n        }\n        return false;\n    }\n    private async getRawState(): Promise<NSPanel.State | null | undefined> {\n        try {\n            switch (this.options.type) {\n                case 'const':\n                    return { val: this.options.constVal, ack: true, ts: Date.now(), lc: Date.now(), from: '' };\n                case 'state':\n                case 'triggered':\n                    if (!this.options.dp) {\n                        throw new Error(`Error 1002 type is ${this.options.type} but dp is undefined`);\n                    }\n                    return await this.stateDB.getState(this.options.dp);\n                case 'internalState':\n                case 'internal': {\n                    return await this.stateDB.getState(this.options.dp);\n                }\n            }\n        } catch (e: any) {\n            this.log.error(`Error 1003: ${e.replaceAll('Error: ', '')}`);\n        }\n        return null;\n    }\n\n    trueType(): ioBroker.CommonType | undefined {\n        return 'dp' in this.options ? (this.stateDB.getType(this.options.dp) ?? this.type) : this.type;\n    }\n\n    async getCommonStates(force: boolean = false): Promise<Record<string, string> | undefined> {\n        return 'dp' in this.options ? this.stateDB.getCommonStates(this.options.dp, force) : undefined;\n    }\n\n    async getState(): Promise<NSPanel.State | null | undefined> {\n        let state = await this.getRawState();\n        if (state) {\n            state = structuredClone(state);\n            if (this.options.type !== 'const' && this.options.read) {\n                try {\n                    if (typeof this.options.read === 'string') {\n                        state.val = new Function('val', 'Color', 'options', `${this.options.read}`)(\n                            state.val,\n                            Color,\n                            this.options.constants,\n                        );\n                    } else {\n                        state.val = this.options.read(state.val);\n                    }\n                    //this.log.debug(JSON.stringify(state.val));\n                } catch (e) {\n                    this.log.error(\n                        `Read for dp: ${this.options.dp} is invalid! read: ${String(this.options.read)} Error: ${String(e)}`,\n                    );\n                }\n            }\n        }\n        return state;\n    }\n\n    async getObject(): Promise<object | null> {\n        const state = await this.getState();\n        if (state && state.val) {\n            if (typeof state.val === 'string') {\n                try {\n                    const value = JSON.parse(state.val);\n                    return value;\n                } catch {\n                    let value = state.val;\n                    if (typeof value === 'string') {\n                        value = value.trim();\n                        if (value.startsWith('#')) {\n                            const v = Color.ConvertWithColordtoRgb(value);\n                            if (Color.isRGB(v)) {\n                                return v;\n                            }\n                        } else if (\n                            this.options.role === 'level.color.name' ||\n                            this.options.role === 'level.color.rgb'\n                        ) {\n                            return Color.ConvertWithColordtoRgb(value);\n                        }\n                    }\n                }\n            } else if (typeof state.val === 'object') {\n                return state.val;\n            } else if (typeof state.val === 'number') {\n                return Color.decToRgb(state.val);\n            }\n        }\n        return null;\n    }\n\n    async getRGBValue(): Promise<RGB | null> {\n        const value = await this.getObject();\n        if (value) {\n            if (Color.isRGB(value)) {\n                return value;\n            }\n            if (typeof value == 'object' && 'red' in value && 'blue' in value && 'green' in value) {\n                return { r: value.red as number, g: value.green as number, b: value.blue as number };\n            }\n        }\n        return null;\n    }\n    async getIconScale(): Promise<NSPanel.IconScaleElement | null> {\n        const value = await this.getObject();\n        if (value) {\n            if (NSPanel.isIconColorScaleElement(value)) {\n                return value;\n            }\n        }\n        return null;\n    }\n    async getRGBDec(): Promise<string | null> {\n        const value = await this.getRGBValue();\n        if (value) {\n            return String(Color.rgb_dec565(value));\n        }\n        return null;\n    }\n    async getTranslatedString(): Promise<string | null> {\n        const val = await this.getString();\n        if (val !== null) {\n            return this.library.getTranslation(val);\n        }\n        return null;\n    }\n\n    async getString(): Promise<string | null> {\n        const state = await this.getState();\n        switch (this.options.type) {\n            case 'const':\n                // eslint-disable-next-line @typescript-eslint/no-base-to-string\n                return state && state.val !== null ? String(state.val) : null;\n            case 'state':\n            case 'triggered':\n                if (this.options.substring) {\n                    const args = this.options.substring;\n                    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n                    return state && state.val !== null ? String(state.val).substring(args[0], args[1]) : null;\n                }\n                // eslint-disable-next-line @typescript-eslint/no-base-to-string\n                return state && state.val !== null ? String(state.val) : null;\n            case 'internalState':\n            case 'internal':\n                // eslint-disable-next-line @typescript-eslint/no-base-to-string\n                return state && state.val !== null ? String(state.val) : null;\n        }\n        return null;\n    }\n\n    async getNumber(): Promise<number | null> {\n        const result = await this.getState();\n        if (\n            result &&\n            (typeof result.val === 'number' ||\n                (typeof result.val === 'string' && result.val && !isNaN(Number(result.val))))\n        ) {\n            let val = parseFloat(String(result.val));\n            if (this.options.scale !== undefined) {\n                val = Math.trunc(Color.scale(val, this.options.scale.min, this.options.scale.max, 0, 100));\n            }\n            return val;\n        }\n        return null;\n    }\n    async getBoolean(): Promise<boolean | null> {\n        const result = await this.getState();\n        if (result && result.val !== null) {\n            if (typeof result.val === 'string') {\n                switch (result.val.toLowerCase()) {\n                    case 'ok':\n                    case 'on':\n                    case 'yes':\n                    case 'true':\n                    case 'online':\n                        return true;\n                }\n            }\n            return !!result.val;\n        }\n        return null;\n    }\n\n    private setTypeFromValue(val: NSPanel.StateValue | undefined): void {\n        switch (typeof val) {\n            case 'string':\n                this.type = 'string';\n                break;\n            case 'number':\n            case 'bigint':\n                this.type = 'number';\n                break;\n            case 'boolean':\n                this.type = 'boolean';\n                break;\n            case 'undefined':\n                this.type = undefined;\n                break;\n            case 'symbol':\n            case 'object':\n            case 'function':\n                this.type = 'object';\n        }\n    }\n    async setStateTrue(): Promise<void> {\n        await this.setStateAsync(true);\n    }\n    async setStateFalse(): Promise<void> {\n        await this.setStateAsync(false);\n    }\n    /**\n     * Flip this 'ON'/'OFF', 0/1 or true/false. Depend on this.type\n     */\n    async setStateFlip(): Promise<void> {\n        const value = await this.getBoolean();\n        this.log.debug(String(value));\n        switch (this.type) {\n            case 'boolean':\n                await this.setStateAsync(!value);\n                break;\n            case 'number':\n                await this.setStateAsync(value ? 0 : 1);\n                break;\n            case 'string':\n                await this.setStateAsync(value ? 'OFF' : 'ON');\n                break;\n        }\n    }\n    /**\n     * Set a internal, const or external State\n     *\n     * @param val number | boolean | string | null\n     * @returns void\n     */\n    async setStateAsync(val: ioBroker.StateValue): Promise<void> {\n        if (val === undefined) {\n            return;\n        }\n        if (this.options.type === 'const') {\n            this.options.constVal = val;\n        } else {\n            if (this.options.write) {\n                val = new Function('val', 'Color', `${String(this.options.write)}`)(val, Color);\n            }\n            await this.stateDB.setStateAsync(this, val, this._writeable);\n        }\n    }\n}\n\nexport function isDataItem(F: any): F is Dataitem {\n    if (F instanceof Dataitem) {\n        return true;\n    }\n    return false;\n}\n"],
  "mappings": "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",
  "names": []
}
