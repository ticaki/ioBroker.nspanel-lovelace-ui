{
  "version": 3,
  "sources": ["../../../src/lib/classes/data-item.ts"],
  "sourcesContent": ["import * as Color from '../const/Color';\nimport { BaseClass } from './library';\nimport { BaseClassTriggerd, StatesControler } from '../controller/states-controller';\nimport * as NSPanel from '../types/types';\nimport { RGB } from '../types/Color';\n\nexport class Dataitem extends BaseClass {\n    options: NSPanel.DataItemsOptions;\n    //private obj: ioBroker.Object | null | undefined;\n    stateDB: StatesControler;\n    type: ioBroker.CommonType | 'undefined' | undefined = undefined;\n    trueType: ioBroker.CommonType | 'undefined' | undefined = undefined;\n    parent: BaseClassTriggerd;\n    private _writeable: boolean = false;\n    /**\n     * Call isValidAndInit() after constructor and check return value - if false, this object is not configured correctly.\n     * @param adapter this of adapter\n     * @param options {NSPanel.DataItemsOptions}\n     * @param parent {BaseClassTriggerd}\n     * @param db {StatesControler}\n     */\n    constructor(adapter: any, options: NSPanel.DataItemsOptions, parent: BaseClassTriggerd, db: StatesControler) {\n        super(adapter, options.name || '');\n        this.options = options;\n        this.stateDB = db;\n        this.parent = parent;\n        switch (this.options.type) {\n            case 'const':\n                this.setTypeFromValue(this.options.constVal);\n                break;\n            case 'state':\n            case 'triggered':\n                this.type = this.options.forceType ? this.options.forceType : undefined;\n                // all work is done in isValidAndInit\n                break;\n        }\n    }\n    public get writeable(): boolean {\n        return this._writeable;\n    }\n    /**\n     * Init and check dp is valid\n     * @returns if false value is not valid\n     */\n    async isValidAndInit(): Promise<boolean> {\n        switch (this.options.type) {\n            case 'const':\n                return !(this.options.constVal === undefined || this.options.constVal === null);\n            case 'state':\n            case 'triggered':\n                if (!this.options.dp) return false;\n                const obj = await this.adapter.getForeignObjectAsync(this.options.dp);\n                if (!obj || obj.type != 'state' || !obj.common) {\n                    this.log.warn(`801: ${this.options.dp} has a invalid state object!`);\n                    return false;\n                    //throw new Error(`801: ${this.options.dp} has no state object! Bye Bye`);\n                }\n                this.type = this.type || obj.common.type;\n                this.trueType = obj.common.type;\n                this.options.role = obj.common.role;\n                this._writeable = !!obj.common.write;\n                if (this.options.type == 'triggered')\n                    this.stateDB.setTrigger(this.options.dp, this.parent, this.options.response);\n                const value = await this.stateDB.getState(this.options.dp, this.options.response);\n                return !!value;\n        }\n        return false;\n    }\n    private async getRawState(): Promise<NSPanel.State | null | undefined> {\n        switch (this.options.type) {\n            case 'const':\n                return { val: this.options.constVal, ack: true, ts: Date.now(), lc: Date.now(), from: '' };\n            case 'state':\n            case 'triggered':\n                if (!this.options.dp) {\n                    throw new Error(`Error 1002 type is ${this.options.type} but dp is undefined`);\n                }\n                return await this.stateDB.getState(this.options.dp, this.options.response);\n            case 'internal': {\n            }\n        }\n        return null;\n    }\n    async getState(): Promise<NSPanel.State | null | undefined> {\n        let state = await this.getRawState();\n        if (state) {\n            state = { ...state };\n            if (this.options.type !== 'const' && this.options.type !== 'internal' && this.options.read) {\n                try {\n                    if (typeof this.options.read === 'string')\n                        state.val = new Function('val', 'Color', `${this.options.read}`)(state.val, Color);\n                    else state.val = this.options.read(state.val);\n                    this.log.debug(JSON.stringify(state.val));\n                } catch (e) {\n                    this.log.error(\n                        `Read for dp: ${this.options.dp} is invalid! read: ${this.options.read} Error: ${e}`,\n                    );\n                }\n            }\n        }\n        return state;\n    }\n\n    async getObject(): Promise<object | null> {\n        const state = await this.getState();\n        if (state && state.val) {\n            if (typeof state.val === 'string') {\n                try {\n                    const value = JSON.parse(state.val);\n                    return value;\n                } catch (e) {\n                    const value = state.val;\n                    if (typeof value === 'string') {\n                        if (value.startsWith('#') && value.length === 7) {\n                            const v = Color.rgbHexToObject(value);\n                            if (Color.isRGB(v)) return v;\n                        }\n                    }\n                }\n            } else if (typeof state.val === 'object') {\n                return state.val;\n            }\n        }\n        return null;\n    }\n\n    async getRGBValue(): Promise<RGB | null> {\n        const value = await this.getObject();\n        if (value) {\n            if (Color.isRGB(value)) return value;\n        }\n        return null;\n    }\n    async getIconScale(): Promise<NSPanel.IconScaleElement | null> {\n        const value = await this.getObject();\n        if (value) {\n            if (NSPanel.isIconScaleElement(value)) return value;\n        }\n        return null;\n    }\n    async getRGBDec(): Promise<string | null> {\n        const value = await this.getRGBValue();\n        if (value) {\n            return String(Color.rgb_dec565(value));\n        }\n        return null;\n    }\n    async getString(): Promise<string | null> {\n        const state = await this.getState();\n        switch (this.options.type) {\n            case 'const':\n                return state && state.val !== null ? String(state.val) : null;\n            case 'state':\n            case 'triggered':\n                if (this.options.substring) {\n                    const args = this.options.substring;\n                    return state && state.val !== null ? String(state.val).substring(args[0], args[1]) : null;\n                }\n                return state && state.val !== null ? String(state.val) : null;\n        }\n        return null;\n    }\n\n    async getNumber(): Promise<number | null> {\n        const result = await this.getState();\n        if (result && !isNaN(parseInt(String(result.val)))) {\n            let val = parseFloat(String(result.val));\n            if (this.options.scale !== undefined) {\n                val = Math.trunc(Color.scale(val, this.options.scale.min, this.options.scale.max, 0, 100));\n            }\n            return val;\n        }\n        return null;\n    }\n    async getBoolean(): Promise<boolean | null> {\n        const result = await this.getState();\n        if (result && result.val !== null) {\n            if (typeof result.val === 'string') {\n                switch (result.val.toLowerCase()) {\n                    case 'ok':\n                    case 'on':\n                    case 'yes':\n                    case 'true':\n                    case 'online':\n                        return true;\n                }\n            }\n            return !!result.val;\n        }\n        return null;\n    }\n\n    private setTypeFromValue(val: NSPanel.StateValue | undefined): void {\n        switch (typeof val) {\n            case 'string':\n                this.type = 'string';\n                break;\n            case 'number':\n            case 'bigint':\n                this.type = 'number';\n                break;\n            case 'boolean':\n                this.type = 'boolean';\n                break;\n            case 'undefined':\n                this.type = 'undefined';\n            case 'symbol':\n            case 'object':\n            case 'function':\n                this.type = 'object';\n        }\n    }\n    async setStateTrue(): Promise<void> {\n        await this.setStateAsync(true);\n    }\n    async setStateFalse(): Promise<void> {\n        await this.setStateAsync(false);\n    }\n    /**\n     * Flip this 'ON'/'OFF', 0/1 or true/false. Depend on this.type\n     */\n    async setStateFlip(): Promise<void> {\n        switch (this.type) {\n            case 'boolean':\n                await this.setStateAsync(!(await this.getBoolean()));\n                break;\n            case 'number':\n                await this.setStateAsync((await this.getBoolean()) ? 0 : 1);\n                break;\n            case 'string':\n                await this.setStateAsync((await this.getBoolean()) ? 'OFF' : 'ON');\n                break;\n        }\n    }\n    /**\n     * Set a internal, const or external State\n     * @param val number | boolean | string | null\n     * @returns\n     */\n    async setStateAsync(val: ioBroker.StateValue): Promise<void> {\n        if (val === undefined) return;\n        if (this.options.type === 'const') {\n            this.options.constVal = val;\n        } else {\n            if (this.options.write) new Function('val', 'Color', `${this.options.write}`)(val, Color);\n            await this.stateDB.setStateAsync(this, val, this._writeable);\n        }\n    }\n}\n\nexport function isDataItem(F: object | Dataitem): F is Dataitem {\n    if (F instanceof Dataitem) return true;\n    return false;\n}\n"],
  "mappings": "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",
  "names": []
}
