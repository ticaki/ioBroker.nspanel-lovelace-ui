{
  "version": 3,
  "sources": ["../../../src/lib/controller/states-controller.ts"],
  "sourcesContent": ["// BaseClass extends\n\nimport { Dataitem } from '../classes/data-item';\nimport { BaseClass } from '../classes/library';\nimport type { DataItemsOptions, nsPanelState, nsPanelStateVal } from '../types/types';\nimport { getRegExp } from '../const/tools';\nimport type { NspanelLovelaceUi } from '../types/NspanelLovelaceUi';\nimport type { StateRole } from '../types/pages';\nimport type { BaseClassTriggerd } from '../classes/baseClassPage';\n\ntype getInternalFunctionType = (\n    id: string,\n    state: ioBroker.State | nsPanelState | undefined,\n) => Promise<nsPanelStateVal>;\n/**\n * Verwendet um Lesezugriffe auf die States umzusetzten, die im NSPanel ververwendet werden.\n * Adapter eigenen States sind verboten\n * Speichert Zugriff zwischen das kann mit timespan vereinflusst werden.\n */\nexport class StatesControler extends BaseClass {\n    private triggerDB: {\n        [key: string]: {\n            state: nsPanelState;\n            to: BaseClassTriggerd[];\n            ts: number;\n            subscribed: boolean[];\n            common: ioBroker.StateCommon;\n            internal?: boolean;\n            f?: getInternalFunctionType;\n            triggerAllowed: boolean[];\n            change: ('ne' | 'ts')[];\n        };\n    } = {};\n    private deletePageInterval: ioBroker.Interval | undefined;\n\n    private stateDB: { [key: string]: { state: ioBroker.State; ts: number; common: ioBroker.StateCommon } } = {};\n    objectDatabase: Record<string, ioBroker.Object | null> = {};\n    intervalObjectDatabase: ioBroker.Interval | undefined;\n\n    timespan: number;\n\n    constructor(adapter: NspanelLovelaceUi, name: string = '', timespan: number = 15000) {\n        super(adapter, name || 'StatesDB');\n        this.timespan = timespan;\n        this.deletePageInterval = this.adapter.setInterval(this.deletePageLoop, 60000);\n        this.intervalObjectDatabase = this.adapter.setInterval(() => {\n            if (this.unload) {\n                return;\n            }\n            this.objectDatabase = {};\n        }, 180000);\n    }\n    deletePageLoop = (): void => {\n        const removeId = [];\n        for (const id in this.triggerDB) {\n            const entry = this.triggerDB[id];\n            const removeIndex = [];\n            for (let i = 0; i < entry.to.length; i++) {\n                const item = entry.to[i];\n                if (item.unload) {\n                    //this.log.debug('Unload element:  ' + entry.to[i].name);\n                    removeIndex.push(Number(i));\n                } else if (item.parent?.basePanel?.unload) {\n                    //this.log.debug('Unload element:  ' + entry.to[i].name);\n                    removeIndex.push(Number(i));\n                }\n            }\n            for (const i of removeIndex) {\n                for (const key in entry) {\n                    const k = key as keyof typeof entry;\n                    const item = entry[k];\n                    if (Array.isArray(item)) {\n                        item.splice(i, 1);\n                    }\n                }\n            }\n            if (entry.to.length === 0 && !entry.internal) {\n                removeId.push(id);\n            }\n        }\n\n        for (const id of removeId) {\n            delete this.triggerDB[id];\n        }\n    };\n\n    async delete(): Promise<void> {\n        await super.delete();\n        if (StatesControler.tempObjectDBTimeout) {\n            this.adapter.clearTimeout(StatesControler.tempObjectDBTimeout);\n        }\n        if (this.intervalObjectDatabase) {\n            this.adapter.clearInterval(this.intervalObjectDatabase);\n        }\n        if (this.deletePageInterval) {\n            this.adapter.clearInterval(this.deletePageInterval);\n        }\n    }\n    /**\n     * Registriert einen Trigger auf einen *fremden* State (nicht im eigenen Namespace)\n     * und initialisiert die Trigger-Datenbank inkl. Abo & aktuellem Wert.\n     *\n     * Hinweise:\n     * - Eigene States (im Adapter-Namespace) sind hier verboten.\n     * - Bei bereits existierendem Eintrag wird der Empf\u00E4nger nur erg\u00E4nzt.\n     *\n     * @param id        Fremd-State-ID\n     * @param from      Ausl\u00F6sende/abonniert-werdende Klasse\n     * @param internal  true = interner Trigger (kein Fremd-Abo erwartet)\n     * @param trigger   ob dieser Empf\u00E4nger durch \u00C4nderungen ausgel\u00F6st werden darf\n     * @param change    optional: 'ts' \u2192 l\u00F6se auch ohne Wert-/Ack-\u00C4nderung (Zeitstempel)\n     */\n    async setTrigger(\n        id: string,\n        from: BaseClassTriggerd,\n        internal: boolean = false,\n        trigger: boolean = true,\n        change?: 'ts',\n    ): Promise<void> {\n        // 1) Eigener Namespace? \u2192 verboten\n        if (id.startsWith(this.adapter.namespace)) {\n            this.log.warn(`Id: ${id} refers to the adapter's own namespace, this is not allowed!`);\n            return;\n        }\n\n        const existing = this.triggerDB[id];\n\n        // 2) Bereits vorhanden \u2192 Empf\u00E4nger anh\u00E4ngen (falls nicht schon drin)\n        if (existing) {\n            const idx = existing.to.findIndex(a => a === from);\n            if (idx === -1) {\n                existing.to.push(from);\n                existing.subscribed.push(false);\n                existing.triggerAllowed.push(trigger);\n                existing.change.push(change ?? 'ne');\n                if (this.adapter.config.debugLogStates) {\n                    this.log.debug(`Add a trigger for ${from.name} to ${id}`);\n                }\n            }\n            return;\n        }\n\n        // 3) Neu anlegen: interner Trigger zu fr\u00FCh?\n        if (internal) {\n            this.log.error('setInternal Trigger too early');\n            return;\n        }\n\n        // 4) Platz reservieren (default-Werte), bevor wir I/O machen\n        this.triggerDB[id] = {\n            state: { val: null, ack: false, ts: Date.now(), from: '', lc: Date.now() },\n            to: [from],\n            ts: Date.now(),\n            subscribed: [false],\n            common: { name: id, type: 'number', role: 'state', write: false, read: true },\n            triggerAllowed: [trigger],\n            change: [change ?? 'ne'],\n            internal: false,\n        };\n\n        try {\n            // 5) Fremd-State & -Objekt holen\n            const state = await this.adapter.getForeignStateAsync(id);\n            if (!state) {\n                delete this.triggerDB[id];\n                return;\n            }\n\n            const obj = await this.getObjectAsync(id);\n            if (!obj || obj.type !== 'state' || !obj.common) {\n                delete this.triggerDB[id];\n                throw new Error(`Got invalid object for ${id}`);\n            }\n\n            if (this.unload) {\n                return;\n            }\n\n            // 6) DB bef\u00FCllen, abonnieren, evtl. alten stateDB-Eintrag entfernen\n            this.triggerDB[id].state = state;\n            this.triggerDB[id].common = obj.common;\n\n            await this.adapter.subscribeForeignStatesAsync(id);\n\n            if (this.stateDB[id] !== undefined) {\n                delete this.stateDB[id];\n            }\n\n            if (this.adapter.config.debugLogStates) {\n                this.log.debug(`Set a new trigger for ${from.basePanel.name}.${from.name} to ${id}`);\n            }\n        } catch (err) {\n            // Rollback bei Fehlern\n            delete this.triggerDB[id];\n            throw err;\n        }\n    }\n\n    /**\n     * Activate the triggers of a pageItem for self or parent. First subscribes to the state.\n     *\n     * @param to Page\n     */\n    async activateTrigger(to: BaseClassTriggerd | undefined): Promise<void> {\n        if (!to) {\n            return;\n        }\n        for (const id in this.triggerDB) {\n            const entry = this.triggerDB[id];\n            const index = entry.to.findIndex(a => a === to || (a.parent && a.parent === to));\n            if (index === -1) {\n                continue;\n            }\n            if (entry.subscribed[index]) {\n                continue;\n            }\n            if (!entry.triggerAllowed[index]) {\n                continue;\n            }\n            if (!entry.subscribed.some(a => a)) {\n                entry.subscribed[index] = true;\n                await this.adapter.subscribeForeignStatesAsync(id);\n                const state = await this.adapter.getForeignStateAsync(id);\n                if (state) {\n                    entry.state = state;\n                }\n            }\n            entry.subscribed[index] = true;\n        }\n    }\n\n    /**\n     * Deactivate the triggers of a pageItem for self or parent page. Last unsubscribes to the state.\n     *\n     * @param to Page\n     */\n    async deactivateTrigger(to: BaseClassTriggerd): Promise<void> {\n        for (const id in this.triggerDB) {\n            if (to.neverDeactivateTrigger) {\n                continue;\n            }\n            const entry = this.triggerDB[id];\n            if (entry.internal) {\n                continue;\n            }\n            const index = entry.to.indexOf(to);\n            if (index === -1) {\n                continue;\n            }\n            const indexParent = entry.to.findIndex(a => a.parent && a.parent === to);\n            if (indexParent !== -1 && entry.subscribed[indexParent]) {\n                // parent has another page that is still active\n                continue;\n            }\n            if (!entry.subscribed[index]) {\n                continue;\n            }\n            entry.subscribed[index] = false;\n            if (this.adapter.config.debugLogStates) {\n                this.log.debug(`Deactivate trigger from ${to.name} to ${id}`);\n            }\n            if (!entry.subscribed.some(a => a)) {\n                await this.adapter.unsubscribeForeignStatesAsync(id);\n            }\n        }\n    }\n\n    async getStateVal(id: string): Promise<nsPanelState['val'] | null> {\n        try {\n            const state = await this.getState(id);\n            if (state) {\n                return state.val ?? null;\n            }\n        } catch (e: any) {\n            this.log.error(`Error 1004: ${typeof e === 'string' ? e.replaceAll('Error: ', '') : e}`);\n        }\n        return null;\n    }\n    /**\n     * Read a state from DB or js-controller\n     *\n     * @param id state id with namespace\n     * @param internal if the state is internal\n     * @returns nsPanelState or null\n     */\n    async getState(id: string, internal: boolean = false): Promise<nsPanelState | null> {\n        let timespan = this.timespan;\n        timespan = 10;\n        if (\n            this.triggerDB[id] !== undefined &&\n            (this.triggerDB[id].internal || this.triggerDB[id].subscribed.some(a => a))\n        ) {\n            let state: nsPanelState | null = null;\n            const f = this.triggerDB[id].f;\n            if (f) {\n                state = {\n                    ...this.triggerDB[id].state,\n                    val: await f(id, undefined),\n                };\n            } else {\n                state = this.triggerDB[id].state;\n            }\n            return state;\n        } else if (this.stateDB[id] && timespan) {\n            if (Date.now() - timespan - this.stateDB[id].ts < 0) {\n                return this.stateDB[id].state;\n            }\n        }\n        if (id.includes('/')) {\n            internal = true;\n        }\n        if (!internal) {\n            const state = await this.adapter.getForeignStateAsync(id);\n            if (state) {\n                if (!this.stateDB[id]) {\n                    const obj = await this.getObjectAsync(id);\n                    if (!obj || !obj.common || obj.type !== 'state') {\n                        throw new Error(`Got invalid object for ${id}`);\n                    }\n                    this.stateDB[id] = { state: state, ts: Date.now(), common: obj.common };\n                } else {\n                    this.stateDB[id].state = state;\n                    this.stateDB[id].ts = Date.now();\n                }\n                return state;\n            }\n        }\n        throw new Error(`State id invalid ${id} no data!`);\n    }\n\n    getType(id: string | undefined): ioBroker.CommonType | undefined {\n        if (!id) {\n            return undefined;\n        }\n        if (this.triggerDB[id] !== undefined && this.triggerDB[id].common) {\n            return this.triggerDB[id].common.type;\n        }\n        if (this.stateDB[id] !== undefined) {\n            return this.stateDB[id].common.type;\n        }\n        return undefined;\n    }\n\n    async getCommonStates(id: string | undefined, force: boolean = false): Promise<Record<string, string> | null> {\n        if (!id) {\n            return null;\n        }\n        let j: string | string[] | Record<string, string> | undefined = undefined;\n        if (force) {\n            const obj = await this.adapter.getForeignObjectAsync(id);\n            if (obj && obj.common && obj.common.states) {\n                j = obj.common.states;\n            }\n        } else if (this.triggerDB[id] !== undefined && this.triggerDB[id].common) {\n            j = this.triggerDB[id].common.states;\n        } else if (this.stateDB[id] !== undefined && this.stateDB[id].common) {\n            j = this.stateDB[id].common.states;\n        }\n\n        if (!j || typeof j === 'string') {\n            return null;\n        }\n        if (Array.isArray(j)) {\n            const a: Record<string, string> = {};\n            j.forEach((e, i) => (a[String(i)] = e));\n            j = a;\n        }\n        return j;\n    }\n\n    isStateValue(v: unknown): v is ioBroker.StateValue {\n        return (\n            v === null || v === undefined || typeof v === 'string' || typeof v === 'number' || typeof v === 'boolean'\n        );\n    }\n\n    /**\n     * Handle incoming state changes from ioBroker.\n     *\n     * Responsibilities:\n     *  - Update the internal triggerDB entry for the given datapoint.\n     *  - Decide whether the state change should trigger dependent classes.\n     *  - Forward primitive values to library cache and panels if required.\n     *  - Forward system.host changes to systemNotification.\n     *\n     * Notes:\n     *  - Active subscriptions (visible & neverDeactivateTrigger) are checked later, not here.\n     *  - Object values are ignored (only primitive values are cached/forwarded).\n     *\n     * @param dp     Datapoint ID (internal/external state id)\n     * @param state  New ioBroker state object or null/undefined\n     */\n    async onStateChange(dp: string, state: nsPanelState | ioBroker.State | null | undefined): Promise<void> {\n        if (!dp || !state) {\n            return;\n        }\n\n        const entry = this.triggerDB[dp];\n\n        // --- Trigger/ACK-Pfad ------------------------------------------------------\n        if (entry?.state) {\n            if (this.adapter.config.debugLogStates) {\n                this.log.debug(`Trigger from ${dp} with state ${JSON.stringify(state)}`);\n            }\n\n            // Update triggerDB entry\n            entry.ts = Date.now();\n            const oldState = { val: entry.state.val, ack: entry.state.ack };\n            entry.state = state;\n\n            const isSystemOrAlias = dp.startsWith('0_userdata.0') || dp.startsWith('alias.0');\n            const mayTrigger = state.ack || entry.internal || isSystemOrAlias;\n\n            if (mayTrigger) {\n                const to = entry.to; // Ziel-Liste von Trigger-Empf\u00E4ngern\n                const changes = entry.change || []; // \u00C4nderungsregeln je Empf\u00E4nger\n                const subscribed = entry.subscribed || [];\n                const allowed = entry.triggerAllowed || [];\n\n                for (let i = 0; i < to.length; i++) {\n                    const target = to[i];\n\n                    // Nur reagieren, wenn sich etwas ge\u00E4ndert hat (val, ack oder \"ts\")\n                    const hasChange = oldState.val !== state.val || oldState.ack !== state.ack || changes[i] === 'ts';\n\n                    if (!hasChange) {\n                        this.log.debug(`Ignore trigger from state ${dp} no change!`);\n                        continue;\n                    }\n\n                    // Pr\u00FCfen ob trigger erlaubt und abonniert\n                    const notSubscribedOrNotAllowed = (!target.neverDeactivateTrigger && !subscribed[i]) || !allowed[i];\n\n                    if (notSubscribedOrNotAllowed) {\n                        if (i === to.length - 1) {\n                            this.log.debug(`Ignore trigger from state ${dp} not subscribed or not allowed!`);\n                            this.log.debug(\n                                `c: ${target.name} !c.neverDeactivateTrigger: ${!target.neverDeactivateTrigger} && ` +\n                                    `!this.triggerDB[dp].subscribed[i]: ${!subscribed[i]} || ` +\n                                    `!this.triggerDB[dp].triggerAllowed[i]: ${!allowed[i]}`,\n                            );\n                        }\n                        continue;\n                    }\n\n                    // Weiterreichen an Parent (falls vorhanden) oder direkt\n                    if (target.parent && target.triggerParent && !target.parent.unload && !target.parent.sleep) {\n                        if (target.parent.onStateTriggerSuperDoNotOverride) {\n                            await target.parent.onStateTriggerSuperDoNotOverride(dp, target);\n                        }\n                    } else if (!target.unload) {\n                        if (target.onStateTriggerSuperDoNotOverride) {\n                            await target.onStateTriggerSuperDoNotOverride(dp, target);\n                        }\n                    }\n                }\n            } else {\n                this.log.debug(`Ignore trigger from state ${dp} ack is false!`);\n            }\n        }\n\n        // --- Primitive-Update-Pfad (nur Nicht-Objekte) -----------------------------\n        const v = state.val;\n        const isPrimitive = v === null || v === undefined || typeof v !== 'object';\n        if (!isPrimitive) {\n            return;\n        }\n\n        // Eigene States (im Adapter-Namespace) updaten\n        if (dp.startsWith(this.adapter.namespace)) {\n            const id = dp.replace(`${this.adapter.namespace}.`, '');\n            const libState = this.library.readdb(id);\n\n            if (libState) {\n                this.library.setdb(id, {\n                    ...libState,\n                    val: this.isStateValue(state.val) ? state.val : null,\n                    ts: state.ts,\n                    ack: state.ack,\n                });\n            }\n\n            // Weiterreichen an Panels nur wenn state beschreibbar ist\n            if (libState?.obj?.common?.write && this.adapter.controller) {\n                for (const panel of this.adapter.controller.panels) {\n                    await panel.onStateChange(id, state);\n                }\n            }\n        }\n\n        // System-Host-Notifications weiterreichen\n        if (dp.startsWith('system.host') && this.adapter.controller) {\n            await this.adapter.controller.systemNotification.onStateChange(dp, state as ioBroker.State);\n        }\n    }\n    async setState(item: Dataitem, val: ioBroker.StateValue, writeable: boolean): Promise<void> {\n        if (item.options.type === 'state' || item.options.type === 'triggered') {\n            if (item.options.dp) {\n                const ack = item.options.dp.startsWith(this.adapter.namespace);\n                this.log.debug(`setState(${item.options.dp}, ${val}, ${ack})`);\n                if (item.trueType() === 'number' && typeof val === 'string') {\n                    val = parseFloat(val);\n                } else if (item.trueType() === 'number' && typeof val === 'boolean') {\n                    val = val ? 1 : 0;\n                } else if (item.trueType() === 'boolean') {\n                    val = !!val;\n                }\n                if (item.trueType() === 'string') {\n                    val = String(val);\n                }\n                if (writeable) {\n                    await this.adapter.setForeignStateAsync(item.options.dp, val, ack);\n                } else {\n                    this.log.error(`Forbidden write attempts on a read-only state! id: ${item.options.dp}`);\n                }\n            }\n        } else if (item.options.type === 'internal' || item.options.type === 'internalState') {\n            if (this.triggerDB[item.options.dp]) {\n                await this.setInternalState(item.options.dp, val, false);\n            }\n        }\n    }\n\n    /**\n     * Set a internal state and trigger\n     *\n     * @param id something like 'cmd/blabla'\n     * @param val Value\n     * @param ack false use value/ true use func\n     * @param common optional for first call\n     * @param func optional for first call\n     * @returns true if set\n     */\n    public async setInternalState(\n        id: string,\n        val: nsPanelStateVal,\n        ack: boolean = false,\n        common: ioBroker.StateCommon | undefined = undefined,\n        func: getInternalFunctionType | undefined = undefined,\n    ): Promise<boolean> {\n        if (this.triggerDB[id] !== undefined) {\n            const f = this.triggerDB[id].f;\n\n            const newState = {\n                ...this.triggerDB[id].state,\n                // if ack and function take value of function otherwise val\n                val: ack && f ? ((await f(id, undefined)) ?? val) : val,\n                ack: ack,\n                ts: Date.now(),\n            };\n\n            // use this to trigger pages\n            await this.onStateChange(id, newState);\n\n            // here we trigger the state command\n            f && (await f(id, this.triggerDB[id].state));\n\n            return true;\n\n            // create the db entry\n        } else if (common) {\n            if (this.adapter.config.debugLogStates) {\n                this.log.debug(`Add internal state ${id} with ${JSON.stringify(common)}`);\n            }\n            this.triggerDB[id] = {\n                state: { ts: Date.now(), val: null, ack: ack, from: '', lc: Date.now() },\n                to: [],\n                ts: Date.now(),\n                subscribed: [],\n                common: common,\n                internal: true,\n                f: func,\n                triggerAllowed: [],\n                change: [],\n            };\n        }\n        return false;\n    }\n\n    /**\n     * Create dataitems from a json (deep)\n     *\n     * @param data Json with configuration to create dataitems\n     * @param parent Page etc.\n     * @param target optional target\n     * @param path optional path\n     * @param options so far only constant to use in getState().read\n     * @returns then json with values dataitem or undefined\n     */\n    async createDataItems(\n        data: any,\n        parent: any,\n        target: any = {},\n        path: string = 'data',\n        options?: Record<string, string>,\n    ): Promise<any> {\n        for (const i in data) {\n            const d = data[i];\n            if (d === undefined) {\n                continue;\n            }\n            if (typeof d === 'object' && !('type' in d)) {\n                target[i] = await this.createDataItems(\n                    d,\n                    parent,\n                    (target[i] ?? Array.isArray(d)) ? [] : {},\n                    `${path}.${i}`,\n                    options,\n                );\n            } else if (typeof d === 'object' && 'type' in d) {\n                target[i] =\n                    data[i] !== undefined\n                        ? new Dataitem(\n                              this.adapter,\n                              { ...d, name: `${this.name}.${parent.name}.${i}.${path}`, constants: options },\n                              parent,\n                              this,\n                          )\n                        : undefined;\n                if (target[i] !== undefined && !(await target[i].isValidAndInit())) {\n                    target[i] = undefined;\n                }\n            }\n        }\n        if (Object.keys(target).length === 0) {\n            return undefined;\n        }\n        return target;\n    }\n\n    /**\n     * Tempor\u00E4es Datenobject zum speichern aller Enums und Objecte\n     */\n    static TempObjectDB: {\n        data: Record<string, ioBroker.Object> | undefined;\n        keys: string[];\n        enums: Record<string, ioBroker.EnumObject> | undefined;\n    } = {\n        data: undefined,\n        keys: [],\n        enums: undefined,\n    };\n    static tempObjectDBTimeout: ioBroker.Timeout | undefined;\n    static getTempObjectDB(adapter: NspanelLovelaceUi): typeof StatesControler.TempObjectDB {\n        if (StatesControler.tempObjectDBTimeout) {\n            adapter.clearTimeout(StatesControler.tempObjectDBTimeout);\n        }\n        StatesControler.tempObjectDBTimeout = adapter.setTimeout(() => {\n            if (adapter.unload) {\n                return;\n            }\n            StatesControler.tempObjectDBTimeout = undefined;\n            StatesControler.TempObjectDB = { data: undefined, keys: [], enums: undefined };\n        }, 10000);\n\n        return StatesControler.TempObjectDB;\n    }\n    /**\n     * Filterfunktion umso genauer die Filter um so weniger Ressourcen werden verbraucht.\n     *\n     * @param dpInit string RegExp oder '' f\u00FCr aus; string wird mit include verwendet.\n     * @param enums string, string[], RegExp als String \u00FCbergeben oder ein String der mit include verwenden wird.\n     * @returns 2 arrays keys: gefilterte keys und data: alle Objekte...\n     */\n    async getFilteredObjects(dpInit: string | RegExp, enums?: string | string[]): Promise<typeof result> {\n        const tempObjectDB = StatesControler.getTempObjectDB(this.adapter);\n        if (!tempObjectDB.data) {\n            tempObjectDB.data = await this.adapter.getForeignObjectsAsync(`*`);\n            if (!tempObjectDB.data) {\n                throw new Error('getObjects fail. Critical Error!');\n            }\n            tempObjectDB.keys = Object.keys(tempObjectDB.data);\n            const temp = await this.adapter.getEnumsAsync(['rooms', 'functions']);\n            tempObjectDB.enums = { ...temp['enum.rooms'], ...temp['enum.functions'] };\n        }\n        const result: { data: Record<string, ioBroker.Object> | undefined; keys: string[] } = {\n            data: tempObjectDB.data,\n            keys: tempObjectDB.keys,\n        };\n        if (dpInit) {\n            if (typeof dpInit !== 'string') {\n                result.keys = tempObjectDB.keys.filter(a => a.match(dpInit) !== null);\n            } else {\n                result.keys = tempObjectDB.keys.filter(a => a.includes(dpInit));\n            }\n        }\n        if (enums && tempObjectDB.enums) {\n            if (typeof enums === 'string') {\n                enums = [enums];\n            }\n            let r: string[] | undefined;\n            for (const e of enums) {\n                const regexp = getRegExp(e);\n                let t: string[] = [];\n                for (const a in tempObjectDB.enums) {\n                    if ((!regexp && a.includes(e)) || (regexp && a.match(regexp) !== null)) {\n                        if (\n                            tempObjectDB.enums[a] &&\n                            tempObjectDB.enums[a].common &&\n                            tempObjectDB.enums[a].common.members\n                        ) {\n                            t = t.concat(tempObjectDB.enums[a].common.members);\n                        }\n                    }\n                }\n                if (!r) {\n                    r = t;\n                } else {\n                    r = r.filter(a => t.indexOf(a) !== -1);\n                }\n            }\n            result.keys = result.keys.filter(a => r && r.some(b => a.startsWith(b)));\n        }\n        return result;\n    }\n\n    /**\n     * Retrieves the ID of a state automatically based on the provided parameters.\n     *\n     * @param options\n     * @param dpInit - The initial data point, which can be a string or a regular expression.\n     * @param role - The role of the state, which can be a single StateRole or an array of StateRoles.\n     * @param enums - The enums associated with the state, which can be a single string or an array of strings.\n     * @param regexp - The regular expression to match the state ID.\n     * @param triggered - Whether the state is triggered.\n     * @param writeable - Whether the state is writeable.\n     * @param commonType - The common type of the state.\n     * @param options.dpInit\n     * @param options.role\n     * @param options.enums\n     * @param options.regexp\n     * @param options.triggered\n     * @param options.writeable\n     * @param options.commonType\n     * @returns A promise that resolves to the ID of the state if found, otherwise undefined.\n     */\n    async getIdbyAuto(options: {\n        dpInit: string | RegExp;\n        role?: StateRole | StateRole[];\n        enums?: string | string[];\n        regexp?: RegExp;\n        triggered?: boolean;\n        writeable?: boolean;\n        commonType?: ioBroker.CommonType | ioBroker.CommonType[] | '';\n    }): Promise<DataItemsOptions | undefined> {\n        const { dpInit, role = '', enums = '', regexp, triggered, writeable, commonType = '' } = options;\n\n        const status = { ok: true };\n        let item: DataItemsOptions | undefined;\n        if (triggered) {\n            item = {\n                type: 'triggered',\n                role,\n                dp: '',\n                mode: 'auto',\n                regexp,\n                writeable,\n                commonType,\n            };\n        } else {\n            item = {\n                type: 'state',\n                role,\n                dp: '',\n                mode: 'auto',\n                regexp,\n                writeable,\n                commonType,\n            };\n        }\n        const data = await this.getDataItemsFromAuto(dpInit, { item: item }, '', enums, status, true);\n        if (status.ok && data && data.item && data.item.dp) {\n            return item;\n        }\n        return undefined;\n    }\n\n    async getDataItemsFromAuto(\n        dpInit: string | RegExp,\n        data: any,\n        appendix?: string,\n        enums: string | string[] = '',\n        status?: { ok: boolean },\n        ignoreMultiple: boolean = false,\n    ): Promise<any> {\n        if (dpInit === '' && enums === undefined) {\n            return data;\n        }\n        const tempObjectDB = await this.getFilteredObjects(dpInit, enums);\n        if (tempObjectDB.data) {\n            for (const i in data) {\n                const t = data[i];\n                if (t === undefined) {\n                    continue;\n                }\n                if (typeof t === 'object' && !('type' in t)) {\n                    data[i] = await this.getDataItemsFromAuto(dpInit, t, appendix, enums, status);\n                } else if (typeof t === 'object' && 'type' in t) {\n                    const d = t as DataItemsOptions;\n                    let found = false;\n                    if ((d.type !== 'triggered' && d.type !== 'state') || !d.mode || d.mode !== 'auto') {\n                        continue;\n                    }\n                    if (tempObjectDB.keys.length === 0) {\n                        this.log.warn(`Dont finds states for ${dpInit}!`);\n                    }\n                    for (const role of Array.isArray(d.role) ? d.role : [d.role || '']) {\n                        //throw new Error(`${d.dp} has a unkowned role ${d.role}`);\n                        for (const commonType of Array.isArray(d.commonType) ? d.commonType : [d.commonType || '']) {\n                            for (const id of tempObjectDB.keys) {\n                                const obj: ioBroker.Object = tempObjectDB.data[id];\n\n                                if (\n                                    obj &&\n                                    obj.common &&\n                                    obj.type === 'state' &&\n                                    (d.dp === '' || id.includes(d.dp)) &&\n                                    (role === '' || obj.common.role === role) &&\n                                    (!commonType || obj.common.type === commonType) &&\n                                    (!d.writeable || obj.common.write === d.writeable) &&\n                                    (!d.regexp || id.match(d.regexp) !== null)\n                                ) {\n                                    if (found) {\n                                        if (!ignoreMultiple) {\n                                            this.log.warn(\n                                                `Found more as 1 state for role ${role} in ${dpInit} with .dp: ${\n                                                    d.dp ? d.dp.toString() : 'empty'\n                                                } and .regexp: ${d.regexp ? d.regexp.toString() : 'empty'}`,\n                                            );\n                                        }\n                                        break;\n                                    }\n                                    d.dp = id;\n                                    d.mode = 'done';\n                                    found = true;\n                                }\n                            }\n                            if (found) {\n                                break;\n                            }\n                        }\n                        if (found) {\n                            break;\n                        }\n                    }\n                    if (!found) {\n                        if (d.required) {\n                            status && (status.ok = false);\n                            this.log.warn(\n                                `No state found for role ${JSON.stringify(d.role)} in ${dpInit.toString()} with with .dp: ${\n                                    d.dp ? d.dp.toString() : 'empty'\n                                } and .regexp: ${d.regexp ? d.regexp.toString() : 'empty'}`,\n                            );\n                        }\n                        data[i] = undefined;\n                    }\n                }\n            }\n        }\n        return data;\n    }\n\n    async getObjectAsync(id: string): Promise<ioBroker.Object | null> {\n        if (this.objectDatabase[id] !== undefined) {\n            return this.objectDatabase[id];\n        } else if (this.triggerDB[id] != undefined && this.triggerDB[id].internal) {\n            return { _id: '', type: 'state', common: this.triggerDB[id].common, native: {} };\n        }\n        const obj = await this.adapter.getForeignObjectAsync(id);\n        this.objectDatabase[id] = obj ?? null;\n        return obj ?? null;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,uBAAyB;AACzB,qBAA0B;AAE1B,mBAA0B;AAcnB,MAAM,wBAAwB,yBAAU;AAAA,EACnC,YAYJ,CAAC;AAAA,EACG;AAAA,EAEA,UAAkG,CAAC;AAAA,EAC3G,iBAAyD,CAAC;AAAA,EAC1D;AAAA,EAEA;AAAA,EAEA,YAAY,SAA4B,OAAe,IAAI,WAAmB,MAAO;AACjF,UAAM,SAAS,QAAQ,UAAU;AACjC,SAAK,WAAW;AAChB,SAAK,qBAAqB,KAAK,QAAQ,YAAY,KAAK,gBAAgB,GAAK;AAC7E,SAAK,yBAAyB,KAAK,QAAQ,YAAY,MAAM;AACzD,UAAI,KAAK,QAAQ;AACb;AAAA,MACJ;AACA,WAAK,iBAAiB,CAAC;AAAA,IAC3B,GAAG,IAAM;AAAA,EACb;AAAA,EACA,iBAAiB,MAAY;AApDjC;AAqDQ,UAAM,WAAW,CAAC;AAClB,eAAW,MAAM,KAAK,WAAW;AAC7B,YAAM,QAAQ,KAAK,UAAU,EAAE;AAC/B,YAAM,cAAc,CAAC;AACrB,eAAS,IAAI,GAAG,IAAI,MAAM,GAAG,QAAQ,KAAK;AACtC,cAAM,OAAO,MAAM,GAAG,CAAC;AACvB,YAAI,KAAK,QAAQ;AAEb,sBAAY,KAAK,OAAO,CAAC,CAAC;AAAA,QAC9B,YAAW,gBAAK,WAAL,mBAAa,cAAb,mBAAwB,QAAQ;AAEvC,sBAAY,KAAK,OAAO,CAAC,CAAC;AAAA,QAC9B;AAAA,MACJ;AACA,iBAAW,KAAK,aAAa;AACzB,mBAAW,OAAO,OAAO;AACrB,gBAAM,IAAI;AACV,gBAAM,OAAO,MAAM,CAAC;AACpB,cAAI,MAAM,QAAQ,IAAI,GAAG;AACrB,iBAAK,OAAO,GAAG,CAAC;AAAA,UACpB;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,MAAM,GAAG,WAAW,KAAK,CAAC,MAAM,UAAU;AAC1C,iBAAS,KAAK,EAAE;AAAA,MACpB;AAAA,IACJ;AAEA,eAAW,MAAM,UAAU;AACvB,aAAO,KAAK,UAAU,EAAE;AAAA,IAC5B;AAAA,EACJ;AAAA,EAEA,MAAM,SAAwB;AAC1B,UAAM,MAAM,OAAO;AACnB,QAAI,gBAAgB,qBAAqB;AACrC,WAAK,QAAQ,aAAa,gBAAgB,mBAAmB;AAAA,IACjE;AACA,QAAI,KAAK,wBAAwB;AAC7B,WAAK,QAAQ,cAAc,KAAK,sBAAsB;AAAA,IAC1D;AACA,QAAI,KAAK,oBAAoB;AACzB,WAAK,QAAQ,cAAc,KAAK,kBAAkB;AAAA,IACtD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,MAAM,WACF,IACA,MACA,WAAoB,OACpB,UAAmB,MACnB,QACa;AAEb,QAAI,GAAG,WAAW,KAAK,QAAQ,SAAS,GAAG;AACvC,WAAK,IAAI,KAAK,OAAO,EAAE,8DAA8D;AACrF;AAAA,IACJ;AAEA,UAAM,WAAW,KAAK,UAAU,EAAE;AAGlC,QAAI,UAAU;AACV,YAAM,MAAM,SAAS,GAAG,UAAU,OAAK,MAAM,IAAI;AACjD,UAAI,QAAQ,IAAI;AACZ,iBAAS,GAAG,KAAK,IAAI;AACrB,iBAAS,WAAW,KAAK,KAAK;AAC9B,iBAAS,eAAe,KAAK,OAAO;AACpC,iBAAS,OAAO,KAAK,0BAAU,IAAI;AACnC,YAAI,KAAK,QAAQ,OAAO,gBAAgB;AACpC,eAAK,IAAI,MAAM,qBAAqB,KAAK,IAAI,OAAO,EAAE,EAAE;AAAA,QAC5D;AAAA,MACJ;AACA;AAAA,IACJ;AAGA,QAAI,UAAU;AACV,WAAK,IAAI,MAAM,+BAA+B;AAC9C;AAAA,IACJ;AAGA,SAAK,UAAU,EAAE,IAAI;AAAA,MACjB,OAAO,EAAE,KAAK,MAAM,KAAK,OAAO,IAAI,KAAK,IAAI,GAAG,MAAM,IAAI,IAAI,KAAK,IAAI,EAAE;AAAA,MACzE,IAAI,CAAC,IAAI;AAAA,MACT,IAAI,KAAK,IAAI;AAAA,MACb,YAAY,CAAC,KAAK;AAAA,MAClB,QAAQ,EAAE,MAAM,IAAI,MAAM,UAAU,MAAM,SAAS,OAAO,OAAO,MAAM,KAAK;AAAA,MAC5E,gBAAgB,CAAC,OAAO;AAAA,MACxB,QAAQ,CAAC,0BAAU,IAAI;AAAA,MACvB,UAAU;AAAA,IACd;AAEA,QAAI;AAEA,YAAM,QAAQ,MAAM,KAAK,QAAQ,qBAAqB,EAAE;AACxD,UAAI,CAAC,OAAO;AACR,eAAO,KAAK,UAAU,EAAE;AACxB;AAAA,MACJ;AAEA,YAAM,MAAM,MAAM,KAAK,eAAe,EAAE;AACxC,UAAI,CAAC,OAAO,IAAI,SAAS,WAAW,CAAC,IAAI,QAAQ;AAC7C,eAAO,KAAK,UAAU,EAAE;AACxB,cAAM,IAAI,MAAM,0BAA0B,EAAE,EAAE;AAAA,MAClD;AAEA,UAAI,KAAK,QAAQ;AACb;AAAA,MACJ;AAGA,WAAK,UAAU,EAAE,EAAE,QAAQ;AAC3B,WAAK,UAAU,EAAE,EAAE,SAAS,IAAI;AAEhC,YAAM,KAAK,QAAQ,4BAA4B,EAAE;AAEjD,UAAI,KAAK,QAAQ,EAAE,MAAM,QAAW;AAChC,eAAO,KAAK,QAAQ,EAAE;AAAA,MAC1B;AAEA,UAAI,KAAK,QAAQ,OAAO,gBAAgB;AACpC,aAAK,IAAI,MAAM,yBAAyB,KAAK,UAAU,IAAI,IAAI,KAAK,IAAI,OAAO,EAAE,EAAE;AAAA,MACvF;AAAA,IACJ,SAAS,KAAK;AAEV,aAAO,KAAK,UAAU,EAAE;AACxB,YAAM;AAAA,IACV;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,gBAAgB,IAAkD;AACpE,QAAI,CAAC,IAAI;AACL;AAAA,IACJ;AACA,eAAW,MAAM,KAAK,WAAW;AAC7B,YAAM,QAAQ,KAAK,UAAU,EAAE;AAC/B,YAAM,QAAQ,MAAM,GAAG,UAAU,OAAK,MAAM,MAAO,EAAE,UAAU,EAAE,WAAW,EAAG;AAC/E,UAAI,UAAU,IAAI;AACd;AAAA,MACJ;AACA,UAAI,MAAM,WAAW,KAAK,GAAG;AACzB;AAAA,MACJ;AACA,UAAI,CAAC,MAAM,eAAe,KAAK,GAAG;AAC9B;AAAA,MACJ;AACA,UAAI,CAAC,MAAM,WAAW,KAAK,OAAK,CAAC,GAAG;AAChC,cAAM,WAAW,KAAK,IAAI;AAC1B,cAAM,KAAK,QAAQ,4BAA4B,EAAE;AACjD,cAAM,QAAQ,MAAM,KAAK,QAAQ,qBAAqB,EAAE;AACxD,YAAI,OAAO;AACP,gBAAM,QAAQ;AAAA,QAClB;AAAA,MACJ;AACA,YAAM,WAAW,KAAK,IAAI;AAAA,IAC9B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,kBAAkB,IAAsC;AAC1D,eAAW,MAAM,KAAK,WAAW;AAC7B,UAAI,GAAG,wBAAwB;AAC3B;AAAA,MACJ;AACA,YAAM,QAAQ,KAAK,UAAU,EAAE;AAC/B,UAAI,MAAM,UAAU;AAChB;AAAA,MACJ;AACA,YAAM,QAAQ,MAAM,GAAG,QAAQ,EAAE;AACjC,UAAI,UAAU,IAAI;AACd;AAAA,MACJ;AACA,YAAM,cAAc,MAAM,GAAG,UAAU,OAAK,EAAE,UAAU,EAAE,WAAW,EAAE;AACvE,UAAI,gBAAgB,MAAM,MAAM,WAAW,WAAW,GAAG;AAErD;AAAA,MACJ;AACA,UAAI,CAAC,MAAM,WAAW,KAAK,GAAG;AAC1B;AAAA,MACJ;AACA,YAAM,WAAW,KAAK,IAAI;AAC1B,UAAI,KAAK,QAAQ,OAAO,gBAAgB;AACpC,aAAK,IAAI,MAAM,2BAA2B,GAAG,IAAI,OAAO,EAAE,EAAE;AAAA,MAChE;AACA,UAAI,CAAC,MAAM,WAAW,KAAK,OAAK,CAAC,GAAG;AAChC,cAAM,KAAK,QAAQ,8BAA8B,EAAE;AAAA,MACvD;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAM,YAAY,IAAiD;AA3QvE;AA4QQ,QAAI;AACA,YAAM,QAAQ,MAAM,KAAK,SAAS,EAAE;AACpC,UAAI,OAAO;AACP,gBAAO,WAAM,QAAN,YAAa;AAAA,MACxB;AAAA,IACJ,SAAS,GAAQ;AACb,WAAK,IAAI,MAAM,eAAe,OAAO,MAAM,WAAW,EAAE,WAAW,WAAW,EAAE,IAAI,CAAC,EAAE;AAAA,IAC3F;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,SAAS,IAAY,WAAoB,OAAqC;AAChF,QAAI,WAAW,KAAK;AACpB,eAAW;AACX,QACI,KAAK,UAAU,EAAE,MAAM,WACtB,KAAK,UAAU,EAAE,EAAE,YAAY,KAAK,UAAU,EAAE,EAAE,WAAW,KAAK,OAAK,CAAC,IAC3E;AACE,UAAI,QAA6B;AACjC,YAAM,IAAI,KAAK,UAAU,EAAE,EAAE;AAC7B,UAAI,GAAG;AACH,gBAAQ;AAAA,UACJ,GAAG,KAAK,UAAU,EAAE,EAAE;AAAA,UACtB,KAAK,MAAM,EAAE,IAAI,MAAS;AAAA,QAC9B;AAAA,MACJ,OAAO;AACH,gBAAQ,KAAK,UAAU,EAAE,EAAE;AAAA,MAC/B;AACA,aAAO;AAAA,IACX,WAAW,KAAK,QAAQ,EAAE,KAAK,UAAU;AACrC,UAAI,KAAK,IAAI,IAAI,WAAW,KAAK,QAAQ,EAAE,EAAE,KAAK,GAAG;AACjD,eAAO,KAAK,QAAQ,EAAE,EAAE;AAAA,MAC5B;AAAA,IACJ;AACA,QAAI,GAAG,SAAS,GAAG,GAAG;AAClB,iBAAW;AAAA,IACf;AACA,QAAI,CAAC,UAAU;AACX,YAAM,QAAQ,MAAM,KAAK,QAAQ,qBAAqB,EAAE;AACxD,UAAI,OAAO;AACP,YAAI,CAAC,KAAK,QAAQ,EAAE,GAAG;AACnB,gBAAM,MAAM,MAAM,KAAK,eAAe,EAAE;AACxC,cAAI,CAAC,OAAO,CAAC,IAAI,UAAU,IAAI,SAAS,SAAS;AAC7C,kBAAM,IAAI,MAAM,0BAA0B,EAAE,EAAE;AAAA,UAClD;AACA,eAAK,QAAQ,EAAE,IAAI,EAAE,OAAc,IAAI,KAAK,IAAI,GAAG,QAAQ,IAAI,OAAO;AAAA,QAC1E,OAAO;AACH,eAAK,QAAQ,EAAE,EAAE,QAAQ;AACzB,eAAK,QAAQ,EAAE,EAAE,KAAK,KAAK,IAAI;AAAA,QACnC;AACA,eAAO;AAAA,MACX;AAAA,IACJ;AACA,UAAM,IAAI,MAAM,oBAAoB,EAAE,WAAW;AAAA,EACrD;AAAA,EAEA,QAAQ,IAAyD;AAC7D,QAAI,CAAC,IAAI;AACL,aAAO;AAAA,IACX;AACA,QAAI,KAAK,UAAU,EAAE,MAAM,UAAa,KAAK,UAAU,EAAE,EAAE,QAAQ;AAC/D,aAAO,KAAK,UAAU,EAAE,EAAE,OAAO;AAAA,IACrC;AACA,QAAI,KAAK,QAAQ,EAAE,MAAM,QAAW;AAChC,aAAO,KAAK,QAAQ,EAAE,EAAE,OAAO;AAAA,IACnC;AACA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,gBAAgB,IAAwB,QAAiB,OAA+C;AAC1G,QAAI,CAAC,IAAI;AACL,aAAO;AAAA,IACX;AACA,QAAI,IAA4D;AAChE,QAAI,OAAO;AACP,YAAM,MAAM,MAAM,KAAK,QAAQ,sBAAsB,EAAE;AACvD,UAAI,OAAO,IAAI,UAAU,IAAI,OAAO,QAAQ;AACxC,YAAI,IAAI,OAAO;AAAA,MACnB;AAAA,IACJ,WAAW,KAAK,UAAU,EAAE,MAAM,UAAa,KAAK,UAAU,EAAE,EAAE,QAAQ;AACtE,UAAI,KAAK,UAAU,EAAE,EAAE,OAAO;AAAA,IAClC,WAAW,KAAK,QAAQ,EAAE,MAAM,UAAa,KAAK,QAAQ,EAAE,EAAE,QAAQ;AAClE,UAAI,KAAK,QAAQ,EAAE,EAAE,OAAO;AAAA,IAChC;AAEA,QAAI,CAAC,KAAK,OAAO,MAAM,UAAU;AAC7B,aAAO;AAAA,IACX;AACA,QAAI,MAAM,QAAQ,CAAC,GAAG;AAClB,YAAM,IAA4B,CAAC;AACnC,QAAE,QAAQ,CAAC,GAAG,MAAO,EAAE,OAAO,CAAC,CAAC,IAAI,CAAE;AACtC,UAAI;AAAA,IACR;AACA,WAAO;AAAA,EACX;AAAA,EAEA,aAAa,GAAsC;AAC/C,WACI,MAAM,QAAQ,MAAM,UAAa,OAAO,MAAM,YAAY,OAAO,MAAM,YAAY,OAAO,MAAM;AAAA,EAExG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,MAAM,cAAc,IAAY,OAAwE;AAxY5G;AAyYQ,QAAI,CAAC,MAAM,CAAC,OAAO;AACf;AAAA,IACJ;AAEA,UAAM,QAAQ,KAAK,UAAU,EAAE;AAG/B,QAAI,+BAAO,OAAO;AACd,UAAI,KAAK,QAAQ,OAAO,gBAAgB;AACpC,aAAK,IAAI,MAAM,gBAAgB,EAAE,eAAe,KAAK,UAAU,KAAK,CAAC,EAAE;AAAA,MAC3E;AAGA,YAAM,KAAK,KAAK,IAAI;AACpB,YAAM,WAAW,EAAE,KAAK,MAAM,MAAM,KAAK,KAAK,MAAM,MAAM,IAAI;AAC9D,YAAM,QAAQ;AAEd,YAAM,kBAAkB,GAAG,WAAW,cAAc,KAAK,GAAG,WAAW,SAAS;AAChF,YAAM,aAAa,MAAM,OAAO,MAAM,YAAY;AAElD,UAAI,YAAY;AACZ,cAAM,KAAK,MAAM;AACjB,cAAM,UAAU,MAAM,UAAU,CAAC;AACjC,cAAM,aAAa,MAAM,cAAc,CAAC;AACxC,cAAM,UAAU,MAAM,kBAAkB,CAAC;AAEzC,iBAAS,IAAI,GAAG,IAAI,GAAG,QAAQ,KAAK;AAChC,gBAAM,SAAS,GAAG,CAAC;AAGnB,gBAAM,YAAY,SAAS,QAAQ,MAAM,OAAO,SAAS,QAAQ,MAAM,OAAO,QAAQ,CAAC,MAAM;AAE7F,cAAI,CAAC,WAAW;AACZ,iBAAK,IAAI,MAAM,6BAA6B,EAAE,aAAa;AAC3D;AAAA,UACJ;AAGA,gBAAM,4BAA6B,CAAC,OAAO,0BAA0B,CAAC,WAAW,CAAC,KAAM,CAAC,QAAQ,CAAC;AAElG,cAAI,2BAA2B;AAC3B,gBAAI,MAAM,GAAG,SAAS,GAAG;AACrB,mBAAK,IAAI,MAAM,6BAA6B,EAAE,iCAAiC;AAC/E,mBAAK,IAAI;AAAA,gBACL,MAAM,OAAO,IAAI,+BAA+B,CAAC,OAAO,sBAAsB,0CACpC,CAAC,WAAW,CAAC,CAAC,8CACV,CAAC,QAAQ,CAAC,CAAC;AAAA,cAC7D;AAAA,YACJ;AACA;AAAA,UACJ;AAGA,cAAI,OAAO,UAAU,OAAO,iBAAiB,CAAC,OAAO,OAAO,UAAU,CAAC,OAAO,OAAO,OAAO;AACxF,gBAAI,OAAO,OAAO,kCAAkC;AAChD,oBAAM,OAAO,OAAO,iCAAiC,IAAI,MAAM;AAAA,YACnE;AAAA,UACJ,WAAW,CAAC,OAAO,QAAQ;AACvB,gBAAI,OAAO,kCAAkC;AACzC,oBAAM,OAAO,iCAAiC,IAAI,MAAM;AAAA,YAC5D;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,OAAO;AACH,aAAK,IAAI,MAAM,6BAA6B,EAAE,gBAAgB;AAAA,MAClE;AAAA,IACJ;AAGA,UAAM,IAAI,MAAM;AAChB,UAAM,cAAc,MAAM,QAAQ,MAAM,UAAa,OAAO,MAAM;AAClE,QAAI,CAAC,aAAa;AACd;AAAA,IACJ;AAGA,QAAI,GAAG,WAAW,KAAK,QAAQ,SAAS,GAAG;AACvC,YAAM,KAAK,GAAG,QAAQ,GAAG,KAAK,QAAQ,SAAS,KAAK,EAAE;AACtD,YAAM,WAAW,KAAK,QAAQ,OAAO,EAAE;AAEvC,UAAI,UAAU;AACV,aAAK,QAAQ,MAAM,IAAI;AAAA,UACnB,GAAG;AAAA,UACH,KAAK,KAAK,aAAa,MAAM,GAAG,IAAI,MAAM,MAAM;AAAA,UAChD,IAAI,MAAM;AAAA,UACV,KAAK,MAAM;AAAA,QACf,CAAC;AAAA,MACL;AAGA,YAAI,gDAAU,QAAV,mBAAe,WAAf,mBAAuB,UAAS,KAAK,QAAQ,YAAY;AACzD,mBAAW,SAAS,KAAK,QAAQ,WAAW,QAAQ;AAChD,gBAAM,MAAM,cAAc,IAAI,KAAK;AAAA,QACvC;AAAA,MACJ;AAAA,IACJ;AAGA,QAAI,GAAG,WAAW,aAAa,KAAK,KAAK,QAAQ,YAAY;AACzD,YAAM,KAAK,QAAQ,WAAW,mBAAmB,cAAc,IAAI,KAAuB;AAAA,IAC9F;AAAA,EACJ;AAAA,EACA,MAAM,SAAS,MAAgB,KAA0B,WAAmC;AACxF,QAAI,KAAK,QAAQ,SAAS,WAAW,KAAK,QAAQ,SAAS,aAAa;AACpE,UAAI,KAAK,QAAQ,IAAI;AACjB,cAAM,MAAM,KAAK,QAAQ,GAAG,WAAW,KAAK,QAAQ,SAAS;AAC7D,aAAK,IAAI,MAAM,YAAY,KAAK,QAAQ,EAAE,KAAK,GAAG,KAAK,GAAG,GAAG;AAC7D,YAAI,KAAK,SAAS,MAAM,YAAY,OAAO,QAAQ,UAAU;AACzD,gBAAM,WAAW,GAAG;AAAA,QACxB,WAAW,KAAK,SAAS,MAAM,YAAY,OAAO,QAAQ,WAAW;AACjE,gBAAM,MAAM,IAAI;AAAA,QACpB,WAAW,KAAK,SAAS,MAAM,WAAW;AACtC,gBAAM,CAAC,CAAC;AAAA,QACZ;AACA,YAAI,KAAK,SAAS,MAAM,UAAU;AAC9B,gBAAM,OAAO,GAAG;AAAA,QACpB;AACA,YAAI,WAAW;AACX,gBAAM,KAAK,QAAQ,qBAAqB,KAAK,QAAQ,IAAI,KAAK,GAAG;AAAA,QACrE,OAAO;AACH,eAAK,IAAI,MAAM,sDAAsD,KAAK,QAAQ,EAAE,EAAE;AAAA,QAC1F;AAAA,MACJ;AAAA,IACJ,WAAW,KAAK,QAAQ,SAAS,cAAc,KAAK,QAAQ,SAAS,iBAAiB;AAClF,UAAI,KAAK,UAAU,KAAK,QAAQ,EAAE,GAAG;AACjC,cAAM,KAAK,iBAAiB,KAAK,QAAQ,IAAI,KAAK,KAAK;AAAA,MAC3D;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAa,iBACT,IACA,KACA,MAAe,OACf,SAA2C,QAC3C,OAA4C,QAC5B;AA3hBxB;AA4hBQ,QAAI,KAAK,UAAU,EAAE,MAAM,QAAW;AAClC,YAAM,IAAI,KAAK,UAAU,EAAE,EAAE;AAE7B,YAAM,WAAW;AAAA,QACb,GAAG,KAAK,UAAU,EAAE,EAAE;AAAA;AAAA,QAEtB,KAAK,OAAO,KAAM,WAAM,EAAE,IAAI,MAAS,MAArB,YAA2B,MAAO;AAAA,QACpD;AAAA,QACA,IAAI,KAAK,IAAI;AAAA,MACjB;AAGA,YAAM,KAAK,cAAc,IAAI,QAAQ;AAGrC,WAAM,MAAM,EAAE,IAAI,KAAK,UAAU,EAAE,EAAE,KAAK;AAE1C,aAAO;AAAA,IAGX,WAAW,QAAQ;AACf,UAAI,KAAK,QAAQ,OAAO,gBAAgB;AACpC,aAAK,IAAI,MAAM,sBAAsB,EAAE,SAAS,KAAK,UAAU,MAAM,CAAC,EAAE;AAAA,MAC5E;AACA,WAAK,UAAU,EAAE,IAAI;AAAA,QACjB,OAAO,EAAE,IAAI,KAAK,IAAI,GAAG,KAAK,MAAM,KAAU,MAAM,IAAI,IAAI,KAAK,IAAI,EAAE;AAAA,QACvE,IAAI,CAAC;AAAA,QACL,IAAI,KAAK,IAAI;AAAA,QACb,YAAY,CAAC;AAAA,QACb;AAAA,QACA,UAAU;AAAA,QACV,GAAG;AAAA,QACH,gBAAgB,CAAC;AAAA,QACjB,QAAQ,CAAC;AAAA,MACb;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAM,gBACF,MACA,QACA,SAAc,CAAC,GACf,OAAe,QACf,SACY;AAnlBpB;AAolBQ,eAAW,KAAK,MAAM;AAClB,YAAM,IAAI,KAAK,CAAC;AAChB,UAAI,MAAM,QAAW;AACjB;AAAA,MACJ;AACA,UAAI,OAAO,MAAM,YAAY,EAAE,UAAU,IAAI;AACzC,eAAO,CAAC,IAAI,MAAM,KAAK;AAAA,UACnB;AAAA,UACA;AAAA,YACC,YAAO,CAAC,MAAR,YAAa,MAAM,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC;AAAA,UACxC,GAAG,IAAI,IAAI,CAAC;AAAA,UACZ;AAAA,QACJ;AAAA,MACJ,WAAW,OAAO,MAAM,YAAY,UAAU,GAAG;AAC7C,eAAO,CAAC,IACJ,KAAK,CAAC,MAAM,SACN,IAAI;AAAA,UACA,KAAK;AAAA,UACL,EAAE,GAAG,GAAG,MAAM,GAAG,KAAK,IAAI,IAAI,OAAO,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,WAAW,QAAQ;AAAA,UAC7E;AAAA,UACA;AAAA,QACJ,IACA;AACV,YAAI,OAAO,CAAC,MAAM,UAAa,CAAE,MAAM,OAAO,CAAC,EAAE,eAAe,GAAI;AAChE,iBAAO,CAAC,IAAI;AAAA,QAChB;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,OAAO,KAAK,MAAM,EAAE,WAAW,GAAG;AAClC,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,eAIH;AAAA,IACA,MAAM;AAAA,IACN,MAAM,CAAC;AAAA,IACP,OAAO;AAAA,EACX;AAAA,EACA,OAAO;AAAA,EACP,OAAO,gBAAgB,SAAiE;AACpF,QAAI,gBAAgB,qBAAqB;AACrC,cAAQ,aAAa,gBAAgB,mBAAmB;AAAA,IAC5D;AACA,oBAAgB,sBAAsB,QAAQ,WAAW,MAAM;AAC3D,UAAI,QAAQ,QAAQ;AAChB;AAAA,MACJ;AACA,sBAAgB,sBAAsB;AACtC,sBAAgB,eAAe,EAAE,MAAM,QAAW,MAAM,CAAC,GAAG,OAAO,OAAU;AAAA,IACjF,GAAG,GAAK;AAER,WAAO,gBAAgB;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,mBAAmB,QAAyB,OAAmD;AACjG,UAAM,eAAe,gBAAgB,gBAAgB,KAAK,OAAO;AACjE,QAAI,CAAC,aAAa,MAAM;AACpB,mBAAa,OAAO,MAAM,KAAK,QAAQ,uBAAuB,GAAG;AACjE,UAAI,CAAC,aAAa,MAAM;AACpB,cAAM,IAAI,MAAM,kCAAkC;AAAA,MACtD;AACA,mBAAa,OAAO,OAAO,KAAK,aAAa,IAAI;AACjD,YAAM,OAAO,MAAM,KAAK,QAAQ,cAAc,CAAC,SAAS,WAAW,CAAC;AACpE,mBAAa,QAAQ,EAAE,GAAG,KAAK,YAAY,GAAG,GAAG,KAAK,gBAAgB,EAAE;AAAA,IAC5E;AACA,UAAM,SAAgF;AAAA,MAClF,MAAM,aAAa;AAAA,MACnB,MAAM,aAAa;AAAA,IACvB;AACA,QAAI,QAAQ;AACR,UAAI,OAAO,WAAW,UAAU;AAC5B,eAAO,OAAO,aAAa,KAAK,OAAO,OAAK,EAAE,MAAM,MAAM,MAAM,IAAI;AAAA,MACxE,OAAO;AACH,eAAO,OAAO,aAAa,KAAK,OAAO,OAAK,EAAE,SAAS,MAAM,CAAC;AAAA,MAClE;AAAA,IACJ;AACA,QAAI,SAAS,aAAa,OAAO;AAC7B,UAAI,OAAO,UAAU,UAAU;AAC3B,gBAAQ,CAAC,KAAK;AAAA,MAClB;AACA,UAAI;AACJ,iBAAW,KAAK,OAAO;AACnB,cAAM,aAAS,wBAAU,CAAC;AAC1B,YAAI,IAAc,CAAC;AACnB,mBAAW,KAAK,aAAa,OAAO;AAChC,cAAK,CAAC,UAAU,EAAE,SAAS,CAAC,KAAO,UAAU,EAAE,MAAM,MAAM,MAAM,MAAO;AACpE,gBACI,aAAa,MAAM,CAAC,KACpB,aAAa,MAAM,CAAC,EAAE,UACtB,aAAa,MAAM,CAAC,EAAE,OAAO,SAC/B;AACE,kBAAI,EAAE,OAAO,aAAa,MAAM,CAAC,EAAE,OAAO,OAAO;AAAA,YACrD;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,CAAC,GAAG;AACJ,cAAI;AAAA,QACR,OAAO;AACH,cAAI,EAAE,OAAO,OAAK,EAAE,QAAQ,CAAC,MAAM,EAAE;AAAA,QACzC;AAAA,MACJ;AACA,aAAO,OAAO,OAAO,KAAK,OAAO,OAAK,KAAK,EAAE,KAAK,OAAK,EAAE,WAAW,CAAC,CAAC,CAAC;AAAA,IAC3E;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,MAAM,YAAY,SAQwB;AACtC,UAAM,EAAE,QAAQ,OAAO,IAAI,QAAQ,IAAI,QAAQ,WAAW,WAAW,aAAa,GAAG,IAAI;AAEzF,UAAM,SAAS,EAAE,IAAI,KAAK;AAC1B,QAAI;AACJ,QAAI,WAAW;AACX,aAAO;AAAA,QACH,MAAM;AAAA,QACN;AAAA,QACA,IAAI;AAAA,QACJ,MAAM;AAAA,QACN;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ,OAAO;AACH,aAAO;AAAA,QACH,MAAM;AAAA,QACN;AAAA,QACA,IAAI;AAAA,QACJ,MAAM;AAAA,QACN;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AACA,UAAM,OAAO,MAAM,KAAK,qBAAqB,QAAQ,EAAE,KAAW,GAAG,IAAI,OAAO,QAAQ,IAAI;AAC5F,QAAI,OAAO,MAAM,QAAQ,KAAK,QAAQ,KAAK,KAAK,IAAI;AAChD,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,qBACF,QACA,MACA,UACA,QAA2B,IAC3B,QACA,iBAA0B,OACd;AACZ,QAAI,WAAW,MAAM,UAAU,QAAW;AACtC,aAAO;AAAA,IACX;AACA,UAAM,eAAe,MAAM,KAAK,mBAAmB,QAAQ,KAAK;AAChE,QAAI,aAAa,MAAM;AACnB,iBAAW,KAAK,MAAM;AAClB,cAAM,IAAI,KAAK,CAAC;AAChB,YAAI,MAAM,QAAW;AACjB;AAAA,QACJ;AACA,YAAI,OAAO,MAAM,YAAY,EAAE,UAAU,IAAI;AACzC,eAAK,CAAC,IAAI,MAAM,KAAK,qBAAqB,QAAQ,GAAG,UAAU,OAAO,MAAM;AAAA,QAChF,WAAW,OAAO,MAAM,YAAY,UAAU,GAAG;AAC7C,gBAAM,IAAI;AACV,cAAI,QAAQ;AACZ,cAAK,EAAE,SAAS,eAAe,EAAE,SAAS,WAAY,CAAC,EAAE,QAAQ,EAAE,SAAS,QAAQ;AAChF;AAAA,UACJ;AACA,cAAI,aAAa,KAAK,WAAW,GAAG;AAChC,iBAAK,IAAI,KAAK,yBAAyB,MAAM,GAAG;AAAA,UACpD;AACA,qBAAW,QAAQ,MAAM,QAAQ,EAAE,IAAI,IAAI,EAAE,OAAO,CAAC,EAAE,QAAQ,EAAE,GAAG;AAEhE,uBAAW,cAAc,MAAM,QAAQ,EAAE,UAAU,IAAI,EAAE,aAAa,CAAC,EAAE,cAAc,EAAE,GAAG;AACxF,yBAAW,MAAM,aAAa,MAAM;AAChC,sBAAM,MAAuB,aAAa,KAAK,EAAE;AAEjD,oBACI,OACA,IAAI,UACJ,IAAI,SAAS,YACZ,EAAE,OAAO,MAAM,GAAG,SAAS,EAAE,EAAE,OAC/B,SAAS,MAAM,IAAI,OAAO,SAAS,UACnC,CAAC,cAAc,IAAI,OAAO,SAAS,gBACnC,CAAC,EAAE,aAAa,IAAI,OAAO,UAAU,EAAE,eACvC,CAAC,EAAE,UAAU,GAAG,MAAM,EAAE,MAAM,MAAM,OACvC;AACE,sBAAI,OAAO;AACP,wBAAI,CAAC,gBAAgB;AACjB,2BAAK,IAAI;AAAA,wBACL,kCAAkC,IAAI,OAAO,MAAM,cAC/C,EAAE,KAAK,EAAE,GAAG,SAAS,IAAI,OAC7B,iBAAiB,EAAE,SAAS,EAAE,OAAO,SAAS,IAAI,OAAO;AAAA,sBAC7D;AAAA,oBACJ;AACA;AAAA,kBACJ;AACA,oBAAE,KAAK;AACP,oBAAE,OAAO;AACT,0BAAQ;AAAA,gBACZ;AAAA,cACJ;AACA,kBAAI,OAAO;AACP;AAAA,cACJ;AAAA,YACJ;AACA,gBAAI,OAAO;AACP;AAAA,YACJ;AAAA,UACJ;AACA,cAAI,CAAC,OAAO;AACR,gBAAI,EAAE,UAAU;AACZ,yBAAW,OAAO,KAAK;AACvB,mBAAK,IAAI;AAAA,gBACL,2BAA2B,KAAK,UAAU,EAAE,IAAI,CAAC,OAAO,OAAO,SAAS,CAAC,mBACrE,EAAE,KAAK,EAAE,GAAG,SAAS,IAAI,OAC7B,iBAAiB,EAAE,SAAS,EAAE,OAAO,SAAS,IAAI,OAAO;AAAA,cAC7D;AAAA,YACJ;AACA,iBAAK,CAAC,IAAI;AAAA,UACd;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,eAAe,IAA6C;AAC9D,QAAI,KAAK,eAAe,EAAE,MAAM,QAAW;AACvC,aAAO,KAAK,eAAe,EAAE;AAAA,IACjC,WAAW,KAAK,UAAU,EAAE,KAAK,UAAa,KAAK,UAAU,EAAE,EAAE,UAAU;AACvE,aAAO,EAAE,KAAK,IAAI,MAAM,SAAS,QAAQ,KAAK,UAAU,EAAE,EAAE,QAAQ,QAAQ,CAAC,EAAE;AAAA,IACnF;AACA,UAAM,MAAM,MAAM,KAAK,QAAQ,sBAAsB,EAAE;AACvD,SAAK,eAAe,EAAE,IAAI,oBAAO;AACjC,WAAO,oBAAO;AAAA,EAClB;AACJ;",
  "names": []
}
