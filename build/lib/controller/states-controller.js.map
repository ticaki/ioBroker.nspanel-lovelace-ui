{
  "version": 3,
  "sources": ["../../../src/lib/controller/states-controller.ts"],
  "sourcesContent": ["// BaseClass extends\n\nimport { IClientPublishOptions } from 'mqtt';\nimport { Dataitem } from '../classes/data-item';\nimport { AdapterClassDefinition, BaseClass } from '../classes/library';\nimport { DataItemsOptions } from '../types/types';\nimport { Controller } from './panel-controller';\nimport { PanelSend } from './panel-message';\nimport { isPageRole } from '../types/pages';\n\nexport interface BaseClassTriggerdInterface {\n    name: string;\n    adapter: AdapterClassDefinition;\n    panelSend: PanelSend;\n}\n/**\n * Basisklasse f\u00FCr alles das auf Statestriggern soll - also jede card / popup\n * \u00FCbernimmt auch die Sichtbarkeitssteuerung das triggern wird pausiert wenn nicht sichtbar\n * mit async onStateTrigger(): Promise<void> {} k\u00F6nnen abgeleitete Klassen auf Triggerereignisse reagieren\n */\nexport class BaseClassTriggerd extends BaseClass {\n    private updateTimeout: ioBroker.Timeout | undefined;\n    private waitForTimeout: ioBroker.Timeout | undefined;\n    private doUpdate: boolean = true;\n    protected minUpdateInterval: number;\n    protected visibility: boolean = false;\n    protected controller: Controller | undefined;\n    readonly panelSend: PanelSend;\n    private lastMessage: string = '';\n    protected sendToPanel: (payload: string, opt?: IClientPublishOptions) => void = (\n        payload: string,\n        opt?: IClientPublishOptions,\n    ) => {\n        if (payload == this.lastMessage) return;\n        this.lastMessage = payload;\n        this.sendToPanelClass(payload, opt);\n    };\n    resetLastMessage(): void {\n        this.lastMessage = '';\n    }\n    private sendToPanelClass: (payload: string, opt?: IClientPublishOptions) => void = () => {};\n\n    constructor(card: BaseClassTriggerdInterface) {\n        super(card.adapter, card.name);\n        this.minUpdateInterval = 15000;\n        this.controller = this.adapter.controller;\n        this.panelSend = card.panelSend;\n        if (typeof card.panelSend.addMessage === 'function') this.sendToPanelClass = card.panelSend.addMessage;\n    }\n    readonly onStateTriggerSuperDoNotOverride = async (): Promise<boolean> => {\n        if (!this.visibility) return false;\n        if (this.waitForTimeout) return false;\n        if (this.updateTimeout) {\n            this.doUpdate = true;\n            return false;\n        } else {\n            this.waitForTimeout = this.adapter.setTimeout(() => {\n                this.waitForTimeout = undefined;\n                this.onStateTrigger();\n            }, 50);\n            this.updateTimeout = this.adapter.setTimeout(async () => {\n                if (this.unload) return;\n                this.updateTimeout = undefined;\n                if (this.doUpdate) {\n                    this.doUpdate = false;\n                    await this.onStateTrigger();\n                }\n            }, this.minUpdateInterval);\n            return true;\n        }\n    };\n    protected async onStateTrigger(): Promise<void> {\n        this.adapter.log.warn(\n            `<- instance of [${Object.getPrototypeOf(this)}] is triggert but dont react or call super.onStateTrigger()`,\n        );\n    }\n    getPayloadArray(s: (string | any)[]): string {\n        return s.join('~');\n    }\n    getPayload(...s: string[]): string {\n        return s.join('~');\n    }\n    private async stopTriggerTimeout(): Promise<void> {\n        if (this.updateTimeout) this.adapter.clearTimeout(this.updateTimeout);\n    }\n    async delete(): Promise<void> {\n        await super.delete();\n        await this.stopTriggerTimeout();\n    }\n    getVisibility = (): boolean => {\n        return this.visibility;\n    };\n    setVisibility = async (v: boolean, force: boolean = false): Promise<void> => {\n        if (v !== this.visibility || force) {\n            this.visibility = v;\n            if (this.visibility) {\n                this.log.debug(`Switch page to visible${force ? ' (forced)' : ''}!`);\n                this.resetLastMessage();\n                this.controller && this.controller.readOnlyDB.activateTrigger(this);\n            } else {\n                this.log.debug(`Switch page to invisible${force ? ' (forced)' : ''}!`);\n                this.stopTriggerTimeout();\n                this.controller && this.controller.readOnlyDB.deactivateTrigger(this);\n            }\n            await this.onVisibilityChange(v);\n        } else this.visibility = v;\n    };\n    /**\n     * Event when visibility is on Change.\n     */\n    protected async onVisibilityChange(val: boolean): Promise<void> {\n        val;\n        this.adapter.log.warn(\n            `<- instance of [${Object.getPrototypeOf(\n                this,\n            )}] not react on onVisibilityChange(), or call super.onVisibilityChange()`,\n        );\n    }\n}\n\n/**\n * Verwendet um Lesezugriffe auf die States umzusetzten, die im NSPanel ververwendet werden.\n * Adapter eigenen States sind verboten\n * Speichert Zugriff zwischen das kann mit timespan vereinflusst werden.\n */\nexport class StatesControler extends BaseClass {\n    private triggerDB: {\n        [key: string]: {\n            state: ioBroker.State;\n            to: BaseClassTriggerd[];\n            ts: number;\n            subscribed: boolean[];\n            response: ('now' | 'medium' | 'slow')[];\n        };\n    } = {};\n    private stateDB: { [key: string]: { state: ioBroker.State; ts: number } } = {};\n    private tempObjectDB: { [key: string]: { [id: string]: ioBroker.Object } } | undefined = undefined;\n    timespan: number;\n    constructor(adapter: AdapterClassDefinition, name: string = '', timespan: number = 15000) {\n        super(adapter, name || 'StatesDBReadOnly');\n        this.timespan = timespan;\n    }\n\n    /**\n     * Set a subscript to a foreignState and write current state/value to db\n     * @param id state id\n     * @param from the page that handle the trigger\n     */\n    async setTrigger(id: string, from: BaseClassTriggerd, response: 'now' | 'medium' | 'slow' = 'slow'): Promise<void> {\n        if (id.startsWith(this.adapter.namespace)) {\n            this.log.warn(`Id: ${id} refers to the adapter's own namespace, this is not allowed!`);\n            return;\n            //throw new Error(`Id: ${id} refers to the adapter's own namespace, this is not allowed!`);\n        }\n        if (this.triggerDB[id] !== undefined) {\n            if (this.triggerDB[id].to.indexOf(from) == -1) {\n                this.triggerDB[id].to.push(from);\n                this.triggerDB[id].subscribed.push(false);\n                this.triggerDB[id].response.push(response);\n            }\n        } else {\n            const state = await this.adapter.getForeignStateAsync(id);\n            if (state) {\n                await this.adapter.subscribeForeignStatesAsync(id);\n                this.triggerDB[id] = {\n                    state,\n                    to: [from],\n                    ts: Date.now(),\n                    subscribed: [false],\n                    response: [response],\n                };\n            }\n            this.log.debug(`Set a new trigger to ${id}`);\n        }\n    }\n\n    /**\n     * Activate the triggers of a page. First subscribes to the state.\n     * @param to Page\n     */\n    async activateTrigger(to: BaseClassTriggerd): Promise<void> {\n        for (const id in this.triggerDB) {\n            const entry = this.triggerDB[id];\n            const index = entry.to.indexOf(to);\n            if (index === -1) continue;\n            if (entry.subscribed[index]) continue;\n            if (!entry.subscribed.some((a) => a)) {\n                await this.adapter.subscribeForeignStatesAsync(id);\n                const state = await this.adapter.getForeignStateAsync(id);\n                if (state) {\n                    entry.state = state;\n                }\n            }\n            entry.subscribed[index] = true;\n        }\n    }\n\n    /**\n     * Deactivate the triggers of a page. Last unsubscribes to the state.\n     * @param to Page\n     */\n    async deactivateTrigger(to: BaseClassTriggerd): Promise<void> {\n        for (const id in this.triggerDB) {\n            const entry = this.triggerDB[id];\n            const index = entry.to.indexOf(to);\n            if (index === -1) continue;\n            if (!entry.subscribed[index]) continue;\n            entry.subscribed[index] = false;\n            if (!entry.subscribed.some((a) => a)) {\n                await this.adapter.unsubscribeForeignStatesAsync(id);\n            }\n        }\n    }\n    /**\n     * Read a state from DB or js-controller\n     * @param id state id with namespace\n     * @returns\n     */\n    async getState(\n        id: string,\n        response: 'now' | 'medium' | 'slow' = 'slow',\n    ): Promise<ioBroker.State | null | undefined> {\n        let timespan = this.timespan;\n        if (response === 'medium') timespan = 3000;\n        else if (response === 'now') timespan = 0;\n        if (this.triggerDB[id] !== undefined && this.triggerDB[id].subscribed.some((a) => a)) {\n            return this.triggerDB[id].state;\n        } else if (this.stateDB[id] && timespan) {\n            if (Date.now() - timespan - this.stateDB[id].ts < 0) {\n                return this.stateDB[id].state;\n            }\n        }\n        const state = await this.adapter.getForeignStateAsync(id);\n        if (state) {\n            this.stateDB[id] = { state: state, ts: Date.now() };\n            return state;\n        }\n        throw new Error(`State id invalid ${id} no data!`);\n    }\n    async onStateChange(dp: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (dp && state) {\n            if (this.triggerDB[dp]) {\n                if (this.triggerDB[dp].state) {\n                    this.log.debug(`Trigger from ${dp} with state ${JSON.stringify(state)}`);\n                    this.triggerDB[dp].ts = Date.now();\n                    if (this.triggerDB[dp].state.val !== state.val || this.triggerDB[dp].state.ack !== state.ack) {\n                        this.triggerDB[dp].state = state;\n                        if (state.ack) {\n                            this.triggerDB[dp].to.forEach(\n                                (c) => c.onStateTriggerSuperDoNotOverride && c.onStateTriggerSuperDoNotOverride(),\n                            );\n                        }\n                    }\n                }\n            }\n        }\n    }\n    async setStateAsync(item: Dataitem, val: ioBroker.StateValue): Promise<void> {\n        if (item.options.type === 'state' || item.options.type === 'triggered') {\n            if (item.options.dp) {\n                const ack = item.options.dp.startsWith(this.adapter.namespace);\n                this.log.debug(`setStateAsync(${item.options.dp}, ${val}, ${ack})`);\n                if (item.type === 'number' && typeof val === 'string') val = parseFloat(val);\n                if (item.type === 'boolean') val = !!val;\n                if (item.type === 'string') val = String(val);\n                this.updateDBState(item.options.dp, val, ack);\n                await this.adapter.setForeignStateAsync(item.options.dp, val, ack);\n            }\n        } else if (item.options.type === 'internal') {\n            if (this.triggerDB[item.options.dp]) {\n                if (this.setInternalState(item.options.dp, val))\n                    await this.onStateChange(item.options.dp, this.triggerDB[item.options.dp].state);\n            }\n        }\n    }\n    private setInternalState(id: string, val: ioBroker.StateValue): boolean {\n        if (this.triggerDB[id] !== undefined) {\n            this.triggerDB[id].state = {\n                ...this.triggerDB[id].state,\n                val,\n                ack: true,\n                ts: Date.now(),\n            };\n            return true;\n        }\n        return false;\n    }\n\n    private updateDBState(id: string, val: ioBroker.StateValue, ack: boolean): void {\n        if (this.triggerDB[id] !== undefined) {\n            this.triggerDB[id].state.val = val;\n            this.triggerDB[id].state.ack = ack;\n        } else if (this.stateDB[id] !== undefined) {\n            this.stateDB[id].state.val = val;\n            this.stateDB[id].state.ack = ack;\n        }\n    }\n\n    /**\n     * Create dataitems from a json (deep)\n     * @param data Json with configuration to create dataitems\n     * @param parent Page etc.\n     * @returns then json with values dataitem or undefined\n     */\n    async createDataItems(data: any, parent: any): Promise<any> {\n        for (const i in data) {\n            const d = data[i];\n            if (d === undefined) continue;\n            if (typeof d === 'object' && !('type' in d)) {\n                data[i] = await this.createDataItems(d, parent);\n            } else if (typeof d === 'object' && 'type' in d) {\n                data[i] =\n                    data[i] !== undefined\n                        ? new Dataitem(this.adapter, { ...d, name: `${this.name}.${parent.name}.${i}` }, parent, this)\n                        : undefined;\n                if (data[i] !== undefined && !(await data[i].isValidAndInit())) {\n                    data[i] = undefined;\n                }\n            }\n        }\n        return data;\n    }\n\n    async getDataItemsFromAuto(dpInit: string, data: any): Promise<any> {\n        if (dpInit === '') return {};\n        if (this.tempObjectDB === undefined) {\n            this.tempObjectDB = {};\n            this.adapter.setTimeout(() => {\n                this.tempObjectDB = undefined;\n            }, 300000);\n        }\n        for (const i in data) {\n            const t = data[i];\n            if (t === undefined) continue;\n            if (typeof t === 'object' && !('type' in t)) {\n                data[i] = await this.getDataItemsFromAuto(dpInit, t);\n            } else if (typeof t === 'object' && 'type' in t) {\n                const d = t as DataItemsOptions;\n                let found = false;\n                if ((d.type !== 'triggered' && d.type !== 'state') || !d.mode || d.mode !== 'auto') continue;\n                for (const role of Array.isArray(d.role) ? d.role : [d.role]) {\n                    if (!isPageRole(role)) {\n                        throw new Error(`${d.dp} has a unkowned role ${d.role}`);\n                    }\n                    if (!this.tempObjectDB[dpInit]) {\n                        this.tempObjectDB[dpInit] = await this.adapter.getForeignObjectsAsync(`${dpInit}.*`);\n                    }\n                    if (!this.tempObjectDB[dpInit]) {\n                        this.log.warn(`Dont find states for ${dpInit}!`);\n                    }\n\n                    for (const id in this.tempObjectDB[dpInit]) {\n                        const obj: ioBroker.Object = this.tempObjectDB[dpInit][id];\n                        if (obj && obj.common && obj.type === 'state') {\n                            if (obj.common.role === role) {\n                                if (found) {\n                                    this.log.warn(`Found more as 1 state for role ${role} in ${dpInit}`);\n                                    break;\n                                }\n                                d.dp = id;\n                                d.mode = 'done';\n                                found = true;\n                            }\n                        }\n                    }\n                    if (found) break;\n                }\n                if (!found) {\n                    data[i] = undefined;\n                    this.log.warn(`No state found for role ${JSON.stringify(d.role)} in ${dpInit}`);\n                }\n            }\n        }\n        return data;\n    }\n\n    /**\n     * what the name says\n     * @param id\n     * @returns\n     */\n    async existsState(id: string): Promise<boolean> {\n        if (id.startsWith(this.adapter.namespace)) {\n            return this.adapter.library.readdb(id.replace(this.adapter.namespace, '')) !== undefined;\n        } else {\n            return (await this.adapter.getForeignStateAsync(id)) !== undefined;\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
