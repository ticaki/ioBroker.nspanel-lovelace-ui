{
  "version": 3,
  "sources": ["../../../src/lib/controller/states-controller.ts"],
  "sourcesContent": ["// BaseClass extends\n\nimport { IClientPublishOptions } from 'mqtt';\nimport { PageInterface } from '../classes/Page';\nimport { Dataitem } from '../classes/data-item';\nimport { AdapterClassDefinition, BaseClass } from '../classes/library';\nimport { PageItem } from '../pages/pageItem';\nimport { PageItemDataItemsOptions } from '../types/type-pageItem';\nimport { DataItemsOptions } from '../types/types';\nimport { Controller } from './controller';\nimport { Panel } from './panel';\nimport { PanelSend } from './panel-message';\nimport { genericStateObjects } from '../const/definition';\n\nexport interface BaseClassTriggerdInterface {\n    name: string;\n    adapter: AdapterClassDefinition;\n    panelSend: PanelSend;\n    alwaysOn?: 'none' | 'always' | 'action';\n    panel: Panel;\n    dpInit?: string;\n}\n\n/**\n * Basisklasse f\u00FCr alles das auf Statestriggern soll - also jede card / popup\n * \u00FCbernimmt auch die Sichtbarkeitssteuerung das triggern wird pausiert wenn nicht sichtbar\n * mit async onStateTrigger(): Promise<void> {} k\u00F6nnen abgeleitete Klassen auf Triggerereignisse reagieren\n */\nexport class BaseClassTriggerd extends BaseClass {\n    private updateTimeout: ioBroker.Timeout | undefined;\n    private waitForTimeout: ioBroker.Timeout | undefined;\n    private doUpdate: boolean = true;\n    protected minUpdateInterval: number;\n    protected visibility: boolean = false;\n    protected controller: Controller;\n    readonly panelSend: PanelSend;\n    public alwaysOn: 'none' | 'always' | 'action';\n    private alwaysOnState: ioBroker.Timeout | undefined;\n    private lastMessage: string = '';\n    public panel: Panel;\n    private responseTime: number = 10000000000;\n    neverDeactivateTrigger: boolean = false;\n    sleep: boolean = true;\n    parent: BaseClassTriggerd | undefined = undefined;\n    triggerParent: boolean = false;\n    dpInit: string = '';\n    protected sendToPanel: (payload: string, opt?: IClientPublishOptions) => void = (\n        payload: string,\n        opt?: IClientPublishOptions,\n    ) => {\n        if (payload == this.lastMessage) return;\n        this.lastMessage = payload;\n\n        this.sendToPanelClass(payload, opt);\n    };\n    resetLastMessage(): void {\n        this.lastMessage = '';\n    }\n    private sendToPanelClass: (payload: string, opt?: IClientPublishOptions) => void = () => {};\n\n    constructor(card: BaseClassTriggerdInterface) {\n        super(card.adapter, card.name);\n        this.minUpdateInterval = 500;\n        if (!this.adapter.controller) throw new Error('No controller! bye bye');\n        this.controller = this.adapter.controller;\n        this.panelSend = card.panelSend;\n        this.alwaysOn = card.alwaysOn ?? 'none';\n        this.panel = card.panel;\n\n        if (typeof this.panelSend.addMessage === 'function') this.sendToPanelClass = card.panelSend.addMessage;\n    }\n    readonly onStateTriggerSuperDoNotOverride = async (from: BaseClassTriggerd): Promise<boolean> => {\n        if ((!this.visibility && !this.neverDeactivateTrigger) || this.unload) return false;\n        if (this.sleep && !this.neverDeactivateTrigger) return false;\n        if (this.waitForTimeout) return false;\n        if (this.updateTimeout) {\n            this.doUpdate = true;\n            return false;\n        } else {\n            this.waitForTimeout = this.adapter.setTimeout(() => {\n                this.waitForTimeout = undefined;\n                this.onStateTrigger(from);\n                if (this.alwaysOnState) this.adapter.clearTimeout(this.alwaysOnState);\n                if (this.alwaysOn === 'action') {\n                    this.alwaysOnState = this.adapter.setTimeout(\n                        () => {\n                            this.panel.sendScreeensaverTimeout(this.panel.timeout);\n                        },\n                        this.panel.timeout * 1000 || 5000,\n                    );\n                }\n            }, 10);\n            this.updateTimeout = this.adapter.setTimeout(async () => {\n                if (this.unload) return;\n                this.updateTimeout = undefined;\n                if (this.doUpdate) {\n                    this.doUpdate = false;\n                    await this.onStateTrigger(from);\n                }\n            }, this.minUpdateInterval);\n            return true;\n        }\n    };\n    protected async onStateTrigger(_from: BaseClassTriggerd): Promise<void> {\n        this.adapter.log.warn(\n            `<- instance of [${Object.getPrototypeOf(this)}] is triggert but dont react or call super.onStateTrigger()`,\n        );\n    }\n\n    private async stopTriggerTimeout(): Promise<void> {\n        if (this.updateTimeout) {\n            this.adapter.clearTimeout(this.updateTimeout);\n            this.updateTimeout = undefined;\n        }\n    }\n    async delete(): Promise<void> {\n        await this.setVisibility(false);\n        this.parent = undefined;\n        await super.delete();\n        if (this.waitForTimeout) this.adapter.clearTimeout(this.waitForTimeout);\n        if (this.alwaysOnState) this.adapter.clearTimeout(this.alwaysOnState);\n        await this.stopTriggerTimeout();\n    }\n    getVisibility = (): boolean => {\n        return this.visibility;\n    };\n    setVisibility = async (v: boolean, force: boolean = false): Promise<void> => {\n        if (v !== this.visibility || force) {\n            this.visibility = v;\n            if (this.visibility) {\n                if (this.unload) return;\n\n                if (this.alwaysOn != 'none') {\n                    if (this.alwaysOn === 'action') {\n                        this.alwaysOnState = this.adapter.setTimeout(\n                            async () => {\n                                await this.panel.sendScreeensaverTimeout(this.panel.timeout);\n                            },\n                            this.panel.timeout * 2 * 1000 || 5000,\n                        );\n                    } else {\n                        await this.panel.sendScreeensaverTimeout(0);\n                    }\n                } else this.panel.sendScreeensaverTimeout(this.panel.timeout);\n                this.log.debug(`Switch page to visible${force ? ' (forced)' : ''}!`);\n                this.resetLastMessage();\n                this.controller && (await this.controller.statesControler.activateTrigger(this));\n\n                this.panel.info.nspanel.currentPage = this.name;\n                this.library.writedp(\n                    `panels.${this.panel.name}.info.nspanel.currentPage`,\n                    this.name,\n                    genericStateObjects.panel.panels.info.nspanel.currentPage,\n                );\n            } else {\n                if (this.alwaysOnState) this.adapter.clearTimeout(this.alwaysOnState);\n                await this.panel.sendScreeensaverTimeout(this.panel.timeout);\n                this.log.debug(`Switch page to invisible${force ? ' (forced)' : ''}!`);\n                if (!this.neverDeactivateTrigger) {\n                    this.stopTriggerTimeout();\n                    this.controller && (await this.controller.statesControler.deactivateTrigger(this));\n                }\n            }\n            await this.onVisibilityChange(v);\n        } else this.visibility = v;\n    };\n    /**\n     * Event when visibility is on Change.\n     */\n    protected async onVisibilityChange(val: boolean): Promise<void> {\n        val;\n        this.adapter.log.warn(\n            `<- instance of [${Object.getPrototypeOf(\n                this,\n            )}] not react on onVisibilityChange(), or call super.onVisibilityChange()`,\n        );\n    }\n}\n\nexport class BaseClassPage extends BaseClassTriggerd {\n    readonly pageItemConfig: (PageItemDataItemsOptions | undefined)[] | undefined;\n    pageItems: (PageItem | undefined)[] | undefined;\n    constructor(card: PageInterface, pageItemsConfig: (PageItemDataItemsOptions | undefined)[] | undefined) {\n        super(card);\n        this.pageItemConfig = pageItemsConfig;\n    }\n}\ntype getInternalFunctionType = (id: string, state: ioBroker.State | undefined) => Promise<ioBroker.StateValue>;\n/**\n * Verwendet um Lesezugriffe auf die States umzusetzten, die im NSPanel ververwendet werden.\n * Adapter eigenen States sind verboten\n * Speichert Zugriff zwischen das kann mit timespan vereinflusst werden.\n */\nexport class StatesControler extends BaseClass {\n    private triggerDB: {\n        [key: string]: {\n            state: ioBroker.State;\n            to: BaseClassTriggerd[];\n            ts: number;\n            subscribed: boolean[];\n            common: ioBroker.StateCommon;\n            internal?: boolean;\n            f?: getInternalFunctionType;\n        };\n    } = {};\n    private deletePageInterval: ioBroker.Interval | undefined;\n    private stateDB: { [key: string]: { state: ioBroker.State; ts: number; common: ioBroker.StateCommon } } = {};\n    objectDatabase: Record<string, ioBroker.Object | null> = {};\n    intervalObjectDatabase: ioBroker.Interval | undefined;\n\n    timespan: number;\n\n    constructor(adapter: AdapterClassDefinition, name: string = '', timespan: number = 15000) {\n        super(adapter, name || 'StatesDB');\n        this.timespan = timespan;\n        this.deletePageInterval = this.adapter.setInterval(this.deletePageLoop, 60000);\n        this.intervalObjectDatabase = this.adapter.setInterval(() => {\n            if (this.unload) return;\n            this.intervalObjectDatabase = undefined;\n            this.objectDatabase = {};\n        }, 1800000);\n    }\n    private deletePageLoop = (): void => {\n        const removeId = [];\n        for (const id in this.triggerDB) {\n            const entry = this.triggerDB[id];\n            const removeIndex = [];\n            for (const i in entry.to) {\n                if (entry.to[i].unload) {\n                    this.log.debug('Unload element:  ' + entry.to[i].name);\n                    removeIndex.push(Number(i));\n                }\n            }\n            for (const i of removeIndex) {\n                for (const key in entry) {\n                    const k = key as keyof typeof entry;\n                    const item = entry[k];\n                    if (Array.isArray(item)) {\n                        item.splice(i, 1);\n                    }\n                }\n            }\n            if (entry.to.length === 0 && !entry.internal) removeId.push(id);\n        }\n\n        for (const id of removeId) {\n            delete this.triggerDB[id];\n        }\n    };\n\n    async delete(): Promise<void> {\n        await super.delete();\n        if (this.intervalObjectDatabase) this.adapter.clearInterval(this.intervalObjectDatabase);\n        if (StatesControler.tempObjectDBTimeout) this.adapter.clearTimeout(StatesControler.tempObjectDBTimeout);\n        if (this.deletePageInterval) this.adapter.clearInterval(this.deletePageInterval);\n    }\n    /**\n     * Set a subscript to a foreignState and write current state/value to db\n     * @param id state id\n     * @param from the page that handle the trigger\n     */\n    async setTrigger(id: string, from: BaseClassTriggerd, internal: boolean = false): Promise<void> {\n        if (id.startsWith(this.adapter.namespace)) {\n            this.log.warn(`Id: ${id} refers to the adapter's own namespace, this is not allowed!`);\n            return;\n            //throw new Error(`Id: ${id} refers to the adapter's own namespace, this is not allowed!`);\n        }\n        if (this.triggerDB[id] !== undefined) {\n            const index = this.triggerDB[id].to.findIndex((a) => a == from);\n            if (index === -1) {\n                this.triggerDB[id].to.push(from);\n                this.triggerDB[id].subscribed.push(false);\n            } else {\n            }\n        } else if (internal) {\n            this.log.error('setInternal Trigger too early');\n        } else {\n            const state = await this.adapter.getForeignStateAsync(id);\n            if (state) {\n                // erstelle keinen trigger f\u00FCr das gleiche parent doppelt..\n                await this.adapter.subscribeForeignStatesAsync(id);\n                const obj = await this.getObjectAsync(id);\n                if (!obj || !obj.common || obj.type !== 'state') throw new Error('Got invalid object for ' + id);\n                this.triggerDB[id] = {\n                    state,\n                    to: [from],\n                    ts: Date.now(),\n                    subscribed: [false],\n                    common: obj.common,\n                };\n                if (this.stateDB[id] !== undefined) {\n                    delete this.stateDB[id];\n                }\n            }\n            this.log.debug(`Set a new trigger to ${id}`);\n        }\n    }\n\n    /**\n     * Activate the triggers of a page. First subscribes to the state.\n     * @param to Page\n     */\n    async activateTrigger(to: BaseClassTriggerd | undefined): Promise<void> {\n        if (!to) return;\n        for (const id in this.triggerDB) {\n            const entry = this.triggerDB[id];\n            if (entry.internal) continue;\n            const index = entry.to.indexOf(to);\n            if (index === -1) continue;\n            if (entry.subscribed[index]) continue;\n            if (!entry.subscribed.some((a) => a)) {\n                await this.adapter.subscribeForeignStatesAsync(id);\n                const state = await this.adapter.getForeignStateAsync(id);\n                if (state) {\n                    entry.state = state;\n                }\n            }\n            entry.subscribed[index] = true;\n        }\n    }\n\n    /**\n     * Deactivate the triggers of a page. Last unsubscribes to the state.\n     * @param to Page\n     */\n    async deactivateTrigger(to: BaseClassTriggerd): Promise<void> {\n        for (const id in this.triggerDB) {\n            if (to.neverDeactivateTrigger) continue;\n            const entry = this.triggerDB[id];\n            if (entry.internal) continue;\n            const index = entry.to.indexOf(to);\n            if (index === -1) continue;\n            if (!entry.subscribed[index]) continue;\n            entry.subscribed[index] = false;\n            if (!entry.subscribed.some((a) => a)) {\n                await this.adapter.unsubscribeForeignStatesAsync(id);\n            }\n        }\n    }\n\n    async getStateVal(id: string): Promise<ioBroker.StateValue | null> {\n        const state = await this.getState(id, 'now');\n        if (state) {\n            return state.val ?? null;\n        }\n        return null;\n    }\n    /**\n     * Read a state from DB or js-controller\n     * @param id state id with namespace\n     * @returns\n     */\n    async getState(\n        id: string,\n        response: 'now' | 'medium' = 'medium',\n        internal: boolean = false,\n    ): Promise<ioBroker.State | null | undefined> {\n        let timespan = this.timespan;\n        if (response === 'now') timespan = 10;\n        else timespan = 1000;\n        if (\n            this.triggerDB[id] !== undefined &&\n            (this.triggerDB[id].internal || this.triggerDB[id].subscribed.some((a) => a))\n        ) {\n            let state: ioBroker.State | null = null;\n            const f = this.triggerDB[id].f;\n            if (f) {\n                state = {\n                    ...this.triggerDB[id].state,\n                    val: await f(id, undefined),\n                };\n            } else {\n                state = this.triggerDB[id].state;\n            }\n            return state;\n        } else if (this.stateDB[id] && timespan) {\n            if (Date.now() - timespan - this.stateDB[id].ts < 0) {\n                return this.stateDB[id].state;\n            }\n        }\n        if (id.includes('/')) internal = true;\n        if (!internal) {\n            const state = await this.adapter.getForeignStateAsync(id);\n            if (state) {\n                if (!this.stateDB[id]) {\n                    const obj = await this.getObjectAsync(id);\n                    if (!obj || !obj.common || obj.type !== 'state') throw new Error('Got invalid object for ' + id);\n                    this.stateDB[id] = { state: state, ts: Date.now(), common: obj.common };\n                } else {\n                    this.stateDB[id].state = state;\n                    this.stateDB[id].ts = Date.now();\n                }\n                return state;\n            }\n        }\n        throw new Error(`State id invalid ${id} no data!`);\n    }\n\n    getType(id: string): ioBroker.CommonType | undefined {\n        if (this.triggerDB[id] !== undefined && this.triggerDB[id].common) return this.triggerDB[id].common!.type;\n        if (this.stateDB[id] !== undefined) return this.stateDB[id].common.type;\n        return undefined;\n    }\n\n    async getCommonStates(id: string, force: boolean = false): Promise<Record<string, string> | undefined> {\n        let j: string | string[] | Record<string, string> | undefined = undefined;\n        if (force) {\n            const obj = await this.adapter.getObjectAsync(id);\n            if (obj && obj.common && obj.common.states) j = obj.common.state;\n        } else if (this.triggerDB[id] !== undefined && this.triggerDB[id].common) j = this.triggerDB[id].common.states;\n        else if (this.stateDB[id] !== undefined && this.stateDB[id].common) j = this.stateDB[id].common.states;\n\n        if (!j || typeof j === 'string') return undefined;\n        if (Array.isArray(j)) {\n            const a: Record<string, string> = {};\n            j.forEach((e, i) => (a[String(i)] = e));\n            j = a;\n        }\n        return j;\n    }\n\n    async onStateChange(dp: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (dp && state) {\n            if (this.triggerDB[dp]) {\n                if (this.triggerDB[dp].state) {\n                    this.log.debug(`Trigger from ${dp} with state ${JSON.stringify(state)}`);\n                    this.triggerDB[dp].ts = Date.now();\n                    if (this.triggerDB[dp].state.val !== state.val || this.triggerDB[dp].state.ack !== state.ack) {\n                        this.triggerDB[dp].state = state;\n                        if (state.ack || dp.startsWith('0_userdata.0')) {\n                            this.triggerDB[dp].to.forEach((c) => {\n                                if (c.parent && c.triggerParent && !c.parent.unload && !c.parent.sleep) {\n                                    c.parent.onStateTriggerSuperDoNotOverride &&\n                                        c.parent.onStateTriggerSuperDoNotOverride(c);\n                                } else if (!c.unload) {\n                                    c.onStateTriggerSuperDoNotOverride && c.onStateTriggerSuperDoNotOverride(c);\n                                }\n                            });\n                        }\n                    }\n                }\n            }\n            if (dp.startsWith(this.adapter.namespace)) {\n                const id = dp.replace(this.adapter.namespace + '.', '');\n                const libState = this.library.readdb(id);\n                if (libState) {\n                    this.library.setdb(id, { ...libState, val: state.val, ts: state.ts, ack: state.ack });\n                }\n\n                if (\n                    libState &&\n                    libState.obj &&\n                    libState.obj.common &&\n                    libState.obj.common.write &&\n                    this.adapter.controller\n                ) {\n                    for (const panel of this.adapter.controller.panels) {\n                        await panel.onStateChange(id, state);\n                    }\n                }\n            }\n        }\n    }\n    async setStateAsync(item: Dataitem, val: ioBroker.StateValue, writeable: boolean): Promise<void> {\n        if (item.options.type === 'state' || item.options.type === 'triggered') {\n            if (item.options.dp) {\n                const ack = item.options.dp.startsWith(this.adapter.namespace);\n                this.log.debug(`setStateAsync(${item.options.dp}, ${val}, ${ack})`);\n                if (item.trueType() === 'number' && typeof val === 'string') val = parseFloat(val);\n                else if (item.trueType() === 'number' && typeof val === 'boolean') val = val ? 1 : 0;\n                else if (item.trueType() === 'boolean') val = !!val;\n                if (item.trueType() === 'string') val = String(val);\n                if (writeable) await this.adapter.setForeignStateAsync(item.options.dp, val, ack);\n                else this.log.error(`Forbidden write attempts on a read-only state! id: ${item.options.dp}`);\n            }\n        } else if (item.options.type === 'internal') {\n            if (this.triggerDB[item.options.dp]) {\n                this.setInternalState(item.options.dp, val, false);\n            }\n        }\n    }\n    public async setInternalState(\n        id: string,\n        val: ioBroker.StateValue,\n        ack: boolean = false,\n        common: ioBroker.StateCommon | undefined = undefined,\n        func: getInternalFunctionType | undefined = undefined,\n    ): Promise<boolean> {\n        if (this.triggerDB[id] !== undefined) {\n            const f = this.triggerDB[id].f;\n            if (ack) {\n                await this.onStateChange(id, {\n                    ...this.triggerDB[id].state,\n                    val: f ? await f(id, undefined) : val,\n                    ack: ack,\n                    ts: Date.now(),\n                });\n            } else {\n                if (f)\n                    f(id, {\n                        ...this.triggerDB[id].state,\n                        val: val,\n                        ack: ack,\n                        ts: Date.now(),\n                    });\n\n                this.triggerDB[id].state = {\n                    ...this.triggerDB[id].state,\n                    val,\n                    ack: ack,\n                    ts: Date.now(),\n                };\n            }\n            return true;\n        } else if (common) {\n            this.log.warn(`No warning, just info. add internal state ${id} with ${JSON.stringify(common)}`);\n            this.triggerDB[id] = {\n                state: { ts: Date.now(), val: null, ack: ack, from: '', lc: Date.now() },\n                to: [],\n                ts: Date.now(),\n                subscribed: [],\n                common: common,\n                internal: true,\n                f: func,\n            };\n        }\n        return false;\n    }\n\n    /**\n     * Create dataitems from a json (deep)\n     * @param data Json with configuration to create dataitems\n     * @param parent Page etc.\n     * @returns then json with values dataitem or undefined\n     */\n    async createDataItems(data: any, parent: any, target: any = {}): Promise<any> {\n        for (const i in data) {\n            const d = data[i];\n            if (d === undefined) continue;\n            if (typeof d === 'object' && !('type' in d)) {\n                target[i] = await this.createDataItems(d, parent, target[i] ?? Array.isArray(d) ? [] : {});\n            } else if (typeof d === 'object' && 'type' in d) {\n                target[i] =\n                    data[i] !== undefined\n                        ? new Dataitem(this.adapter, { ...d, name: `${this.name}.${parent.name}.${i}` }, parent, this)\n                        : undefined;\n                if (target[i] !== undefined && !(await target[i].isValidAndInit())) {\n                    target[i] = undefined;\n                }\n            }\n        }\n        return target;\n    }\n\n    static TempObjectDB: { data: Record<string, ioBroker.Object>; ids: Record<string, boolean> } = {\n        data: {},\n        ids: {},\n    };\n    static tempObjectDBTimeout: ioBroker.Timeout | undefined;\n    static getTempObjectDB(adapter: AdapterClassDefinition): typeof StatesControler.TempObjectDB {\n        if (StatesControler.tempObjectDBTimeout) adapter.clearTimeout(StatesControler.tempObjectDBTimeout);\n\n        StatesControler.tempObjectDBTimeout = adapter.setTimeout(() => {\n            if (adapter.unload) return;\n            StatesControler.tempObjectDBTimeout = undefined;\n            StatesControler.TempObjectDB = { data: {}, ids: {} };\n        }, 60000);\n\n        return StatesControler.TempObjectDB;\n    }\n\n    async getDataItemsFromAuto(dpInit: string, data: any): Promise<any> {\n        if (dpInit === '') return data;\n        const tempObjectDB = StatesControler.getTempObjectDB(this.adapter);\n        for (const i in data) {\n            const t = data[i];\n            if (t === undefined) continue;\n            if (typeof t === 'object' && !('type' in t)) {\n                data[i] = await this.getDataItemsFromAuto(dpInit, t);\n            } else if (typeof t === 'object' && 'type' in t) {\n                const d = t as DataItemsOptions;\n                let found = false;\n                if ((d.type !== 'triggered' && d.type !== 'state') || !d.mode || d.mode !== 'auto') continue;\n                let endsWith = '';\n                // $ means must at the end of id\n                if (d.dp && d.dp.endsWith('$')) {\n                    endsWith = d.dp.substring(0, d.dp.length - 1);\n                }\n\n                for (const role of Array.isArray(d.role) ? d.role : [d.role]) {\n                    if (false) {\n                        //throw new Error(`${d.dp} has a unkowned role ${d.role}`);\n                    }\n                    if (!tempObjectDB.ids[dpInit]) {\n                        const temp = await this.adapter.getForeignObjectsAsync(`${dpInit}.*`);\n                        if (temp) {\n                            tempObjectDB.ids[dpInit] = true;\n                            tempObjectDB.data = Object.assign(tempObjectDB.data, temp);\n                        }\n                    }\n                    if (!tempObjectDB.ids[dpInit]) {\n                        this.log.warn(`Dont find states for ${dpInit}!`);\n                    }\n\n                    for (const id in tempObjectDB.data) {\n                        if (!id.startsWith(dpInit)) continue;\n                        const obj: ioBroker.Object = tempObjectDB.data[id];\n                        if (\n                            obj &&\n                            obj.common &&\n                            obj.type === 'state' &&\n                            (d.dp === '' || (endsWith ? id.endsWith(endsWith) : id.includes(d.dp))) &&\n                            (role === '' || obj.common.role === role)\n                        ) {\n                            if (found) {\n                                this.log.warn(`Found more as 1 state for role ${role} in ${dpInit} with ${d.dp}`);\n                                break;\n                            }\n                            d.dp = id;\n                            d.mode = 'done';\n                            found = true;\n                        }\n                    }\n                    if (found) break;\n                }\n                if (!found) {\n                    data[i] = undefined;\n                    this.log.warn(`No state found for role ${JSON.stringify(d.role)} in ${dpInit} with ${d.dp}`);\n                }\n            }\n        }\n        return data;\n    }\n\n    async getObjectAsync(id: string): Promise<ioBroker.Object | null> {\n        if (this.objectDatabase[id] !== undefined) return this.objectDatabase[id];\n        else if (this.triggerDB[id] !== undefined && this.triggerDB[id].internal) {\n            return { _id: '', type: 'state', common: this.triggerDB[id].common, native: {} };\n        }\n        const obj = await this.adapter.getForeignObjectAsync(id);\n        this.objectDatabase[id] = obj ?? null;\n        return obj ?? null;\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
