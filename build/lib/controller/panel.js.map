{
  "version": 3,
  "sources": ["../../../src/lib/controller/panel.ts"],
  "sourcesContent": ["import { PanelSend } from './panel-message';\n\nimport { Screensaver } from '../pages/screensaver';\nimport * as Types from '../types/types';\nimport * as pages from '../types/pages';\nimport type { Controller } from './controller';\nimport { BaseClass, type AdapterClassDefinition } from './library';\nimport type { callbackMessageType } from '../classes/mqtt';\nimport * as definition from '../const/definition';\nimport { type Page, type PageConfigAll } from '../classes/Page';\nimport { type PageInterface } from '../classes/PageInterface';\nimport { PageMedia } from '../pages/pageMedia';\nimport type { IClientPublishOptions } from 'mqtt';\nimport type { StatesControler } from './states-controller';\nimport { PageGrid } from '../pages/pageGrid';\nimport { Navigation, type NavigationConfig } from '../classes/navigation';\nimport { PageThermo } from '../pages/pageThermo';\nimport { PagePower } from '../pages/pagePower';\nimport type { PageItem } from '../pages/pageItem';\nimport { PageEntities } from '../pages/pageEntities';\nimport { PageNotify } from '../pages/pageNotification';\nimport { systemNavigation, systemPages } from '../templates/system-templates';\nimport { PageAlarm } from '../pages/pageAlarm';\nimport { PageQR } from '../pages/pageQR';\nimport { Dataitem } from './data-item';\nimport { Color, type RGB } from '../const/Color';\nimport { PageSchedule } from '../pages/pageSchedule';\nimport { cardTemplates } from '../templates/card';\nimport { deepAssign, getRegExp, isVersionGreaterOrEqual } from '../const/tools';\nimport { PageChartBar } from '../pages/pageChartBar';\nimport { PageChartLine } from '../pages/pageChartLine';\nimport axios from 'axios';\nimport { PageThermo2 } from '../pages/pageThermo2';\n\nexport interface panelConfigPartial extends Partial<panelConfigTop> {\n    format?: Partial<Intl.DateTimeFormatOptions>;\n    controller: Controller;\n    topic: string;\n    name: string;\n    buttons: {\n        left: Types.ConfigButtonFunction;\n        right: Types.ConfigButtonFunction;\n    } | null;\n    friendlyName?: string;\n    pages: PageConfigAll[];\n    navigation: NavigationConfig['navigationConfig'];\n    updated: boolean;\n}\n\nconst DefaultOptions = {\n    format: {\n        weekday: 'short',\n        month: 'short',\n        year: 'numeric',\n        day: 'numeric',\n    },\n    CustomFormat: '',\n    locale: 'de-DE',\n    pages: [],\n};\n\ntype panelConfigTop = {\n    CustomFormat: string;\n    locale: Intl.LocalesArgument;\n    timeout: number;\n    dimLow: number;\n    dimHigh: number;\n};\n\nexport class Panel extends BaseClass {\n    private loopTimeout: ioBroker.Timeout | undefined;\n    private pages: (Page | undefined)[] = [];\n    private _activePage: Page | undefined = undefined;\n    private data: Record<string, any> = {};\n    private blockStartup: ioBroker.Timeout | undefined = null;\n    private _isOnline: boolean = false;\n    options: panelConfigPartial;\n    flashing: boolean = false;\n    public screenSaver: Screensaver | undefined;\n    public lastCard: string = '';\n    public notifyIndex: number = -1;\n    public initDone: boolean = false;\n    public lightPopupV2: boolean = true; //  Enable Light Popup v2, created in 2025.\n    public overrideLightPopup: boolean = true; //  Override light popup config type.\n    public hideCards: boolean = false;\n\n    readonly buttons: panelConfigPartial['buttons'];\n    readonly navigation: Navigation;\n    readonly format: Partial<Intl.DateTimeFormatOptions>;\n    readonly controller: Controller;\n    readonly topic: string;\n    readonly reivCallbacks: callbackMessageType[] = [];\n    readonly panelSend: PanelSend;\n    readonly statesControler: StatesControler;\n    readonly CustomFormat: string;\n    readonly sendToTasmota: (topic: string, payload: string, opt?: IClientPublishOptions) => void = () => {};\n\n    timeout: number;\n    dim: DimConfig = {\n        standby: definition.genericStateObjects.panel.panels.cmd.dim.standby.common.def,\n        active: definition.genericStateObjects.panel.panels.cmd.dim.active.common.def,\n        dayMode: definition.genericStateObjects.panel.panels.cmd.dim.dayMode.common.def,\n        nightStandby: definition.genericStateObjects.panel.panels.cmd.dim.nightStandby.common.def,\n        nightActive: definition.genericStateObjects.panel.panels.cmd.dim.nightActive.common.def,\n        nightHourStart: definition.genericStateObjects.panel.panels.cmd.dim.nightHourStart.common.def,\n        nightHourEnd: definition.genericStateObjects.panel.panels.cmd.dim.nightHourEnd.common.def,\n        schedule: definition.genericStateObjects.panel.panels.cmd.dim.schedule.common.def,\n    };\n    screenSaverDoubleClick: boolean = true;\n    detach: { left: boolean; right: boolean } = { left: false, right: false };\n    public persistentPageItems: Record<string, PageItem> = {};\n\n    info: Types.PanelInfo = {\n        nspanel: {\n            displayVersion: '',\n            model: '',\n            bigIconLeft: false,\n            bigIconRight: false,\n            onlineVersion: '',\n            firmwareUpdate: 100,\n            berryDriverVersion: 0,\n            berryDriverVersionOnline: 0,\n            currentPage: '',\n        },\n        tasmota: {\n            firmwareversion: '',\n            onlineVersion: '',\n            safeboot: false,\n            mqttClient: '',\n            net: {\n                Hostname: '',\n                IPAddress: '',\n                Gateway: '',\n                Subnetmask: '',\n                DNSServer1: '',\n                DNSServer2: '',\n                Mac: '',\n                IP6Global: '',\n                IP6Local: '',\n                Ethernet: {\n                    Hostname: '',\n                    IPAddress: '',\n                    Gateway: '',\n                    Subnetmask: '',\n                    DNSServer1: '',\n                    DNSServer2: '',\n                    Mac: '',\n                    IP6Global: '',\n                    IP6Local: '',\n                },\n                Webserver: 0,\n                HTTP_API: 0,\n                WifiConfig: 0,\n                WifiPower: 0,\n            },\n            uptime: '',\n            sts: {\n                Time: '',\n                Uptime: '',\n                UptimeSec: 0,\n                Heap: 0,\n                SleepMode: '',\n                Sleep: 0,\n                LoadAvg: 0,\n                MqttCount: 0,\n                Berry: {\n                    HeapUsed: 0,\n                    Objects: 0,\n                },\n                POWER1: '',\n                POWER2: '',\n                Wifi: {\n                    AP: 0,\n                    SSId: '',\n                    BSSId: '',\n                    Channel: 0,\n                    Mode: '',\n                    RSSI: 0,\n                    Signal: 0,\n                    LinkCount: 0,\n                    Downtime: '',\n                },\n            },\n        },\n    };\n\n    meetsVersion(version: string): boolean {\n        if (this.info?.nspanel?.displayVersion) {\n            return isVersionGreaterOrEqual(this.info.nspanel.displayVersion, version);\n        }\n        return false;\n    }\n\n    constructor(adapter: AdapterClassDefinition, options: panelConfigPartial) {\n        super(adapter, options.name, options.friendlyName ?? options.name);\n        this.panelSend = new PanelSend(adapter, {\n            name: `${this.friendlyName}-SendClass`,\n            mqttClient: options.controller.mqttClient,\n            topic: options.topic,\n            panel: this,\n        });\n        this.info.tasmota.mqttClient = this.library.cleandp(this.name);\n        this.options = options;\n        this.timeout = options.timeout || 15;\n        this.buttons = options.buttons;\n        this.CustomFormat = options.CustomFormat ?? '';\n        this.format = { ...DefaultOptions.format, ...(options.format as any) };\n        this.controller = options.controller;\n        this.topic = options.topic;\n        if (typeof this.panelSend.addMessage === 'function') {\n            this.sendToPanelClass = this.panelSend.addMessage;\n        }\n        if (typeof this.panelSend.addMessageTasmota === 'function') {\n            this.sendToTasmota = this.panelSend.addMessageTasmota;\n        }\n        this.info.tasmota.onlineVersion = this.controller.globalPanelInfo.availableTasmotaFirmwareVersion;\n        this.info.nspanel.onlineVersion = this.controller.globalPanelInfo.availableTftFirmwareVersion;\n        // remove unused pages except screensaver - pages must be in navigation\n\n        this.statesControler = options.controller.statesControler;\n\n        options.pages = options.pages.filter(b => {\n            if (\n                b.config?.card === 'screensaver' ||\n                b.config?.card === 'screensaver2' ||\n                b.config?.card === 'screensaver3'\n            ) {\n                return true;\n            }\n            if (options.navigation.find(c => c && c.name === b.uniqueID)) {\n                return true;\n            }\n            return false;\n        });\n        options.pages = options.pages.concat(systemPages);\n        options.navigation = (options.navigation || []).concat(systemNavigation);\n\n        let scsFound = 0;\n        for (let a = 0; a < options.pages.length; a++) {\n            const pageConfig = options.pages[a] ? Panel.getPage(options.pages[a], this) : options.pages[a];\n\n            if (!pageConfig || !pageConfig.config) {\n                continue;\n            }\n            const pmconfig = {\n                card: pageConfig.config.card,\n                panel: this,\n                id: String(a),\n                name: `${pageConfig.uniqueID}`,\n                alwaysOn: pageConfig.alwaysOn,\n                adapter: this.adapter,\n                hidden: pageConfig.hidden || false,\n                dpInit: pageConfig.dpInit,\n            };\n            const Page = this.newPage(pmconfig, pageConfig);\n            if (Page) {\n                this.pages[a] = Page;\n                if (Page instanceof Screensaver) {\n                    this.screenSaver = Page;\n                    scsFound += 1;\n                }\n            }\n        }\n        if (scsFound === 0) {\n            throw new Error('no screensaver found! Stop!');\n        }\n        const navConfig: NavigationConfig = {\n            adapter: this.adapter,\n            panel: this,\n            navigationConfig: options.navigation,\n        };\n        this.navigation = new Navigation(navConfig);\n    }\n\n    newPage(pmconfig: PageInterface, pageConfig: pages.PageBaseConfig): Page | undefined {\n        switch (pageConfig.config?.card) {\n            case 'cardChart': {\n                pageConfig = Panel.getPage(pageConfig, this);\n                return new PageChartBar(pmconfig, pageConfig);\n            }\n            case 'cardLChart': {\n                pageConfig = Panel.getPage(pageConfig, this);\n                return new PageChartLine(pmconfig, pageConfig);\n            }\n            case 'cardEntities': {\n                pageConfig = Panel.getPage(pageConfig, this);\n                return new PageEntities(pmconfig, pageConfig);\n            }\n            case 'cardSchedule': {\n                pageConfig = Panel.getPage(pageConfig, this);\n                return new PageSchedule(pmconfig, pageConfig);\n            }\n            case 'cardGrid3':\n            case 'cardGrid2':\n            case 'cardGrid': {\n                pageConfig = Panel.getPage(pageConfig, this);\n                return new PageGrid(pmconfig, pageConfig);\n            }\n\n            case 'cardThermo': {\n                pageConfig = Panel.getPage(pageConfig, this);\n                return new PageThermo(pmconfig, pageConfig);\n            }\n            case 'cardThermo2': {\n                pageConfig = Panel.getPage(pageConfig, this);\n                return new PageThermo2(pmconfig, pageConfig);\n            }\n            case 'cardMedia': {\n                pageConfig = Panel.getPage(pageConfig, this);\n                return new PageMedia(pmconfig, pageConfig);\n            }\n\n            case 'cardQR': {\n                pageConfig = Panel.getPage(pageConfig, this);\n                return new PageQR(pmconfig, pageConfig);\n            }\n            case 'cardAlarm': {\n                pageConfig = Panel.getPage(pageConfig, this);\n                return new PageAlarm(pmconfig, pageConfig);\n            }\n            case 'cardPower': {\n                pageConfig = Panel.getPage(pageConfig, this);\n                return new PagePower(pmconfig, pageConfig);\n            }\n            case 'popupNotify2':\n            case 'popupNotify': {\n                pageConfig = Panel.getPage(pageConfig, this);\n                return new PageNotify(pmconfig, pageConfig);\n            }\n            case 'screensaver':\n            case 'screensaver2':\n            case 'screensaver3': {\n                const ssconfig: PageInterface = {\n                    card: pageConfig.config.card,\n                    panel: this,\n                    id: pmconfig.id,\n                    name: `${pageConfig.uniqueID}`,\n                    adapter: this.adapter,\n                    dpInit: '',\n                };\n\n                return new Screensaver(ssconfig, pageConfig);\n            }\n            default: {\n                throw new Error(`Page config is missing card property for page ${pageConfig.uniqueID}`);\n            }\n        }\n    }\n\n    init = async (): Promise<void> => {\n        if (this.unload || this.adapter.unload) {\n            return;\n        }\n        this.log.debug(`Panel ${this.name} is initialised!`);\n        await this.controller.mqttClient.subscribe(`${this.topic}/tele/#`, this.onMessage);\n        await this.controller.mqttClient.subscribe(`${this.topic}/stat/#`, this.onMessage);\n        this.isOnline = false;\n        const channelObj = this.library.cloneObject(\n            definition.genericStateObjects.panel.panels._channel,\n        ) as ioBroker.ChannelObject;\n\n        channelObj.common.name = this.friendlyName;\n        channelObj.native = {\n            topic: this.topic,\n            tasmotaName: this.friendlyName,\n            name: this.name,\n        };\n\n        // remove unused dim states\n        if (await this.adapter.getStateAsync(`panels.${this.name}.cmd.dim.delay`)) {\n            await this.adapter.delObjectAsync(`panels.${this.name}.cmd.dim.delay`);\n        }\n\n        await this.library.writedp(`panels.${this.name}`, undefined, channelObj);\n        await this.library.writedp(\n            `panels.${this.name}.cmd`,\n            undefined,\n            definition.genericStateObjects.panel.panels.cmd._channel,\n        );\n        await this.library.writedp(\n            `panels.${this.name}.cmd.dim`,\n            undefined,\n            definition.genericStateObjects.panel.panels.cmd.dim._channel,\n        );\n\n        await this.library.writedp(\n            `panels.${this.name}.cmd.screenSaver`,\n            undefined,\n            definition.genericStateObjects.panel.panels.cmd.screenSaver._channel,\n        );\n\n        await this.library.writedp(\n            `panels.${this.name}.buttons`,\n            undefined,\n            definition.genericStateObjects.panel.panels.buttons._channel,\n        );\n        await this.library.writedp(\n            `panels.${this.name}.buttons.left`,\n            true,\n            definition.genericStateObjects.panel.panels.buttons.left,\n        );\n\n        await this.library.writedp(\n            `panels.${this.name}.buttons.right`,\n            true,\n            definition.genericStateObjects.panel.panels.buttons.right,\n        );\n        const keys = Object.keys(this.dim);\n        for (const key of keys) {\n            if (!definition.isDimConfigKey(key)) {\n                continue;\n            }\n            const state = this.library.readdb(`panels.${this.name}.cmd.dim.${key}`);\n            if (state && state.val != null && definition.isDimValueForKey(key, state.val)) {\n                (this.dim as any)[key] = state.val;\n            }\n            await this.library.writedp(\n                `panels.${this.name}.cmd.dim.${key}`,\n                this.dim[key],\n                definition.genericStateObjects.panel.panels.cmd.dim[key],\n            );\n        }\n\n        let state = this.library.readdb(`panels.${this.name}.cmd.screenSaver.doubleClick`);\n        if (state && state.val != null) {\n            this.screenSaverDoubleClick = !!state.val;\n        }\n        await this.library.writedp(\n            `panels.${this.name}.cmd.screenSaver.doubleClick`,\n            this.screenSaverDoubleClick,\n            definition.genericStateObjects.panel.panels.cmd.screenSaver.doubleClick,\n        );\n\n        if (state && !state.val) {\n            await this.library.writedp(\n                `panels.${this.name}.buttons.screensaverGesture`,\n                0,\n                definition.genericStateObjects.panel.panels.buttons.screensaverGesture,\n            );\n        } else {\n            await this.library.writedp(\n                `panels.${this.name}.buttons.screensaverGesture`,\n                undefined,\n                definition.genericStateObjects.panel.panels.buttons.screensaverGesture,\n            );\n        }\n\n        state = this.library.readdb(`panels.${this.name}.cmd.hideCards`);\n        if (state && state.val != null) {\n            this.hideCards = !!state.val;\n        }\n        await this.library.writedp(\n            `panels.${this.name}.cmd.hideCards`,\n            this.hideCards,\n            definition.genericStateObjects.panel.panels.cmd.hideCards,\n        );\n\n        // Initialize buzzer state\n        await this.library.writedp(\n            `panels.${this.name}.cmd.buzzer`,\n            '',\n            definition.genericStateObjects.panel.panels.cmd.buzzer,\n        );\n\n        state = this.library.readdb(`panels.${this.name}.cmd.detachRight`);\n        if (state && state.val != null) {\n            this.detach.right = !!state.val;\n        }\n        state = this.library.readdb(`panels.${this.name}.cmd.detachLeft`);\n        if (state && state.val != null) {\n            this.detach.left = !!state.val;\n        }\n        await this.library.writedp(\n            `panels.${this.name}.cmd.detachRight`,\n            this.detach.right,\n            definition.genericStateObjects.panel.panels.cmd.detachRight,\n        );\n        await this.library.writedp(\n            `panels.${this.name}.cmd.detachLeft`,\n            this.detach.left,\n            definition.genericStateObjects.panel.panels.cmd.detachLeft,\n        );\n        state = this.library.readdb(`panels.${this.name}.cmd.screenSaver.timeout`);\n        if (state) {\n            this.timeout = parseInt(String(state.val));\n        }\n        await this.library.writedp(\n            `panels.${this.name}.cmd.screenSaver.timeout`,\n            this.timeout,\n            definition.genericStateObjects.panel.panels.cmd.screenSaver.timeout,\n        );\n\n        let val: any = undefined;\n        state = this.library.readdb(`panels.${this.name}.cmd.screenSaver.headingNotification`);\n        if (state && typeof state.val === 'string' && this.screenSaver) {\n            this.screenSaver.headingNotification = state.val;\n            val = state.val;\n        }\n        await this.library.writedp(\n            `panels.${this.name}.cmd.screenSaver.headingNotification`,\n            val,\n            definition.genericStateObjects.panel.panels.cmd.screenSaver.headingNotification,\n        );\n\n        val = undefined;\n        state = this.library.readdb(`panels.${this.name}.cmd.screenSaver.textNotification`);\n        if (state && typeof state.val === 'string' && this.screenSaver) {\n            this.screenSaver.textNotification = state.val;\n            val = state.val;\n        }\n        await this.library.writedp(\n            `panels.${this.name}.cmd.screenSaver.textNotification`,\n            val,\n            definition.genericStateObjects.panel.panels.cmd.screenSaver.textNotification,\n        );\n        val = undefined;\n        state = this.library.readdb(`panels.${this.name}.cmd.screenSaver.activateNotification`);\n        if (state && state.val != null && this.screenSaver) {\n            this.screenSaver.customNotification = !!state.val;\n            val = !!state.val;\n        }\n\n        await this.library.writedp(\n            `panels.${this.name}.cmd.screenSaver.activateNotification`,\n            !!val,\n            definition.genericStateObjects.panel.panels.cmd.screenSaver.activateNotification,\n        );\n\n        state = this.library.readdb(`panels.${this.name}.info.nspanel.firmwareUpdate`);\n        await this.library.writedp(\n            `panels.${this.name}.info.nspanel.firmwareUpdate`,\n            state && typeof state.val === 'number' ? (state.val >= 99 ? 100 : state.val) : undefined,\n            definition.genericStateObjects.panel.panels.info.nspanel.firmwareUpdate,\n        );\n        for (const id in definition.InternalStates.panel) {\n            const obj = definition.InternalStates.panel[id as keyof typeof definition.InternalStates.panel];\n            await this.statesControler.setInternalState(\n                `${this.name}/${id}`,\n                obj.val,\n                obj.ack,\n                obj.common,\n                obj.noTrigger ? undefined : this.onInternalCommand,\n            );\n        }\n\n        for (const page of this.pages) {\n            if (page && page.name) {\n                if (this.adapter.config.debugLogPages) {\n                    this.log.debug(\n                        `Initialisation of page ${page.name} - card: ${page.card} - pageItems: ${(page.pageItemConfig || []).length}`,\n                    );\n                }\n                await page.init();\n            } else {\n                this.log.error('Page failed or has no name!');\n            }\n        }\n\n        this.navigation.init();\n\n        //this.adapter.subscribeStates(`panels.${this.name}.cmd.*`);\n        //this.adapter.subscribeStates(`panels.${this.name}.alarm.*`);\n        if (this.adapter.config.debugLogPages) {\n            this.log.debug(`Panel ${this.name} is initialised!`);\n        }\n\n        {\n            const currentPage = this.library.readdb(`panels.${this.name}.cmd.mainNavigationPoint`);\n            if (currentPage && currentPage.val) {\n                this.navigation.setMainPageByName(String(currentPage.val));\n            }\n\n            definition.genericStateObjects.panel.panels.cmd.mainNavigationPoint.common.states =\n                this.navigation.buildCommonStates();\n            const page = this.navigation.getCurrentMainPoint();\n            await this.library.writedp(\n                `panels.${this.name}.cmd.mainNavigationPoint`,\n                page,\n                definition.genericStateObjects.panel.panels.cmd.mainNavigationPoint,\n            );\n        }\n\n        await this.adapter.delay(100);\n\n        const currentScreensaver = this.library.readdb(`panels.${this.name}.cmd.screenSaver.layout`);\n\n        const scs: Page[] = this.pages.filter(\n            a => a && (a.card === 'screensaver' || a.card === 'screensaver2' || a.card === 'screensaver3'),\n        ) as Page[];\n        if (currentScreensaver && currentScreensaver.val != null) {\n            if (scs && scs[0]) {\n                this.screenSaver = scs[0] as Screensaver;\n                if (pages.isScreenSaverModeAsNumber(currentScreensaver.val)) {\n                    this.screenSaver.overwriteModel(currentScreensaver.val, true);\n                }\n            }\n        }\n        await this.library.writedp(\n            `panels.${this.name}.cmd.screenSaver.layout`,\n            this.screenSaver && this.screenSaver.mode ? Screensaver.mapModeToNumber(this.screenSaver.mode) : 0,\n            definition.genericStateObjects.panel.panels.cmd.screenSaver.layout,\n        );\n        state = this.library.readdb(`panels.${this.name}.cmd.screenSaver.rotationTime`);\n        let temp: any = 0;\n        if (state && typeof state.val === 'number') {\n            temp = state.val === 0 ? state.val : state.val < 3 ? 3 : state.val > 3600 ? 3600 : state.val;\n            if (this.screenSaver) {\n                this.screenSaver.rotationTime = temp * 1000;\n            }\n        }\n        await this.library.writedp(\n            `panels.${this.name}.cmd.screenSaver.rotationTime`,\n            temp,\n            definition.genericStateObjects.panel.panels.cmd.screenSaver.rotationTime,\n        );\n\n        state = this.library.readdb(`panels.${this.name}.cmd.screenSaver.infoIcon`);\n        if (state && typeof state.val === 'string' && this.screenSaver) {\n            this.screenSaver.infoIcon = state.val;\n        }\n        await this.library.writedp(\n            `panels.${this.name}.cmd.screenSaver.infoIcon`,\n            this.screenSaver?.infoIcon ?? '',\n            definition.genericStateObjects.panel.panels.cmd.screenSaver.infoIcon,\n        );\n\n        if (this.buttons && this.screenSaver) {\n            const entries = Object.entries(this.buttons) as [\n                keyof typeof this.buttons,\n                (typeof this.buttons)[keyof typeof this.buttons],\n            ][];\n\n            const inits: Promise<void>[] = [];\n\n            for (const [key, button] of entries) {\n                if (!button) {\n                    continue;\n                }\n\n                switch (button.mode) {\n                    case 'page':\n                        break;\n\n                    case 'switch':\n                    case 'button': {\n                        if (typeof button.state === 'string') {\n                            const di = new Dataitem(\n                                this.adapter,\n                                { type: 'state', dp: button.state },\n                                this.screenSaver,\n                                this.statesControler,\n                            );\n                            button.state = di;\n\n                            inits.push(\n                                di.isValidAndInit().then(ok => {\n                                    if (!ok) {\n                                        if (this.buttons) {\n                                            this.buttons[key] = null;\n                                        }\n                                    }\n                                }),\n                            );\n                        }\n                        break;\n                    }\n                }\n            }\n\n            await Promise.all(inits);\n        }\n        state = this.library.readdb(`panels.${this.name}.info.nspanel.bigIconLeft`);\n        this.info.nspanel.bigIconLeft = state ? !!state.val : false;\n        state = this.library.readdb(`panels.${this.name}.info.nspanel.bigIconRight`);\n        this.info.nspanel.bigIconRight = state ? !!state.val : false;\n        this.restartLoops();\n    };\n\n    private sendToPanelClass: (\n        payload: string,\n        ackForType: boolean,\n        force?: boolean,\n        opt?: IClientPublishOptions,\n    ) => void = () => {};\n    protected sendToPanel: (\n        payload: string,\n        ackForType: boolean,\n        force?: boolean,\n        opt?: IClientPublishOptions,\n    ) => void = (payload: string, ackForType: boolean, force?: boolean, opt?: IClientPublishOptions) => {\n        this.sendToPanelClass(payload, ackForType, force, opt);\n    };\n    /**\n     * Activate a page or toggle sleep on the current page.\n     *\n     * Behavior:\n     * - If `_page` is a boolean: `true` wakes the current page, `false` puts it to sleep.\n     * - If `_page` is a Page: activates that page; `_notSleep === true` keeps it awake, otherwise it starts asleep.\n     *\n     * @param _page Target page or boolean toggle for current page\n     * @param _notSleep When `_page` is a Page, `true` means not sleeping (visible), `false` means sleeping\n     * @returns Promise<void>\n     */\n    async setActivePage(_page?: Page | boolean, _notSleep?: boolean): Promise<void> {\n        if (_page === undefined) {\n            return;\n        }\n\n        let targetPage: Page | undefined = this._activePage;\n        let targetSleep = false;\n\n        if (typeof _page === 'boolean') {\n            if (!this._activePage) {\n                return;\n            }\n            targetSleep = !_page;\n        } else {\n            targetPage = _page;\n            targetSleep = _notSleep ?? false;\n        }\n\n        if (!this._activePage) {\n            if (!targetPage) {\n                return;\n            }\n            targetPage.setLastPage(undefined);\n            if (!targetSleep) {\n                await targetPage.setVisibility(true);\n            }\n            targetPage.sleep = targetSleep;\n            this._activePage = targetPage;\n            return;\n        }\n\n        if (targetPage && targetPage !== this._activePage) {\n            await this._activePage.setVisibility(false);\n            targetPage.setLastPage(this._activePage);\n            if (!targetSleep) {\n                await targetPage.setVisibility(true);\n            }\n            targetPage.sleep = targetSleep;\n            this._activePage = targetPage;\n            return;\n        }\n\n        if (targetSleep !== this._activePage.sleep) {\n            this._activePage.sleep = targetSleep;\n            if (!targetSleep) {\n                this._activePage.sendType(true);\n                await this._activePage.setVisibility(true);\n            }\n\n            return;\n        }\n        if (!targetSleep) {\n            this.log.warn(\n                `setActivePage called but nothing changed! Resending active page to panel. Page: ${\n                    this._activePage.name\n                } - Sleep: ${this._activePage.sleep}`,\n            );\n\n            this._activePage.sendType(true);\n            await this._activePage.update();\n        }\n    }\n    getActivePage(): Page {\n        if (!this._activePage) {\n            throw new Error(`No active page here, check code!`);\n        }\n        return this._activePage;\n    }\n    get isOnline(): boolean {\n        return this._isOnline;\n    }\n    set isOnline(s: boolean) {\n        if (this.unload && s) {\n            return;\n        }\n        if (s !== this._isOnline) {\n            void this.library.writedp(\n                `panels.${this.name}.info.isOnline`,\n                s,\n                definition.genericStateObjects.panel.panels.info.isOnline,\n            );\n            if (s) {\n                this.log.info('is online!');\n            } else {\n                this._activePage && void this._activePage.setVisibility(false);\n                this.restartLoops();\n                this.log.warn('is offline!');\n            }\n        }\n        this._isOnline = s;\n    }\n    async isValid(): Promise<true> {\n        return true;\n    }\n\n    registerOnMessage(fn: callbackMessageType): void {\n        if (this.reivCallbacks.indexOf(fn) === -1) {\n            this.reivCallbacks.push(fn);\n        }\n    }\n    onMessage: callbackMessageType = async (topic: string, message: string) => {\n        for (const fn of this.reivCallbacks) {\n            if (fn) {\n                await fn(topic, message);\n            }\n        }\n\n        if (topic.endsWith(definition.ReiveTopicAppendix)) {\n            const event: Types.IncomingEvent | null = this.convertToEvent(message);\n            if (event) {\n                await this.HandleIncomingMessage(event);\n            } else if (message) {\n                let msg: any = null;\n                try {\n                    msg = JSON.parse(message);\n                } catch {\n                    this.log.warn(`Receive a broken msg from mqtt: ${msg}`);\n                }\n                if (!msg) {\n                    return;\n                }\n                if ('Flashing' in msg) {\n                    this.isOnline = false;\n                    this.flashing = msg.Flashing.complete < 99;\n                    this.log.info(`Flashing: ${msg.Flashing.complete}%`);\n                    await this.library.writedp(\n                        `panels.${this.name}.info.nspanel.firmwareUpdate`,\n                        msg.Flashing.complete >= 99 ? 100 : msg.Flashing.complete,\n                        definition.genericStateObjects.panel.panels.info.nspanel.firmwareUpdate,\n                    );\n                    return;\n                } else if ('nlui_driver_version' in msg) {\n                    this.info.nspanel.berryDriverVersion = parseInt(msg.nlui_driver_version);\n                    await this.library.writedp(\n                        `panels.${this.name}.info.nspanel.berryDriverVersion`,\n                        this.info.nspanel.berryDriverVersion,\n                        definition.genericStateObjects.panel.panels.info.nspanel.berryDriverVersion,\n                    );\n                    if (this.unload || this.adapter.unload) {\n                        return;\n                    }\n                    this.adapter.setTimeout(async () => {\n                        let result: axios.AxiosResponse<any, any> | undefined = undefined;\n                        try {\n                            result = await axios.get(\n                                'https://raw.githubusercontent.com/ticaki/ioBroker.nspanel-lovelace-ui/main/json/version.json',\n                            );\n                            if (!result || !result.data) {\n                                return;\n                            }\n                            const version = this.adapter.config.useBetaTFT\n                                ? result.data[`berry-beta`].split('_')[0]\n                                : result.data.berry.split('_')[0];\n                            if (\n                                version != this.info.nspanel.berryDriverVersion &&\n                                this.info.nspanel.berryDriverVersion != -1\n                            ) {\n                                const url =\n                                    `http://${this.info.tasmota.net.IPAddress}/cm?` +\n                                    `${this.adapter.config.useTasmotaAdmin ? `user=admin&password=${this.adapter.config.tasmotaAdminPassword}` : ``}` +\n                                    `&cmnd=Backlog UrlFetch https://raw.githubusercontent.com/ticaki/ioBroker.nspanel-lovelace-ui/main/tasmota/berry/${version}/autoexec.be; Restart 1`;\n                                this.log.info(\n                                    `Automatic update of the berry driver version from ${this.info.nspanel.berryDriverVersion} to ${version} on tasmota with IP ${this.info.tasmota.net.IPAddress} and  ${this.info.tasmota.net.Hostname}.`,\n                                );\n                                await axios.get(url);\n                            }\n                        } catch {\n                            // nothing\n                        }\n                    }, 1);\n                    return;\n                }\n            }\n        } else if (topic.endsWith('/tele/LWT')) {\n            if (message === 'Offline') {\n                //this.log.warn('LWT shows offline!');\n                // deaktiviert, weils zu falschen offline meldungen bei 1 nutzer kommt\n                //this.isOnline = false;\n            }\n        } else if (topic.endsWith('/tele/INFO1')) {\n            this.restartLoops();\n        } else {\n            const command = (topic.match(/[0-9a-zA-Z]+?\\/[0-9a-zA-Z]+$/g) ||\n                [])[0] as Types.TasmotaIncomingTopics | null;\n            if (command) {\n                switch (command) {\n                    case 'stat/POWER2': {\n                        await this.library.writedp(\n                            `panels.${this.name}.cmd.power2`,\n                            message === 'ON',\n                            definition.genericStateObjects.panel.panels.cmd.power2,\n                        );\n                        await this.statesControler.setInternalState(`${this.name}/cmd/power2`, message === 'ON', true);\n                        break;\n                    }\n                    case 'stat/POWER1': {\n                        await this.library.writedp(\n                            `panels.${this.name}.cmd.power1`,\n                            message === 'ON',\n                            definition.genericStateObjects.panel.panels.cmd.power1,\n                        );\n                        await this.statesControler.setInternalState(`${this.name}/cmd/power1`, message === 'ON', true);\n                        break;\n                    }\n                    case 'stat/STATUS0': {\n                        const data = JSON.parse(message) as Types.STATUS0;\n                        if (this.name !== this.library.cleandp(data.StatusNET.Mac, false, true)) {\n                            this.log.error(`Receive wrong mac address ${data.StatusNET.Mac}! Update ur config!`);\n                        }\n\n                        const o = await this.adapter.getForeignObjectAsync(`system.adapter.${this.adapter.namespace}`);\n                        if (o && o.native) {\n                            if (this.name == this.library.cleandp(data.StatusNET.Mac, false, true)) {\n                                const index = o.native.panels.findIndex((a: any) => a.id === this.name);\n                                const ip = data.StatusNET.IPAddress;\n                                if (index !== -1 && o.native.panels[index].ip != ip) {\n                                    o.native.panels[index].ip = ip;\n                                    await this.adapter.setForeignObjectAsync(o._id, o);\n                                }\n                            }\n                        }\n\n                        await this.library.writedp(\n                            `panels.${this.name}.info`,\n                            undefined,\n                            definition.genericStateObjects.panel.panels.info._channel,\n                        );\n                        await this.library.writedp(\n                            `panels.${this.name}.info.status`,\n                            message,\n                            definition.genericStateObjects.panel.panels.info.status,\n                        );\n                        this.info.tasmota.mqttClient = data.StatusMQT.MqttClient;\n                        this.info.tasmota.net = data.StatusNET;\n                        this.info.tasmota.firmwareversion = data.StatusFWR.Version;\n                        this.info.tasmota.safeboot = data.StatusFWR.Version.includes('Safeboot');\n                        this.info.tasmota.uptime = data.StatusSTS.Uptime;\n                        this.info.tasmota.sts = data.StatusSTS;\n\n                        await this.writeInfo();\n                        break;\n                    }\n                    default: {\n                        if (this.adapter.config.debugLogMqtt) {\n                            this.log.debug(`Receive other message ${topic} with ${message}`);\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    sendRules(): void {\n        this.sendToTasmota(\n            `${this.topic}/cmnd/Rule3`,\n            `ON CustomSend DO RuleTimer3 120 ENDON ON Rules#Timer=3 DO CustomSend pageType~pageStartup ENDON${\n                this.detach.left\n                    ? ` ON Button1#state do Publish ${this.topic}/tele/RESULT {\"CustomRecv\":\"event,button1\"} ENDON`\n                    : ''\n            }${\n                this.detach.right\n                    ? ` ON Button2#state do Publish ${this.topic}/tele/RESULT {\"CustomRecv\":\"event,button2\"} ENDON`\n                    : ''\n            }`,\n        );\n        this.sendToTasmota(`${this.topic}/cmnd/Rule3`, '1');\n    }\n\n    async onStateChange(id: string, state: Types.nsPanelState): Promise<void> {\n        if (state.ack) {\n            return;\n        }\n        if (id.split('.')[1] === this.name) {\n            const cmd = id.replace(`panels.${this.name}.cmd.`, '');\n            switch (cmd) {\n                case 'power1': {\n                    this.sendToTasmota(`${this.topic}/cmnd/POWER1`, state.val ? 'ON' : 'OFF');\n                    break;\n                }\n                case 'power2': {\n                    this.sendToTasmota(`${this.topic}/cmnd/POWER2`, state.val ? 'ON' : 'OFF');\n                    break;\n                }\n                case 'mainNavigationPoint': {\n                    const v = state.val;\n                    if (typeof v === 'string') {\n                        this.navigation.setMainPageByName(v ? v : 'main');\n                        await this.library.writedp(`panels.${this.name}.cmd.mainNavigationPoint`, v ? v : 'main');\n                    }\n                    break;\n                }\n                case 'goToNavigationPoint': {\n                    if (typeof state.val === 'string') {\n                        await this.navigation.setTargetPageByName(state.val ? String(state.val) : 'main');\n                    }\n                    break;\n                }\n                case 'screenSaver.timeout': {\n                    if (state && state.val != null && typeof state.val === 'number') {\n                        await this.statesControler.setInternalState(\n                            `${this.name}/cmd/screenSaverTimeout`,\n\n                            parseInt(String(state.val)),\n                            false,\n                        );\n                    }\n                    break;\n                }\n                case 'dim.standby': {\n                    if (state && state.val != null && typeof state.val === 'number') {\n                        await this.statesControler.setInternalState(\n                            `${this.name}/cmd/dimStandby`,\n\n                            parseInt(String(state.val)),\n                            false,\n                        );\n                    }\n                    break;\n                }\n                case 'dim.active': {\n                    if (state && state.val != null && typeof state.val === 'number') {\n                        await this.statesControler.setInternalState(\n                            `${this.name}/cmd/dimActive`,\n\n                            parseInt(String(state.val)),\n                            false,\n                        );\n                    }\n                    break;\n                }\n                case 'dim.dayMode': {\n                    if (this.dim.schedule) {\n                        this.log.warn('Dim schedule is active - User input ignored!');\n                    } else {\n                        this.dim.dayMode = !!state.val;\n                        this.sendDimmode();\n                    }\n                    await this.library.writedp(\n                        `panels.${this.name}.cmd.dim.dayMode`,\n                        this.dim.dayMode,\n                        definition.genericStateObjects.panel.panels.cmd.dim.dayMode,\n                    );\n                    break;\n                }\n                case 'dim.schedule': {\n                    this.dim.schedule = !!state.val;\n\n                    if (this.dim.schedule) {\n                        this.sendDimmode();\n                    }\n\n                    await this.library.writedp(\n                        `panels.${this.name}.cmd.dim.schedule`,\n                        this.dim.schedule,\n                        definition.genericStateObjects.panel.panels.cmd.dim.schedule,\n                    );\n                    break;\n                }\n                case 'dim.nightActive': {\n                    if (state && state.val != null && typeof state.val === 'number') {\n                        await this.statesControler.setInternalState(\n                            `${this.name}/cmd/dimNightActive`,\n\n                            parseInt(String(state.val)),\n                            false,\n                        );\n                    }\n                    break;\n                }\n                case 'dim.nightStandby': {\n                    if (state && state.val != null && typeof state.val === 'number') {\n                        await this.statesControler.setInternalState(\n                            `${this.name}/cmd/dimNightStandby`,\n\n                            parseInt(String(state.val)),\n                            false,\n                        );\n                    }\n                    break;\n                }\n                case 'dim.nightHourStart': {\n                    if (state && state.val != null && typeof state.val === 'number') {\n                        if (state.val <= 23 && state.val >= 0 && state.val % 1 === 0) {\n                            await this.statesControler.setInternalState(\n                                `${this.name}/cmd/dimNightHourStart`,\n\n                                parseInt(String(state.val)),\n                                false,\n                            );\n                        }\n                    }\n                    break;\n                }\n                case 'dim.nightHourEnd': {\n                    if (state && state.val != null && typeof state.val === 'number') {\n                        if (state.val <= 23 && state.val >= 0 && state.val % 1 === 0) {\n                            await this.statesControler.setInternalState(\n                                `${this.name}/cmd/dimNightHourEnd`,\n\n                                parseInt(String(state.val)),\n                                false,\n                            );\n                        }\n                    }\n                    break;\n                }\n\n                case 'screenSaver.infoIcon': {\n                    if (state && state.val != null && typeof state.val === 'string') {\n                        await this.statesControler.setInternalState(\n                            `${this.name}/cmd/screenSaverInfoIcon`,\n                            state.val,\n                            false,\n                        );\n                    }\n                    break;\n                }\n                case 'screenSaver.doubleClick': {\n                    if (state && state.val != null) {\n                        await this.statesControler.setInternalState(\n                            `${this.name}/cmd/screenSaverDoubleClick`,\n                            !!state.val,\n                            false,\n                        );\n                    }\n                    /* await this.library.writedp(\n                        `panels.${this.name}.cmd.screenSaverDoubleClick`,\n                        this.screenSaverDoubleClick,\n                        genericStateObjects.panel.panels.cmd.screenSaverDoubleClick,\n                    );\n                    if (!this.screenSaverDoubleClick) {\n                        await this.library.writedp(\n                            `panels.${this.name}.buttons.screensaverGesture`,\n                            0,\n                            genericStateObjects.panel.panels.buttons.screensaverGesture,\n                        );\n                    } */\n                    break;\n                }\n                case 'detachLeft': {\n                    await this.statesControler.setInternalState(`${this.name}/cmd/detachLeft`, !!state.val, false);\n                    break;\n                }\n                case 'detachRight': {\n                    await this.statesControler.setInternalState(`${this.name}/cmd/detachRight`, !!state.val, false);\n                    break;\n                }\n                case 'screenSaver.layout': {\n                    if (typeof state.val === 'number' && pages.isScreenSaverModeAsNumber(state.val)) {\n                        await this.statesControler.setInternalState(\n                            `${this.name}/cmd/screenSaverLayout`,\n                            state.val,\n                            false,\n                        );\n                    }\n                    break;\n                }\n                case 'screenSaver.rotationTime': {\n                    if (state && state.val != null && typeof state.val === 'number') {\n                        await this.statesControler.setInternalState(\n                            `${this.name}/cmd/screenSaverRotationTime`,\n                            parseInt(String(state.val)),\n                            false,\n                        );\n                    }\n                    break;\n                }\n                case 'screenSaver.activateNotification': {\n                    if (state && state.val != null) {\n                        await this.statesControler.setInternalState(\n                            `${this.name}/cmd/screensaverActivateNotification`,\n                            !!state.val,\n                            false,\n                        );\n                    }\n                    break;\n                }\n                case 'screenSaver.headingNotification': {\n                    if (state && state.val != null && typeof state.val === 'string') {\n                        await this.statesControler.setInternalState(\n                            `${this.name}/cmd/screensaverHeadingNotification`,\n                            String(state.val),\n                            false,\n                        );\n                    }\n                    break;\n                }\n                case 'screenSaver.textNotification': {\n                    if (state && state.val != null && typeof state.val === 'string') {\n                        await this.statesControler.setInternalState(\n                            `${this.name}/cmd/screensaverTextNotification`,\n                            String(state.val),\n                            false,\n                        );\n                    }\n                    break;\n                }\n                /* case 'hideCards': {\n                    if (state && state.val != null) {\n                        this.hideCards = !!state.val;\n                        await this.library.writedp(\n                            `panels.${this.name}.cmd.hideCards`,\n                            this.hideCards,\n                            definition.genericStateObjects.panel.panels.cmd.hideCards,\n                        );\n                    }\n                    break;\n                } */\n                case 'hideCards': {\n                    if (state && state.val != null) {\n                        await this.statesControler.setInternalState(`${this.name}/cmd/hideCards`, !!state.val, false);\n                    }\n                    break;\n                }\n                case 'buzzer': {\n                    if (state && state.val != null && typeof state.val === 'string' && state.val.trim()) {\n                        this.sendToTasmota(`${this.topic}/cmnd/Buzzer`, state.val.trim());\n                        await this.statesControler.setInternalState(`${this.name}/cmd/buzzer`, '', true);\n                    }\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * timeout screensaver after sec\n     *\n     * @param sec seconds for timeout\n     */\n    sendScreensaverTimeout(sec: number): void {\n        if (this.unload) {\n            return;\n        }\n        this.log.debug(`Set screeensaver timeout to ${sec}s.`);\n        this.sendToPanel(`timeout~${sec}`, false);\n    }\n\n    sendDimmode(): void {\n        const hour = new Date().getHours();\n        const oldDayMode = this.dim.dayMode;\n        if (this.dim.schedule) {\n            if (this.dim.nightHourStart > this.dim.nightHourEnd) {\n                if (hour >= this.dim.nightHourStart || hour < this.dim.nightHourEnd) {\n                    this.dim.dayMode = false;\n                } else {\n                    this.dim.dayMode = true;\n                }\n            } else {\n                if (hour >= this.dim.nightHourStart && hour < this.dim.nightHourEnd) {\n                    this.dim.dayMode = false;\n                } else {\n                    this.dim.dayMode = true;\n                }\n            }\n        }\n        let cmd = `${Color.rgb_dec565(Color.Black)}~${Color.rgb_dec565(Color.foreground as RGB)}`;\n        this.log.debug(\n            `set color to RGB ${JSON.stringify(Color.foreground)} -> ${Color.rgb_dec565(Color.foreground as RGB)}`,\n        );\n        if (this.dim.dayMode) {\n            cmd = `dimmode~${this.dim.standby}~${this.dim.active}~${cmd}`;\n        } else {\n            cmd = `dimmode~${this.dim.nightStandby}~${this.dim.nightActive}~${cmd}`;\n        }\n        if (this.dim.dayMode !== oldDayMode) {\n            void this.library.writedp(\n                `panels.${this.name}.cmd.dim.dayMode`,\n                this.dim.dayMode,\n                definition.genericStateObjects.panel.panels.cmd.dim.dayMode,\n            );\n        }\n        if (this.unload) {\n            return;\n        }\n        this.sendToPanel(cmd, false);\n    }\n\n    restartLoops(): void {\n        if (this.loopTimeout) {\n            this.adapter.clearTimeout(this.loopTimeout);\n        }\n        if (this.unload || this.adapter.unload) {\n            return;\n        }\n        this.loopTimeout = this.adapter.setTimeout(() => {\n            this.loop();\n        }, 200);\n    }\n\n    loop = (): void => {\n        this.pages = this.pages.filter(a => a && !a.unload);\n        let t = Math.random() * 30_000 + 10_000;\n        if (!this.isOnline) {\n            t = 5000;\n            if (!this.flashing) {\n                this.panelSend.resetMessageDB();\n                this.sendToPanel('pageType~pageStartup', false, true, { retain: true });\n            }\n        }\n        if (this.unload || this.adapter.unload) {\n            return;\n        }\n        this.loopTimeout = this.adapter.setTimeout(() => this.loop, t);\n    };\n\n    requestStatusTasmota(): void {\n        this.sendToTasmota(`${this.topic}/cmnd/STATUS0`, '');\n    }\n\n    async delete(): Promise<void> {\n        await super.delete();\n        this.sendToPanel('pageType~pageStartup', false, true, { retain: true });\n        !this.adapter.unload && (await this.adapter.delay(10));\n\n        if (this.blockStartup) {\n            this.adapter.clearTimeout(this.blockStartup);\n        }\n        this.isOnline = false;\n        if (this.loopTimeout) {\n            this.adapter.clearTimeout(this.loopTimeout);\n        }\n        await this.library.writedp(\n            `panels.${this.name}.info.isOnline`,\n            false,\n            definition.genericStateObjects.panel.panels.info.isOnline,\n        );\n        await this.navigation.delete();\n        await this.screenSaver?.delete();\n        this.screenSaver = undefined;\n        for (const a of this.pages) {\n            if (a) {\n                await a.delete();\n            }\n        }\n        await this.panelSend.delete();\n        this.controller.mqttClient.removeByFunction(this.onMessage);\n        await this.statesControler.deletePageLoop(this.onInternalCommand);\n        this.persistentPageItems = {};\n        this.pages = [];\n        this._activePage = undefined;\n        this.data = {};\n    }\n\n    getPagebyUniqueID(uniqueID: string): Page | null {\n        if (!uniqueID) {\n            return null;\n        }\n        const index = this.pages.findIndex(a => a && a.name && a.name === uniqueID);\n        return this.pages[index] ?? null;\n    }\n\n    async writeInfo(): Promise<void> {\n        this.info.tasmota.onlineVersion = this.controller.globalPanelInfo.availableTasmotaFirmwareVersion;\n        this.info.nspanel.onlineVersion = this.controller.globalPanelInfo.availableTftFirmwareVersion;\n        await this.library.writeFromJson(\n            `panels.${this.name}.info`,\n            'panel.panels.info',\n            definition.genericStateObjects,\n            this.info,\n        );\n    }\n    /**\n     *  Handle incoming messages from panel\n     *\n     * @param event incoming event....\n     * @returns void\n     */\n    async HandleIncomingMessage(event: Types.IncomingEvent): Promise<void> {\n        if (!event.method) {\n            return;\n        }\n        if (this._activePage && this._activePage.card !== 'cardAlarm' && this.adapter.config.debugLogMqtt) {\n            this.log.debug(`Receive message:${JSON.stringify(event)}`);\n        }\n        this.log.debug(`Receive message:${JSON.stringify(event)}`);\n        if (!this.screenSaver) {\n            return;\n        }\n        if (this.isOnline === false && event.method !== 'startup') {\n            void this.restartLoops();\n            return;\n        }\n\n        switch (event.method) {\n            case 'startup': {\n                if (this.blockStartup || !this.initDone) {\n                    return;\n                }\n                if (this.unload || this.adapter.unload) {\n                    return;\n                }\n                this.blockStartup = this.adapter.setTimeout(() => {\n                    this.blockStartup = null;\n                }, 10_000);\n                this.isOnline = true;\n                this.info.nspanel.displayVersion = event.opt;\n                this.info.nspanel.model = event.action;\n\n                this.requestStatusTasmota();\n                this.sendToTasmota(`${this.topic}/cmnd/POWER1`, '');\n                this.sendToTasmota(`${this.topic}/cmnd/POWER2`, '');\n                this.sendToTasmota(`${this.topic}/cmnd/GetDriverVersion`, '');\n                this.sendRules();\n                await this.writeInfo();\n                // wait 1s to have tasmota time to be ready\n                await this.adapter.delay(100);\n\n                this.sendDimmode();\n\n                this.navigation.resetPosition();\n\n                const start = this.navigation.getCurrentMainPage();\n                if (start === undefined) {\n                    this.log.error('No start page defined!');\n                    return;\n                }\n                if (this._activePage) {\n                    await this._activePage.setVisibility(false);\n                }\n\n                // set last card to nothing, else the card will not be loaded if it is the same as the last one\n                this.lastCard = '';\n                await start.setVisibility(true);\n                // too be sure, that the page is set correctly\n                this._activePage = start;\n\n                if (this.screenSaver) {\n                    this.screenSaver.pageItems = await this.screenSaver.createPageItems(\n                        this.screenSaver.pageItemConfig,\n                    );\n                    await this.screenSaver.HandleDate();\n                    await this.screenSaver.HandleTime();\n                }\n\n                if (start.alwaysOn === 'none') {\n                    this.sendScreensaverTimeout(2);\n                }\n\n                this.log.info('Panel startup finished!');\n                break;\n            }\n            case 'sleepReached': {\n                await this.setActivePage(this.screenSaver);\n                this.navigation.resetPosition();\n                this.pages.forEach(a => a && a.reset());\n                break;\n            }\n            case 'pageOpenDetail': {\n                await this.setActivePage(false);\n                await this.getActivePage().onPopupRequest(\n                    event.id,\n                    event.popup as Types.PopupType,\n                    event.action,\n                    event.opt,\n                    event,\n                );\n                break;\n            }\n            case 'buttonPress2': {\n                if (event.id == 'screensaver') {\n                    await this.library.writedp(\n                        `panels.${this.name}.cmd.screenSaver.activateNotification`,\n                        false,\n                        definition.genericStateObjects.panel.panels.cmd.screenSaver.activateNotification,\n                    );\n                    if (this.screenSaverDoubleClick && this.screenSaver.screensaverSwipe) {\n                        switch (event.action) {\n                            case 'bExit': {\n                                await this.library.writedp(\n                                    `panels.${this.name}.buttons.screensaverGesture`,\n                                    2,\n                                    definition.genericStateObjects.panel.panels.buttons.screensaverGesture,\n                                );\n                                break;\n                            }\n                            case 'swipeUp': {\n                                await this.library.writedp(\n                                    `panels.${this.name}.buttons.screensaverGesture`,\n                                    3,\n                                    definition.genericStateObjects.panel.panels.buttons.screensaverGesture,\n                                );\n                                break;\n                            }\n                            case 'swipeDown': {\n                                await this.library.writedp(\n                                    `panels.${this.name}.buttons.screensaverGesture`,\n                                    4,\n                                    definition.genericStateObjects.panel.panels.buttons.screensaverGesture,\n                                );\n                                break;\n                            }\n                            case 'swipeLeft': {\n                                await this.library.writedp(\n                                    `panels.${this.name}.buttons.screensaverGesture`,\n                                    5,\n                                    definition.genericStateObjects.panel.panels.buttons.screensaverGesture,\n                                );\n                                break;\n                            }\n                            case 'swipeRight': {\n                                await this.library.writedp(\n                                    `panels.${this.name}.buttons.screensaverGesture`,\n                                    6,\n                                    definition.genericStateObjects.panel.panels.buttons.screensaverGesture,\n                                );\n                                break;\n                            }\n                        }\n                    }\n                    if ((this.screenSaverDoubleClick && parseInt(event.opt) > 1) || !this.screenSaverDoubleClick) {\n                        this.navigation.resetPosition();\n                        await this.navigation.setCurrentPage();\n                        break;\n                    }\n                } else if (event.action === 'bExit' && event.id !== 'popupNotify') {\n                    await this.setActivePage(true);\n                } else {\n                    if (\n                        event.action === 'button' &&\n                        ['bNext', 'bPrev', 'bUp', 'bHome', 'bSubNext', 'bSubPrev'].indexOf(event.id) != -1\n                    ) {\n                        if (['bPrev', 'bUp', 'bSubPrev'].indexOf(event.id) != -1) {\n                            this.getActivePage().goLeft();\n                        } else if (['bNext', 'bHome', 'bSubNext'].indexOf(event.id) != -1) {\n                            this.getActivePage().goRight();\n                        }\n                        break;\n                    }\n                    await this.getActivePage().onPopupRequest(\n                        event.id,\n                        event.popup as Types.PopupType,\n                        event.action,\n                        event.opt,\n                        event,\n                    );\n                    await this.getActivePage().onButtonEvent(event);\n                }\n                break;\n            }\n            case 'renderCurrentPage': {\n                await this.panelSend.onMessage('/stat/RESULT', `{ \"CustomSend\": \"${event.method}\" }`);\n                break;\n            }\n            case 'button1': {\n                await this.onDetachButtonEvent('left');\n                break;\n            }\n            case 'button2': {\n                await this.onDetachButtonEvent('right');\n                break;\n            }\n            default: {\n                this.log.warn('Missing method in HandleIncomingMessage()');\n            }\n        }\n    }\n\n    onDetachButtonEvent = async (button: 'left' | 'right'): Promise<void> => {\n        const action: Types.ConfigButtonFunction = this.buttons\n            ? button === 'left'\n                ? this.buttons.left\n                : this.buttons.right\n            : null;\n        await this.library.writedp(`panels.${this.name}.buttons.${button}`, false, null, true, true);\n        if (action) {\n            switch (action.mode) {\n                case 'button': {\n                    if (typeof action.state === 'string') {\n                        this.log.error(`Button ${button} has no state!`);\n                        return;\n                    }\n                    await action.state.setStateTrue();\n                    break;\n                }\n                case 'page': {\n                    if (typeof action.page === 'string') {\n                        await this.navigation.setTargetPageByName(action.page);\n                    }\n                    break;\n                }\n                case 'switch': {\n                    if (typeof action.state === 'string') {\n                        this.log.error(`Button ${button} has no state!`);\n                        return;\n                    }\n                    await action.state.setStateFlip();\n                    break;\n                }\n            }\n        }\n    };\n    onInternalCommand = async (id: string, state: Types.nsPanelState | undefined): Promise<Types.nsPanelStateVal> => {\n        if (!id.startsWith(this.name)) {\n            return null;\n        }\n        const token: Types.PanelInternalCommand = id.replace(`${this.name}/`, '') as Types.PanelInternalCommand;\n        if (state && !state.ack && state.val != null) {\n            switch (token) {\n                case 'cmd/power1': {\n                    this.sendToTasmota(`${this.topic}/cmnd/POWER1`, state.val ? 'ON' : 'OFF');\n                    break;\n                }\n                case 'cmd/power2': {\n                    this.sendToTasmota(`${this.topic}/cmnd/POWER2`, state.val ? 'ON' : 'OFF');\n                    break;\n                }\n                case `cmd/detachRight`: {\n                    this.detach.right = !!state.val;\n                    await this.library.writedp(`panels.${this.name}.cmd.detachRight`, this.detach.right);\n                    this.sendRules();\n                    break;\n                }\n                case 'cmd/detachLeft': {\n                    this.detach.left = !!state.val;\n                    await this.library.writedp(`panels.${this.name}.cmd.detachLeft`, this.detach.left);\n                    this.sendRules();\n                    break;\n                }\n\n                case 'cmd/bigIconLeft': {\n                    this.info.nspanel.bigIconLeft = !!state.val;\n                    this.screenSaver && (await this.screenSaver.HandleScreensaverStatusIcons());\n                    await this.library.writeFromJson(\n                        `panels.${this.name}.info`,\n                        'panel.panels.info',\n                        definition.genericStateObjects,\n                        this.info,\n                    );\n                    break;\n                }\n                case 'cmd/bigIconRight': {\n                    this.info.nspanel.bigIconRight = !!state.val;\n                    this.screenSaver && (await this.screenSaver.HandleScreensaverStatusIcons());\n                    await this.library.writeFromJson(\n                        `panels.${this.name}.info`,\n                        'panel.panels.info',\n                        definition.genericStateObjects,\n                        this.info,\n                    );\n                    break;\n                }\n                case 'cmd/screenSaverTimeout': {\n                    if (typeof state.val === 'string' || typeof state.val === 'number') {\n                        const val = parseInt(String(state.val));\n                        this.timeout = val;\n                        this.sendScreensaverTimeout(this.timeout);\n                        await this.statesControler.setInternalState(`${this.name}/cmd/screenSaverTimeout`, val, true);\n                        await this.library.writedp(`panels.${this.name}.cmd.screenSaver.timeout`, this.timeout);\n                    }\n                    break;\n                }\n                case 'cmd/dimStandby': {\n                    if (typeof state.val === 'string' || typeof state.val === 'number') {\n                        const val = parseInt(String(state.val));\n                        this.dim.standby = val;\n                        this.sendDimmode();\n                        await this.library.writedp(`panels.${this.name}.cmd.dim.standby`, this.dim.standby);\n                    }\n                    break;\n                }\n                case 'cmd/dimActive': {\n                    if (typeof state.val === 'string' || typeof state.val === 'number') {\n                        const val = parseInt(String(state.val));\n                        this.dim.active = val;\n                        this.sendDimmode();\n                        await this.library.writedp(`panels.${this.name}.cmd.dim.active`, this.dim.active);\n                    }\n                    break;\n                }\n                case 'cmd/dimNightActive': {\n                    if (typeof state.val === 'string' || typeof state.val === 'number') {\n                        const val = parseInt(String(state.val));\n                        this.dim.nightActive = val;\n                        this.sendDimmode();\n                        await this.library.writedp(`panels.${this.name}.cmd.dim.nightActive`, this.dim.nightActive);\n                    }\n                    break;\n                }\n                case 'cmd/dimNightStandby': {\n                    if (typeof state.val === 'string' || typeof state.val === 'number') {\n                        const val = parseInt(String(state.val));\n                        this.dim.nightStandby = val;\n                        this.sendDimmode();\n                        await this.library.writedp(`panels.${this.name}.cmd.dim.nightStandby`, this.dim.nightStandby);\n                    }\n                    break;\n                }\n                case 'cmd/dimNightHourStart': {\n                    if (typeof state.val === 'string' || typeof state.val === 'number') {\n                        const val = parseInt(String(state.val));\n                        this.dim.nightHourStart = val;\n                        this.sendDimmode();\n                        await this.library.writedp(\n                            `panels.${this.name}.cmd.dim.nightHourStart`,\n                            this.dim.nightHourStart,\n                        );\n                    }\n                    break;\n                }\n                case 'cmd/dimNightHourEnd': {\n                    if (typeof state.val === 'string' || typeof state.val === 'number') {\n                        const val = parseInt(String(state.val));\n                        this.dim.nightHourEnd = val;\n                        this.sendDimmode();\n                        await this.library.writedp(`panels.${this.name}.cmd.dim.nightHourEnd`, this.dim.nightHourEnd);\n                    }\n                    break;\n                }\n                case 'cmd/NotificationCleared2':\n                case 'cmd/NotificationCleared': {\n                    await this.controller.systemNotification.clearNotification(this.notifyIndex);\n                }\n                // eslint-disable-next-line no-fallthrough\n                case 'cmd/NotificationNext2':\n                case 'cmd/NotificationNext': {\n                    this.notifyIndex = this.controller.systemNotification.getNotificationIndex(++this.notifyIndex);\n\n                    if (this.notifyIndex !== -1) {\n                        const val = this.controller.systemNotification.getNotification(this.notifyIndex);\n                        if (val) {\n                            await this.statesControler.setInternalState(\n                                `${this.name}/cmd/popupNotification${token.endsWith('2') ? '' : '2'}`,\n                                JSON.stringify(val),\n                                false,\n                            );\n                        }\n                        break;\n                    }\n                    await this.HandleIncomingMessage({\n                        type: 'event',\n                        method: 'buttonPress2',\n                        id: 'popupNotify',\n                        action: 'bExit',\n                        opt: '',\n                    });\n                    break;\n                }\n                case 'cmd/TasmotaRestart': {\n                    this.sendToTasmota(`${this.topic}/cmnd/Restart`, '1');\n                    this.log.info('Restart Tasmota!');\n                    this.isOnline = false;\n                    break;\n                }\n                case 'cmd/screenSaverRotationTime': {\n                    if (this.screenSaver && typeof state.val === 'number') {\n                        const val =\n                            state.val === 0 ? state.val : state.val < 3 ? 3 : state.val > 3600 ? 3600 : state.val;\n                        if (this.screenSaver.rotationTime !== val * 1000) {\n                            this.screenSaver.rotationTime = val * 1000;\n                            await this.screenSaver.restartRotationLoop();\n                        }\n                        await this.library.writedp(`panels.${this.name}.cmd.screenSaver.rotationTime`, val);\n                    }\n                    break;\n                }\n                case 'cmd/screenSaverDoubleClick': {\n                    if (this.screenSaver && typeof state.val === 'boolean') {\n                        this.screenSaverDoubleClick = !!state.val;\n                        await this.library.writedp(`panels.${this.name}.cmd.screenSaver.doubleClick`, state.val);\n                    }\n                    break;\n                }\n                case 'cmd/screenSaverInfoIcon': {\n                    if (this.screenSaver && typeof state.val === 'string') {\n                        this.screenSaver.infoIcon = state.val;\n                        await this.library.writedp(`panels.${this.name}.cmd.screenSaver.infoIcon`, state.val);\n                    }\n                    break;\n                }\n                case 'cmd/screenSaverLayout': {\n                    if (typeof state.val === 'number' && pages.isScreenSaverModeAsNumber(state.val)) {\n                        if (this.screenSaver) {\n                            this.screenSaver.overwriteModel(state.val);\n                            await this.library.writedp(`panels.${this.name}.cmd.screenSaver.layout`, state.val);\n                        }\n                    }\n                    break;\n                }\n                case 'info/PopupInfo': {\n                    this.data['info/PopupInfo'] = state.val;\n                    break;\n                }\n                case 'cmd/screensaverActivateNotification': {\n                    if (this.screenSaver) {\n                        this.screenSaver.sendNotify(!!state.val);\n                        await this.library.writedp(\n                            `panels.${this.name}.cmd.screenSaver.activateNotification`,\n                            !!state.val,\n                            definition.genericStateObjects.panel.panels.cmd.screenSaver.activateNotification,\n                        );\n                    }\n                    break;\n                }\n                case 'cmd/screensaverTextNotification': {\n                    if (this.screenSaver && typeof state.val === 'string') {\n                        this.screenSaver.textNotification = state.val;\n                        const s = this.library.readdb(`panels.${this.name}.cmd.screenSaver.activateNotification`);\n                        if (s && s.val) {\n                            this.screenSaver.sendNotify(true);\n                        }\n                        await this.library.writedp(\n                            `panels.${this.name}.cmd.screenSaver.textNotification`,\n                            state.val,\n                            definition.genericStateObjects.panel.panels.cmd.screenSaver.textNotification,\n                        );\n                    }\n                    break;\n                }\n                case 'cmd/screensaverHeadingNotification': {\n                    if (this.screenSaver && typeof state.val === 'string') {\n                        this.screenSaver.headingNotification = state.val;\n                        const s = this.library.readdb(`panels.${this.name}.cmd.screenSaver.activateNotification`);\n                        if (s && s.val) {\n                            this.screenSaver.sendNotify(true);\n                        }\n                        await this.library.writedp(\n                            `panels.${this.name}.cmd.screenSaver.headingNotification`,\n                            state.val,\n                            definition.genericStateObjects.panel.panels.cmd.screenSaver.headingNotification,\n                        );\n                    }\n                    break;\n                }\n                case 'cmd/hideCards': {\n                    if (this.screenSaver && typeof state.val === 'boolean') {\n                        this.hideCards = !!state.val;\n                        await this.library.writedp(`panels.${this.name}.cmd.hideCards`, state.val);\n                    }\n                    break;\n                }\n                case 'cmd/buzzer': {\n                    if (typeof state.val === 'string' && state.val.trim()) {\n                        this.sendToTasmota(`${this.topic}/cmnd/Buzzer`, state.val.trim());\n                        // Clear the state after sending command\n                        await this.statesControler.setInternalState(id, '', true);\n                        await this.library.writedp(`panels.${this.name}.cmd.buzzer`, '');\n                    }\n                    break;\n                }\n            }\n        }\n        switch (token) {\n            case 'cmd/bigIconLeft': {\n                return this.info.nspanel.bigIconLeft;\n            }\n            case 'cmd/bigIconRight': {\n                return this.info.nspanel.bigIconRight;\n            }\n            case 'cmd/screenSaverTimeout': {\n                return this.timeout;\n            }\n            case 'cmd/dimStandby': {\n                return this.dim.standby;\n            }\n            case 'cmd/dimActive': {\n                return this.dim.active;\n            }\n            case 'cmd/dimNightActive': {\n                return this.dim.nightActive;\n            }\n            case 'cmd/dimNightStandby': {\n                return this.dim.nightStandby;\n            }\n            case 'cmd/dimNightHourStart': {\n                return this.dim.nightHourStart;\n            }\n            case 'cmd/dimNightHourEnd': {\n                return this.dim.nightHourEnd;\n            }\n            case 'cmd/detachLeft': {\n                return this.detach.left;\n            }\n            case 'cmd/detachRight': {\n                return this.detach.right;\n            }\n            case 'cmd/popupNotification2':\n            case 'cmd/popupNotification': {\n                if (this.notifyIndex !== -1) {\n                    const val = this.controller.systemNotification.getNotification(this.notifyIndex);\n                    if (val) {\n                        return JSON.stringify(val);\n                    }\n                }\n                return null;\n            }\n            case 'info/tasmotaVersion': {\n                return `${this.info.tasmota.firmwareversion}\\r\\n${this.info.tasmota.onlineVersion}`;\n            }\n            case 'info/displayVersion': {\n                return this.info.nspanel.displayVersion;\n            }\n            case 'info/modelVersion': {\n                return this.info.nspanel.model;\n            }\n            case 'info/Tasmota': {\n                return this.info.tasmota;\n            }\n            case 'cmd/screenSaverRotationTime': {\n                if (this.screenSaver) {\n                    return this.screenSaver.rotationTime / 1000;\n                }\n                break;\n            }\n            case 'cmd/screenSaverDoubleClick': {\n                return this.screenSaverDoubleClick;\n            }\n            case 'cmd/screenSaverInfoIcon': {\n                return this.screenSaver?.infoIcon ?? '';\n            }\n            case 'cmd/screenSaverLayout': {\n                if (this.screenSaver) {\n                    return Screensaver.mapModeToNumber(this.screenSaver.mode);\n                }\n                break;\n            }\n            case 'info/PopupInfo': {\n                return this.data['info/PopupInfo'] ?? null;\n            }\n            case 'cmd/hideCards': {\n                return this.hideCards;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Convert incoming string to event msg object\n     *\n     * @param msg incoming string\n     * @returns event object\n     */\n    private convertToEvent(msg: string): Types.IncomingEvent | null {\n        try {\n            msg = (JSON.parse(msg) || {}).CustomRecv;\n        } catch {\n            this.log.warn(`Receive a broken msg from mqtt: ${msg}`);\n        }\n        if (msg === undefined) {\n            return null;\n        }\n        const temp = msg.split(',');\n        if (!Types.isEventType(temp[0])) {\n            return null;\n        }\n        try {\n            if (!Types.isEventMethod(temp[1])) {\n                return null;\n            }\n        } catch (e: any) {\n            this.log.error(`Error at convertToEvent: ${e}`);\n            return null;\n        }\n        let popup: undefined | string = undefined;\n        if (temp[1] === 'pageOpenDetail') {\n            popup = temp.splice(2, 1)[0];\n        }\n        const arr = String(temp[2]).split('?');\n        if (arr[3]) {\n            return {\n                type: temp[0],\n                method: temp[1],\n                target: parseInt(arr[3]),\n                page: parseInt(arr[1]),\n                cmd: parseInt(arr[0]),\n                popup: popup,\n                id: arr[2],\n                action: pages.isButtonActionType(temp[3]) ? temp[3] : temp[3],\n                opt: temp[4] ?? '',\n            };\n        }\n        if (arr[2]) {\n            return {\n                type: temp[0],\n                method: temp[1],\n                page: parseInt(arr[0]),\n                cmd: parseInt(arr[1]),\n                popup: popup,\n                id: arr[2],\n                action: pages.isButtonActionType(temp[3]) ? temp[3] : temp[3],\n                opt: temp[4] ?? '',\n            };\n        } else if (arr[1]) {\n            return {\n                type: temp[0],\n                method: temp[1],\n                page: parseInt(arr[0]),\n                popup: popup,\n                id: arr[1],\n                action: pages.isButtonActionType(temp[3]) ? temp[3] : temp[3],\n                opt: temp[4] ?? '',\n            };\n        }\n        return {\n            type: temp[0],\n            method: temp[1],\n            popup: popup,\n            id: arr[0],\n            action: pages.isButtonActionType(temp[3]) ? temp[3] : temp[3],\n            opt: temp[4] ?? '',\n        };\n    }\n\n    async setScreensaverSwipe(b: boolean): Promise<void> {\n        if (this.screenSaver) {\n            this.screenSaver.screensaverSwipe = b;\n            await this.library.writedp(\n                `panels.${this.name}.buttons.screensaverGesture`,\n                !this.screenSaver.screensaverSwipe ? 0 : 1,\n                definition.genericStateObjects.panel.panels.buttons.screensaverGesture,\n            );\n        }\n    }\n    static getPage(config: pages.PageBaseConfig, that: BaseClass): pages.PageBaseConfig {\n        if ('template' in config && config.template) {\n            const template = cardTemplates[config.template];\n            if (!template) {\n                that.log.error(`Template not found: ${config.template}`);\n                return config;\n            }\n            if (config.dpInit && typeof config.dpInit === 'string') {\n                const reg = getRegExp(config.dpInit);\n                if (reg) {\n                    config.dpInit = reg;\n                }\n                if (\n                    template.adapter &&\n                    typeof config.dpInit === 'string' &&\n                    !config.dpInit.startsWith(template.adapter)\n                ) {\n                    return config;\n                }\n            }\n            const newTemplate = structuredClone(template) as Partial<pages.PageBaseConfigTemplate>;\n            delete newTemplate.adapter;\n\n            config = deepAssign(newTemplate, config);\n        }\n        return config;\n    }\n}\n"],
  "mappings": "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",
  "names": ["_a", "_b", "state", "axios"]
}
