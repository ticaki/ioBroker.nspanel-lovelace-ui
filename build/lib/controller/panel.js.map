{
  "version": 3,
  "sources": ["../../../src/lib/controller/panel.ts"],
  "sourcesContent": ["import { BaseClassPanelSend, PanelSend } from './panel-message';\n\nimport dayjs from 'dayjs';\nimport * as Screensaver from '../pages/screensaver';\nimport * as NSPanel from '../types/types';\nimport { Controller } from './panel-controller';\nimport { AdapterClassDefinition } from '../classes/library';\nimport { callbackMessageType } from '../classes/mqtt';\nimport { ReiveTopicAppendix, SendTopicAppendix } from '../const/definition';\n\nexport interface panelConfigPartial extends Partial<panelConfigTop> {\n    format?: Partial<Intl.DateTimeFormatOptions>;\n    screenSaverConfig: Screensaver.ScreensaverConfig;\n    Controler: Controller;\n    topic: string;\n    name: string;\n}\nexport function isPanelConfig(F: object | panelConfig): F is panelConfig {\n    if ((F as panelConfig).Controler === undefined) return false;\n    if ((F as panelConfig).screenSaverConfig === undefined) return false;\n    if ((F as panelConfig).topic === undefined) return false;\n    if ((F as panelConfig).name === undefined) return false;\n    return true;\n}\ntype panelConfig = panelConfigTop & {\n    format: Intl.DateTimeFormatOptions;\n    screenSaverConfig: Screensaver.ScreensaverConfig;\n    Controler: Controller;\n    topic: string;\n    name: string;\n};\nconst DefaultOptions = {\n    format: {\n        weekday: 'short',\n        month: 'short',\n        year: 'numeric',\n        day: 'numeric',\n    },\n    CustomFormat: '',\n    locale: 'de-DE',\n    timeout: 3,\n};\n\ntype panelConfigTop = { CustomFormat: string; locale: Intl.LocalesArgument; timeout: number };\nexport class Panel extends BaseClassPanelSend {\n    private minuteLoopTimeout: ioBroker.Timeout | undefined;\n    private dateUpdateTimeout: ioBroker.Timeout | undefined;\n    options: panelConfig;\n    screenSaver: Screensaver.Screensaver;\n    reivCallbacks: callbackMessageType[] = [];\n    _isOnline = false;\n\n    constructor(adapter: AdapterClassDefinition, options: panelConfigPartial) {\n        super(\n            adapter,\n            new PanelSend(adapter, {\n                name: `${options.name}-SendClass`,\n                mqttClient: options.Controler.mqttClient,\n                topic: options.topic,\n            }),\n            options.name,\n        );\n        this.panelSend.panel = this;\n        const format = Object.assign(DefaultOptions.format, options.format);\n        this.options = Object.assign(DefaultOptions, options, { format: format });\n        this.screenSaver = new Screensaver.Screensaver(\n            adapter,\n            options.screenSaverConfig,\n            this.panelSend,\n            this.options.Controler.readOnlyDB,\n        );\n    }\n    get isOnline(): boolean {\n        return this._isOnline;\n    }\n    set isOnline(s: boolean) {\n        this._isOnline = s;\n    }\n    async isValid(): Promise<true> {\n        return true;\n    }\n\n    init = async (): Promise<void> => {\n        this.options.Controler.mqttClient.subscript(this.options.topic, this.onMessage);\n        this.sendToPanel('pageType~pageStartup', { retain: true });\n    };\n    registerOnMessage(fn: callbackMessageType): void {\n        if (this.reivCallbacks.indexOf(fn) === -1) {\n            this.reivCallbacks.push(fn);\n        }\n    }\n    onMessage: callbackMessageType = async (topic: string, message: string) => {\n        if (topic.endsWith(SendTopicAppendix)) {\n            this.log.debug(`Receive command ${topic} with ${message}`);\n            return;\n        }\n        for (const fn of this.reivCallbacks) {\n            if (fn) fn(topic, message);\n        }\n        if (topic.endsWith(ReiveTopicAppendix)) {\n            this.log.debug(`Receive message ${topic} with ${message}`);\n            const event: NSPanel.IncomingEvent | null = NSPanel.convertToEvent(message);\n            if (event) {\n                this.HandleIncomingMessage(event);\n            }\n        }\n    };\n\n    /**\n     * timeout screensaver after sec\n     * @param sec seconds for timeout\n     */\n    sendScreeensaverTimeout(sec: number): void {\n        this.sendToPanel(`timeout~${sec}`);\n    }\n\n    /**\n     * Do panel work always at full minute\n     * @returns void\n     */\n    minuteLoop = (): void => {\n        if (this.unload) return;\n        this.sendToPanel(`time~${new Date().toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit' })}`);\n        const diff = 60000 - (Date.now() % 60000) + 10;\n        this.minuteLoopTimeout = this.adapter.setTimeout(this.minuteLoop, diff);\n    };\n\n    /**\n     * Update Date 2 times per day because of daylight saving.\n     * @returns\n     */\n    dateUpdateLoop = (): void => {\n        if (this.unload) return;\n        const val =\n            this.options.CustomFormat != ''\n                ? dayjs().format(this.options.CustomFormat)\n                : new Date().toLocaleDateString(this.options.locale, this.options.format);\n\n        this.sendToPanel(`date~${val}`);\n        const d: Date = new Date();\n        d.setDate(d.getDate() + 1);\n        // don't set ms, let them be random\n        d.setHours(0, 0, 0);\n        const diff = d.getTime() - Date.now();\n        this.minuteLoopTimeout = this.adapter.setTimeout(this.minuteLoop, diff);\n    };\n\n    async delete(): Promise<void> {\n        await super.delete();\n        this.isOnline = false;\n        if (this.minuteLoopTimeout) this.adapter.clearTimeout(this.minuteLoopTimeout);\n        if (this.dateUpdateTimeout) this.adapter.clearTimeout(this.dateUpdateTimeout);\n    }\n\n    HandleIncomingMessage(event: NSPanel.IncomingEvent): void {\n        switch (event.method) {\n            case 'startup': {\n                this.isOnline = true;\n                this.screenSaver.init();\n                if (this.minuteLoopTimeout) this.adapter.clearTimeout(this.minuteLoopTimeout);\n                if (this.dateUpdateTimeout) this.adapter.clearTimeout(this.dateUpdateTimeout);\n                this.minuteLoop();\n                this.dateUpdateLoop();\n                this.sendScreeensaverTimeout(this.options.timeout);\n                this.sendToPanel('dimmode~10~100~6371');\n\n                this.sendToPanel('pageType~cardGrid');\n                this.sendToPanel(\n                    'entityUpd~Men\u00FC~button~bPrev~\uE730~65535~~~button~bNext~\uE733~65535~~~button~navigate.SensorGrid~21.1~26095~Obergeschoss~PRESS~button~navigate.ObergeschossWindow~\uF1DB~64332~Obergeschoss~Obergeschoss~button~navigate.ogLightsGrid~\uE334~65363~Obergeschoss ACTUAL~PRESS~button~navigate.Alexa~\uF2A7~65222~test~PRESS',\n                );\n                // sendPage\n                break;\n            }\n            case 'sleepReached': {\n                this.screenSaver.sendType();\n                this.screenSaver.update();\n                break;\n            }\n            case 'pageOpenDetail': {\n                break;\n            }\n            case 'buttonPress2': {\n                break;\n            }\n            case 'renderCurrentPage': {\n                break;\n            }\n            case 'button1': {\n                break;\n            }\n            case 'button2': {\n                break;\n            }\n        }\n    }\n\n    /*\n    function HandleMessage(typ: string, method: NSPanel.EventMethod, page: number | undefined, words: string[] | undefined): void {\n        try {\n            if (typ == 'event') {\n                switch (method as NSPanel.EventMethod) {\n                    case 'startup':\n                        screensaverEnabled = false;\n                        UnsubscribeWatcher();\n                        HandleStartupProcess();\n                        pageId = 0;\n                        GeneratePage(config.pages[0]);\n                        if (Debug) log('HandleMessage -> Startup', 'info');\n                        Init_Release();\n                        break;\n                    case 'sleepReached':\n                        useMediaEvents = false;\n                        screensaverEnabled = true;\n                        if (pageId < 0)\n                            pageId = 0;\n                        HandleScreensaver();\n                        if (Debug) log('HandleMessage -> sleepReached', 'info');\n                        break;\n                    case 'pageOpenDetail':\n                        if (words != undefined) {\n                            screensaverEnabled = false;\n                            UnsubscribeWatcher();\n                            if (Debug) {\n                                log('HandleMessage -> pageOpenDetail ' + words[0] + ' - ' + words[1] + ' - ' + words[2] + ' - ' + words[3] + ' - ' + words[4], 'info');\n                            }\n                            let tempId: PageItem['id'];\n                            let tempPageItem = words[3].split('?');\n                            let placeId: number | undefined = undefined;\n                            if (!isNaN(parseInt(tempPageItem[0]))){\n                                tempId = activePage!.items[tempPageItem[0]].id;\n                                placeId = parseInt(tempPageItem[0])\n                                if (tempId == undefined) {\n                                    throw new Error(`Missing id in HandleMessage!`)\n                                }\n                            } else {\n                                tempId = tempPageItem[0];\n                            }\n                            let pageItem: PageItem = findPageItem(tempId);\n                            if (pageItem !== undefined && isPopupType(words[2])) {\n                                let temp: string | NSPanel.mediaOptional | undefined = tempPageItem[1]\n                                if (isMediaOptional(temp)) SendToPanel(GenerateDetailPage(words[2], temp, pageItem, placeId));\n                                else SendToPanel(GenerateDetailPage(words[2], undefined, pageItem, placeId));\n                            }\n                        }\n                        break;\n                    case 'buttonPress2':\n                        screensaverEnabled = false;\n                        HandleButtonEvent(words);\n                        if (Debug) {\n                            if (words != undefined) log('HandleMessage -> buttonPress2 ' + words[0] + ' - ' + words[1] + ' - ' + words[2] + ' - ' + words[3] + ' - ' + words[4], 'info');\n                        }\n                        break;\n                    case 'renderCurrentPage':\n                        // Event only for HA at this Moment\n                        if (Debug) log('renderCurrentPage', 'info');\n                        break;\n                    case 'button1':\n                    case 'button2':\n                        screensaverEnabled = false;\n                        HandleHardwareButton(method);\n                        if (Debug) log('HandleMessage -> button1 /  button2', 'info')\n                        break;\n                    default:\n                        break;\n                }\n            }\n        } catch (err: any) {\n            log('error at function HandleMessage: ' + err.message, 'warn');\n        }\n    }*/\n}\n"],
  "mappings": "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",
  "names": ["dayjs"]
}
