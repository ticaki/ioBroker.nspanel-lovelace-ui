{
  "version": 3,
  "sources": ["../../../src/lib/controller/panel.ts"],
  "sourcesContent": ["import { PanelSend } from './panel-message';\n\nimport dayjs from 'dayjs';\nimport { Screensaver, ScreensaverConfigType } from '../pages/screensaver';\nimport * as NSPanel from '../types/types';\nimport * as pages from '../types/pages';\nimport { Controller } from './controller';\nimport { AdapterClassDefinition, BaseClass } from '../classes/library';\nimport { callbackMessageType } from '../classes/mqtt';\nimport { ReiveTopicAppendix, genericStateObjects } from '../const/definition';\nimport { Page, PageConfigAll, PageInterface } from '../classes/Page';\nimport { PageMedia } from '../pages/pageMedia';\nimport { IClientPublishOptions } from 'mqtt';\nimport { StatesControler } from './states-controller';\nimport { PageGrid } from '../pages/pageGrid';\nimport { Navigation, NavigationConfig } from '../classes/navigation';\nimport { PageThermo } from '../pages/pageThermo';\n\nexport interface panelConfigPartial extends Partial<panelConfigTop> {\n    format?: Partial<Intl.DateTimeFormatOptions>;\n    controller: Controller;\n    topic: string;\n    name: string;\n    pages: PageConfigAll[];\n    navigation: NavigationConfig['navigationConfig'];\n    config: ScreensaverConfigType;\n}\nexport function isPanelConfig(F: object | panelConfig): F is panelConfig {\n    if ((F as panelConfig).controller === undefined) return false;\n    if ((F as panelConfig).pages === undefined) return false;\n    if ((F as panelConfig).topic === undefined) return false;\n    if ((F as panelConfig).name === undefined) return false;\n    return true;\n}\ntype panelConfig = panelConfigTop & {\n    format: Intl.DateTimeFormatOptions;\n    controller: Controller;\n    topic: string;\n    name: string;\n    pages: PageConfigAll[];\n    config: ScreensaverConfigType;\n    navigation: NavigationConfig['navigationConfig'];\n};\n\nconst DefaultOptions = {\n    format: {\n        weekday: 'short',\n        month: 'short',\n        year: 'numeric',\n        day: 'numeric',\n    },\n    CustomFormat: '',\n    locale: 'de-DE',\n    timeout: 30,\n    pages: [],\n};\n\ntype panelConfigTop = { CustomFormat: string; locale: Intl.LocalesArgument; timeout: number };\n\nexport class Panel extends BaseClass {\n    private minuteLoopTimeout: ioBroker.Timeout | undefined;\n    private dateUpdateTimeout: ioBroker.Timeout | undefined;\n    private pages: (Page | undefined)[] = [];\n    private _activePage: { page: Page | null; sleep?: boolean } = { page: null };\n    private screenSaver: Screensaver | undefined;\n    private InitDone: boolean = false;\n    readonly navigation: Navigation;\n    readonly format: Partial<Intl.DateTimeFormatOptions>;\n    readonly controller: Controller;\n    readonly topic: string;\n    readonly reivCallbacks: callbackMessageType[] = [];\n    _isOnline = false;\n    readonly panelSend: PanelSend;\n    readonly statesControler: StatesControler;\n    readonly config: ScreensaverConfigType;\n    readonly timeout: number;\n    readonly CustomFormat: string;\n    readonly sendToTasmota: (topic: string, payload: string, opt?: IClientPublishOptions) => void = () => {};\n    fName: string = '';\n\n    constructor(adapter: AdapterClassDefinition, options: panelConfigPartial) {\n        super(adapter, options.name);\n        this.fName = options.name;\n        this.panelSend = new PanelSend(adapter, {\n            name: `${options.name}-SendClass`,\n            mqttClient: options.controller.mqttClient,\n            topic: options.topic,\n        });\n        this.timeout = options.timeout || 15;\n\n        this.CustomFormat = options.CustomFormat ?? '';\n        this.config = options.config;\n        this.format = Object.assign(DefaultOptions.format, options.format);\n        this.controller = options.controller;\n        this.topic = options.topic;\n        if (typeof this.panelSend.addMessage === 'function') this.sendToPanelClass = this.panelSend.addMessage;\n        if (typeof this.panelSend.addMessageTasmota === 'function')\n            this.sendToTasmota = this.panelSend.addMessageTasmota;\n        this.statesControler = options.controller.statesControler;\n\n        let scsFound = 0;\n        for (let a = 0; a < options.pages.length; a++) {\n            const pageConfig = options.pages[a];\n            if (!pageConfig) continue;\n            switch (pageConfig.card) {\n                case 'cardChart': {\n                    break;\n                }\n                case 'cardLChart': {\n                    break;\n                }\n                case 'cardEntities': {\n                    break;\n                }\n                case 'cardGrid2':\n                case 'cardGrid': {\n                    const pmconfig = {\n                        card: pageConfig.card,\n                        panel: this,\n                        id: String(a),\n                        name: 'PG',\n                        alwaysOn: pageConfig.alwaysOn,\n                        adapter: this.adapter,\n                        panelSend: this.panelSend,\n                        uniqueID: pageConfig.uniqueID,\n                    };\n                    this.pages[a] = new PageGrid(pmconfig, pageConfig);\n                    break;\n                }\n\n                case 'cardThermo': {\n                    const pmconfig = {\n                        card: pageConfig.card,\n                        panel: this,\n                        id: String(a),\n                        name: 'PM',\n                        alwaysOn: pageConfig.alwaysOn,\n                        adapter: this.adapter,\n                        panelSend: this.panelSend,\n                        uniqueID: pageConfig.uniqueID,\n                    };\n                    this.pages[a] = new PageThermo(pmconfig, pageConfig);\n                    break;\n                }\n                case 'cardMedia': {\n                    const pmconfig = {\n                        card: pageConfig.card,\n                        panel: this,\n                        id: String(a),\n                        name: 'PM',\n                        alwaysOn: pageConfig.alwaysOn,\n                        adapter: this.adapter,\n                        panelSend: this.panelSend,\n                        uniqueID: pageConfig.uniqueID,\n                    };\n                    this.pages[a] = new PageMedia(pmconfig, pageConfig);\n                    break;\n                }\n                case 'cardUnlock': {\n                    break;\n                }\n                case 'cardQR': {\n                    break;\n                }\n                case 'cardAlarm': {\n                    break;\n                }\n                case 'cardPower': {\n                    break;\n                }\n                case 'screensaver':\n                case 'screensaver2': {\n                    if (scsFound++ > 0) continue;\n\n                    //const opt = Object.assign(DefaultOptions, pageConfig);\n                    const ssconfig: PageInterface = {\n                        card: pageConfig.card,\n                        panel: this,\n                        id: String(a),\n                        name: 'SrS',\n                        adapter: this.adapter,\n                        panelSend: this.panelSend,\n                        uniqueID: '',\n                    };\n                    this.screenSaver = new Screensaver(ssconfig, pageConfig);\n                    break;\n                }\n            }\n        }\n        if (scsFound === 0 || this.screenSaver === undefined) {\n            this.log.error('no screensaver found! Stop!');\n            this.adapter.controller!.delete();\n            throw new Error('no screensaver found! Stop!');\n            return;\n        }\n        const navConfig: NavigationConfig = {\n            adapter: this.adapter,\n            panel: this,\n            navigationConfig: options.navigation,\n        };\n        this.navigation = new Navigation(navConfig);\n    }\n\n    init = async (): Promise<void> => {\n        this.controller.mqttClient.subscript(this.topic + '/tele/#', this.onMessage);\n        this.controller.mqttClient.subscript(this.topic + '/stat/#', this.onMessage);\n        this.sendToTasmota(this.topic + '/cmnd/STATUS0', '');\n    };\n    start = async (): Promise<void> => {\n        this.adapter.subscribeStates(`panel.${this.name}.cmd.*`);\n        genericStateObjects.panel.panels._channel.common.name = this.fName;\n        this.library.writedp(`panel.${this.name}`, undefined, genericStateObjects.panel.panels._channel);\n        this.library.writedp(\n            `panel.${this.name}.cmd`,\n            undefined === 'ON',\n            genericStateObjects.panel.panels.cmd._channel,\n        );\n        for (const page of this.pages) {\n            if (page) this.log.debug('init page ' + page.uniqueID);\n            if (page) await page.init();\n        }\n        this.sendToTasmota(this.topic + '/cmnd/POWER1', '');\n        this.sendToTasmota(this.topic + '/cmnd/POWER2', '');\n        this.navigation.init();\n        this.sendToPanel('pageType~pageStartup', { retain: true });\n    };\n\n    private sendToPanelClass: (payload: string, opt?: IClientPublishOptions) => void = () => {};\n    protected sendToPanel: (payload: string, opt?: IClientPublishOptions) => void = (\n        payload: string,\n        opt?: IClientPublishOptions,\n    ) => {\n        this.sendToPanelClass(payload, opt);\n    };\n    async setActivePage(_notSleep?: boolean): Promise<void>;\n    async setActivePage(_page?: Page | boolean | undefined): Promise<void>;\n    async setActivePage(_page?: Page | boolean | undefined, _notSleep?: boolean): Promise<void> {\n        if (_page === undefined) return;\n        let page = this._activePage.page;\n        let sleep = false;\n        if (typeof _page === 'boolean') {\n            sleep = !_page;\n        } else {\n            page = _page;\n            sleep = _notSleep ?? false;\n        }\n        if (sleep == !this._activePage.sleep || page != this._activePage.page) {\n            if (page != this._activePage.page) {\n                if (this._activePage.page) await this._activePage.page.setVisibility(false);\n                if (page && !sleep) {\n                    await page.setVisibility(true);\n                }\n                this._activePage = { page, sleep };\n            } else if (sleep == !this._activePage.sleep) {\n                if (this._activePage.page && !sleep) await this._activePage.page.setVisibility(true, true);\n                this._activePage.sleep = sleep;\n            }\n        }\n    }\n    getActivePage(): Page {\n        if (!this._activePage.page) throw new Error(`No active page here, check code!`);\n        return this._activePage.page;\n    }\n    get isOnline(): boolean {\n        return this._isOnline;\n    }\n    set isOnline(s: boolean) {\n        this._isOnline = s;\n    }\n    async isValid(): Promise<true> {\n        return true;\n    }\n\n    registerOnMessage(fn: callbackMessageType): void {\n        if (this.reivCallbacks.indexOf(fn) === -1) {\n            this.reivCallbacks.push(fn);\n        }\n    }\n    onMessage: callbackMessageType = async (topic: string, message: string) => {\n        for (const fn of this.reivCallbacks) {\n            if (fn) fn(topic, message);\n        }\n        if (topic.endsWith(ReiveTopicAppendix)) {\n            //this.log.debug(`Receive message ${topic} with ${message}`);\n            const event: NSPanel.IncomingEvent | null = pages.convertToEvent(message);\n            if (event) {\n                this.HandleIncomingMessage(event);\n            }\n        } else {\n            const command = (topic.match(/[0-9a-zA-Z]+?\\/[0-9a-zA-Z]+$/g) ||\n                [])[0] as NSPanel.TasmotaIncomingTopics | null;\n            if (command) {\n                this.log.debug(`Receive other message ${topic} with ${message}`);\n                switch (command) {\n                    case 'stat/POWER2': {\n                        this.library.writedp(\n                            `panel.${this.name}.cmd.power2`,\n                            message === 'ON',\n                            genericStateObjects.panel.panels.cmd.power2,\n                        );\n                        break;\n                    }\n                    case 'stat/POWER1': {\n                        this.library.writedp(\n                            `panel.${this.name}.cmd.power1`,\n                            message === 'ON',\n                            genericStateObjects.panel.panels.cmd.power1,\n                        );\n\n                        break;\n                    }\n                    case 'stat/STATUS0': {\n                        const data = JSON.parse(message) as NSPanel.STATUS0;\n                        this.name = this.library.cleandp(data.StatusNET.Mac, false, true);\n                        if (!this.InitDone) {\n                            this.sendToTasmota(\n                                this.topic + '/cmnd/Rule3',\n                                'ON CustomSend DO RuleTimer1 120 ENDON ON Rules#Timer=1 DO CustomSend pageType~pageStartup ENDON',\n                            );\n                            this.sendToTasmota(this.topic + '/cmnd/Rule3', 'ON');\n                            this.InitDone = true;\n                            await this.start();\n                        }\n                        this.library.writedp(\n                            `panel.${this.name}.info`,\n                            undefined,\n                            genericStateObjects.panel.panels.info._channel,\n                        );\n                        this.library.writedp(\n                            `panel.${this.name}.info.status`,\n                            message,\n                            genericStateObjects.panel.panels.info.status,\n                        );\n                    }\n                }\n            }\n        }\n    };\n\n    async onStateChange(id: string, state: ioBroker.State): Promise<void> {\n        if (state.ack) return;\n        if (id.split('.')[1] === this.name) {\n            const cmd = id.replace(`panel.${this.name}.cmd.`, '');\n            switch (cmd) {\n                case 'power1': {\n                    this.sendToTasmota(this.topic + '/cmnd/POWER1', state.val ? 'ON' : 'OFF');\n                    break;\n                }\n                case 'power2': {\n                    this.sendToTasmota(this.topic + '/cmnd/POWER2', state.val ? 'ON' : 'OFF');\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * timeout screensaver after sec\n     * @param sec seconds for timeout\n     */\n    sendScreeensaverTimeout(sec: number): void {\n        this.log.debug(`Set screeensaver timeout to ${sec}s.`);\n        this.sendToPanel(`timeout~${sec}`);\n    }\n    restartLoops(): void {\n        if (this.minuteLoopTimeout) this.adapter.clearTimeout(this.minuteLoopTimeout);\n        if (this.dateUpdateTimeout) this.adapter.clearTimeout(this.dateUpdateTimeout);\n        this.minuteLoop();\n        this.dateUpdateLoop();\n    }\n    /**\n     * Do panel work always at full minute\n     * @returns void\n     */\n    minuteLoop = (): void => {\n        if (this.unload) return;\n        this.sendToPanel(`time~${new Date().toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit' })}`);\n\n        this.pages = this.pages.filter((a) => a && !a.unload);\n\n        const diff = 60000 - (Date.now() % 60000) + 10;\n        this.minuteLoopTimeout = this.adapter.setTimeout(this.minuteLoop, diff);\n    };\n\n    /**\n     * Update Date 2 times per day because of daylight saving.\n     * @returns\n     */\n    dateUpdateLoop = (): void => {\n        if (this.unload) return;\n        const val =\n            this.CustomFormat != ''\n                ? dayjs().format(this.CustomFormat)\n                : new Date().toLocaleDateString(this.config.locale, this.format);\n\n        this.sendToPanel(`date~${val}`);\n        const d: Date = new Date();\n        d.setDate(d.getDate() + 1);\n        // don't set ms, let them be random\n        d.setHours(0, 0, 0);\n        const diff = d.getTime() - Date.now();\n        this.dateUpdateTimeout = this.adapter.setTimeout(this.dateUpdateLoop, diff);\n    };\n\n    async delete(): Promise<void> {\n        await super.delete();\n        this.isOnline = false;\n        if (this.minuteLoopTimeout) this.adapter.clearTimeout(this.minuteLoopTimeout);\n        if (this.dateUpdateTimeout) this.adapter.clearTimeout(this.dateUpdateTimeout);\n    }\n\n    getPagebyUniqueID(uniqueID: string): Page | null {\n        if (!uniqueID) return null;\n        const index = this.pages.findIndex((a) => a && a.uniqueID && a.uniqueID === uniqueID);\n        return this.pages[index] ?? null;\n    }\n    async HandleIncomingMessage(event: NSPanel.IncomingEvent): Promise<void> {\n        this.log.debug('Receive message:' + JSON.stringify(event));\n        const index = this.pages.findIndex((a) => {\n            if (a && a.card !== 'screensaver' && a.card !== 'screensaver2') return true;\n            return false;\n        });\n        if (index === -1) return;\n        switch (event.method) {\n            case 'startup': {\n                this.isOnline = true;\n                if (this.screenSaver) await this.screenSaver.init();\n                else return;\n                this.restartLoops();\n                //this.sendScreeensaverTimeout(this.timeout);\n                this.sendScreeensaverTimeout(3);\n                this.sendToPanel('dimmode~80~100~6371');\n\n                this.navigation.resetPosition();\n                const page = this.navigation.getCurrentPage();\n                const test = false;\n                if (test) {\n                    this.sendToPanel('pageType~cardGrid');\n                    this.sendToPanel(\n                        'entityUpd~Men\u00FC~button~bPrev~\uE730~65535~~~button~bNext~\uE733~65535~~~button~navigate.SensorGrid~21.1~26095~Obergeschoss~PRESS~button~navigate.ObergeschossWindow~\uF1DB~64332~Obergeschoss~Obergeschoss~button~navigate.ogLightsGrid~\uE334~65363~Obergeschoss ACTUAL~PRESS~button~navigate.Alexa~\uF2A7~65222~test~PRESS',\n                    );\n                } else {\n                    await this.setActivePage(page);\n                }\n                // sendPage\n                break;\n            }\n            case 'sleepReached': {\n                await this.setActivePage(this.screenSaver);\n                this.navigation.resetPosition();\n                break;\n            }\n            case 'pageOpenDetail': {\n                await this.setActivePage(false);\n                this.getActivePage().onPopupRequest(\n                    event.id,\n                    event.popup as NSPanel.PopupType,\n                    event.action,\n                    event.opt,\n                );\n                break;\n            }\n            case 'buttonPress2': {\n                if (event.id == 'screensaver') {\n                    await this.setActivePage(this.pages[index]);\n                } else {\n                    if (\n                        event.action === 'button' &&\n                        ['bNext', 'bPrev', 'bUp', 'bHome', 'bSubNext', 'bSubPrev'].indexOf(event.id) != -1\n                    ) {\n                        if (['bPrev', 'bUp', 'bSubPrev'].indexOf(event.id) != -1) this.navigation.goLeft();\n                        else if (['bNext', 'bHome', 'bSubNext'].indexOf(event.id) != -1) this.navigation.goRight();\n                        return;\n                    }\n                    this.getActivePage().onPopupRequest(\n                        event.id,\n                        event.popup as NSPanel.PopupType,\n                        event.action,\n                        event.opt,\n                    );\n                    this.getActivePage().onButtonEvent(event);\n                    await this.setActivePage(true);\n                }\n                break;\n            }\n            case 'renderCurrentPage': {\n                break;\n            }\n            case 'button1': {\n                this.screenSaver!.setVisibility(false);\n\n                break;\n            }\n            case 'button2': {\n                this.screenSaver!.setVisibility(false);\n\n                break;\n            }\n        }\n    }\n\n    /*\n    function HandleMessage(typ: string, method: NSPanel.EventMethod, page: number | undefined, words: string[] | undefined): void {\n        try {\n            if (typ == 'event') {\n                switch (method as NSPanel.EventMethod) {\n                    case 'startup':\n                        screensaverEnabled = false;\n                        UnsubscribeWatcher();\n                        HandleStartupProcess();\n                        pageId = 0;\n                        GeneratePage(config.pages[0]);\n                        if (Debug) log('HandleMessage -> Startup', 'info');\n                        Init_Release();\n                        break;\n                    case 'sleepReached':\n                        useMediaEvents = false;\n                        screensaverEnabled = true;\n                        if (pageId < 0)\n                            pageId = 0;\n                        HandleScreensaver();\n                        if (Debug) log('HandleMessage -> sleepReached', 'info');\n                        break;\n                    case 'pageOpenDetail':\n                        if (words != undefined) {\n                            screensaverEnabled = false;\n                            UnsubscribeWatcher();\n                            if (Debug) {\n                                log('HandleMessage -> pageOpenDetail ' + words[0] + ' - ' + words[1] + ' - ' + words[2] + ' - ' + words[3] + ' - ' + words[4], 'info');\n                            }\n                            let tempId: PageItem['id'];\n                            let tempPageItem = words[3].split('?');\n                            let placeId: number | undefined = undefined;\n                            if (!isNaN(parseInt(tempPageItem[0]))){\n                                tempId = activePage!.items[tempPageItem[0]].id;\n                                placeId = parseInt(tempPageItem[0])\n                                if (tempId == undefined) {\n                                    throw new Error(`Missing id in HandleMessage!`)\n                                }\n                            } else {\n                                tempId = tempPageItem[0];\n                            }\n                            let pageItem: PageItem = findPageItem(tempId);\n                            if (pageItem !== undefined && isPopupType(words[2])) {\n                                let temp: string | NSPanel.mediaOptional | undefined = tempPageItem[1]\n                                if (isMediaOptional(temp)) SendToPanel(GenerateDetailPage(words[2], temp, pageItem, placeId));\n                                else SendToPanel(GenerateDetailPage(words[2], undefined, pageItem, placeId));\n                            }\n                        }\n                        break;\n                    case 'buttonPress2':\n                        screensaverEnabled = false;\n                        HandleButtonEvent(words);\n                        if (Debug) {\n                            if (words != undefined) log('HandleMessage -> buttonPress2 ' + words[0] + ' - ' + words[1] + ' - ' + words[2] + ' - ' + words[3] + ' - ' + words[4], 'info');\n                        }\n                        break;\n                    case 'renderCurrentPage':\n                        // Event only for HA at this Moment\n                        if (Debug) log('renderCurrentPage', 'info');\n                        break;\n                    case 'button1':\n                    case 'button2':\n                        screensaverEnabled = false;\n                        HandleHardwareButton(method);\n                        if (Debug) log('HandleMessage -> button1 /  button2', 'info')\n                        break;\n                    default:\n                        break;\n                }\n            }\n        } catch (err: any) {\n            log('error at function HandleMessage: ' + err.message, 'warn');\n        }\n    }*/\n}\n"],
  "mappings": "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",
  "names": ["dayjs"]
}
