{
  "version": 3,
  "sources": ["../../../src/lib/controller/panel.ts"],
  "sourcesContent": ["import { PanelSend } from './panel-message';\n\nimport { Screensaver, type ScreensaverConfigType } from '../pages/screensaver';\nimport * as Types from '../types/types';\nimport * as pages from '../types/pages';\nimport type { Controller } from './controller';\nimport { BaseClass, type AdapterClassDefinition } from '../classes/library';\nimport type { callbackMessageType } from '../classes/mqtt';\nimport { InternalStates, ReiveTopicAppendix, genericStateObjects } from '../const/definition';\nimport { Page, type PageConfigAll, type PageInterface } from '../classes/Page';\nimport { PageMedia } from '../pages/pageMedia';\nimport type { IClientPublishOptions } from 'mqtt';\nimport type { StatesControler } from './states-controller';\nimport { PageGrid } from '../pages/pageGrid';\nimport { Navigation, type NavigationConfig } from '../classes/navigation';\nimport { PageThermo } from '../pages/pageThermo';\nimport { PagePower } from '../pages/pagePower';\nimport type { PageItem } from '../pages/pageItem';\nimport { PageEntities } from '../pages/pageEntities';\nimport { PageNotify } from '../pages/pageNotification';\nimport { systemNavigation, systemPages } from '../templates/system-templates';\nimport { PageAlarm } from '../pages/pageAlarm';\nimport { PageChart } from '../pages/pageChart';\nimport { PageLChart } from '../pages/pageLChart';\nimport { PageQR } from '../pages/pageQR';\nimport { Dataitem } from '../classes/data-item';\nimport { Color } from '../const/Color';\n\nexport interface panelConfigPartial extends Partial<panelConfigTop> {\n    format?: Partial<Intl.DateTimeFormatOptions>;\n    controller: Controller;\n    topic: string;\n    name: string;\n    buttons: {\n        left: Types.ConfigButtonFunction;\n        right: Types.ConfigButtonFunction;\n    } | null;\n    friendlyName?: string;\n    pages: PageConfigAll[];\n    navigation: NavigationConfig['navigationConfig'];\n    config: ScreensaverConfigType;\n    updated: boolean;\n}\n\nconst DefaultOptions = {\n    format: {\n        weekday: 'short',\n        month: 'short',\n        year: 'numeric',\n        day: 'numeric',\n    },\n    CustomFormat: '',\n    locale: 'de-DE',\n    pages: [],\n};\n\ntype panelConfigTop = {\n    CustomFormat: string;\n    locale: Intl.LocalesArgument;\n    timeout: number;\n    dimLow: number;\n    dimHigh: number;\n};\n\nexport class Panel extends BaseClass {\n    private loopTimeout: ioBroker.Timeout | undefined;\n    private pages: (Page | undefined)[] = [];\n    private _activePage: Page | undefined = undefined;\n    public screenSaver: Screensaver | undefined;\n    private InitProcess: '' | 'awaiting' | 'done' = '';\n    private _isOnline: boolean = false;\n    public lastCard: string = '';\n    public notifyIndex: number = -1;\n    readonly buttons: panelConfigPartial['buttons'];\n    readonly navigation: Navigation;\n    readonly format: Partial<Intl.DateTimeFormatOptions>;\n    readonly controller: Controller;\n    readonly topic: string;\n    readonly reivCallbacks: callbackMessageType[] = [];\n    readonly panelSend: PanelSend;\n    readonly statesControler: StatesControler;\n    readonly config: ScreensaverConfigType;\n    readonly CustomFormat: string;\n    readonly sendToTasmota: (topic: string, payload: string, opt?: IClientPublishOptions) => void = () => {};\n\n    timeout: number;\n    dimMode: {\n        low: number;\n        high: number;\n        delay: number;\n        dayMode: boolean;\n        lowNight: number;\n        highNight: number;\n        startNight: number;\n        endNight: number;\n        dimSchedule: boolean;\n    };\n    screenSaverDoubleClick: boolean = true;\n    detach: { left: boolean; right: boolean } = { left: false, right: false };\n    public persistentPageItems: Record<string, PageItem> = {};\n\n    info: Types.PanelInfo = {\n        isOnline: false,\n        nspanel: {\n            displayVersion: 0,\n            model: '',\n            bigIconLeft: false,\n            bigIconRight: false,\n\n            currentPage: '',\n        },\n        tasmota: {\n            firmwareversion: '',\n            onlineVersion: '',\n            net: {\n                Hostname: '',\n                IPAddress: '',\n                Gateway: '',\n                Subnetmask: '',\n                DNSServer1: '',\n                DNSServer2: '',\n                Mac: '',\n                IP6Global: '',\n                IP6Local: '',\n                Ethernet: {\n                    Hostname: '',\n                    IPAddress: '',\n                    Gateway: '',\n                    Subnetmask: '',\n                    DNSServer1: '',\n                    DNSServer2: '',\n                    Mac: '',\n                    IP6Global: '',\n                    IP6Local: '',\n                },\n                Webserver: 0,\n                HTTP_API: 0,\n                WifiConfig: 0,\n                WifiPower: 0,\n            },\n            uptime: '',\n            sts: {\n                Time: '',\n                Uptime: '',\n                UptimeSec: 0,\n                Heap: 0,\n                SleepMode: '',\n                Sleep: 0,\n                LoadAvg: 0,\n                MqttCount: 0,\n                Berry: {\n                    HeapUsed: 0,\n                    Objects: 0,\n                },\n                POWER1: '',\n                POWER2: '',\n                Wifi: {\n                    AP: 0,\n                    SSId: '',\n                    BSSId: '',\n                    Channel: 0,\n                    Mode: '',\n                    RSSI: 0,\n                    Signal: 0,\n                    LinkCount: 0,\n                    Downtime: '',\n                },\n            },\n        },\n    };\n    friendlyName: string = '';\n    configName: string = '';\n\n    constructor(adapter: AdapterClassDefinition, options: panelConfigPartial) {\n        super(adapter, options.name);\n        this.friendlyName = options.friendlyName ?? options.name;\n        this.configName = options.name;\n        this.panelSend = new PanelSend(adapter, {\n            name: `${options.name}-SendClass`,\n            mqttClient: options.controller.mqttClient,\n            topic: options.topic,\n        });\n        this.timeout = options.timeout || 15;\n        this.buttons = options.buttons;\n        this.CustomFormat = options.CustomFormat ?? '';\n        this.config = options.config;\n        this.format = Object.assign(DefaultOptions.format, options.format);\n        this.controller = options.controller;\n        this.topic = options.topic;\n        if (typeof this.panelSend.addMessage === 'function') {\n            this.sendToPanelClass = this.panelSend.addMessage;\n        }\n        if (typeof this.panelSend.addMessageTasmota === 'function') {\n            this.sendToTasmota = this.panelSend.addMessageTasmota;\n        }\n\n        this.statesControler = options.controller.statesControler;\n\n        this.dimMode = {\n            low: options.dimLow ?? 70,\n            high: options.dimHigh ?? 90,\n            delay: 5,\n            dayMode: true,\n            lowNight: 0,\n            highNight: 50,\n            startNight: 22,\n            endNight: 6,\n            dimSchedule: false,\n        };\n\n        options.pages = options.pages.concat(systemPages);\n        options.navigation = (options.navigation || []).concat(systemNavigation);\n\n        let scsFound = 0;\n        for (let a = 0; a < options.pages.length; a++) {\n            let pageConfig = options.pages[a] ? Page.getPage(options.pages[a], this) : options.pages[a];\n\n            if (!pageConfig || !pageConfig.config) {\n                continue;\n            }\n            const pmconfig = {\n                card: pageConfig.config.card,\n                panel: this,\n                id: String(a),\n                name: `${pageConfig.uniqueID}`,\n                alwaysOn: pageConfig.alwaysOn,\n                adapter: this.adapter,\n                panelSend: this.panelSend,\n                dpInit: pageConfig.dpInit,\n            };\n            switch (pageConfig.config.card) {\n                case 'cardChart': {\n                    pageConfig = Page.getPage(pageConfig, this);\n                    this.pages[a] = new PageChart(pmconfig, pageConfig);\n                    break;\n                }\n                case 'cardLChart': {\n                    pageConfig = Page.getPage(pageConfig, this);\n                    this.pages[a] = new PageLChart(pmconfig, pageConfig);\n                    break;\n                }\n                case 'cardEntities': {\n                    pageConfig = Page.getPage(pageConfig, this);\n                    this.pages[a] = new PageEntities(pmconfig, pageConfig);\n                    break;\n                }\n                case 'cardGrid3':\n                case 'cardGrid2':\n                case 'cardGrid': {\n                    pageConfig = Page.getPage(pageConfig, this);\n                    this.pages[a] = new PageGrid(pmconfig, pageConfig);\n                    break;\n                }\n\n                case 'cardThermo': {\n                    pageConfig = Page.getPage(pageConfig, this);\n                    this.pages[a] = new PageThermo(pmconfig, pageConfig);\n                    break;\n                }\n                case 'cardMedia': {\n                    pageConfig = Page.getPage(pageConfig, this);\n                    this.pages[a] = new PageMedia(pmconfig, pageConfig);\n                    break;\n                }\n\n                case 'cardQR': {\n                    pageConfig = Page.getPage(pageConfig, this);\n                    this.pages[a] = new PageQR(pmconfig, pageConfig);\n                    break;\n                }\n                case 'cardAlarm': {\n                    pageConfig = Page.getPage(pageConfig, this);\n                    this.pages[a] = new PageAlarm(pmconfig, pageConfig);\n                    break;\n                }\n                case 'cardPower': {\n                    pageConfig = Page.getPage(pageConfig, this);\n                    this.pages[a] = new PagePower(pmconfig, pageConfig);\n                    break;\n                }\n                case 'popupNotify2':\n                case 'popupNotify': {\n                    pageConfig = Page.getPage(pageConfig, this);\n                    this.pages[a] = new PageNotify(pmconfig, pageConfig);\n                    break;\n                }\n                case 'screensaver':\n                case 'screensaver2':\n                case 'screensaver3': {\n                    scsFound++;\n\n                    //const opt = Object.assign(DefaultOptions, pageConfig);\n                    const ssconfig: PageInterface = {\n                        card: pageConfig.config.card,\n                        panel: this,\n                        id: String(a),\n                        name: `${pageConfig.uniqueID}`,\n                        adapter: this.adapter,\n                        panelSend: this.panelSend,\n                        dpInit: '',\n                    };\n                    this.screenSaver = new Screensaver(ssconfig, pageConfig);\n                    this.pages[a] = this.screenSaver;\n                    break;\n                }\n                default: {\n                    this.log.error(`Page config is missing card property for page ${pageConfig.uniqueID}`);\n                }\n            }\n        }\n        if (scsFound === 0) {\n            this.log.error('no screensaver found! Stop!');\n            void this.adapter.controller!.delete();\n            throw new Error('no screensaver found! Stop!');\n        }\n        const navConfig: NavigationConfig = {\n            adapter: this.adapter,\n            panel: this,\n            navigationConfig: options.navigation,\n        };\n        this.navigation = new Navigation(navConfig);\n    }\n\n    init = async (): Promise<void> => {\n        this.controller.mqttClient.subscript(`${this.topic}/tele/#`, this.onMessage);\n        this.controller.mqttClient.subscript(`${this.topic}/stat/#`, this.onMessage);\n        this.isOnline = false;\n\n        const channelObj = this.library.cloneObject(genericStateObjects.panel.panels._channel);\n\n        channelObj.common.name = this.friendlyName;\n        channelObj.native = {\n            topic: this.topic,\n            tasmotaName: this.friendlyName,\n            name: this.name,\n            configName: this.configName,\n        };\n        await this.library.writedp(`panels.${this.name}`, undefined, channelObj);\n        await this.library.writedp(`panels.${this.name}.cmd`, undefined, genericStateObjects.panel.panels.cmd._channel);\n        await this.library.writedp(\n            `panels.${this.name}.cmd.dim`,\n            undefined,\n            genericStateObjects.panel.panels.cmd.dim._channel,\n        );\n        await this.library.writedp(\n            `panels.${this.name}.alarm`,\n            undefined,\n            genericStateObjects.panel.panels.alarm._channel,\n        );\n        await this.library.writedp(\n            `panels.${this.name}.buttons`,\n            undefined,\n            genericStateObjects.panel.panels.buttons._channel,\n        );\n        await this.library.writedp(\n            `panels.${this.name}.buttons.left`,\n            true,\n            genericStateObjects.panel.panels.buttons.left,\n        );\n        await this.library.writedp(\n            `panels.${this.name}.buttons.right`,\n            true,\n            genericStateObjects.panel.panels.buttons.right,\n        );\n        let state = this.library.readdb(`panels.${this.name}.cmd.dim.standby`);\n        if (state && state.val != null) {\n            this.dimMode.low = state.val as number;\n        }\n        state = this.library.readdb(`panels.${this.name}.cmd.dim.active`);\n        if (state && state.val != null) {\n            this.dimMode.high = state.val as number;\n        }\n        state = this.library.readdb(`panels.${this.name}.cmd.dim.dayMode`);\n        if (state && state.val != null) {\n            this.dimMode.dayMode = !!state.val;\n        }\n        state = this.library.readdb(`panels.${this.name}.cmd.dim.schedule`);\n        if (state && state.val != null) {\n            this.dimMode.dimSchedule = !!state.val;\n        }\n        state = this.library.readdb(`panels.${this.name}.cmd.dim.nightActive`);\n        if (state && state.val != null) {\n            this.dimMode.highNight = state.val as number;\n        }\n        state = this.library.readdb(`panels.${this.name}.cmd.dim.nightStandby`);\n        if (state && state.val != null) {\n            this.dimMode.lowNight = state.val as number;\n        }\n        state = this.library.readdb(`panels.${this.name}.cmd.dim.nightHourStart`);\n        if (state && state.val != null && typeof state.val === 'number') {\n            this.dimMode.startNight = state.val;\n        }\n        state = this.library.readdb(`panels.${this.name}.cmd.dim.nightHourEnd`);\n        if (state && state.val != null && typeof state.val === 'number') {\n            this.dimMode.endNight = state.val;\n        }\n        state = this.library.readdb(`panels.${this.name}.cmd.dim.delay`);\n        if (state && state.val != null) {\n            this.dimMode.delay = state.val as number;\n        }\n        await this.library.writedp(\n            `panels.${this.name}.cmd.dim.standby`,\n            this.dimMode.low,\n            genericStateObjects.panel.panels.cmd.dim.standby,\n        );\n        await this.library.writedp(\n            `panels.${this.name}.cmd.dim.active`,\n            this.dimMode.high,\n            genericStateObjects.panel.panels.cmd.dim.active,\n        );\n        await this.library.writedp(\n            `panels.${this.name}.cmd.dim.dayMode`,\n            this.dimMode.dayMode,\n            genericStateObjects.panel.panels.cmd.dim.dayMode,\n        );\n        await this.library.writedp(\n            `panels.${this.name}.cmd.dim.schedule`,\n            this.dimMode.dimSchedule,\n            genericStateObjects.panel.panels.cmd.dim.schedule,\n        );\n        await this.library.writedp(\n            `panels.${this.name}.cmd.dim.nightActive`,\n            this.dimMode.highNight,\n            genericStateObjects.panel.panels.cmd.dim.nightActive,\n        );\n        await this.library.writedp(\n            `panels.${this.name}.cmd.dim.nightStandby`,\n            this.dimMode.lowNight,\n            genericStateObjects.panel.panels.cmd.dim.nightStandby,\n        );\n        await this.library.writedp(\n            `panels.${this.name}.cmd.dim.nightHourStart`,\n            String(this.dimMode.startNight),\n            genericStateObjects.panel.panels.cmd.dim.nightHourStart,\n        );\n        await this.library.writedp(\n            `panels.${this.name}.cmd.dim.nightHourEnd`,\n            String(this.dimMode.endNight),\n            genericStateObjects.panel.panels.cmd.dim.nightHourEnd,\n        );\n        await this.library.writedp(\n            `panels.${this.name}.cmd.dim.delay`,\n            this.dimMode.delay,\n            genericStateObjects.panel.panels.cmd.dim.delay,\n        );\n        state = this.library.readdb(`panels.${this.name}.cmd.screenSaverDoubleClick`);\n        if (state && state.val != null) {\n            this.screenSaverDoubleClick = !!state.val;\n        }\n        await this.library.writedp(\n            `panels.${this.name}.cmd.screenSaverDoubleClick`,\n            this.screenSaverDoubleClick,\n            genericStateObjects.panel.panels.cmd.screenSaverDoubleClick,\n        );\n\n        if (state && !state.val) {\n            await this.library.writedp(\n                `panels.${this.name}.buttons.screensaverGesture`,\n                0,\n                genericStateObjects.panel.panels.buttons.screensaverGesture,\n            );\n        } else {\n            await this.library.writedp(\n                `panels.${this.name}.buttons.screensaverGesture`,\n                undefined,\n                genericStateObjects.panel.panels.buttons.screensaverGesture,\n            );\n        }\n\n        state = this.library.readdb(`panels.${this.name}.cmd.detachRight`);\n        if (state && state.val != null) {\n            this.detach.right = !!state.val;\n        }\n        state = this.library.readdb(`panels.${this.name}.cmd.detachLeft`);\n        if (state && state.val != null) {\n            this.detach.left = !!state.val;\n        }\n        await this.library.writedp(\n            `panels.${this.name}.cmd.detachRight`,\n            this.detach.right,\n            genericStateObjects.panel.panels.cmd.detachRight,\n        );\n        await this.library.writedp(\n            `panels.${this.name}.cmd.detachLeft`,\n            this.detach.left,\n            genericStateObjects.panel.panels.cmd.detachLeft,\n        );\n        state = this.library.readdb(`panels.${this.name}.cmd.screensaverTimeout`);\n        if (state) {\n            this.timeout = parseInt(String(state.val));\n        }\n        await this.library.writedp(\n            `panels.${this.name}.cmd.screensaverTimeout`,\n            this.timeout,\n            genericStateObjects.panel.panels.cmd.screensaverTimeout,\n        );\n\n        this.adapter.subscribeStates(`panels.${this.name}.cmd.*`);\n        this.adapter.subscribeStates(`panels.${this.name}.alarm.*`);\n\n        this.restartLoops();\n    };\n\n    start = async (): Promise<void> => {\n        for (const id in InternalStates.panel) {\n            const obj = InternalStates.panel[id as keyof typeof InternalStates.panel];\n            await this.statesControler.setInternalState(\n                `${this.name}/${id}`,\n                obj.val,\n                obj.ack,\n                obj.common,\n                obj.noTrigger ? undefined : this.onInternalCommand,\n            );\n        }\n\n        for (const page of this.pages) {\n            if (page && page.name) {\n                this.log.debug(\n                    `Initialisation of page ${page.name} - card: ${page.card} - pageItems: ${(page.pageItemConfig || []).length}`,\n                );\n                await page.init();\n            } else {\n                this.log.error('Page failed or has no name!');\n            }\n        }\n\n        this.navigation.init();\n\n        {\n            const currentPage = this.library.readdb(`panels.${this.name}.cmd.mainNavigationPoint`);\n            if (currentPage && currentPage.val) {\n                this.navigation.setMainPageByName(String(currentPage.val));\n            }\n\n            genericStateObjects.panel.panels.cmd.mainNavigationPoint.common.states =\n                this.navigation.buildCommonStates();\n            const page = this.navigation.getCurrentMainPoint();\n            await this.library.writedp(\n                `panels.${this.name}.cmd.mainNavigationPoint`,\n                page,\n                genericStateObjects.panel.panels.cmd.mainNavigationPoint,\n            );\n        }\n\n        const currentScreensaver = this.library.readdb(`panels.${this.name}.cmd.screenSaver`);\n        const scs: Page[] = this.pages.filter(\n            a => a && (a.card === 'screensaver' || a.card === 'screensaver2' || a.card === 'screensaver3'),\n        ) as Page[];\n        //const s = scs.filter(a => currentScreensaver && a.name === currentScreensaver.val);\n        if (currentScreensaver && currentScreensaver.val != null) {\n            if (scs && scs[0]) {\n                this.screenSaver = scs[0] as Screensaver;\n                if (pages.isScreenSaverModeAsNumber(currentScreensaver.val)) {\n                    this.screenSaver.overwriteModel(currentScreensaver.val, true);\n                }\n            }\n        }\n\n        /*const states: Record<Types.ScreensaverModeType, string> = {\n            standard: 'Standard',\n            advanced: 'Advanced',\n            alternate: 'Alternate',\n            easyview: 'Easyview',\n        };\n\n        genericStateObjects.panel.panels.cmd.screenSaver.common.states = states;*/\n        await this.library.writedp(\n            `panels.${this.name}.cmd.screenSaver`,\n            this.screenSaver && this.screenSaver.mode ? this.screenSaver.mode : 'none',\n            genericStateObjects.panel.panels.cmd.screenSaver,\n        );\n        let state = this.library.readdb(`panels.${this.name}.cmd.screenSaverRotationTime`);\n        let temp: any = 0;\n        if (state && typeof state.val === 'number') {\n            temp = state.val === 0 ? state.val : state.val < 3 ? 3 : state.val > 3600 ? 3600 : state.val;\n            if (this.screenSaver) {\n                this.screenSaver.rotationTime = temp * 1000;\n            }\n        }\n        await this.library.writedp(\n            `panels.${this.name}.cmd.screenSaverRotationTime`,\n            temp,\n            genericStateObjects.panel.panels.cmd.screenSaverRotationTime,\n        );\n\n        if (this.buttons) {\n            for (const b in this.buttons) {\n                const k = b as keyof typeof this.buttons;\n                const button = this.buttons[k];\n                if (button && this.screenSaver) {\n                    switch (button.mode) {\n                        case 'page': {\n                            break;\n                        }\n                        case 'switch':\n                        case 'button': {\n                            if (typeof button.state === 'string') {\n                                button.state = new Dataitem(\n                                    this.adapter,\n                                    {\n                                        type: 'state',\n                                        dp: button.state,\n                                    },\n                                    this.screenSaver,\n                                    this.statesControler,\n                                );\n                                if (!(await button.state.isValidAndInit())) {\n                                    this.buttons[k] = null;\n                                }\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        state = this.library.readdb(`panels.${this.name}.info.nspanel.bigIconLeft`);\n        this.info.nspanel.bigIconLeft = state ? !!state.val : false;\n        state = this.library.readdb(`panels.${this.name}.info.nspanel.bigIconRight`);\n        this.info.nspanel.bigIconRight = state ? !!state.val : false;\n\n        this.sendToTasmota(`${this.topic}/cmnd/POWER1`, '');\n        this.sendToTasmota(`${this.topic}/cmnd/POWER2`, '');\n        this.sendRules();\n    };\n\n    private sendToPanelClass: (payload: string, opt?: IClientPublishOptions) => void = () => {};\n    protected sendToPanel: (payload: string, opt?: IClientPublishOptions) => void = (\n        payload: string,\n        opt?: IClientPublishOptions,\n    ) => {\n        this.sendToPanelClass(payload, opt);\n    };\n    async setActivePage(_page?: Page | boolean, _notSleep?: boolean): Promise<void> {\n        if (_page === undefined) {\n            return;\n        }\n        let page = this._activePage;\n        let sleep = false;\n        if (typeof _page === 'boolean') {\n            sleep = !_page;\n        } else {\n            page = _page;\n            sleep = _notSleep ?? false;\n        }\n        if (!this._activePage) {\n            if (page === undefined) {\n                return;\n            }\n            page.setLastPage(this._activePage ?? undefined);\n            await page.setVisibility(true);\n\n            this._activePage = page;\n        } else if (sleep !== this._activePage.sleep || page !== this._activePage) {\n            if (page != this._activePage) {\n                if (this._activePage) {\n                    await this._activePage.setVisibility(false);\n                }\n                if (page) {\n                    page.setLastPage(this._activePage ?? undefined);\n                    if (!sleep) {\n                        await page.setVisibility(true);\n                    }\n                    page.sleep = sleep;\n                    this._activePage = page;\n                }\n            } else if (sleep !== this._activePage.sleep) {\n                page.setLastPage(this._activePage ?? undefined);\n                if (!sleep) {\n                    await this._activePage.setVisibility(true, true);\n                }\n                this._activePage.sleep = sleep;\n            }\n        }\n    }\n    getActivePage(): Page {\n        if (!this._activePage) {\n            throw new Error(`No active page here, check code!`);\n        }\n        return this._activePage;\n    }\n    get isOnline(): boolean {\n        return this._isOnline;\n    }\n    set isOnline(s: boolean) {\n        if (this.unload) {\n            return;\n        }\n        this.info.isOnline = s;\n        if (s !== this._isOnline) {\n            void this.library.writedp(\n                `panels.${this.name}.info.isOnline`,\n                s,\n                genericStateObjects.panel.panels.info.isOnline,\n            );\n            if (s) {\n                this.log.info('is online!');\n            } else {\n                this.log.warn('is offline!');\n            }\n            //this.restartLoops();\n        }\n        this._isOnline = s;\n    }\n    async isValid(): Promise<true> {\n        return true;\n    }\n\n    registerOnMessage(fn: callbackMessageType): void {\n        if (this.reivCallbacks.indexOf(fn) === -1) {\n            this.reivCallbacks.push(fn);\n        }\n    }\n    onMessage: callbackMessageType = async (topic: string, message: string) => {\n        for (const fn of this.reivCallbacks) {\n            if (fn) {\n                fn(topic, message);\n            }\n        }\n        if (topic.endsWith(ReiveTopicAppendix)) {\n            //this.log.debug(`Receive message ${topic} with ${message}`);\n            const event: Types.IncomingEvent | null = this.convertToEvent(message);\n            if (event) {\n                await this.HandleIncomingMessage(event);\n            } else if (message) {\n                let msg: any = null;\n                try {\n                    msg = JSON.parse(message);\n                } catch {\n                    this.log.warn(`Receive a broken msg from mqtt: ${msg}`);\n                }\n                if (!msg) {\n                    return;\n                }\n                if ('Flashing' in msg) {\n                    this.isOnline = false;\n                    this.log.info(`Flashing: ${msg.Flashing.complete}%`);\n                    return;\n                }\n            }\n        } else {\n            const command = (topic.match(/[0-9a-zA-Z]+?\\/[0-9a-zA-Z]+$/g) ||\n                [])[0] as Types.TasmotaIncomingTopics | null;\n            if (command) {\n                //this.log.debug(`Receive other message ${topic} with ${message}`);\n                switch (command) {\n                    case 'stat/POWER2': {\n                        await this.library.writedp(\n                            `panels.${this.name}.cmd.power2`,\n                            message === 'ON',\n                            genericStateObjects.panel.panels.cmd.power2,\n                        );\n                        await this.statesControler.setInternalState(`${this.name}/cmd/power2`, message === 'ON', true);\n                        break;\n                    }\n                    case 'stat/POWER1': {\n                        await this.library.writedp(\n                            `panels.${this.name}.cmd.power1`,\n                            message === 'ON',\n                            genericStateObjects.panel.panels.cmd.power1,\n                        );\n                        await this.statesControler.setInternalState(`${this.name}/cmd/power1`, message === 'ON', true);\n                        break;\n                    }\n                    case 'stat/STATUS0': {\n                        if (this.InitProcess === 'awaiting') {\n                            this.log.warn('Receive status0 while awaiting init process!');\n                            return;\n                        }\n                        const data = JSON.parse(message) as Types.STATUS0;\n                        if (this.name !== this.library.cleandp(data.StatusNET.Mac, false, true)) {\n                            this.log.error(`Receive wrong mac address ${data.StatusNET.Mac}! Update ur config!`);\n                        }\n\n                        const i = this.InitProcess === 'done';\n                        if (this.InitProcess === '') {\n                            this.InitProcess = 'awaiting';\n                            await this.start();\n                            this.InitProcess = 'done';\n                        }\n                        await this.library.writedp(\n                            `panels.${this.name}.info`,\n                            undefined,\n                            genericStateObjects.panel.panels.info._channel,\n                        );\n                        await this.library.writedp(\n                            `panels.${this.name}.info.status`,\n                            message,\n                            genericStateObjects.panel.panels.info.status,\n                        );\n                        this.info.tasmota.net = data.StatusNET;\n                        this.info.tasmota.firmwareversion = data.StatusFWR.Version;\n                        this.info.tasmota.uptime = data.StatusSTS.Uptime;\n                        this.info.tasmota.sts = data.StatusSTS;\n\n                        if (!i) {\n                            await this.library.writeFromJson(\n                                `panels.${this.name}.info.tasmota`,\n                                'panel.panels.info.tasmota',\n                                genericStateObjects,\n                                this.info.tasmota,\n                            );\n                        } else {\n                            await this.writeInfo();\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    sendRules(): void {\n        this.sendToTasmota(\n            `${this.topic}/cmnd/Rule3`,\n            `ON CustomSend DO RuleTimer1 120 ENDON ON Rules#Timer=1 DO CustomSend pageType~pageStartup ENDON${\n                this.detach.left\n                    ? ` ON Button1#state do Publish ${this.topic}/tele/RESULT {\"CustomRecv\":\"event,button1\"} ENDON`\n                    : ''\n            }${\n                this.detach.right\n                    ? ` ON Button2#state do Publish ${this.topic}/tele/RESULT {\"CustomRecv\":\"event,button2\"} ENDON`\n                    : ''\n            }`,\n        );\n        this.sendToTasmota(`${this.topic}/cmnd/Rule3`, 'ON');\n    }\n\n    async onStateChange(id: string, state: Types.nsPanelState): Promise<void> {\n        if (state.ack) {\n            return;\n        }\n        if (id.split('.')[1] === this.name) {\n            const cmd = id.replace(`panels.${this.name}.cmd.`, '');\n            switch (cmd) {\n                case 'power1': {\n                    this.sendToTasmota(`${this.topic}/cmnd/POWER1`, state.val ? 'ON' : 'OFF');\n                    break;\n                }\n                case 'power2': {\n                    this.sendToTasmota(`${this.topic}/cmnd/POWER2`, state.val ? 'ON' : 'OFF');\n                    break;\n                }\n                case 'mainNavigationPoint': {\n                    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n                    this.navigation.setMainPageByName(state.val ? String(state.val) : 'main');\n                    await this.library.writedp(\n                        `panels.${this.name}.cmd.mainNavigationPoint`,\n                        // eslint-disable-next-line @typescript-eslint/no-base-to-string\n                        state.val ? String(state.val) : 'main',\n                    );\n                    break;\n                }\n                case 'goToNavigationPoint': {\n                    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n                    await this.navigation.setTargetPageByName(state.val ? String(state.val) : 'main');\n                    break;\n                }\n                case 'screensaverTimeout': {\n                    if (state && state.val != null && typeof state.val === 'number') {\n                        await this.statesControler.setInternalState(\n                            `${this.name}/cmd/screensaverTimeout`,\n\n                            parseInt(String(state.val)),\n                            false,\n                        );\n                    }\n                    break;\n                }\n                case 'dim.standby': {\n                    if (state && state.val != null && typeof state.val === 'number') {\n                        await this.statesControler.setInternalState(\n                            `${this.name}/cmd/dimStandby`,\n\n                            parseInt(String(state.val)),\n                            false,\n                        );\n                    }\n                    break;\n                }\n                case 'dim.active': {\n                    if (state && state.val != null && typeof state.val === 'number') {\n                        await this.statesControler.setInternalState(\n                            `${this.name}/cmd/dimActive`,\n\n                            parseInt(String(state.val)),\n                            false,\n                        );\n                    }\n                    break;\n                }\n                case 'dim.dayMode': {\n                    if (this.dimMode.dimSchedule) {\n                        this.log.warn('Timer is active - User input overwritten!');\n                    } else {\n                        this.dimMode.dayMode = !!state.val;\n                        this.sendDimmode();\n                    }\n                    await this.library.writedp(\n                        `panels.${this.name}.cmd.dim.dayMode`,\n                        this.dimMode.dayMode,\n                        genericStateObjects.panel.panels.cmd.dim.dayMode,\n                    );\n                    break;\n                }\n                case 'dim.schedule': {\n                    this.dimMode.dimSchedule = !!state.val;\n\n                    if (this.dimMode.dimSchedule) {\n                        this.sendDimmode();\n                    }\n\n                    await this.library.writedp(\n                        `panels.${this.name}.cmd.dayMode`,\n                        this.dimMode.dimSchedule,\n                        genericStateObjects.panel.panels.cmd.dim.schedule,\n                    );\n                    break;\n                }\n                case 'dim.nightActive': {\n                    if (state && state.val != null && typeof state.val === 'number') {\n                        await this.statesControler.setInternalState(\n                            `${this.name}/cmd/dimNightActive`,\n\n                            parseInt(String(state.val)),\n                            false,\n                        );\n                    }\n                    break;\n                }\n                case 'dim.nightStandby': {\n                    if (state && state.val != null && typeof state.val === 'number') {\n                        await this.statesControler.setInternalState(\n                            `${this.name}/cmd/dimNightStandby`,\n\n                            parseInt(String(state.val)),\n                            false,\n                        );\n                    }\n                    break;\n                }\n                case 'dim.nightHourStart': {\n                    if (state && state.val != null && typeof state.val === 'number') {\n                        if (state.val <= 23 && state.val >= 0 && state.val % 1 === 0) {\n                            await this.statesControler.setInternalState(\n                                `${this.name}/cmd/dimNightHourStart`,\n\n                                parseInt(String(state.val)),\n                                false,\n                            );\n                        }\n                    }\n                    break;\n                }\n                case 'dim.nightHourEnd': {\n                    if (state && state.val != null && typeof state.val === 'number') {\n                        if (state.val <= 23 && state.val >= 0 && state.val % 1 === 0) {\n                            await this.statesControler.setInternalState(\n                                `${this.name}/cmd/dimNightHourEnd`,\n\n                                parseInt(String(state.val)),\n                                false,\n                            );\n                        }\n                    }\n                    break;\n                }\n                case 'dim.delay': {\n                    if (state && state.val != null && typeof state.val === 'number') {\n                        this.dimMode.delay = state.val;\n                        this.sendDimmode();\n                        await this.library.writedp(\n                            `panels.${this.name}.cmd.dim.delay`,\n                            this.dimMode.delay,\n                            genericStateObjects.panel.panels.cmd.dim.delay,\n                        );\n                    }\n                    break;\n                }\n                case 'screenSaverDoubleClick': {\n                    if (state && state.val != null) {\n                        this.screenSaverDoubleClick = !!state.val;\n                        await this.statesControler.setInternalState(\n                            `${this.name}/cmd/screenSaverDoubleClick`,\n                            !!state.val,\n                            false,\n                        );\n                    }\n                    /* await this.library.writedp(\n                        `panels.${this.name}.cmd.screenSaverDoubleClick`,\n                        this.screenSaverDoubleClick,\n                        genericStateObjects.panel.panels.cmd.screenSaverDoubleClick,\n                    );\n                    if (!this.screenSaverDoubleClick) {\n                        await this.library.writedp(\n                            `panels.${this.name}.buttons.screensaverGesture`,\n                            0,\n                            genericStateObjects.panel.panels.buttons.screensaverGesture,\n                        );\n                    } */\n                    break;\n                }\n                case 'detachLeft': {\n                    await this.statesControler.setInternalState(`${this.name}/cmd/detachLeft`, !!state.val, false);\n                    break;\n                }\n                case 'detachRight': {\n                    await this.statesControler.setInternalState(`${this.name}/cmd/detachRight`, !!state.val, false);\n                    break;\n                }\n                case 'screenSaver': {\n                    /*const i = this.pages.findIndex(a => a && a.name === state.val);\n                    const s = this.pages[i] as Screensaver;\n                    if (s) {\n                        this.screenSaver = s;\n                        await this.library.writedp(`panels.${this.name}.cmd.screenSaver`, s.name);\n                    }*/\n                    if (typeof state.val === 'number' && pages.isScreenSaverModeAsNumber(state.val)) {\n                        if (this.screenSaver) {\n                            this.screenSaver.overwriteModel(state.val);\n                            await this.library.writedp(`panels.${this.name}.cmd.screenSaver`, state.val);\n                        }\n                    }\n                    break;\n                }\n                case 'screenSaverRotationTime': {\n                    if (state && state.val != null && typeof state.val === 'number') {\n                        await this.statesControler.setInternalState(\n                            `${this.name}/cmd/screenSaverRotationTime`,\n\n                            parseInt(String(state.val)),\n                            false,\n                        );\n                    }\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * timeout screensaver after sec\n     *\n     * @param sec seconds for timeout\n     */\n    sendScreeensaverTimeout(sec: number): void {\n        this.log.debug(`Set screeensaver timeout to ${sec}s.`);\n        this.sendToPanel(`timeout~${sec}`);\n    }\n\n    sendDimmode(): void {\n        const hour = new Date().getHours();\n        if (this.dimMode.dimSchedule) {\n            if (this.dimMode.startNight > this.dimMode.endNight) {\n                if (hour >= this.dimMode.startNight || hour < this.dimMode.endNight) {\n                    this.dimMode.dayMode = false;\n                } else {\n                    this.dimMode.dayMode = true;\n                }\n            } else {\n                if (hour >= this.dimMode.startNight && hour < this.dimMode.endNight) {\n                    this.dimMode.dayMode = false;\n                } else {\n                    this.dimMode.dayMode = true;\n                }\n            }\n        }\n        let cmd = `${Color.rgb_dec565(Color.Black)}~${Color.rgb_dec565(Color.White)}`;\n        if (this.dimMode.dayMode) {\n            cmd = `dimmode~${this.dimMode.low}~${this.dimMode.high}~${cmd}`;\n        } else {\n            cmd = `dimmode~${this.dimMode.lowNight}~${this.dimMode.highNight}~${cmd}`;\n        }\n        this.sendToPanel(cmd);\n    }\n\n    restartLoops(): void {\n        if (this.loopTimeout) {\n            this.adapter.clearTimeout(this.loopTimeout);\n        }\n        this.loop();\n    }\n    /**\n     * Do panel work always at full minute\n     *\n     */\n    loop = (): void => {\n        if (this.unload) {\n            return;\n        }\n        this.sendToTasmota(`${this.topic}/cmnd/STATUS0`, '');\n        this.pages = this.pages.filter(a => a && !a.unload);\n        let t = 300000 + Math.random() * 30000 - 15000;\n        if (!this.isOnline) {\n            t = 15000;\n            this.sendToPanel('pageType~pageStartup', { retain: true });\n        }\n        this.loopTimeout = this.adapter.setTimeout(this.loop, t);\n    };\n\n    async delete(): Promise<void> {\n        this.isOnline = false;\n        if (this.loopTimeout) {\n            this.adapter.clearTimeout(this.loopTimeout);\n        }\n        await super.delete();\n        await this.library.writedp(\n            `panels.${this.name}.info.isOnline`,\n            false,\n            genericStateObjects.panel.panels.info.isOnline,\n        );\n        await this.panelSend.delete();\n        await this.navigation.delete();\n        for (const a of this.pages) {\n            if (a) {\n                await a.delete();\n            }\n        }\n        this.persistentPageItems = {};\n    }\n\n    getPagebyUniqueID(uniqueID: string): Page | null {\n        if (!uniqueID) {\n            return null;\n        }\n        const index = this.pages.findIndex(a => a && a.name && a.name === uniqueID);\n        return this.pages[index] ?? null;\n    }\n\n    async writeInfo(): Promise<void> {\n        await this.library.writeFromJson(\n            `panels.${this.name}.info`,\n            'panel.panels.info',\n            genericStateObjects,\n            this.info,\n        );\n    }\n    /**\n     *  Handle incoming messages from panel\n     *\n     * @param event incoming event....\n     * @returns void\n     */\n    async HandleIncomingMessage(event: Types.IncomingEvent): Promise<void> {\n        if (this.InitProcess !== 'done') {\n            this.isOnline = false;\n            return;\n        }\n        if (!event.method) {\n            return;\n        }\n        if (this._activePage && this._activePage.card !== 'cardAlarm') {\n            this.log.debug(`Receive message:${JSON.stringify(event)}`);\n        }\n\n        if (!this.screenSaver) {\n            return;\n        }\n        if (this.isOnline === false && event.method !== 'startup') {\n            void this.restartLoops();\n            return;\n        }\n\n        switch (event.method) {\n            case 'startup': {\n                this.isOnline = true;\n\n                this.info.nspanel.displayVersion = parseInt(event.id);\n                this.info.nspanel.model = event.action;\n\n                await this.writeInfo();\n                this.sendScreeensaverTimeout(this.timeout);\n                this.sendDimmode();\n                this.navigation.resetPosition();\n\n                const i = this.pages.findIndex(a => a && a.name === '///WelcomePopup');\n                const popup = i !== -1 ? this.pages[i] : undefined;\n                if (popup) {\n                    await this.setActivePage(popup);\n                }\n                if (this.screenSaver) {\n                    await this.screenSaver.createPageItems();\n                    //this.controller && (await this.controller.statesControler.activateTrigger(this.screenSaver));\n                    await this.screenSaver.HandleDate();\n                    await this.screenSaver.HandleTime();\n                }\n                this.log.info('Panel startup finished!');\n                break;\n            }\n            case 'sleepReached': {\n                await this.setActivePage(this.screenSaver);\n                this.navigation.resetPosition();\n                this.pages.forEach(a => a && a.reset());\n                break;\n            }\n            case 'pageOpenDetail': {\n                await this.setActivePage(false);\n                await this.getActivePage().onPopupRequest(\n                    event.id,\n                    event.popup as Types.PopupType,\n                    event.action,\n                    event.opt,\n                    event,\n                );\n                break;\n            }\n            case 'buttonPress2': {\n                if (event.id == 'screensaver') {\n                    if (this.screenSaverDoubleClick && this.screenSaver.screensaverSwipe) {\n                        switch (event.action) {\n                            case 'bExit': {\n                                await this.library.writedp(\n                                    `panels.${this.name}.buttons.screensaverGesture`,\n                                    2,\n                                    genericStateObjects.panel.panels.buttons.screensaverGesture,\n                                );\n                                break;\n                            }\n                            case 'swipeUp': {\n                                await this.library.writedp(\n                                    `panels.${this.name}.buttons.screensaverGesture`,\n                                    3,\n                                    genericStateObjects.panel.panels.buttons.screensaverGesture,\n                                );\n                                break;\n                            }\n                            case 'swipeDown': {\n                                await this.library.writedp(\n                                    `panels.${this.name}.buttons.screensaverGesture`,\n                                    4,\n                                    genericStateObjects.panel.panels.buttons.screensaverGesture,\n                                );\n                                break;\n                            }\n                            case 'swipeLeft': {\n                                await this.library.writedp(\n                                    `panels.${this.name}.buttons.screensaverGesture`,\n                                    5,\n                                    genericStateObjects.panel.panels.buttons.screensaverGesture,\n                                );\n                                break;\n                            }\n                            case 'swipeRight': {\n                                await this.library.writedp(\n                                    `panels.${this.name}.buttons.screensaverGesture`,\n                                    6,\n                                    genericStateObjects.panel.panels.buttons.screensaverGesture,\n                                );\n                                break;\n                            }\n                        }\n                    }\n                    if ((this.screenSaverDoubleClick && parseInt(event.opt) > 1) || !this.screenSaverDoubleClick) {\n                        this.navigation.resetPosition();\n                        await this.navigation.setCurrentPage();\n                        break;\n                    }\n                } else if (event.action === 'bExit' && event.id !== 'popupNotify') {\n                    await this.setActivePage(true);\n                } else {\n                    if (\n                        event.action === 'button' &&\n                        ['bNext', 'bPrev', 'bUp', 'bHome', 'bSubNext', 'bSubPrev'].indexOf(event.id) != -1\n                    ) {\n                        if (['bPrev', 'bUp', 'bSubPrev'].indexOf(event.id) != -1) {\n                            this.getActivePage().goLeft();\n                        } else if (['bNext', 'bHome', 'bSubNext'].indexOf(event.id) != -1) {\n                            this.getActivePage().goRight();\n                        }\n                        break;\n                    }\n                    await this.getActivePage().onPopupRequest(\n                        event.id,\n                        event.popup as Types.PopupType,\n                        event.action,\n                        event.opt,\n                        event,\n                    );\n                    await this.getActivePage().onButtonEvent(event);\n                }\n                break;\n            }\n            case 'renderCurrentPage': {\n                // Event only for HA at this Moment\n                break;\n            }\n            case 'button1': {\n                await this.onDetachButtonEvent('left');\n                break;\n            }\n            case 'button2': {\n                await this.onDetachButtonEvent('right');\n                break;\n            }\n            default: {\n                this.log.warn('Missing method in HandleIncomingMessage()');\n            }\n        }\n    }\n\n    onDetachButtonEvent = async (button: 'left' | 'right'): Promise<void> => {\n        const action: Types.ConfigButtonFunction = this.buttons\n            ? button === 'left'\n                ? this.buttons.left\n                : this.buttons.right\n            : null;\n        await this.library.writedp(`panels.${this.name}.buttons.${button}`, false, null, true, true);\n        if (action) {\n            switch (action.mode) {\n                case 'button': {\n                    if (typeof action.state === 'string') {\n                        this.log.error(`Button ${button} has no state!`);\n                        return;\n                    }\n                    await action.state.setStateTrue();\n                    break;\n                }\n                case 'page': {\n                    if (typeof action.page === 'string') {\n                        await this.navigation.setTargetPageByName(action.page);\n                    }\n                    break;\n                }\n                case 'switch': {\n                    if (typeof action.state === 'string') {\n                        this.log.error(`Button ${button} has no state!`);\n                        return;\n                    }\n                    await action.state.setStateFlip();\n                    break;\n                }\n            }\n        }\n    };\n    onInternalCommand = async (id: string, state: Types.nsPanelState | undefined): Promise<Types.nsPanelStateVal> => {\n        if (!id.startsWith(this.name)) {\n            return null;\n        }\n        const token: Types.PanelInternalCommand = id.replace(`${this.name}/`, '') as Types.PanelInternalCommand;\n        if (state && !state.ack && state.val != null) {\n            switch (token) {\n                case 'cmd/power1': {\n                    this.sendToTasmota(`${this.topic}/cmnd/POWER1`, state.val ? 'ON' : 'OFF');\n                    break;\n                }\n                case 'cmd/power2': {\n                    this.sendToTasmota(`${this.topic}/cmnd/POWER2`, state.val ? 'ON' : 'OFF');\n                    break;\n                }\n                case `cmd/detachRight`: {\n                    this.detach.right = !!state.val;\n                    await this.library.writedp(`panels.${this.name}.cmd.detachRight`, this.detach.right);\n                    this.sendRules();\n                    break;\n                }\n                case 'cmd/detachLeft': {\n                    this.detach.left = !!state.val;\n                    await this.library.writedp(`panels.${this.name}.cmd.detachLeft`, this.detach.left);\n                    this.sendRules();\n                    break;\n                }\n\n                case 'cmd/bigIconLeft': {\n                    this.info.nspanel.bigIconLeft = !!state.val;\n                    this.screenSaver && (await this.screenSaver.HandleScreensaverStatusIcons());\n                    //this.statesControler.setInternalState(`${this.name}/cmd/bigIconLeft`, !!state.val, true);\n                    await this.library.writeFromJson(\n                        `panels.${this.name}.info`,\n                        'panel.panels.info',\n                        genericStateObjects,\n                        this.info,\n                    );\n                    break;\n                }\n                case 'cmd/bigIconRight': {\n                    this.info.nspanel.bigIconRight = !!state.val;\n                    this.screenSaver && (await this.screenSaver.HandleScreensaverStatusIcons());\n                    //this.statesControler.setInternalState(`${this.name}/cmd/bigIconRight`, !!state.val, true);\n                    await this.library.writeFromJson(\n                        `panels.${this.name}.info`,\n                        'panel.panels.info',\n                        genericStateObjects,\n                        this.info,\n                    );\n                    break;\n                }\n                case 'cmd/screensaverTimeout': {\n                    if (typeof state.val !== 'boolean') {\n                        // eslint-disable-next-line @typescript-eslint/no-base-to-string\n                        const val = parseInt(String(state.val));\n                        this.timeout = val;\n                        this.sendScreeensaverTimeout(this.timeout);\n                        await this.statesControler.setInternalState(`${this.name}/cmd/screensaverTimeout`, val, true);\n                        await this.library.writedp(`panels.${this.name}.cmd.screensaverTimeout`, this.timeout);\n                    }\n                    break;\n                }\n                case 'cmd/dimStandby': {\n                    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n                    const val = parseInt(String(state.val));\n                    this.dimMode.low = val;\n                    this.sendDimmode();\n                    await this.library.writedp(`panels.${this.name}.cmd.dim.standby`, this.dimMode.low);\n                    break;\n                }\n                case 'cmd/dimActive': {\n                    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n                    const val = parseInt(String(state.val));\n                    this.dimMode.high = val;\n                    this.sendDimmode();\n                    await this.library.writedp(`panels.${this.name}.cmd.dim.active`, this.dimMode.high);\n                    break;\n                }\n                case 'cmd/dimNightActive': {\n                    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n                    const val = parseInt(String(state.val));\n                    this.dimMode.highNight = val;\n                    this.sendDimmode();\n                    await this.library.writedp(`panels.${this.name}.cmd.dim.nightActive`, this.dimMode.highNight);\n                    break;\n                }\n                case 'cmd/dimNightStandby': {\n                    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n                    const val = parseInt(String(state.val));\n                    this.dimMode.lowNight = val;\n                    this.sendDimmode();\n                    await this.library.writedp(`panels.${this.name}.cmd.dim.nightStandby`, this.dimMode.lowNight);\n                    break;\n                }\n                case 'cmd/dimNightHourStart': {\n                    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n                    const val = parseInt(String(state.val));\n                    this.dimMode.startNight = val;\n                    this.sendDimmode();\n                    await this.library.writedp(`panels.${this.name}.cmd.dim.nightHourStart`, this.dimMode.startNight);\n                    break;\n                }\n                case 'cmd/dimNightHourEnd': {\n                    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n                    const val = parseInt(String(state.val));\n                    this.dimMode.endNight = val;\n                    this.sendDimmode();\n                    await this.library.writedp(`panels.${this.name}.cmd.dim.nightHourEnd`, this.dimMode.endNight);\n                    break;\n                }\n                case 'cmd/NotificationCleared2':\n                case 'cmd/NotificationCleared': {\n                    await this.controller.systemNotification.clearNotification(this.notifyIndex);\n                }\n                // eslint-disable-next-line no-fallthrough\n                case 'cmd/NotificationNext2':\n                case 'cmd/NotificationNext': {\n                    this.notifyIndex = this.controller.systemNotification.getNotificationIndex(++this.notifyIndex);\n\n                    if (this.notifyIndex !== -1) {\n                        const val = this.controller.systemNotification.getNotification(this.notifyIndex);\n                        if (val) {\n                            await this.statesControler.setInternalState(\n                                `${this.name}/cmd/popupNotification${token.endsWith('2') ? '' : '2'}`,\n                                JSON.stringify(val),\n                                false,\n                            );\n                        }\n                        break;\n                    }\n                    await this.HandleIncomingMessage({\n                        type: 'event',\n                        method: 'buttonPress2',\n                        id: 'popupNotify',\n                        action: 'bExit',\n                        opt: '',\n                    });\n                    break;\n                }\n                case 'cmd/TasmotaRestart': {\n                    this.sendToTasmota(`${this.topic}/cmnd/Restart`, '1');\n                    this.log.info('Restart Tasmota!');\n                    this.isOnline = false;\n                    break;\n                }\n                case 'cmd/screenSaverRotationTime': {\n                    if (this.screenSaver && typeof state.val === 'number') {\n                        const val =\n                            state.val === 0 ? state.val : state.val < 3 ? 3 : state.val > 3600 ? 3600 : state.val;\n                        if (this.screenSaver.rotationTime !== val * 1000) {\n                            this.screenSaver.rotationTime = val * 1000;\n                            await this.screenSaver.restartRotationLoop();\n                        }\n                        await this.library.writedp(`panels.${this.name}.cmd.screenSaverRotationTime`, val);\n                    }\n                    break;\n                }\n                case 'cmd/screenSaverDoubleClick': {\n                    if (this.screenSaver && typeof state.val === 'boolean') {\n                        this.screenSaverDoubleClick = !!state.val;\n                        await this.library.writedp(`panels.${this.name}.cmd.screenSaverDoubleClick`, state.val);\n                    }\n                    break;\n                }\n            }\n            await this.statesControler.setInternalState(id, state.val, true);\n        }\n        switch (token) {\n            case 'cmd/bigIconLeft': {\n                return this.info.nspanel.bigIconLeft;\n            }\n            case 'cmd/bigIconRight': {\n                return this.info.nspanel.bigIconRight;\n            }\n            case 'cmd/screensaverTimeout': {\n                return this.timeout;\n            }\n            case 'cmd/dimStandby': {\n                return this.dimMode.low;\n            }\n            case 'cmd/dimActive': {\n                return this.dimMode.high;\n            }\n            case 'cmd/dimNightActive': {\n                return this.dimMode.highNight;\n            }\n            case 'cmd/dimNightStandby': {\n                return this.dimMode.lowNight;\n            }\n            case 'cmd/dimNightHourStart': {\n                return this.dimMode.startNight;\n            }\n            case 'cmd/dimNightHourEnd': {\n                return this.dimMode.endNight;\n            }\n            case 'cmd/detachLeft': {\n                return this.detach.left;\n            }\n            case 'cmd/detachRight': {\n                return this.detach.right;\n            }\n            case 'cmd/popupNotification2':\n            case 'cmd/popupNotification': {\n                if (this.notifyIndex !== -1) {\n                    const val = this.controller.systemNotification.getNotification(this.notifyIndex);\n                    if (val) {\n                        return JSON.stringify(val);\n                    }\n                }\n                return null;\n            }\n            case 'info/tasmotaVersion': {\n                return `${this.info.tasmota.firmwareversion}\\r\\n${this.info.tasmota.onlineVersion}`;\n            }\n            case 'info/displayVersion': {\n                return this.info.nspanel.displayVersion;\n            }\n            case 'info/modelVersion': {\n                return this.info.nspanel.model;\n            }\n            case 'info/Tasmota': {\n                return this.info.tasmota;\n            }\n            case 'cmd/screenSaverRotationTime': {\n                if (this.screenSaver) {\n                    return this.screenSaver.rotationTime;\n                }\n                break;\n            }\n            case 'cmd/screenSaverDoubleClick': {\n                return this.screenSaverDoubleClick;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Convert incoming string to event msg object\n     *\n     * @param msg incoming string\n     * @returns event object\n     */\n    private convertToEvent(msg: string): Types.IncomingEvent | null {\n        try {\n            msg = (JSON.parse(msg) || {}).CustomRecv;\n        } catch {\n            this.log.warn(`Receive a broken msg from mqtt: ${msg}`);\n        }\n        if (msg === undefined) {\n            return null;\n        }\n        const temp = msg.split(',');\n        if (!Types.isEventType(temp[0])) {\n            return null;\n        }\n        try {\n            if (!Types.isEventMethod(temp[1])) {\n                return null;\n            }\n        } catch (e: any) {\n            this.log.error(`Error at convertToEvent: ${e}`);\n            return null;\n        }\n        let popup: undefined | string = undefined;\n        if (temp[1] === 'pageOpenDetail') {\n            popup = temp.splice(2, 1)[0];\n        }\n        const arr = String(temp[2]).split('?');\n        if (arr[3]) {\n            return {\n                type: temp[0],\n                method: temp[1],\n                target: parseInt(arr[3]),\n                page: parseInt(arr[1]),\n                cmd: parseInt(arr[0]),\n                popup: popup,\n                id: arr[2],\n                action: pages.isButtonActionType(temp[3]) ? temp[3] : temp[3],\n                opt: temp[4] ?? '',\n            };\n        }\n        if (arr[2]) {\n            return {\n                type: temp[0],\n                method: temp[1],\n                page: parseInt(arr[0]),\n                cmd: parseInt(arr[1]),\n                popup: popup,\n                id: arr[2],\n                action: pages.isButtonActionType(temp[3]) ? temp[3] : temp[3],\n                opt: temp[4] ?? '',\n            };\n        } else if (arr[1]) {\n            return {\n                type: temp[0],\n                method: temp[1],\n                page: parseInt(arr[0]),\n                popup: popup,\n                id: arr[1],\n                action: pages.isButtonActionType(temp[3]) ? temp[3] : temp[3],\n                opt: temp[4] ?? '',\n            };\n        }\n        return {\n            type: temp[0],\n            method: temp[1],\n            popup: popup,\n            id: arr[0],\n            action: pages.isButtonActionType(temp[3]) ? temp[3] : temp[3],\n            opt: temp[4] ?? '',\n        };\n    }\n\n    async setScreensaverSwipe(b: boolean): Promise<void> {\n        if (this.screenSaver) {\n            this.screenSaver.screensaverSwipe = b;\n            await this.library.writedp(\n                `panels.${this.name}.buttons.screensaverGesture`,\n                !this.screenSaver.screensaverSwipe ? 0 : 1,\n                genericStateObjects.panel.panels.buttons.screensaverGesture,\n            );\n        }\n    }\n\n    /*\n    function HandleMessage(typ: string, method: NSPanel.EventMethod, page: number | undefined, words: string[] | undefined): void {\n        try {\n            if (typ == 'event') {\n                switch (method as NSPanel.EventMethod) {\n                    case 'startup':\n                        screensaverEnabled = false;\n                        UnsubscribeWatcher();\n                        HandleStartupProcess();\n                        pageId = 0;\n                        GeneratePage(config.pages[0]);\n                        if (Debug) log('HandleMessage -> Startup', 'info');\n                        Init_Release();\n                        break;\n                    case 'sleepReached':\n                        useMediaEvents = false;\n                        screensaverEnabled = true;\n                        if (pageId < 0)\n                            pageId = 0;\n                        HandleScreensaver();\n                        if (Debug) log('HandleMessage -> sleepReached', 'info');\n                        break;\n                    case 'pageOpenDetail':\n                        if (words != undefined) {\n                            screensaverEnabled = false;\n                            UnsubscribeWatcher();\n                            if (Debug) {\n                                log('HandleMessage -> pageOpenDetail ' + words[0] + ' - ' + words[1] + ' - ' + words[2] + ' - ' + words[3] + ' - ' + words[4], 'info');\n                            }\n                            let tempId: PageItem['id'];\n                            let tempPageItem = words[3].split('?');\n                            let placeId: number | undefined = undefined;\n                            if (!isNaN(parseInt(tempPageItem[0]))){\n                                tempId = activePage!.items[tempPageItem[0]].id;\n                                placeId = parseInt(tempPageItem[0])\n                                if (tempId == undefined) {\n                                    throw new Error(`Missing id in HandleMessage!`)\n                                }\n                            } else {\n                                tempId = tempPageItem[0];\n                            }\n                            let pageItem: PageItem = findPageItem(tempId);\n                            if (pageItem !== undefined && isPopupType(words[2])) {\n                                let temp: string | NSPanel.mediaOptional | undefined = tempPageItem[1]\n                                if (isMediaOptional(temp)) SendToPanel(GenerateDetailPage(words[2], temp, pageItem, placeId));\n                                else SendToPanel(GenerateDetailPage(words[2], undefined, pageItem, placeId));\n                            }\n                        }\n                        break;\n                    case 'buttonPress2':\n                        screensaverEnabled = false;\n                        HandleButtonEvent(words);\n                        if (Debug) {\n                            if (words != undefined) log('HandleMessage -> buttonPress2 ' + words[0] + ' - ' + words[1] + ' - ' + words[2] + ' - ' + words[3] + ' - ' + words[4], 'info');\n                        }\n                        break;\n                    case 'renderCurrentPage':\n                        // Event only for HA at this Moment\n                        if (Debug) log('renderCurrentPage', 'info');\n                        break;\n                    case 'button1':\n                    case 'button2':\n                        screensaverEnabled = false;\n                        HandleHardwareButton(method);\n                        if (Debug) log('HandleMessage -> button1 /  button2', 'info')\n                        break;\n                    default:\n                        break;\n                }\n            }\n        } catch (err: any) {\n            log('error at function HandleMessage: ' + err.message, 'warn');\n        }\n    }*/\n}\n"],
  "mappings": "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",
  "names": []
}
