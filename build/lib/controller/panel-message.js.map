{
  "version": 3,
  "sources": ["../../../src/lib/controller/panel-message.ts"],
  "sourcesContent": ["import { IClientPublishOptions } from 'mqtt';\nimport { SendTopicAppendix } from '../const/definition';\nimport { AdapterClassDefinition, BaseClass } from '../classes/library';\nimport { MQTTClientClass } from '../classes/mqtt';\nimport { Panel } from './panel';\nimport { BaseClassTriggerd } from './states-controller';\n\nexport class BaseClassPanelSend extends BaseClassTriggerd {}\n\n/**\n * \u00DCbernimmt das senden von Payloads an die mqtt Klasse - delay zwischen einzelnen Messages\n * 1 * pro Klasse Panel\n */\nexport class PanelSend extends BaseClass {\n    private messageDb: { payload: string; opt?: IClientPublishOptions }[] = [];\n    private messageTimeout: ioBroker.Timeout | undefined;\n    private mqttClient: MQTTClientClass;\n    private topic: string = '';\n\n    _panel: Panel | undefined = undefined;\n\n    constructor(adapter: AdapterClassDefinition, config: { name: string; mqttClient: MQTTClientClass; topic: string }) {\n        super(adapter, config.name);\n        this.mqttClient = config.mqttClient;\n        this.topic = config.topic + SendTopicAppendix;\n    }\n    public set panel(panel: Panel) {\n        this._panel = panel;\n    }\n    public get panel(): Panel {\n        if (!this._panel) throw new Error('Error P1: Panel undefinied!');\n        return this._panel;\n    }\n\n    readonly addMessage = (payload: string, opt?: IClientPublishOptions): void => {\n        this.messageDb.push({ payload: payload, opt: opt });\n        if (this.messageTimeout === undefined) {\n            this.sendMessageLoop();\n        }\n    };\n\n    private readonly sendMessageLoop = (): void => {\n        const msg = this.messageDb.shift();\n        if (msg === undefined || this.unload) {\n            this.messageTimeout = undefined;\n            return;\n        }\n        this.log.debug(`send payload: ${JSON.stringify(msg)} to panel.`);\n        this.mqttClient.publish(this.topic, msg.payload, msg.opt);\n        this.messageTimeout = this.adapter.setTimeout(this.sendMessageLoop, 25);\n    };\n\n    async delete(): Promise<void> {\n        await super.delete();\n        if (this.messageTimeout) this.adapter.clearTimeout(this.messageTimeout);\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAAkC;AAClC,qBAAkD;AAGlD,+BAAkC;AAE3B,MAAM,2BAA2B,2CAAkB;AAAC;AAMpD,MAAM,kBAAkB,yBAAU;AAAA,EAC7B,YAAgE,CAAC;AAAA,EACjE;AAAA,EACA;AAAA,EACA,QAAgB;AAAA,EAExB,SAA4B;AAAA,EAE5B,YAAY,SAAiC,QAAsE;AAC/G,UAAM,SAAS,OAAO,IAAI;AAC1B,SAAK,aAAa,OAAO;AACzB,SAAK,QAAQ,OAAO,QAAQ;AAAA,EAChC;AAAA,EACA,IAAW,MAAM,OAAc;AAC3B,SAAK,SAAS;AAAA,EAClB;AAAA,EACA,IAAW,QAAe;AACtB,QAAI,CAAC,KAAK;AAAQ,YAAM,IAAI,MAAM,6BAA6B;AAC/D,WAAO,KAAK;AAAA,EAChB;AAAA,EAES,aAAa,CAAC,SAAiB,QAAsC;AAC1E,SAAK,UAAU,KAAK,EAAE,SAAkB,IAAS,CAAC;AAClD,QAAI,KAAK,mBAAmB,QAAW;AACnC,WAAK,gBAAgB;AAAA,IACzB;AAAA,EACJ;AAAA,EAEiB,kBAAkB,MAAY;AAC3C,UAAM,MAAM,KAAK,UAAU,MAAM;AACjC,QAAI,QAAQ,UAAa,KAAK,QAAQ;AAClC,WAAK,iBAAiB;AACtB;AAAA,IACJ;AACA,SAAK,IAAI,MAAM,iBAAiB,KAAK,UAAU,GAAG,aAAa;AAC/D,SAAK,WAAW,QAAQ,KAAK,OAAO,IAAI,SAAS,IAAI,GAAG;AACxD,SAAK,iBAAiB,KAAK,QAAQ,WAAW,KAAK,iBAAiB,EAAE;AAAA,EAC1E;AAAA,EAEA,MAAM,SAAwB;AAC1B,UAAM,MAAM,OAAO;AACnB,QAAI,KAAK;AAAgB,WAAK,QAAQ,aAAa,KAAK,cAAc;AAAA,EAC1E;AACJ;",
  "names": []
}
