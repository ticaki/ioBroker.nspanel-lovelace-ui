{
  "version": 3,
  "sources": ["../../../src/lib/controller/panel-message.ts"],
  "sourcesContent": ["import type { IClientPublishOptions } from 'mqtt';\nimport { SendTopicAppendix } from '../const/definition';\nimport { BaseClass, type AdapterClassDefinition } from '../classes/library';\nimport type { MQTTClientClass, callbackMessageType } from '../classes/mqtt';\nimport type { Panel } from './panel';\n\n/**\n * \u00DCbernimmt das senden von Payloads an die mqtt Klasse - delay zwischen einzelnen Messages\n * 1 * pro Klasse Panel\n */\nexport class PanelSend extends BaseClass {\n    private messageDb: { payload: string; opt?: IClientPublishOptions; ackForType: boolean }[] = [];\n    private messageDbTasmota: { topic: string; payload: string; opt?: IClientPublishOptions }[] = [];\n\n    private messageTimeout: ioBroker.Timeout | undefined;\n    private messageTimeoutTasmota: ioBroker.Timeout | true | undefined;\n    private mqttClient: MQTTClientClass;\n    private topic: string = '';\n    private losingMessageCount = 0;\n\n    private _losingDelay = 1000;\n    panel: Panel | undefined = undefined;\n\n    get losingDelay(): number {\n        if (this._losingDelay < 30000) {\n            this._losingDelay = this._losingDelay + 1000;\n        }\n        return this._losingDelay;\n    }\n    set losingDelay(value: number) {\n        if (value > 30000) {\n            value = 30000;\n        }\n        if (value < 1000) {\n            value = 1000;\n        }\n        this._losingDelay = value;\n    }\n    constructor(\n        adapter: AdapterClassDefinition,\n        config: { name: string; mqttClient: MQTTClientClass; topic: string; panel: Panel },\n    ) {\n        super(adapter, config.name);\n        this.mqttClient = config.mqttClient;\n        void this.mqttClient.subscript(`${config.topic}/stat/RESULT`, this.onMessage);\n        this.topic = config.topic + SendTopicAppendix;\n        this.panel = config.panel;\n    }\n\n    onMessage: callbackMessageType = async (topic: string, message: string) => {\n        if (!topic.endsWith('/stat/RESULT')) {\n            //this.log.debug(`Receive command ${topic} with ${message}`);\n            return;\n        }\n        this.log.debug(`Receive command ${topic} with ${message}`);\n        const msg = JSON.parse(message);\n        const ackForType = this.messageDb[0] && this.messageDb[0].ackForType;\n        if (msg) {\n            if ((ackForType && msg.CustomSend === 'renderCurrentPage') || (!ackForType && msg.CustomSend === 'Done')) {\n                this.log.debug(`Receive ack for ${JSON.stringify(msg)}`);\n                if (this.messageTimeout) {\n                    this.adapter.clearTimeout(this.messageTimeout);\n                }\n                this.losingMessageCount = 0;\n                this._losingDelay = 0;\n                const oldMessage = this.messageDb.shift();\n                if (oldMessage) {\n                    if (oldMessage.payload === 'pageType~pageStartup') {\n                        this.messageDb = [];\n                    }\n                    this.log.debug(`Receive ack for ${JSON.stringify(msg)}`);\n                }\n                if (this.unload) {\n                    return;\n                }\n                this.messageTimeout = this.adapter.setTimeout(this.sendMessageLoop, 100);\n            }\n        }\n    };\n\n    readonly addMessage = (payload: string, ackForType: boolean, opt?: IClientPublishOptions): void => {\n        if (\n            this.messageTimeout !== undefined &&\n            this.messageDb.length > 0 &&\n            this.messageDb.some(a => a.payload === payload && a.opt === opt)\n        ) {\n            return;\n        }\n        this.messageDb.push({ payload: payload, opt: opt, ackForType: ackForType });\n        if (this.messageTimeout === undefined) {\n            void this.sendMessageLoop();\n        }\n    };\n\n    private readonly sendMessageLoop = async (): Promise<void> => {\n        const msg = this.messageDb[0];\n        if (msg === undefined || this.unload) {\n            this.messageTimeout = undefined;\n            return;\n        }\n        if (this.losingMessageCount > 0) {\n            this.log.warn(`send payload: ${JSON.stringify(msg)} to panel. Losing count: ${this.losingMessageCount}`);\n        }\n        if (this.losingMessageCount++ > 3) {\n            if (this.panel) {\n                this.panel.isOnline = false;\n            }\n        }\n        if (this.panel && !this.panel.isOnline) {\n            this.messageDb = [];\n        }\n        if (this.unload) {\n            return;\n        }\n        this.messageTimeout = this.adapter.setTimeout(this.sendMessageLoop, this.losingDelay);\n        this.addMessageTasmota(this.topic, msg.payload, msg.opt);\n    };\n\n    readonly addMessageTasmota = (topic: string, payload: string, opt?: IClientPublishOptions): void => {\n        if (\n            this.messageDbTasmota.length > 0 &&\n            this.messageDbTasmota.some(a => a.topic === topic && a.payload === payload && a.opt === opt)\n        ) {\n            return;\n        }\n        this.messageDbTasmota.push({ topic: topic, payload: payload, opt: opt });\n\n        if (this.messageTimeoutTasmota === undefined) {\n            void this.sendMessageLoopTasmota();\n        }\n    };\n    private readonly sendMessageLoopTasmota = async (): Promise<void> => {\n        const msg = this.messageDbTasmota.shift();\n        if (msg === undefined || this.unload) {\n            this.messageTimeoutTasmota = undefined;\n            return;\n        }\n        this.log.debug(`send payload: ${JSON.stringify(msg)} to panel.`);\n        this.messageTimeoutTasmota = true;\n        await this.mqttClient.publish(msg.topic, msg.payload, { ...msg.opt, qos: 1 });\n        if (this.unload) {\n            return;\n        }\n        this.messageTimeoutTasmota = this.adapter.setTimeout(this.sendMessageLoopTasmota, 20);\n    };\n\n    async delete(): Promise<void> {\n        await super.delete();\n        this.mqttClient.unsubscribe(`${this.topic}/stat/RESULT`);\n        if (this.messageTimeout) {\n            this.adapter.clearTimeout(this.messageTimeout);\n        }\n        if (this.messageTimeoutTasmota && this.messageTimeoutTasmota !== true) {\n            this.adapter.clearTimeout(this.messageTimeoutTasmota);\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
