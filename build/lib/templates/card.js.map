{
  "version": 3,
  "sources": ["../../../src/lib/templates/card.ts"],
  "sourcesContent": ["import { Color } from '../const/Color';\nimport { PageBaseConfigTemplate } from '../types/pages';\nimport { PageTemplateIdent } from '../types/types';\n\n/**\n * Bitte an folgendes Schema halten\n * card.adapter?.aufgabe?.ger\u00E4t?\n */\n\nexport const cardTemplates: Record<PageTemplateIdent, PageBaseConfigTemplate> = {\n    'entities.waste-calendar': {\n        // Abfallkalender\n        adapter: '0_userdata.0',\n        card: 'cardEntities',\n        alwaysOn: 'none',\n        useColor: false,\n        items: undefined,\n        config: {\n            card: 'cardEntities',\n            data: {\n                headline: {\n                    type: 'const',\n                    constVal: 'Waste dates',\n                },\n            },\n        },\n        pageItems: [\n            {\n                role: 'text.list',\n                type: 'text',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'trash-can' },\n                            color: { type: 'state', dp: '', regexp: /\\.1\\.color$/, mode: 'auto', role: 'state' },\n                        },\n                    },\n                    entity1: {\n                        value: { type: 'const', constVal: true },\n                    },\n                    text: {\n                        true: { type: 'state', dp: '.1.event', mode: 'auto', role: 'state' },\n                        false: undefined,\n                    },\n                    text1: {\n                        true: { type: 'state', dp: '.1.date', mode: 'auto', role: 'state' },\n                        false: undefined,\n                    },\n                },\n            },\n            {\n                role: 'text.list',\n                type: 'text',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'trash-can' },\n                            color: { type: 'state', dp: '', regexp: /\\.2\\.color$/, mode: 'auto', role: 'state' },\n                        },\n                    },\n                    entity1: {\n                        value: { type: 'const', constVal: true },\n                    },\n                    text: {\n                        true: { type: 'state', dp: '.2.event', mode: 'auto', role: 'state' },\n                        false: undefined,\n                    },\n                    text1: {\n                        true: { type: 'state', dp: '.2.date', mode: 'auto', role: 'state' },\n                        false: undefined,\n                    },\n                },\n            },\n            {\n                role: 'text.list',\n                type: 'text',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'trash-can' },\n                            color: { type: 'state', dp: '', regexp: /\\.3\\.color$/, mode: 'auto', role: 'state' },\n                        },\n                    },\n                    entity1: {\n                        value: { type: 'const', constVal: true },\n                    },\n                    text: {\n                        true: { type: 'state', dp: '.3.event', mode: 'auto', role: 'state' },\n                        false: undefined,\n                    },\n                    text1: {\n                        true: { type: 'state', dp: '.3.date', mode: 'auto', role: 'state' },\n                        false: undefined,\n                    },\n                },\n            },\n            {\n                role: 'text.list',\n                type: 'text',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'trash-can' },\n                            color: { type: 'state', dp: '', regexp: /\\.4\\.color$/, mode: 'auto', role: 'state' },\n                        },\n                    },\n                    entity1: {\n                        value: { type: 'const', constVal: true },\n                    },\n                    text: {\n                        true: { type: 'state', dp: '.4.event', mode: 'auto', role: 'state' },\n                        false: undefined,\n                    },\n                    text1: {\n                        true: { type: 'state', dp: '.4.date', mode: 'auto', role: 'state' },\n                        false: undefined,\n                    },\n                },\n            },\n        ],\n    },\n    'media.spotify-premium': {\n        //cardMedia\n        card: 'cardMedia',\n        adapter: '',\n        alwaysOn: 'none',\n        config: {\n            card: 'cardMedia',\n            data: {\n                headline: {\n                    type: 'const',\n                    constVal: 'Spotify-Premium',\n                },\n                alwaysOnDisplay: {\n                    type: 'const',\n                    constVal: 'none',\n                },\n                album: {\n                    mode: 'auto',\n                    role: 'value',\n                    type: 'triggered',\n                    dp: '',\n                    regexp: /\\.player\\.album$/,\n                },\n                title: {\n                    on: {\n                        type: 'const',\n                        constVal: true,\n                    },\n                    text: {\n                        mode: 'auto',\n                        role: 'value',\n                        type: 'triggered',\n                        dp: '.player.trackName',\n                    },\n                    color: {\n                        type: 'const',\n                        constVal: { r: 250, g: 2, b: 3 },\n                    },\n                },\n                duration: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: 'value',\n                    dp: '.player.durationMs',\n                    read: 'return Math.floor(val/1000);',\n                },\n                elapsed: {\n                    mode: 'auto',\n                    type: 'triggered',\n                    role: 'value',\n                    dp: '.player.progressMs',\n                    read: 'return Math.floor(val/1000);',\n                },\n                volume: {\n                    value: {\n                        mode: 'auto',\n                        type: 'state',\n                        role: 'value',\n                        response: 'now',\n                        scale: { min: 0, max: 100 },\n                        dp: '.player.device.volume',\n                    },\n                    set: {\n                        mode: 'auto',\n                        type: 'state',\n                        role: 'value',\n                        response: 'now',\n                        scale: { min: 0, max: 100 },\n                        dp: '.player.volume',\n                    },\n                },\n                artist: {\n                    on: {\n                        type: 'const',\n                        constVal: true,\n                    },\n                    text: {\n                        mode: 'auto',\n                        type: 'state',\n                        role: 'value',\n                        dp: '.player.artistName',\n                    },\n                    color: undefined,\n                    icon: {\n                        type: 'const',\n                        constVal: 'diameter',\n                    },\n                    list: undefined,\n                },\n                shuffle: {\n                    value: {\n                        mode: 'auto',\n                        type: 'triggered',\n                        role: 'value',\n                        dp: '.player.shuffle',\n                        read: 'return val === \"on\";',\n                        write: 'return val === \"ON\" ? \"on\" : \"off\";',\n                    },\n                    set: {\n                        mode: 'auto',\n                        type: 'state',\n                        role: 'value',\n                        dp: '.player.shuffle',\n                        read: 'return val === \"on\";',\n                        write: 'return val === \"ON\" ? \"on\" : \"off\";',\n                    },\n                },\n                icon: {\n                    type: 'const',\n                    constVal: 'dialpad',\n                },\n                play: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: 'button',\n                    dp: '',\n                    regexp: /\\.player\\.play$/,\n                },\n                mediaState: {\n                    mode: 'auto',\n                    type: 'triggered',\n                    role: 'value',\n                    dp: '.player.isPlaying',\n                },\n                stop: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: 'button',\n                    dp: '.player.pause',\n                },\n                pause: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: 'button',\n                    dp: '.player.pause',\n                },\n                forward: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: 'button',\n                    dp: '.player.skipPlus',\n                },\n                backward: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: 'button',\n                    dp: '.player.skipMinus',\n                },\n                logo: {\n                    on: {\n                        type: 'const',\n                        constVal: true,\n                    },\n                    text: { type: 'const', constVal: '1' },\n                    icon: { type: 'const', constVal: 'home' },\n                    color: { type: 'const', constVal: { r: 250, b: 250, g: 0 } },\n                    list: undefined,\n                    action: 'cross',\n                },\n            },\n        },\n        items: undefined,\n        pageItems: [\n            {\n                role: 'spotify-playlist',\n                type: 'input_sel',\n                dpInit: '',\n\n                data: {\n                    color: {\n                        true: {\n                            type: 'const',\n                            constVal: Color.HMIOn,\n                        },\n                        false: undefined,\n                    },\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'playlist-music' },\n                            color: { type: 'const', constVal: Color.Green },\n                        },\n                    },\n                    entityInSel: {\n                        value: {\n                            mode: 'auto',\n                            role: 'value',\n                            type: 'triggered',\n                            regexp: /\\.player\\.trackName$/,\n                            dp: '',\n                        },\n                    },\n                    text: {\n                        true: undefined,\n                        false: undefined,\n                    },\n                    /**\n                     * valueList string[]/stringify oder string?string?string?string stelle korreliert mit setList  {input_sel}\n                     */\n                    valueList: {\n                        type: 'triggered',\n                        mode: 'auto',\n                        role: 'value',\n                        dp: '.player.playlist.trackListArray',\n                    },\n                    setValue1: {\n                        role: '',\n                        mode: 'auto',\n                        type: 'state',\n                        dp: '',\n                        regexp: /\\.player\\.playlist\\.trackNo$/,\n                    },\n                    /**\n                     * setList: {id:Datenpunkt, value: zu setzender Wert}[] bzw. stringify  oder ein String nach dem Muster datenpunkt?Wert|Datenpunkt?Wert {input_sel}\n                     */\n                    //setList: { type: 'const', constVal: '0_userdata.0.test?1|0_userdata.0.test?2' },\n                },\n            },\n            {\n                role: '2values',\n                type: 'input_sel',\n                dpInit: '',\n\n                data: {\n                    color: {\n                        true: {\n                            type: 'const',\n                            constVal: Color.HMIOn,\n                        },\n                        false: undefined,\n                    },\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'playlist-play' },\n                            color: { type: 'const', constVal: Color.Green },\n                        },\n                    },\n                    entityInSel: {\n                        value: {\n                            mode: 'auto',\n                            role: 'value',\n                            type: 'triggered',\n                            dp: '',\n                            regexp: /\\.playlists\\.playlistList$/,\n                        },\n                    },\n                    text: {\n                        true: undefined,\n                        false: undefined,\n                    },\n                    /**\n                     * valueList string[]/stringify oder string?string?string?string stelle korreliert mit setList  {input_sel}\n                     */\n                    valueList: {\n                        mode: 'auto',\n                        role: 'value',\n                        type: 'triggered',\n                        dp: '',\n                        regexp: /\\.playlists\\.playlistListIds$/,\n                        read: 'return val ? val.split(\";\") : []',\n                    },\n                    valueList2: {\n                        mode: 'auto',\n                        role: 'value',\n                        type: 'triggered',\n                        dp: '',\n                        regexp: /\\.playlists\\.playlistListString$/,\n                        read: 'return val ? val.split(\";\") : []',\n                    },\n                    setValue1: undefined,\n                    /**\n                     * setList: {id:Datenpunkt, value: zu setzender Wert}[] bzw. stringify  oder ein String nach dem Muster datenpunkt?Wert|Datenpunkt?Wert {input_sel}\n                     */\n                    //setList: { type: 'const', constVal: '0_userdata.0.test?1|0_userdata.0.test?2' },\n                },\n            },\n            {\n                role: 'text.list',\n                type: 'input_sel',\n                dpInit: '',\n\n                data: {\n                    color: {\n                        true: {\n                            type: 'const',\n                            constVal: Color.HMIOn,\n                        },\n                        false: undefined,\n                    },\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'home' },\n                            color: { type: 'const', constVal: Color.Green },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'fan' },\n                            color: { type: 'const', constVal: Color.Red },\n                        },\n                        scale: undefined,\n                        maxBri: undefined,\n                        minBri: undefined,\n                    },\n                    entityInSel: {\n                        value: {\n                            type: 'const',\n                            constVal: true,\n                        },\n                    },\n                    text: {\n                        true: undefined,\n                        false: undefined,\n                    },\n                    /**\n                     * valueList string[]/stringify oder string?string?string?string stelle korreliert mit setList  {input_sel}\n                     */\n                    valueList: { type: 'const', constVal: 'home?butter' },\n                    /**\n                     * setList: {id:Datenpunkt, value: zu setzender Wert}[] bzw. stringify  oder ein String nach dem Muster datenpunkt?Wert|Datenpunkt?Wert {input_sel}\n                     */\n                    setList: { type: 'const', constVal: '0_userdata.0.test?1|0_userdata.0.test?2' },\n                },\n            },\n            {\n                role: 'text.list',\n                type: 'button',\n                dpInit: '',\n\n                data: {\n                    color: {\n                        true: {\n                            type: 'const',\n                            constVal: Color.HMIOn,\n                        },\n                        false: undefined,\n                        scale: undefined,\n                    },\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'home' },\n                            color: { type: 'const', constVal: Color.Green },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'fan' },\n                            color: { type: 'const', constVal: Color.Red },\n                        },\n                        scale: undefined,\n                        maxBri: undefined,\n                        minBri: undefined,\n                    },\n                    entity1: {\n                        value: {\n                            type: 'const',\n                            constVal: true,\n                        },\n                    },\n                    text: {\n                        true: undefined,\n                        false: undefined,\n                    },\n                },\n            },\n            {\n                role: 'text.list',\n                type: 'button',\n                dpInit: '',\n\n                data: {\n                    color: {\n                        true: {\n                            type: 'const',\n                            constVal: Color.HMIOn,\n                        },\n                        false: undefined,\n                        scale: undefined,\n                    },\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'home' },\n                            color: { type: 'const', constVal: Color.Green },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'fan' },\n                            color: { type: 'const', constVal: Color.Red },\n                        },\n                        scale: undefined,\n                        maxBri: undefined,\n                        minBri: undefined,\n                    },\n                    entity1: {\n                        value: {\n                            type: 'const',\n                            constVal: true,\n                        },\n                    },\n                    text: {\n                        true: undefined,\n                        false: undefined,\n                    },\n                },\n            },\n            {\n                role: 'text.list',\n                type: 'button',\n                dpInit: '',\n\n                data: {\n                    color: {\n                        true: {\n                            type: 'const',\n                            constVal: Color.HMIOn,\n                        },\n                        false: undefined,\n                        scale: undefined,\n                    },\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'home' },\n                            color: { type: 'const', constVal: Color.Green },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'fan' },\n                            color: { type: 'const', constVal: Color.Red },\n                        },\n                        scale: undefined,\n                        maxBri: undefined,\n                        minBri: undefined,\n                    },\n                    entity1: {\n                        value: {\n                            type: 'const',\n                            constVal: true,\n                        },\n                    },\n                    text: {\n                        true: undefined,\n                        false: undefined,\n                    },\n                },\n            },\n            {\n                role: 'text.list',\n                type: 'button',\n                dpInit: '',\n\n                data: {\n                    color: {\n                        true: {\n                            type: 'const',\n                            constVal: Color.HMIOn,\n                        },\n                        false: undefined,\n                        scale: undefined,\n                    },\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'home' },\n                            color: { type: 'const', constVal: Color.Green },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'fan' },\n                            color: { type: 'const', constVal: Color.Red },\n                        },\n                        scale: undefined,\n                        maxBri: undefined,\n                        minBri: undefined,\n                    },\n                    entity1: {\n                        value: {\n                            type: 'const',\n                            constVal: true,\n                        },\n                    },\n                    text: {\n                        true: undefined,\n                        false: undefined,\n                    },\n                },\n            },\n            {\n                role: 'text.list',\n                type: 'button',\n                dpInit: '',\n\n                data: {\n                    color: {\n                        true: {\n                            type: 'const',\n                            constVal: Color.HMIOn,\n                        },\n                        false: undefined,\n                        scale: undefined,\n                    },\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'home' },\n                            color: { type: 'const', constVal: Color.Green },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'fan' },\n                            color: { type: 'const', constVal: Color.Red },\n                        },\n                        scale: undefined,\n                        maxBri: undefined,\n                        minBri: undefined,\n                    },\n                    entity1: {\n                        value: {\n                            type: 'const',\n                            constVal: true,\n                        },\n                    },\n                    text: {\n                        true: undefined,\n                        false: undefined,\n                    },\n                },\n            },\n        ],\n        useColor: false,\n    },\n    'entities.fahrplan.departure-timetable': {\n        //Anzeigetafel Fahrplan\n        adapter: 'fahrplan.0',\n        card: 'cardEntities',\n        alwaysOn: 'none',\n        useColor: false,\n        items: undefined,\n        config: {\n            card: 'cardEntities',\n            scrollType: 'page',\n            data: {\n                headline: {\n                    type: 'const',\n                    constVal: 'departure',\n                },\n            },\n        },\n        pageItems: [\n            //Abfahrt 1\n            //{ template: 'text.fahrplan.departure', dpInit: '/.0/' },\n            {\n                role: 'text.list',\n                type: 'text',\n                data: {\n                    icon: {\n                        true: {\n                            value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.0\\.Mode$/ },\n                            //value: { type:'const', constVal: ' bus'},\n                            color: { type: 'const', constVal: Color.Red },\n                        },\n                        false: {\n                            value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.0\\.Mode$/ },\n                            //value: { type:'const', constVal: ' bus'},\n                            color: { type: 'const', constVal: Color.Green },\n                        },\n                    },\n                    entity1: {\n                        value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.0\\.DepartureDelayed$/ },\n                    },\n                    entity2: {\n                        value: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.0\\.Departure$/,\n                            read: 'return val === 0 ? null : val',\n                        },\n                        dateFormat: {\n                            type: 'const',\n                            constVal: { local: 'de', format: { hour: '2-digit', minute: '2-digit' } },\n                        },\n                    },\n                    text: {\n                        true: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.0\\.Direction$/ },\n                        false: undefined,\n                    },\n                    text1: {\n                        true: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.0\\.DeparturePlanned$/,\n                            read: `{ return new Date(val).toLocaleTimeString().slice(0,5) }`,\n                        },\n                        false: undefined,\n                    },\n                },\n            },\n            //Abfahrt 2\n            {\n                role: 'text.list',\n                type: 'text',\n                data: {\n                    icon: {\n                        true: {\n                            value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.1\\.Mode$/ },\n                            //value: { type:'const', constVal: ' bus'},\n                            color: { type: 'const', constVal: Color.Red },\n                        },\n                        false: {\n                            value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.1\\.Mode$/ },\n                            //value: { type:'const', constVal: ' bus'},\n                            color: { type: 'const', constVal: Color.Green },\n                        },\n                    },\n                    entity1: {\n                        value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.1\\.DepartureDelayed$/ },\n                    },\n                    entity2: {\n                        value: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.1\\.Departure$/,\n                            read: 'return val === 0 ? null : val',\n                        },\n                        dateFormat: {\n                            type: 'const',\n                            constVal: { local: 'de', format: { hour: '2-digit', minute: '2-digit' } },\n                        },\n                    },\n                    text: {\n                        true: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.1\\.Direction$/ },\n                        false: undefined,\n                    },\n                    text1: {\n                        true: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.1\\.DeparturePlanned$/,\n                            read: `{ return new Date(val).toLocaleTimeString().slice(0,5) }`,\n                        },\n                        false: undefined,\n                    },\n                },\n            },\n            //Abfahrt 3\n            {\n                role: 'text.list',\n                type: 'text',\n                data: {\n                    icon: {\n                        true: {\n                            value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.2\\.Mode$/ },\n                            //value: { type:'const', constVal: ' bus'},\n                            color: { type: 'const', constVal: Color.Red },\n                        },\n                        false: {\n                            value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.2\\.Mode$/ },\n                            //value: { type:'const', constVal: ' bus'},\n                            color: { type: 'const', constVal: Color.Green },\n                        },\n                    },\n                    entity1: {\n                        value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.2\\.DepartureDelayed$/ },\n                    },\n                    entity2: {\n                        value: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.2\\.Departure$/,\n                            read: 'return val === 0 ? null : val',\n                        },\n                        dateFormat: {\n                            type: 'const',\n                            constVal: { local: 'de', format: { hour: '2-digit', minute: '2-digit' } },\n                        },\n                    },\n                    text: {\n                        true: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.2\\.Direction$/ },\n                        false: undefined,\n                    },\n                    text1: {\n                        true: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.2\\.DeparturePlanned$/,\n                            read: `{ return new Date(val).toLocaleTimeString().slice(0,5) }`,\n                        },\n                        false: undefined,\n                    },\n                },\n            },\n            //Abfahrt 4\n            {\n                role: 'text.list',\n                type: 'text',\n                data: {\n                    icon: {\n                        true: {\n                            value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.3\\.Mode$/ },\n                            //value: { type:'const', constVal: ' bus'},\n                            color: { type: 'const', constVal: Color.Red },\n                        },\n                        false: {\n                            value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.3\\.Mode$/ },\n                            //value: { type:'const', constVal: ' bus'},\n                            color: { type: 'const', constVal: Color.Green },\n                        },\n                    },\n                    entity1: {\n                        value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.3\\.DepartureDelayed$/ },\n                    },\n                    entity2: {\n                        value: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.3\\.Departure$/,\n                            read: 'return val === 0 ? null : val',\n                        },\n                        dateFormat: {\n                            type: 'const',\n                            constVal: { local: 'de', format: { hour: '2-digit', minute: '2-digit' } },\n                        },\n                    },\n                    text: {\n                        true: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.3\\.Direction$/ },\n                        false: undefined,\n                    },\n                    text1: {\n                        true: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.3\\.DeparturePlanned$/,\n                            read: `{ return new Date(val).toLocaleTimeString().slice(0,5) }`,\n                        },\n                        false: undefined,\n                    },\n                },\n            },\n            //Abfahrt 5\n            {\n                role: 'text.list',\n                type: 'text',\n                data: {\n                    icon: {\n                        true: {\n                            value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.4\\.Mode$/ },\n                            //value: { type:'const', constVal: ' bus'},\n                            color: { type: 'const', constVal: Color.Red },\n                        },\n                        false: {\n                            value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.4\\.Mode$/ },\n                            //value: { type:'const', constVal: ' bus'},\n                            color: { type: 'const', constVal: Color.Green },\n                        },\n                    },\n                    entity1: {\n                        value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.4\\.DepartureDelayed$/ },\n                    },\n                    entity2: {\n                        value: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.4\\.Departure$/,\n                            read: 'return val === 0 ? null : val',\n                        },\n                        dateFormat: {\n                            type: 'const',\n                            constVal: { local: 'de', format: { hour: '2-digit', minute: '2-digit' } },\n                        },\n                    },\n                    text: {\n                        true: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.4\\.Direction$/ },\n                        false: undefined,\n                    },\n                    text1: {\n                        true: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.4\\.DeparturePlanned$/,\n                            read: `{ return new Date(val).toLocaleTimeString().slice(0,5) }`,\n                        },\n                        false: undefined,\n                    },\n                },\n            },\n            //Abfahrt 6\n            {\n                role: 'text.list',\n                type: 'text',\n                data: {\n                    icon: {\n                        true: {\n                            value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.5\\.Mode$/ },\n                            //value: { type:'const', constVal: ' bus'},\n                            color: { type: 'const', constVal: Color.Red },\n                        },\n                        false: {\n                            value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.5\\.Mode$/ },\n                            //value: { type:'const', constVal: ' bus'},\n                            color: { type: 'const', constVal: Color.Green },\n                        },\n                    },\n                    entity1: {\n                        value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.5\\.DepartureDelayed$/ },\n                    },\n                    entity2: {\n                        value: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.5\\.Departure$/,\n                            read: 'return val === 0 ? null : val',\n                        },\n                        dateFormat: {\n                            type: 'const',\n                            constVal: { local: 'de', format: { hour: '2-digit', minute: '2-digit' } },\n                        },\n                    },\n                    text: {\n                        true: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.5\\.Direction$/ },\n                        false: undefined,\n                    },\n                    text1: {\n                        true: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.5\\.DeparturePlanned$/,\n                            read: `{ return new Date(val).toLocaleTimeString().slice(0,5) }`,\n                        },\n                        false: undefined,\n                    },\n                },\n            },\n            //Abfahrt 7\n            {\n                role: 'text.list',\n                type: 'text',\n                data: {\n                    icon: {\n                        true: {\n                            value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.6\\.Mode$/ },\n                            //value: { type:'const', constVal: ' bus'},\n                            color: { type: 'const', constVal: Color.Red },\n                        },\n                        false: {\n                            value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.6\\.Mode$/ },\n                            //value: { type:'const', constVal: ' bus'},\n                            color: { type: 'const', constVal: Color.Green },\n                        },\n                    },\n                    entity1: {\n                        value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.6\\.DepartureDelayed$/ },\n                    },\n                    entity2: {\n                        value: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.6\\.Departure$/,\n                            read: 'return val === 0 ? null : val',\n                        },\n                        dateFormat: {\n                            type: 'const',\n                            constVal: { local: 'de', format: { hour: '2-digit', minute: '2-digit' } },\n                        },\n                    },\n                    text: {\n                        true: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.6\\.Direction$/ },\n                        false: undefined,\n                    },\n                    text1: {\n                        true: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.6\\.DeparturePlanned$/,\n                            read: `{ return new Date(val).toLocaleTimeString().slice(0,5) }`,\n                        },\n                        false: undefined,\n                    },\n                },\n            },\n            //Abfahrt 8\n            {\n                role: 'text.list',\n                type: 'text',\n                data: {\n                    icon: {\n                        true: {\n                            value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.7\\.Mode$/ },\n                            //value: { type:'const', constVal: ' bus'},\n                            color: { type: 'const', constVal: Color.Red },\n                        },\n                        false: {\n                            value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.7\\.Mode$/ },\n                            //value: { type:'const', constVal: ' bus'},\n                            color: { type: 'const', constVal: Color.Green },\n                        },\n                    },\n                    entity1: {\n                        value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.7\\.DepartureDelayed$/ },\n                    },\n                    entity2: {\n                        value: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.7\\.Departure$/,\n                            read: 'return val === 0 ? null : val',\n                        },\n                        dateFormat: {\n                            type: 'const',\n                            constVal: { local: 'de', format: { hour: '2-digit', minute: '2-digit' } },\n                        },\n                    },\n                    text: {\n                        true: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.7\\.Direction$/ },\n                        false: undefined,\n                    },\n                    text1: {\n                        true: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.7\\.DeparturePlanned$/,\n                            read: `{ return new Date(val).toLocaleTimeString().slice(0,5) }`,\n                        },\n                        false: undefined,\n                    },\n                },\n            },\n            //Abfahrt 9\n            {\n                role: 'text.list',\n                type: 'text',\n                data: {\n                    icon: {\n                        true: {\n                            value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.8\\.Mode$/ },\n                            //value: { type:'const', constVal: ' bus'},\n                            color: { type: 'const', constVal: Color.Red },\n                        },\n                        false: {\n                            value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.8\\.Mode$/ },\n                            //value: { type:'const', constVal: ' bus'},\n                            color: { type: 'const', constVal: Color.Green },\n                        },\n                    },\n                    entity1: {\n                        value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.8\\.DepartureDelayed$/ },\n                    },\n                    entity2: {\n                        value: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.8\\.Departure$/,\n                            read: 'return val === 0 ? null : val',\n                        },\n                        dateFormat: {\n                            type: 'const',\n                            constVal: { local: 'de', format: { hour: '2-digit', minute: '2-digit' } },\n                        },\n                    },\n                    text: {\n                        true: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.8\\.Direction$/ },\n                        false: undefined,\n                    },\n                    text1: {\n                        true: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.8\\.DeparturePlanned$/,\n                            read: `{ return new Date(val).toLocaleTimeString().slice(0,5) }`,\n                        },\n                        false: undefined,\n                    },\n                },\n            },\n            //Abfahrt 10\n            {\n                role: 'text.list',\n                type: 'text',\n                data: {\n                    icon: {\n                        true: {\n                            value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.9\\.Mode$/ },\n                            //value: { type:'const', constVal: ' bus'},\n                            color: { type: 'const', constVal: Color.Red },\n                        },\n                        false: {\n                            value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.9\\.Mode$/ },\n                            //value: { type:'const', constVal: ' bus'},\n                            color: { type: 'const', constVal: Color.Green },\n                        },\n                    },\n                    entity1: {\n                        value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.9\\.DepartureDelayed$/ },\n                    },\n                    entity2: {\n                        value: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.9\\.Departure$/,\n                            read: 'return val === 0 ? null : val',\n                        },\n                        dateFormat: {\n                            type: 'const',\n                            constVal: { local: 'de', format: { hour: '2-digit', minute: '2-digit' } },\n                        },\n                    },\n                    text: {\n                        true: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.9\\.Direction$/ },\n                        false: undefined,\n                    },\n                    text1: {\n                        true: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.9\\.DeparturePlanned$/,\n                            read: `{ return new Date(val).toLocaleTimeString().slice(0,5) }`,\n                        },\n                        false: undefined,\n                    },\n                },\n            },\n        ],\n    },\n    'entities.fahrplan.routes': {\n        //Route Fahrplan\n        adapter: 'fahrplan.0',\n        card: 'cardEntities',\n        alwaysOn: 'none',\n        useColor: false,\n        items: undefined,\n        config: {\n            card: 'cardEntities',\n            scrollType: 'page',\n            data: {\n                headline: {\n                    type: 'const',\n                    constVal: 'route',\n                },\n            },\n        },\n        pageItems: [\n            //Abfahrt\n            {\n                role: 'text.list',\n                type: 'text',\n                data: {\n                    icon: {\n                        true: {\n                            value: {\n                                role: 'state',\n                                mode: 'auto',\n                                type: 'state',\n                                dp: '',\n                                regexp: /\\.0\\.0\\.Line\\.Mode$/,\n                            },\n                            color: { type: 'const', constVal: Color.Red },\n                        },\n                        false: {\n                            value: {\n                                role: 'state',\n                                mode: 'auto',\n                                type: 'state',\n                                dp: '',\n                                regexp: /\\.0\\.0\\.Line\\.Mode$/,\n                            },\n                            color: { type: 'const', constVal: Color.Green },\n                        },\n                    },\n                    entity1: {\n                        value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.0\\.DepartureDelayed$/ },\n                    },\n                    entity2: {\n                        value: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.0\\.Departure$/,\n                            read: 'return val === 0 ? null : val',\n                        },\n                        dateFormat: {\n                            type: 'const',\n                            constVal: { local: 'de', format: { hour: '2-digit', minute: '2-digit' } },\n                        },\n                    },\n                    text: {\n                        true: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.StationFrom\\.Name$/ },\n                        false: undefined,\n                    },\n                    text1: {\n                        true: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.0\\.DeparturePlanned$/,\n                            read: `{ return new Date(val).toLocaleTimeString().slice(0,5) }`,\n                        },\n                        false: undefined,\n                    },\n                },\n            },\n            //Ankunft\n            {\n                role: 'text.list',\n                type: 'text',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'clock-alert-outline' },\n                            color: { type: 'const', constVal: Color.Red },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: '' },\n                            //color: { type: 'const', constVal: Color.Red },\n                        },\n                    },\n                    entity1: {\n                        value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.0\\.ArrivalDelayed$/ },\n                    },\n                    entity2: {\n                        value: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.0\\.Arrival$/,\n                            read: 'return val === 0 ? null : val',\n                        },\n                        dateFormat: {\n                            type: 'const',\n                            constVal: { local: 'de', format: { hour: '2-digit', minute: '2-digit' } },\n                        },\n                    },\n                    text: {\n                        true: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.StationTo\\.Name$/ },\n                        false: undefined,\n                    },\n                    text1: {\n                        true: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.0\\.ArrivalPlanned$/,\n                            read: `{ return new Date(val).toLocaleTimeString().slice(0,5) }`,\n                        },\n                        false: undefined,\n                    },\n                },\n            },\n            //Abfahrt\n            {\n                role: 'text.list',\n                type: 'text',\n                data: {\n                    icon: {\n                        true: {\n                            value: {\n                                role: 'state',\n                                mode: 'auto',\n                                type: 'state',\n                                dp: '',\n                                regexp: /\\.1\\.0\\.Line\\.Mode$/,\n                            },\n                            color: { type: 'const', constVal: Color.Red },\n                        },\n                        false: {\n                            value: {\n                                role: 'state',\n                                mode: 'auto',\n                                type: 'state',\n                                dp: '',\n                                regexp: /\\.1\\.0\\.Line\\.Mode$/,\n                            },\n                            color: { type: 'const', constVal: Color.Green },\n                        },\n                    },\n                    entity1: {\n                        value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.1\\.DepartureDelayed$/ },\n                    },\n                    entity2: {\n                        value: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.1\\.Departure$/,\n                            read: 'return val === 0 ? null : val',\n                        },\n                        dateFormat: {\n                            type: 'const',\n                            constVal: { local: 'de', format: { hour: '2-digit', minute: '2-digit' } },\n                        },\n                    },\n                    text: {\n                        true: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.StationFrom\\.Name$/ },\n                        false: undefined,\n                    },\n                    text1: {\n                        true: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.1\\.DeparturePlanned$/,\n                            read: `{ return new Date(val).toLocaleTimeString().slice(0,5) }`,\n                        },\n                        false: undefined,\n                    },\n                },\n            },\n            //Ankunft\n            {\n                role: 'text.list',\n                type: 'text',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'clock-alert-outline' },\n                            color: { type: 'const', constVal: Color.Red },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: '' },\n                            //color: { type: 'const', constVal: Color.Red },\n                        },\n                    },\n                    entity1: {\n                        value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.1\\.ArrivalDelayed$/ },\n                    },\n                    entity2: {\n                        value: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.1\\.Arrival$/,\n                            read: 'return val === 0 ? null : val',\n                        },\n                        dateFormat: {\n                            type: 'const',\n                            constVal: { local: 'de', format: { hour: '2-digit', minute: '2-digit' } },\n                        },\n                    },\n                    text: {\n                        true: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.StationTo\\.Name$/ },\n                        false: undefined,\n                    },\n                    text1: {\n                        true: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.1\\.ArrivalPlanned$/,\n                            read: `{ return new Date(val).toLocaleTimeString().slice(0,5) }`,\n                        },\n                        false: undefined,\n                    },\n                },\n            },\n            //Abfahrt\n            {\n                role: 'text.list',\n                type: 'text',\n                data: {\n                    icon: {\n                        true: {\n                            value: {\n                                role: 'state',\n                                mode: 'auto',\n                                type: 'state',\n                                dp: '',\n                                regexp: /\\.2\\.0\\.Line\\.Mode$/,\n                            },\n                            color: { type: 'const', constVal: Color.Red },\n                        },\n                        false: {\n                            value: {\n                                role: 'state',\n                                mode: 'auto',\n                                type: 'state',\n                                dp: '',\n                                regexp: /\\.2\\.0\\.Line\\.Mode$/,\n                            },\n                            color: { type: 'const', constVal: Color.Green },\n                        },\n                    },\n                    entity1: {\n                        value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.2\\.DepartureDelayed$/ },\n                    },\n                    entity2: {\n                        value: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.2\\.Departure$/,\n                            read: 'return val === 0 ? null : val',\n                        },\n                        dateFormat: {\n                            type: 'const',\n                            constVal: { local: 'de', format: { hour: '2-digit', minute: '2-digit' } },\n                        },\n                    },\n                    text: {\n                        true: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.StationFrom\\.Name$/ },\n                        false: undefined,\n                    },\n                    text1: {\n                        true: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.2\\.DeparturePlanned$/,\n                            read: `{ return new Date(val).toLocaleTimeString().slice(0,5) }`,\n                        },\n                        false: undefined,\n                    },\n                },\n            },\n            //Ankunft\n            {\n                role: 'text.list',\n                type: 'text',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'clock-alert-outline' },\n                            color: { type: 'const', constVal: Color.Red },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: '' },\n                            //color: { type: 'const', constVal: Color.Red },\n                        },\n                    },\n                    entity1: {\n                        value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.2\\.ArrivalDelayed$/ },\n                    },\n                    entity2: {\n                        value: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.2\\.Arrival$/,\n                            read: 'return val === 0 ? null : val',\n                        },\n                        dateFormat: {\n                            type: 'const',\n                            constVal: { local: 'de', format: { hour: '2-digit', minute: '2-digit' } },\n                        },\n                    },\n                    text: {\n                        true: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.StationTo\\.Name$/ },\n                        false: undefined,\n                    },\n                    text1: {\n                        true: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.2\\.ArrivalPlanned$/,\n                            read: `{ return new Date(val).toLocaleTimeString().slice(0,5) }`,\n                        },\n                        false: undefined,\n                    },\n                },\n            },\n            //Abfahrt\n            {\n                role: 'text.list',\n                type: 'text',\n                data: {\n                    icon: {\n                        true: {\n                            value: {\n                                role: 'state',\n                                mode: 'auto',\n                                type: 'state',\n                                dp: '',\n                                regexp: /\\.3\\.0\\.Line\\.Mode$/,\n                            },\n                            color: { type: 'const', constVal: Color.Red },\n                        },\n                        false: {\n                            value: {\n                                role: 'state',\n                                mode: 'auto',\n                                type: 'state',\n                                dp: '',\n                                regexp: /\\.3\\.0\\.Line\\.Mode$/,\n                            },\n                            color: { type: 'const', constVal: Color.Green },\n                        },\n                    },\n                    entity1: {\n                        value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.3\\.DepartureDelayed$/ },\n                    },\n                    entity2: {\n                        value: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.3\\.Departure$/,\n                            read: 'return val === 0 ? null : val',\n                        },\n                        dateFormat: {\n                            type: 'const',\n                            constVal: { local: 'de', format: { hour: '2-digit', minute: '2-digit' } },\n                        },\n                    },\n                    text: {\n                        true: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.StationFrom\\.Name$/ },\n                        false: undefined,\n                    },\n                    text1: {\n                        true: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.3\\.DeparturePlanned$/,\n                            read: `{ return new Date(val).toLocaleTimeString().slice(0,5) }`,\n                        },\n                        false: undefined,\n                    },\n                },\n            },\n            //Ankunft\n            {\n                role: 'text.list',\n                type: 'text',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'clock-alert-outline' },\n                            color: { type: 'const', constVal: Color.Red },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: '' },\n                            //color: { type: 'const', constVal: Color.Red },\n                        },\n                    },\n                    entity1: {\n                        value: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.3\\.ArrivalDelayed$/ },\n                    },\n                    entity2: {\n                        value: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.3\\.Arrival$/,\n                            read: 'return val === 0 ? null : val',\n                        },\n                        dateFormat: {\n                            type: 'const',\n                            constVal: { local: 'de', format: { hour: '2-digit', minute: '2-digit' } },\n                        },\n                    },\n                    text: {\n                        true: { role: 'state', mode: 'auto', type: 'state', dp: '', regexp: /\\.StationTo\\.Name$/ },\n                        false: undefined,\n                    },\n                    text1: {\n                        true: {\n                            role: 'date',\n                            mode: 'auto',\n                            type: 'state',\n                            dp: '',\n                            regexp: /\\.3\\.ArrivalPlanned$/,\n                            read: `{ return new Date(val).toLocaleTimeString().slice(0,5) }`,\n                        },\n                        false: undefined,\n                    },\n                },\n            },\n        ],\n    },\n    'thermo.hmip.valve': {\n        adapter: 'hmip.0',\n        card: 'cardThermo',\n        alwaysOn: 'none',\n        useColor: false,\n        items: undefined,\n        config: {\n            card: 'cardThermo',\n            data: {\n                headline: { mode: 'auto', role: '', type: 'state', dp: '', regexp: /\\.info\\.label$/ },\n                mixed1: {\n                    value: { type: 'const', constVal: 'actualtemp' },\n                },\n                mixed2: {\n                    value: {\n                        mode: 'auto',\n                        role: 'value.temperature',\n                        type: 'triggered',\n                        dp: '',\n                        regexp: /\\.channels\\.1\\.valveActualTemperature$/,\n                    },\n                    factor: { type: 'const', constVal: 1 },\n                    decimal: { type: 'const', constVal: 1 },\n                    unit: { type: 'const', constVal: '\u00B0C' },\n                },\n                mixed3: {\n                    value: { type: 'const', constVal: 'valveposition' },\n                },\n                mixed4: {\n                    value: {\n                        mode: 'auto',\n                        role: 'value',\n                        type: 'triggered',\n                        dp: '',\n                        regexp: /\\.valvePosition$/,\n                    },\n                    factor: { type: 'const', constVal: 1 },\n                    decimal: { type: 'const', constVal: 0 },\n                    unit: { type: 'const', constVal: '%' },\n                },\n                minTemp: {\n                    mode: 'auto',\n                    role: 'value',\n                    type: 'state',\n                    dp: '',\n                    regexp: /\\.minTemperature$/,\n                },\n                maxTemp: {\n                    mode: 'auto',\n                    role: 'value',\n                    type: 'state',\n                    dp: '',\n                    regexp: /\\.maxTemperature$/,\n                },\n                tempStep: { type: 'const', constVal: '5' },\n                unit: { type: 'const', constVal: '\u00B0C' },\n                set1: {\n                    mode: 'auto',\n                    type: 'state',\n                    dp: '',\n                    regexp: /\\.setPointTemperature$/,\n                    role: '',\n                },\n            },\n        },\n        pageItems: [\n            //Automatic\n            {\n                role: 'button',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'alpha-a-circle' },\n                            color: { type: 'const', constVal: Color.activated },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'alpha-a-circle-outline' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: {\n                            mode: 'auto',\n                            role: '',\n                            type: 'triggered',\n                            dp: '',\n                            regexp: /\\.controlMode$/,\n                            read: `return val == 'AUTOMATIC' ? true : false`,\n                            forceType: 'boolean',\n                        },\n                    },\n                    setValue1: {\n                        mode: 'auto',\n                        role: '',\n                        type: 'state',\n                        dp: '',\n                        regexp: /\\.controlMode$/,\n                        write: `return val != true ? 'AUTOMATIC' : 'MANUAL'`,\n                    },\n                },\n            },\n            //Manual\n            {\n                role: 'button',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'alpha-m-circle' },\n                            color: { type: 'const', constVal: Color.activated },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'alpha-m-circle-outline' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: {\n                            mode: 'auto',\n                            role: '',\n                            type: 'triggered',\n                            dp: '',\n                            regexp: /\\.controlMode$/,\n                            read: `return val == 'MANUAL' ? true : false`,\n                        },\n                    },\n                    setValue1: {\n                        mode: 'auto',\n                        role: '',\n                        type: 'state',\n                        dp: '',\n                        regexp: /\\.controlMode$/,\n                        write: `return val = true ? 'MANUAL' : 'AUTOMATIC'`,\n                    },\n                },\n            },\n            //Boost\n            {\n                role: 'button',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'fast-forward-60' },\n                            color: { type: 'const', constVal: Color.activated },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'fast-forward-60' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: {\n                            mode: 'auto',\n                            role: '',\n                            type: 'triggered',\n                            dp: '',\n                            regexp: /\\.boostMode$/,\n                        },\n                    },\n                    setValue1: { mode: 'auto', type: 'state', role: 'switch', dp: '', regexp: /\\.boostMode$/ },\n                },\n            },\n            //Fenster\n            {\n                role: 'indicator',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'window-open-variant' },\n                            color: { type: 'const', constVal: Color.open },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'window-closed-variant' },\n                            color: { type: 'const', constVal: Color.close },\n                        },\n                    },\n                    entity1: {\n                        value: {\n                            mode: 'auto',\n                            role: '',\n                            type: 'triggered',\n                            dp: '',\n                            regexp: /\\.windowOpen$/,\n                        },\n                    },\n                },\n            },\n            //Party\n            {\n                role: 'indicator',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'party-popper' },\n                            color: { type: 'const', constVal: Color.activated },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'party-popper' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: {\n                            mode: 'auto',\n                            role: '',\n                            type: 'triggered',\n                            dp: '',\n                            regexp: /\\.partyMode$/,\n                        },\n                    },\n                },\n            },\n            //Feuchte\n            {\n                role: 'text',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'water-percent' },\n                            color: { type: 'const', constVal: Color.good },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'water-percent' },\n                            color: { type: 'const', constVal: Color.bad },\n                        },\n                        scale: { type: 'const', constVal: { val_min: 0, val_max: 100, val_best: 60 } },\n                    },\n                    entity1: {\n                        value: {\n                            mode: 'auto',\n                            role: '',\n                            type: 'triggered',\n                            dp: '',\n                            regexp: /\\.humidity$/,\n                        },\n                    },\n                },\n            },\n            //Batterie\n            {\n                role: 'indicator',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'battery-low' },\n                            color: { type: 'const', constVal: Color.bad },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'battery-high' },\n                            color: { type: 'const', constVal: Color.good },\n                        },\n                    },\n                    entity1: {\n                        value: {\n                            mode: 'auto',\n                            role: '',\n                            type: 'triggered',\n                            dp: '',\n                            regexp: /\\.lowBat$/,\n                        },\n                    },\n                },\n            },\n            //Wartung UPDATE\n            {\n                role: 'indicator',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'account-wrench' },\n                            color: { type: 'const', constVal: Color.true },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'account-wrench' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: {\n                            mode: 'auto',\n                            role: '',\n                            type: 'triggered',\n                            dp: '',\n                            regexp: /\\.updateState$/,\n                            forceType: 'boolean',\n                            read: `return val !== 'UP_TO_DATE' ? true : false `,\n                        },\n                    },\n                },\n            },\n            //Empfang - Verbindung\n            {\n                role: 'indicator',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'wifi-off' },\n                            color: { type: 'const', constVal: Color.bad },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'wifi' },\n                            color: { type: 'const', constVal: Color.good },\n                        },\n                    },\n                    entity1: {\n                        value: {\n                            mode: 'auto',\n                            role: '',\n                            type: 'triggered',\n                            dp: '',\n                            regexp: /\\.unreach$/,\n                        },\n                    },\n                },\n            },\n            //Fehler dutyCycle\n            {\n                role: 'indicator',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'alert-circle' },\n                            color: { type: 'const', constVal: Color.bad },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'alert-circle-outline' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: {\n                            mode: 'auto',\n                            role: '',\n                            type: 'triggered',\n                            dp: '',\n                            regexp: /\\.dutyCycle$/,\n                        },\n                    },\n                },\n            },\n        ],\n    },\n    'thermo.hmip.wallthermostat': {\n        adapter: 'hmip.0',\n        card: 'cardThermo',\n        alwaysOn: 'none',\n        useColor: false,\n        items: undefined,\n        config: {\n            card: 'cardThermo',\n            data: {\n                headline: { mode: 'auto', role: '', type: 'state', dp: '', regexp: /\\.info\\.label$/ },\n                mixed1: {\n                    value: { type: 'const', constVal: 'actualtemp' },\n                },\n                mixed2: {\n                    value: {\n                        mode: 'auto',\n                        role: 'value.temperature',\n                        type: 'triggered',\n                        dp: '',\n                        regexp: /\\.actualTemperature$/,\n                    },\n                    factor: { type: 'const', constVal: 1 },\n                    decimal: { type: 'const', constVal: 1 },\n                    unit: { type: 'const', constVal: '\u00B0C' },\n                },\n                mixed3: {\n                    value: { type: 'const', constVal: 'valveposition' },\n                },\n                mixed4: {\n                    value: {\n                        mode: 'auto',\n                        role: 'value',\n                        type: 'triggered',\n                        dp: '',\n                        regexp: /\\.valvePosition$/,\n                    },\n                    factor: { type: 'const', constVal: 1 },\n                    decimal: { type: 'const', constVal: 0 },\n                    unit: { type: 'const', constVal: '%' },\n                },\n                minTemp: {\n                    mode: 'auto',\n                    role: 'value',\n                    type: 'state',\n                    dp: '',\n                    regexp: /\\.minTemperature$/,\n                },\n                maxTemp: {\n                    mode: 'auto',\n                    role: 'value',\n                    type: 'state',\n                    dp: '',\n                    regexp: /\\.maxTemperature$/,\n                },\n                tempStep: { type: 'const', constVal: '5' },\n                unit: { type: 'const', constVal: '\u00B0C' },\n                set1: {\n                    mode: 'auto',\n                    type: 'state',\n                    dp: '',\n                    regexp: /\\.setPointTemperature$/,\n                    role: '',\n                },\n            },\n        },\n        pageItems: [\n            //Automatic\n            {\n                role: 'button',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'alpha-a-circle' },\n                            color: { type: 'const', constVal: Color.activated },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'alpha-a-circle-outline' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: {\n                            mode: 'auto',\n                            role: '',\n                            type: 'triggered',\n                            dp: '',\n                            regexp: /\\.controlMode$/,\n                            read: `return val == 'AUTOMATIC' ? true : false`,\n                            forceType: 'boolean',\n                        },\n                    },\n                    setValue1: {\n                        mode: 'auto',\n                        role: '',\n                        type: 'state',\n                        dp: '',\n                        regexp: /\\.controlMode$/,\n                        write: `return val != true ? 'AUTOMATIC' : 'MANUAL'`,\n                    },\n                },\n            },\n            //Manual\n            {\n                role: 'button',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'alpha-m-circle' },\n                            color: { type: 'const', constVal: Color.activated },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'alpha-m-circle-outline' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: {\n                            mode: 'auto',\n                            role: '',\n                            type: 'triggered',\n                            dp: '',\n                            regexp: /\\.controlMode$/,\n                            read: `return val == 'MANUAL' ? true : false`,\n                        },\n                    },\n                    setValue1: {\n                        mode: 'auto',\n                        role: '',\n                        type: 'state',\n                        dp: '',\n                        regexp: /\\.controlMode$/,\n                        write: `return val = true ? 'MANUAL' : 'AUTOMATIC'`,\n                    },\n                },\n            },\n            //Boost\n            {\n                role: 'button',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'fast-forward-60' },\n                            color: { type: 'const', constVal: Color.activated },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'fast-forward-60' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: {\n                            mode: 'auto',\n                            role: '',\n                            type: 'triggered',\n                            dp: '',\n                            regexp: /\\.boostMode$/,\n                        },\n                    },\n                    setValue1: { mode: 'auto', type: 'state', role: 'switch', dp: '', regexp: /\\.boostMode$/ },\n                },\n            },\n            //Fenster\n            {\n                role: 'indicator',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'window-open-variant' },\n                            color: { type: 'const', constVal: Color.open },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'window-closed-variant' },\n                            color: { type: 'const', constVal: Color.close },\n                        },\n                    },\n                    entity1: {\n                        value: {\n                            mode: 'auto',\n                            role: '',\n                            type: 'triggered',\n                            dp: '',\n                            regexp: /\\.windowOpen$/,\n                        },\n                    },\n                },\n            },\n            //Party\n            {\n                role: 'indicator',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'party-popper' },\n                            color: { type: 'const', constVal: Color.activated },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'party-popper' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: {\n                            mode: 'auto',\n                            role: '',\n                            type: 'triggered',\n                            dp: '',\n                            regexp: /\\.partyMode$/,\n                        },\n                    },\n                },\n            },\n            //Feuchte\n            {\n                role: 'text',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'water-percent' },\n                            color: { type: 'const', constVal: Color.good },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'water-percent' },\n                            color: { type: 'const', constVal: Color.bad },\n                        },\n                        scale: { type: 'const', constVal: { val_min: 0, val_max: 100, val_best: 60 } },\n                    },\n                    entity1: {\n                        value: {\n                            mode: 'auto',\n                            role: '',\n                            type: 'triggered',\n                            dp: '',\n                            regexp: /\\.humidity$/,\n                        },\n                    },\n                },\n            },\n            //Batterie\n            {\n                role: 'indicator',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'battery-low' },\n                            color: { type: 'const', constVal: Color.bad },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'battery-high' },\n                            color: { type: 'const', constVal: Color.good },\n                        },\n                    },\n                    entity1: {\n                        value: {\n                            mode: 'auto',\n                            role: '',\n                            type: 'triggered',\n                            dp: '',\n                            regexp: /\\.lowBat$/,\n                        },\n                    },\n                },\n            },\n            //Wartung UPDATE\n            {\n                role: 'indicator',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'account-wrench' },\n                            color: { type: 'const', constVal: Color.true },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'account-wrench' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: {\n                            mode: 'auto',\n                            role: '',\n                            type: 'triggered',\n                            dp: '',\n                            regexp: /\\.updateState$/,\n                            forceType: 'boolean',\n                            read: `return val !== 'UP_TO_DATE' ? true : false `,\n                        },\n                    },\n                },\n            },\n            //Empfang - Verbindung\n            {\n                role: 'indicator',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'wifi-off' },\n                            color: { type: 'const', constVal: Color.bad },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'wifi' },\n                            color: { type: 'const', constVal: Color.good },\n                        },\n                    },\n                    entity1: {\n                        value: {\n                            mode: 'auto',\n                            role: '',\n                            type: 'triggered',\n                            dp: '',\n                            regexp: /\\.unreach$/,\n                        },\n                    },\n                },\n            },\n            //Fehler dutyCycle\n            {\n                role: 'indicator',\n                type: 'button',\n                dpInit: '',\n                data: {\n                    icon: {\n                        true: {\n                            value: { type: 'const', constVal: 'alert-circle' },\n                            color: { type: 'const', constVal: Color.bad },\n                        },\n                        false: {\n                            value: { type: 'const', constVal: 'alert-circle-outline' },\n                            color: { type: 'const', constVal: Color.deactivated },\n                        },\n                    },\n                    entity1: {\n                        value: {\n                            mode: 'auto',\n                            role: '',\n                            type: 'triggered',\n                            dp: '',\n                            regexp: /\\.dutyCycle$/,\n                        },\n                    },\n                },\n            },\n        ],\n    },\n};\n"],
  "mappings": "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",
  "names": []
}
