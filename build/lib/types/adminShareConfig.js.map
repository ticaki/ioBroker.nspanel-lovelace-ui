{
  "version": 3,
  "sources": ["../../../src/lib/types/adminShareConfig.ts"],
  "sourcesContent": ["// Zentrale Definition aller verf\u00FCgbaren Card-Typen\nexport type AdminCardTypes =\n    // Grid Cards\n    | 'cardGrid'\n    | 'cardGrid2'\n    | 'cardGrid3'\n    | 'cardThermo2'\n    | 'cardMedia'\n    // Entities Cards\n    | 'cardEntities'\n    | 'cardSchedule'\n    // Standalone Cards\n    | 'cardAlarm'\n    | 'cardQR'\n    | 'cardPower'\n    | 'cardChart'\n    | 'cardLChart'\n    | 'cardThermo'\n    // Popup Cards\n    | 'popupNotify'\n    | 'popupNotify2';\n\n// Typ f\u00FCr pageInfo bei PageMenuConfig (siehe Panel)\nexport interface PageMenuConfigInfo {\n    card: string;\n    alwaysOn?: string;\n    scrollPresentation?: string;\n    scrollType?: string;\n    scrollAutoTiming?: number;\n    pageItemCount?: number;\n}\n// Zentrale Kommandos f\u00FCr Navigation-API\nexport const SENDTO_GET_PANEL_NAVIGATION_COMMAND = 'getPanelNavigation';\nexport const SAVE_PANEL_NAVIGATION_COMMAND = 'savePanelNavigation';\n// SendTo command to request the list of available panels from the adapter\nexport const SENDTO_GET_PANELS_COMMAND = 'getPanels';\n// SendTo command to request the list of pages for a given panel\nexport const SENDTO_GET_PAGES_COMMAND = 'getPagesForPanel';\nexport const SENDTO_GET_PAGES_All_COMMAND = 'getAllPages';\n// Central adapter name constant for admin <-> adapter sendTo calls\nexport const ADAPTER_NAME = 'nspanel-lovelace-ui';\n// Expected response when asking the adapter for panels\nexport type PanelInfo = {\n    friendlyName: string;\n    panelTopic: string;\n};\n\nexport type PanelsResponse = PanelInfo[];\nexport interface NavigationSavePayload {\n    panelName: string;\n    pages: NavigationPositionsMap[];\n}\nexport type NavigationPositionsMap = { name: string; position: { x: number; y: number } };\n// Gemeinsame Typen f\u00FCr Navigation (Panel + Admin UI)\n\nexport interface NavigationMapEntry {\n    page: string;\n    next?: string;\n    prev?: string;\n    home?: string;\n    parent?: string;\n    targetPages?: string[];\n    label?: string;\n    position?: { x: number; y: number } | null;\n    pageInfo?: PageMenuConfigInfo;\n}\n\nexport type NavigationMap = NavigationMapEntry[];\n\nexport interface PanelListEntry {\n    panelName: string;\n    friendlyName: string;\n    navigationMap: NavigationMap;\n}\n\n// Shared types for admin UI (typo: file name uses 'Shard')\nexport type UnlockEntry = {\n    card: Extract<AdminCardTypes, 'cardAlarm'>; // 'cardUnlock' | 'cardAlarm'\n    alarmType?: string; // e.g. 'alarm' | 'unlock'\n    headline: string;\n    button1: string;\n    button2: string;\n    button3: string;\n    button4: string;\n    pin: number;\n    approved?: boolean;\n    setNavi?: string;\n    hidden?: boolean;\n    alwaysOn?: 'none' | 'always' | 'action' | 'ignore';\n    navigationAssignment?: NavigationAssignmentList;\n    uniqueName: string;\n};\n\nexport type UnlockEntries = UnlockEntry[];\n\n// R\u00FCckgabewert-Typ f\u00FCr das Navigation Assignment Panel\nexport type NavigationAssignment = {\n    topic: string;\n\n    navigation?: {\n        next?: string;\n        prev?: string;\n        home?: string;\n        parent?: string;\n    };\n};\n\nexport type NavigationAssignmentList = NavigationAssignment[];\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgCO,MAAM,sCAAsC;AAC5C,MAAM,gCAAgC;AAEtC,MAAM,4BAA4B;AAElC,MAAM,2BAA2B;AACjC,MAAM,+BAA+B;AAErC,MAAM,eAAe;",
  "names": []
}
