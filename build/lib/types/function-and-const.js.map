{
  "version": 3,
  "sources": ["../../../src/lib/types/function-and-const.ts"],
  "sourcesContent": ["import { Color } from '../const/Color';\nimport type { NSPanel } from './NSPanel';\nimport type {\n    AlarmButtonEvents,\n    cardEntitiesTypes,\n    cardGridTypes,\n    closingBehaviour,\n    PageMenuConfig,\n    placeholderType,\n    QRButtonEvent,\n    screenSaverCardType,\n    StateRole,\n} from './pages';\nimport type {\n    EventMethod,\n    EventType,\n    IconColorElement,\n    IconSelectElement,\n    PopupType,\n    ScreensaverModeType,\n    ValueDateFormat,\n} from './types';\n\nexport function convertColorScaleBest(F: any): IconColorElement['color_best'] {\n    if (F) {\n        return { r: F.red ?? F.r, g: F.green ?? F.g, b: F.blue ?? F.b };\n    }\n    return undefined;\n}\nexport function isPartialColorScaleElement(F: any): F is IconColorElement {\n    return F && ('val_min' in (F as IconColorElement) || 'val_max' in (F as IconColorElement));\n}\n\nexport function isIconSelectScaleElement(F: any): F is IconSelectElement {\n    return F && 'valIcon_min' in (F as IconSelectElement) && 'valIcon_max' in (F as IconSelectElement);\n}\nexport function isPartialIconSelectScaleElement(F: any): F is IconSelectElement {\n    return F && ('valIcon_min' in (F as IconSelectElement) || 'valIcon_max' in (F as IconSelectElement));\n}\n\n/**\n * Normalize a valid IconColorElement (e.g. fix color_best).\n * Call this after `isIconColorElement()` returned true.\n *\n * @param el IconColorElement\n */\n\nexport function normalizeIconColorElement(el: IconColorElement): IconColorElement {\n    const copy: IconColorElement = { ...el };\n    if (copy.color_best) {\n        copy.color_best = convertColorScaleBest(copy.color_best);\n    }\n    return copy;\n}\n/**\n * Lightweight type guard for IconColorElement.\n * - Checks presence & finiteness of required numbers.\n * - Optional fields, if present, must be of the right *shape*.\n * - No normalization, no range constraints (val_min may be > val_max).\n *\n * @param x unknown\n * @returns true if x is IconColorElement\n */\n\nexport function isIconColorScaleElement(x: unknown): x is IconColorElement {\n    if (typeof x !== 'object' || x === null) {\n        return false;\n    }\n\n    const v = x as Partial<IconColorElement>;\n\n    // required\n    if (!Number.isFinite(v.val_min as number)) {\n        return false;\n    }\n    if (!Number.isFinite(v.val_max as number)) {\n        return false;\n    }\n\n    // optional numbers\n    if (v.val_best != null && !Number.isFinite(v.val_best)) {\n        return false;\n    }\n\n    // optional enums\n    if (v.log10 != null && v.log10 !== 'max' && v.log10 !== 'min') {\n        return false;\n    }\n    if (\n        v.mode != null &&\n        v.mode !== 'mixed' &&\n        v.mode !== 'hue' &&\n        v.mode !== 'cie' &&\n        v.mode !== 'triGrad' &&\n        v.mode !== 'triGradAnchor' &&\n        v.mode !== 'quadriGrad' &&\n        v.mode !== 'quadriGradAnchor'\n    ) {\n        return false;\n    }\n\n    // optional color object\n    if (v.color_best != null && !Color.isRGB(v.color_best)) {\n        return false;\n    }\n\n    return true;\n}\nexport function isEventType(F: string): F is EventType {\n    return ['event'].indexOf(F) != -1;\n}\nexport function isEventMethod(F: string): F is EventMethod {\n    switch (F as EventMethod) {\n        case 'startup':\n        case 'sleepReached':\n        case 'pageOpenDetail':\n        case 'buttonPress2':\n        case 'renderCurrentPage':\n        case 'button1':\n        case 'button2':\n            return true;\n        default:\n            // Have to talk about this.\n            throw new Error(`Please report to developer: Unknown EventMethod: ${F} `);\n            return false;\n    }\n}\nexport function isPopupType(F: any): F is PopupType {\n    switch (F as PopupType) {\n        case 'popupFan':\n        case 'popupInSel':\n        case 'popupLight':\n        case 'popupLightNew':\n        case 'popupNotify':\n        case 'popupShutter':\n        case 'popupShutter2':\n        case 'popupThermo':\n        case 'popupTimer':\n        case 'popupSlider':\n            return true;\n        default:\n            console.info(`Unknown PopupType: ${F} `);\n            return false;\n    }\n}\nexport const SerialTypeArray = [\n    'light', //popup\n    'shutter', //popup\n    'delete',\n    'text',\n    'button',\n    'switch', // nur f\u00FCr cardQR\n    'number',\n    'input_sel', //popup\n    'timer', //popup\n    'fan', //popup\n];\nexport function isValueDateFormat(F: any): F is ValueDateFormat {\n    return F && typeof F === 'object' && F.local !== undefined && F.format !== undefined;\n}\nexport const screenSaverInfoIconsUseable = {\n    none: '',\n    'clock!': 'clock-alert-outline',\n    'weather!': 'weather-sunny-alert',\n    'news!': 'bell-ring-outline',\n    'calendar!': 'calendar-alert',\n    'alarm!': 'alarm',\n    'info!': 'information-outline',\n    'error!': 'alert-circle-outline',\n    'critical!': 'alert-circle',\n} as const;\n\nexport const screenSaverInfoIcons = swapKeyValue(screenSaverInfoIconsUseable);\nfunction swapKeyValue(obj: Record<string, string>): Record<string, string> {\n    const swapped: Record<string, string> = {};\n    for (const key in obj) {\n        const value = obj[key];\n        swapped[value] = key;\n    }\n    return swapped;\n}\n// Optimierte Type Guards mit const assertions\nconst CARD_ENTITIES_TYPES = ['cardEntities', 'cardSchedule'] as const;\nconst CARD_GRID_TYPES = ['cardGrid', 'cardGrid2', 'cardGrid3', 'cardThermo2', 'cardMedia'] as const;\nconst CARD_MENU_HALF_PAGE_SCROLL_TYPES = ['cardGrid', 'cardGrid2', 'cardGrid3', 'cardThermo2'] as const;\n\nexport function isCardEntitiesType(value: unknown): value is cardEntitiesTypes {\n    return typeof value === 'string' && CARD_ENTITIES_TYPES.includes(value as any);\n}\n\nexport function isCardGridType(value: unknown): value is cardGridTypes {\n    return typeof value === 'string' && CARD_GRID_TYPES.includes(value as any);\n}\n\nexport function isCardMenuHalfPageScrollType(value: unknown): value is cardGridTypes {\n    return typeof value === 'string' && CARD_MENU_HALF_PAGE_SCROLL_TYPES.includes(value as any);\n}\n\nexport function isCardMenuRole(F: any): F is cardGridTypes | cardEntitiesTypes {\n    return isCardEntitiesType(F) || isCardGridType(F);\n}\n// cardMedia use some features of cardGrid, but is not a menu card\n\nexport function isPageMenuConfig(F: any): F is PageMenuConfig {\n    if (typeof F !== 'object' || F === null || !('card' in F)) {\n        return false;\n    }\n    return isCardMenuRole(F.card);\n}\nexport const arrayOfAll =\n    <T>() =>\n    <U extends T[]>(array: U & ([T] extends [U[number]] ? unknown : 'Invalid') & { 0: T }): U =>\n        array;\nconst arrayOfAllScreenSaverMode = arrayOfAll<NSPanel.ScreensaverModeType>();\nconst arrayOfAllScreenSaverCards = arrayOfAll<screenSaverCardType>();\n\nexport function exhaustiveCheck(_param: never): void {}\n\nexport const screenSaverCardArray: screenSaverCardType[] = arrayOfAllScreenSaverCards([\n    'screensaver',\n    'screensaver2',\n    'screensaver3',\n]);\nexport function isScreenSaverCardType(F: string): F is screenSaverCardType {\n    if (typeof F !== 'string') {\n        return false;\n    }\n\n    return ['screensaver', 'screensaver2', 'screensaver3'].includes(F);\n}\n\nexport const screenSaverModeArray = arrayOfAllScreenSaverMode(['standard', 'advanced', 'alternate', 'easyview']);\nexport function isScreenSaverMode(F: any): F is NSPanel.ScreensaverModeType {\n    if (typeof F !== 'string') {\n        return false;\n    }\n\n    return ['standard', 'advanced', 'alternate', 'easyview'].includes(F);\n}\n// Optimierter Type Guard f\u00FCr ScreensaverMode Numbers\nconst SCREENSAVER_MODE_NUMBERS = [0, 1, 2, 3] as const;\n\nexport function isScreenSaverModeAsNumber(value: unknown): value is NSPanel.ScreensaverModeTypeAsNumber {\n    return typeof value === 'number' && SCREENSAVER_MODE_NUMBERS.includes(value as any);\n}\nexport function isStateRole(F: string): F is StateRole {\n    // Alle StateRole Werte sind g\u00FCltig - triviale Type Guard\n    return true;\n}\n// Optimierte Type Guards mit Sets f\u00FCr bessere Performance\nconst BUTTON_ACTION_TYPES = new Set([\n    'bExit',\n    'bUp',\n    'bNext',\n    'bSubNext',\n    'bPrev',\n    'bSubPrev',\n    'bHome',\n    'notifyAction',\n    'OnOff',\n    'button',\n    'up',\n    'stop',\n    'down',\n    'positionSlider',\n    'tiltOpen',\n    'tiltStop',\n    'tiltSlider',\n    'tiltClose',\n    'brightnessSlider',\n    'colorTempSlider',\n    'colorWheel',\n    'tempUpd',\n    'tempUpdHighLow',\n    'media-back',\n    'media-pause',\n    'media-next',\n    'media-shuffle',\n    'volumeSlider',\n    'mode-speakerlist',\n    'mode-playlist',\n    'mode-tracklist',\n    'mode-repeat',\n    'mode-equalizer',\n    'mode-seek',\n    'mode-crossfade',\n    'mode-favorites',\n    'mode-insel',\n    'media-OnOff',\n    'timer-start',\n    'timer-pause',\n    'timer-cancle',\n    'timer-finish',\n    'hvac_action',\n    'mode-modus1',\n    'mode-modus2',\n    'mode-modus3',\n    'number-set',\n    'mode-preset_modes',\n    'A1',\n    'A2',\n    'A3',\n    'A4',\n    'D1',\n    'U1',\n    'eu',\n] as const);\n\nexport function isButtonActionType(value: unknown): value is NSPanel.ButtonActionType {\n    return typeof value === 'string' && BUTTON_ACTION_TYPES.has(value as any);\n} // Optimierte Alarm Types mit const assertions\nexport const ALARM_BUTTON_EVENTS: AlarmButtonEvents[] = [\n    'A1',\n    'A2',\n    'A3',\n    'A4',\n    'D1',\n    'D2',\n    'D3',\n    'D4',\n    'U1',\n    '',\n] as const;\nexport function isPlaceholderType(F: any): F is placeholderType {\n    if (!F || typeof F !== 'object') {\n        return false;\n    }\n    for (const a in F) {\n        let count = 0;\n        if (!F[a]) {\n            return false;\n        }\n        for (const b in F[a]) {\n            if (['text', 'dp'].indexOf(b) !== -1 && F[a][b] !== undefined) {\n                count++;\n            }\n        }\n        if (count !== 1) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function isColorEntryType(F: object | NSPanel.ColorEntryType): F is NSPanel.ColorEntryType {\n    if ('true' in F && 'false' in F && 'scale' in F) {\n        return true;\n    }\n    return false;\n}\nexport function isQRButtonEvent(F: any): F is QRButtonEvent {\n    return 'OnOff' === F;\n}\nexport function isClosingBehavior(F: any): F is closingBehaviour {\n    return ['both', 'yes', 'no', 'none'].indexOf(F) !== -1;\n}\nexport function isAlarmButtonEvent(value: unknown): value is AlarmButtonEvents {\n    return typeof value === 'string' && ALARM_BUTTON_EVENTS.includes(value as any);\n}\nconst arrayOfModes = arrayOfAll<ScreensaverModeType>();\nexport const arrayOfScreensaverModes = arrayOfModes(['standard', 'alternate', 'advanced', 'easyview']);\n\nexport function isTasmotaStatusNet(F: any): F is { StatusNET: NSPanel.STATUS0['StatusNET'] } {\n    return F && typeof F === 'object' && 'StatusNET' in F && typeof F.StatusNET === 'object';\n}\n\nexport function isTasmotaStatus0Status(F: any): F is { Status: NSPanel.STATUS0['Status'] } {\n    return F && typeof F === 'object' && 'Status' in F && typeof F.Status === 'object';\n}\n\nexport function isTasmotaStatusPRM(F: any): F is { StatusPRM: NSPanel.STATUS0['StatusPRM'] } {\n    return F && typeof F === 'object' && 'StatusPRM' in F && typeof F.StatusPRM === 'object';\n}\n\nexport function isTasmotaStatusFWR(F: any): F is { StatusFWR: NSPanel.STATUS0['StatusFWR'] } {\n    return F && typeof F === 'object' && 'StatusFWR' in F && typeof F.StatusFWR === 'object';\n}\n\nexport function isTasmotaStatusLOG(F: any): F is { StatusLOG: NSPanel.STATUS0['StatusLOG'] } {\n    return F && typeof F === 'object' && 'StatusLOG' in F && typeof F.StatusLOG === 'object';\n}\n\nexport function isTasmotaStatusMEM(F: any): F is { StatusMEM: NSPanel.STATUS0['StatusMEM'] } {\n    return F && typeof F === 'object' && 'StatusMEM' in F && typeof F.StatusMEM === 'object';\n}\n\nexport function isTasmotaStatusMQT(F: any): F is { StatusMQT: NSPanel.STATUS0['StatusMQT'] } {\n    return F && typeof F === 'object' && 'StatusMQT' in F && typeof F.StatusMQT === 'object';\n}\n\nexport function isTasmotaStatusTIM(F: any): F is { StatusTIM: NSPanel.STATUS0['StatusTIM'] } {\n    return F && typeof F === 'object' && 'StatusTIM' in F && typeof F.StatusTIM === 'object';\n}\n\nexport function isTasmotaStatusSNS(F: any): F is { StatusSNS: NSPanel.STATUS0['StatusSNS'] } {\n    return F && typeof F === 'object' && 'StatusSNS' in F && typeof F.StatusSNS === 'object';\n}\n\nexport function isTasmotaStatusSTS(F: any): F is { StatusSTS: NSPanel.STATUS0['StatusSTS'] } {\n    return F && typeof F === 'object' && 'StatusSTS' in F && typeof F.StatusSTS === 'object';\n}\n\nexport function isTasmotaSTATUS0(F: any): F is NSPanel.STATUS0 {\n    return (\n        F &&\n        typeof F === 'object' &&\n        isTasmotaStatus0Status(F) &&\n        isTasmotaStatusPRM(F) &&\n        isTasmotaStatusFWR(F) &&\n        isTasmotaStatusLOG(F) &&\n        isTasmotaStatusMEM(F) &&\n        isTasmotaStatusNet(F) &&\n        isTasmotaStatusMQT(F) &&\n        isTasmotaStatusTIM(F) &&\n        isTasmotaStatusSNS(F) &&\n        isTasmotaStatusSTS(F)\n    );\n}\n"],
  "mappings": "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",
  "names": []
}
