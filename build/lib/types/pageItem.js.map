{
  "version": 3,
  "sources": ["../../../src/lib/types/pageItem.ts"],
  "sourcesContent": ["import { Dataitem } from '../classes/data-item';\nimport { RGB } from './Color';\nimport { ChangeTypeOfKeys } from './pages';\nimport * as Types from './types';\nexport type PageBaseItem = {\n    id?: string | null;\n    icon?: string;\n    icon2?: string;\n    onColor?: RGB;\n    offColor?: RGB;\n    useColor?: boolean;\n    interpolateColor?: boolean;\n    minValueBrightness?: number;\n    maxValueBrightness?: number;\n    minValueColorTemp?: number;\n    maxValueColorTemp?: number;\n    minValueLevel?: number;\n    maxValueLevel?: number;\n    minValueTilt?: number;\n    maxValueTilt?: number;\n    minValue?: number;\n    maxValue?: number;\n    stepValue?: number;\n    prefixName?: string;\n    suffixName?: string;\n    name?: string;\n    secondRow?: string;\n    buttonText?: string;\n    unit?: string;\n    navigate?: boolean;\n    colormode?: string;\n    colorScale?: Types.IconScaleElement;\n    //adapterPlayerInstance?: adapterPlayerInstanceType,\n    targetPage?: string;\n    modeList?: string[];\n    hidePassword?: boolean;\n    autoCreateALias?: boolean;\n    yAxis?: string;\n    yAxisTicks?: number[] | string;\n    xAxisDecorationId?: string;\n    useValue?: boolean;\n    monobutton?: boolean;\n    inSel_ChoiceState?: boolean;\n    iconArray?: string[];\n    fontSize?: number;\n    actionStringArray?: string[];\n    alwaysOnDisplay?: boolean;\n};\nexport type PageLightItem = {\n    type: 'light' | 'dimmer' | 'brightnessSlider' | 'hue' | 'rgb';\n    bri: PageItemMinMaxValue;\n    ct: PageItemMinMaxValue;\n    hue: PageItemMinMaxValue; //0-360\n    rgb: RGB;\n};\n\ntype PageItemMinMaxValue = { min: number; max: number };\nexport type PageItemColorSwitch = { on: RGB; off: RGB };\n\n/*export type PageMediaItem = ChangeTypeOfKeys<PageMediaItemBase, Dataitem>;\nexport type PageMediaItemBase = {\n    alwaysOnDisplay: boolean;\n    id: string | null;\n    vol: PageItemMinMaxValue;\n    adapterPlayerInstance: Types.adapterPlayerInstanceType;\n    mediaDevice: string;\n    colorMediaIcon: RGB;\n    colorMediaArtist: RGB;\n    colorMediaTitle: RGB;\n    speakerList: string[];\n    playList: string[];\n    equalizerList: string[];\n    repeatList: string[];\n    globalTracklist: string[];\n    crossfade: boolean;\n} & PageBaseItemMedia;*/\n\nexport type PageThermoItem =\n    | ({\n          popupThermoMode1?: string[];\n          popupThermoMode2?: string[];\n          popupThermoMode3?: string[];\n          popUpThermoName?: string[];\n          setThermoAlias?: string[];\n          setThermoDestTemp2?: string;\n      } & PageBaseItem)\n    | ({\n          popupThermoMode1?: string[];\n          popupThermoMode2?: string[];\n          popupThermoMode3?: string[];\n          popUpThermoName?: string[];\n          setThermoAlias?: string[];\n          setThermoDestTemp2?: string;\n      } & PageBaseItem);\nexport type IconBoolean = Record<Types.BooleanUnion, string | undefined>;\nexport type ThisCardMessageTypes = 'input_sel' | 'button';\n/*export type MessageIstemMedia extends = {\n    type?: Extract<Types.SerialType, ThisCardMessageTypes> | '';\n    intNameEntity: string;\n    iconNumber: 0 | 1 | 2 | 3 | 4 | 5; // media0 usw.\n    mode: MediaToolBoxAction;\n    icon: string;\n    iconColor: string;\n    dislayName: string;\n    optionalValue?: string;\n};*/\n\nexport type MessageItemMedia = Partial<MessageItem> & {\n    type?: Extract<Types.SerialType, ThisCardMessageTypes>;\n    iconNumber: 0 | 1 | 2 | 3 | 4 | 5; // media0 usw.\n    mode: MediaToolBoxAction;\n};\nexport interface MessageItem extends MessageItemInterface {\n    mainId?: string;\n    subId?: string;\n}\nexport type messageItemAllInterfaces = MessageItemMedia | MessageItem;\nexport interface MessageItemInterface {\n    type: Types.SerialType;\n    intNameEntity: string;\n    icon: string;\n    iconColor: string;\n    dislayName: string;\n    optionalValue: string;\n}\nexport type MediaToolBoxAction =\n    | 'speaker'\n    | 'play'\n    | 'tool'\n    | 'track'\n    | 'favor'\n    | 'equal'\n    | 'repeat'\n    | 'seek'\n    | 'cross'\n    | 'nexttool';\nexport type PageItemBase = {\n    activ: string;\n    value: string;\n    color: ColorEntryType;\n} & IconEntryType;\n//XOR<XOR<A, B>, C>\ntype PageItemLights = PageItemLightsBrightness;\ntype PageItemLightsBrightness = {\n    maxValueBrightness: number;\n    minValueBrightness: number;\n    interpolateColor: boolean;\n    dimmer: number | boolean;\n    hue: string;\n    useColor: string;\n};\nexport type PageItemUnion = {\n    role: 'socket' | 'light' | 'dimmer' | 'hue' | 'ct';\n    type: 'light';\n    data: PageItemBase & PageItemLights;\n};\n\nexport type PageItemDataitems = Omit<PageItemUnion, 'data'> & {\n    data: ChangeTypeOfKeys<PageItemUnion['data'], Dataitem>;\n};\n\nexport type ColorEntryType = Record<Types.BooleanUnion, RGB> & { scale?: Types.IconScaleElement };\n\nexport type IconEntryType = Record<Types.BooleanUnion, { value: string; color: RGB }> & {\n    scale: Types.IconScaleElement | undefined;\n};\n\nexport type TextEntryType = Record<Types.BooleanUnion, string>;\n\nexport type ValueEntryType = {\n    value: number;\n    decimal: number;\n    factor: number;\n    unit: string;\n};\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
