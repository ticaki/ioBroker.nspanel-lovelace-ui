{
  "version": 3,
  "sources": ["../../../src/lib/types/pages.ts"],
  "sourcesContent": ["import type * as dataItem from '../controller/data-item';\nimport { type PageItem } from '../pages/pageItem';\nimport type { AdminCardTypes } from './adminShareConfig';\nimport type { NSPanel } from './NSPanel';\n\nexport type CardRole = 'AdapterConnection' | 'AdapterStopped' | 'AdapterUpdates' | 'SonosSpeaker';\n\nexport type cardEntitiesTypes = Extract<AdminCardTypes, 'cardEntities' | 'cardSchedule'>;\nexport type cardGridTypes = Extract<\n    AdminCardTypes,\n    'cardGrid' | 'cardGrid2' | 'cardGrid3' | 'cardThermo2' | 'cardMedia'\n>;\n\nexport type PageTypeCards = NSPanel.PageTypeCards; // besonders, interne Card zum verwalten von pageItems\n\nexport type StateRole =\n    | 'date.sunrise,forecast.0'\n    | 'date.sunset.forecast.0'\n    | 'media.station'\n    | 'media.mode.crossfade'\n    | 'level.volume.group'\n    | 'indicator.connected'\n    | 'indicator'\n    | 'value.mode.thermostat'\n    | 'value.mode.airconditioner'\n    | 'value.speed.wind'\n    | 'value.direction.wind'\n    | 'value.uv'\n    | 'weather.icon.name'\n    | 'weather.icon'\n    | 'date.sunrise'\n    | 'date.sunset'\n    | 'sensor.switch'\n    | 'indicator.reachable'\n    | 'sensor.alarm.flood'\n    | 'level.mode'\n    | 'value.timer'\n    | 'level.timer'\n    | 'level.mode.select'\n    | 'value.mode.select'\n    | 'button'\n    | 'button.close'\n    | 'button.close.blind'\n    | 'button.close.tilt'\n    | 'button.next'\n    | 'button.open'\n    | 'button.open.blind'\n    | 'button.open.tilt'\n    | 'button.pause'\n    | 'button.play'\n    | 'button.prev'\n    | 'button.press'\n    | 'button.stop'\n    | 'button.stop.blind'\n    | 'button.stop.tilt'\n    | 'button.volume.down'\n    | 'button.volume.up'\n    | 'date'\n    | 'date.sunrise.forecast.0'\n    | 'date.sunrise.forecast.1'\n    | 'date.sunset.forecast.1'\n    | 'indicator.error'\n    | 'indicator.lowbat'\n    | 'indicator.maintenance'\n    | 'indicator.maintenance.lowbat'\n    | 'indicator.maintenance.unreach'\n    | 'indicator.working'\n    | 'level'\n    | 'level.blind'\n    | 'level.brightness'\n    | 'level.color.blue'\n    | 'level.color.cie'\n    | 'level.color.green'\n    | 'level.color.hue'\n    | 'level.color.name'\n    | 'level.color.red'\n    | 'level.color.rgb'\n    | 'level.color.temperature'\n    | 'level.color.white'\n    | 'level.dimmer'\n    | 'level.mode.airconditioner'\n    | 'level.mode.fan'\n    | 'level.mode.swing'\n    | 'level.mode.thermostat'\n    | 'level.speed'\n    | 'level.temperature'\n    | 'level.tilt'\n    | 'level.value'\n    | 'level.volume'\n    | 'media.album'\n    | 'media.artist'\n    | 'media.duration'\n    | 'media.elapsed'\n    | 'media.elapsed.text'\n    | 'media.mode.repeat'\n    | 'media.mode.shuffle'\n    | 'media.mute'\n    | 'media.playlist'\n    | 'media.seek'\n    | 'media.state'\n    | 'media.title'\n    | 'sensor.door'\n    | 'sensor.light'\n    | 'sensor.motion'\n    | 'sensor.open'\n    | 'sensor.window'\n    | 'state'\n    | 'state.light'\n    | 'switch'\n    | 'switch.gate'\n    | 'switch.light'\n    | 'switch.lock'\n    | 'switch.mode.auto'\n    | 'switch.mode.boost'\n    | 'switch.boost'\n    | 'switch.mode.manual'\n    | 'switch.mode.party'\n    | 'switch.mode.swing'\n    | 'switch.power'\n    | 'text'\n    | 'timestamp'\n    | 'value'\n    | 'value.battery'\n    | 'value.blind'\n    | 'value.dimmer'\n    | 'value.humidity'\n    | 'value.power'\n    | 'value.rgb'\n    | 'value.temperature'\n    | 'value.tilt'\n    | 'value.volume'\n    | 'value.warning'\n    | 'weather.icon.forecast'\n    | 'weather.title'\n    | 'weather.title.short'\n    | '';\n\nexport type DeviceRole =\n    | 'volume.mute'\n    /**\n     * Defines the datapoints to write to depending on the current read of entity1 state.\n     * If the read value is `true`, setValue1 is written with true,\n     * if the read value is `false`, setValue2 is written with true.\n     */\n    | 'writeTargetByValue'\n    /* selectGrid erzeugt im parent ein GridPage mit den items aus entity3 das mu\u00DF dort auch zerst\u00F6rt werden */\n    | 'selectGrid'\n    | 'isDismissiblePerEvent'\n    | 'repeatValue'\n    | 'spotify-playlist'\n    | 'spotify-tracklist'\n    | 'spotify-speaker'\n    | 'alexa-playlist'\n    | 'alexa-speaker'\n    | '2values'\n    | '2valuesIsValue'\n    | '4values'\n    | 'arrow'\n    | 'battery'\n    | 'blind'\n    | 'button'\n    | 'buttonSensor'\n    | 'cie'\n    | 'combined'\n    | 'ct'\n    | 'dimmer'\n    | 'door'\n    | 'gate'\n    | 'hue'\n    | 'iconNotText'\n    | 'indicator'\n    | 'light'\n    | 'media.repeat'\n    | 'motion'\n    | 'rgb.hex'\n    | 'rgbSingle'\n    | 'rgbThree'\n    | 'socket'\n    | 'test'\n    | 'text'\n    | 'text.list'\n    | 'textNotIcon'\n    | 'timer'\n    | 'window'\n    | 'info'\n    | 'humidity'\n    | 'temperature'\n    | 'fan'\n    | 'value.uv'\n    | 'heatcycle'\n    | ''\n    | CardRole;\n\nexport type PageBaseConfig = PageMenuConfig | PageOthersConfigs | screensaverDataItemOptions;\nexport type allCards =\n    | AdminCardTypes\n    | 'cardUnlock'\n    | 'screensaver'\n    | 'screensaver2'\n    | 'screensaver3'\n    | 'cardItemSpecial';\n\nexport type AlarmButtonEvents = 'A1' | 'A2' | 'A3' | 'A4' | 'D1' | 'D2' | 'D3' | 'D4' | 'U1' | '';\nexport type AlarmStates = 'disarmed' | 'armed' | 'arming' | 'pending' | 'triggered';\n\nexport type PageMenuConfig = (\n    | cardThermo2DataItemOptions\n    | cardGridDataItemOptions\n    | cardEntitiesDataItemOptions\n    | cardScheduleDataItemOptions\n    | cardMediaDataItemOptions\n) & {\n    options?: {\n        cardRoleList?: string[];\n        indentifier?: string;\n        min?: number;\n        max?: number;\n    };\n};\n\nexport type PageOthersConfigs =\n    | cardPowerDataItemOptions\n    | cardMediaDataItemOptions\n    | cardThermoDataItemOptions\n    | cardAlarmDataItemOptions\n    | cardNotifyDataItemOptions\n    | cardNotify2DataItemOptions\n    | cardQRDataItemOptions\n    | cardChartDataItemOptions;\n\ntype PageBaseTemplate = {\n    uniqueID: string;\n    template: NSPanel.PageTemplateIdent;\n    dpInit: string | RegExp;\n    hidden?: boolean;\n} & Partial<Omit<PageBaseConfigTemplate, 'template'>>;\n\nexport type PageBase = (\n    | {\n          uniqueID: string;\n          //template?: NSPanel.PageTemplateIdent;\n          dpInit?: string | RegExp; // ''\n          enums?: string | string[];\n          device?: string;\n          alwaysOn: 'none' | 'always' | 'action' | 'ignore';\n          hidden?: boolean;\n          cardRole?: CardRole;\n          pageItems: NSPanel.PageItemDataItemsOptions[];\n          //    mediaNamespace: string;\n          config: PageMenuConfig | PageOthersConfigs | screensaverDataItemOptions;\n      }\n    | PageBaseTemplate\n) & {\n    items?:\n        | undefined\n        | cardEntitiesDataItems\n        | cardPowerDataItems\n        | cardMediaDataItems\n        | cardGridDataItems\n        | cardThermoDataItems\n        | cardThermo2DataItems\n        | cardAlarmDataItems\n        | cardNotifyDataItems\n        | cardNotify2DataItems\n        | cardQRDataItems\n        | cardChartDataItems\n        | cardScheduleDataItems;\n};\n\nexport type PageBaseConfigTemplate = {\n    card: Exclude<PageTypeCards, 'screensaver' | 'screensaver2' | 'screensaver3'>;\n    adapter: string;\n    alwaysOn: 'none' | 'always' | 'action' | 'ignore';\n    pageItems: NSPanel.PageItemDataItemsOptions[];\n\n    //    mediaNamespace: string;\n    config: undefined | PageBaseConfig | screensaverDataItemOptions;\n    items: undefined;\n};\n\ntype PageNotifyConfig = {\n    headline: string;\n    entity1?: NSPanel.ValueEntryType;\n    colorHeadline: NSPanel.ColorEntryTypeBooleanStandard;\n    buttonLeft: string;\n    colorButtonLeft: NSPanel.ColorEntryTypeBooleanStandard;\n    buttonRight: string;\n    colorButtonRight: NSPanel.ColorEntryTypeBooleanStandard;\n    text: string;\n    colorText: NSPanel.ColorEntryTypeBooleanStandard;\n    timeout: number;\n    optionalValue?: string;\n    setValue1?: string;\n    setValue2?: string;\n    closingBehaviour?: string;\n};\n\nexport type PopupNotificationVal =\n    | {\n          headline?: string;\n          colorHeadline?: { r: number; g: number; b: number };\n          buttonLeft?: string;\n          colorButtonLeft?: { r: number; g: number; b: number };\n          buttonRight?: string;\n          colorButtonRight?: { r: number; g: number; b: number };\n          text?: string;\n          colorText?: { r: number; g: number; b: number };\n          timeout?: number;\n      }\n    | string\n    | null\n    | undefined;\n\nexport type cardNotifyDataItemOptions = {\n    card: Extract<AdminCardTypes, 'popupNotify'>;\n    data: ChangeTypeOfKeys<PageNotifyConfig, NSPanel.DataItemsOptions | undefined>;\n};\n\nexport type closingBehaviour = 'both' | 'yes' | 'no' | 'none';\n\nexport type cardNotifyDataItems = {\n    card: Extract<AdminCardTypes, 'popupNotify'>;\n    data: ChangeTypeOfKeys<PageNotifyConfig, dataItem.Dataitem | undefined>;\n};\n\ntype PageNotify2Config = {\n    textSize: string;\n    icon: NSPanel.IconEntryType;\n} & PageNotifyConfig;\n\nexport type cardNotify2DataItemOptions = {\n    card: Extract<AdminCardTypes, 'popupNotify2'>;\n    data: ChangeTypeOfKeys<PageNotify2Config, NSPanel.DataItemsOptions | undefined>;\n};\nexport type cardNotify2DataItems = {\n    card: Extract<AdminCardTypes, 'popupNotify2'>;\n    data: ChangeTypeOfKeys<PageNotify2Config, dataItem.Dataitem | undefined>;\n};\n\ntype PageChartConfig = {\n    headline: string;\n    text: string;\n    color: NSPanel.ColorEntryTypeBooleanStandard;\n    ticks: string;\n    value: string;\n    entity1: NSPanel.ValueEntryType;\n};\n\nexport type cardChartDataItemOptions = {\n    card: Extract<AdminCardTypes, 'cardChart' | 'cardLChart'>;\n    index: number;\n    data: ChangeTypeOfKeys<PageChartConfig, NSPanel.DataItemsOptions | undefined>;\n};\nexport type cardChartDataItems = {\n    card: Extract<AdminCardTypes, 'cardChart' | 'cardLChart'>;\n    data: ChangeTypeOfKeys<PageChartConfig, dataItem.Dataitem | undefined>;\n};\n\ntype PageAlarmConfig = {\n    alarmType?: string; //alarm unlock\n    headline: string;\n    entity1: NSPanel.ValueEntryType;\n    button1: string;\n    button2: string;\n    button3: string;\n    button4: string;\n    button5: string;\n    button6: string;\n    button7: string;\n    button8: string;\n    icon: NSPanel.IconEntryType;\n    pin: number;\n    approved?: boolean;\n    approveState: string;\n    statusState: string;\n    global: boolean;\n    setNavi?: string;\n};\nexport type cardAlarmDataItemOptions = {\n    card: Extract<AdminCardTypes, 'cardAlarm'>;\n    data: ChangeTypeOfKeys<PageAlarmConfig, NSPanel.DataItemsOptions | undefined>;\n};\nexport type cardAlarmDataItems = {\n    card: Extract<AdminCardTypes, 'cardAlarm'>;\n    data: ChangeTypeOfKeys<PageAlarmConfig, dataItem.Dataitem | undefined>;\n};\n\ntype PageQRBaseConfig = {\n    headline: string;\n    entity1?: string;\n    SSIDURLTEL?: string;\n    selType?: number;\n    wlantype?: string;\n    wlanhidden?: boolean;\n    password?: string;\n    pwdhidden?: boolean;\n};\nexport type cardQRDataItemOptions = {\n    card: Extract<AdminCardTypes, 'cardQR'>;\n    index: number;\n    data: ChangeTypeOfKeys<PageQRBaseConfig, NSPanel.DataItemsOptions | undefined>;\n};\nexport type cardQRDataItems = {\n    card: Extract<AdminCardTypes, 'cardQR'>;\n    data: ChangeTypeOfKeys<PageQRBaseConfig, dataItem.Dataitem | undefined>;\n};\nexport type QRButtonEvent = 'OnOff';\n\nexport type cardPowerDataItemOptions = {\n    card: Extract<AdminCardTypes, 'cardPower'>;\n    index: number;\n    data: ChangeTypeOfKeys<PageGridPowerConfig, NSPanel.DataItemsOptions | undefined>;\n};\nexport type cardPowerDataItems = {\n    card: Extract<AdminCardTypes, 'cardPower'>;\n    data: ChangeTypeOfKeys<PageGridPowerConfig, dataItem.Dataitem | undefined>;\n};\n\nexport type cardGridDataItemOptions = {\n    card: Extract<cardGridTypes, 'cardGrid' | 'cardGrid2' | 'cardGrid3'>;\n    cardRole?: CardRole;\n\n    data: ChangeTypeOfKeys<PageGridBaseConfig, NSPanel.DataItemsOptions | undefined>;\n} & PageMenuBaseConfig;\nexport type cardGridDataItems = {\n    card: Extract<cardGridTypes, 'cardGrid' | 'cardGrid2' | 'cardGrid3'>;\n    data: ChangeTypeOfKeys<PageGridBaseConfig, dataItem.Dataitem | undefined>;\n};\n\nexport type cardEntitiesDataItemOptions = {\n    card: Extract<cardEntitiesTypes, 'cardEntities'>;\n    cardRole?: CardRole;\n    data: ChangeTypeOfKeys<PageEntitiesBaseConfig, NSPanel.DataItemsOptions | undefined>;\n} & PageMenuBaseConfig;\nexport type cardEntitiesDataItems = {\n    card: Extract<cardEntitiesTypes, 'cardEntities'>;\n    data: ChangeTypeOfKeys<PageEntitiesBaseConfig, dataItem.Dataitem | undefined>;\n};\n\nexport type cardScheduleDataItemOptions = {\n    card: Extract<cardEntitiesTypes, 'cardSchedule'>;\n    cardRole?: CardRole;\n\n    data: ChangeTypeOfKeys<PageEntitiesBaseConfig, NSPanel.DataItemsOptions | undefined>;\n} & PageMenuBaseConfig;\nexport type cardScheduleDataItems = {\n    card: Extract<cardEntitiesTypes, 'cardSchedule'>;\n    data: ChangeTypeOfKeys<PageEntitiesBaseConfig, dataItem.Dataitem | undefined>;\n};\n\ntype PageMenuBaseConfig = {\n    cardRole?: CardRole;\n    /**\n     * Defines how many items are scrolled at once.\n     * - `\"page\"`: Scroll by a full page (all visible items).\n     * - `\"half\"`: Scroll by half a page (only supported by certain card types).\n     */\n    scrollType?: 'page' | 'half';\n\n    /**\n     * Filters which items are shown.\n     * - `\"true\"`: Show only items whose primary entity resolves to `true`.\n     * - `\"false\"`: Show only items whose primary entity resolves to `false`.\n     * - `number`: Show only items matching the given numeric filter value.\n     */\n    filterType?: NSPanel.filterType;\n} &\n    /**\n     * Standard scroll presentations.\n     * - `\"classic\"`: Windowed paging with optional `\"half\"`/`\"page\"` stride.\n     * - `\"arrow\"`: Fixed number of slots, last slot can show a paging arrow.\n     * Defaults to `\"classic\"`.\n     */\n    (| { scrollPresentation?: 'classic' | 'arrow' }\n        | {\n              /**\n               * Special mode that behaves like `\"classic\"`,\n               * including `\"half\"`/`\"page\"` support.\n               * Pages automatically advance after a fixed interval.\n               */\n              scrollPresentation: 'auto';\n\n              /**\n               * Interval (in seconds) to automatically advance to the next page.\n               * Always required in `\"auto\"` mode.\n               * Defaults to `15` seconds if not specified.\n               */\n              scrollAutoTiming: number;\n          }\n    );\n\nexport type cardThermoDataItemOptions = {\n    card: Extract<AdminCardTypes, 'cardThermo'>;\n    data: ChangeTypeOfKeys<PageThermoBaseConfig, NSPanel.DataItemsOptions | undefined>;\n};\nexport type cardThermoDataItems = {\n    card: Extract<AdminCardTypes, 'cardThermo'>;\n    data: ChangeTypeOfKeys<PageThermoBaseConfig, dataItem.Dataitem | undefined>;\n};\n\nexport type cardMediaDataItemOptions = {\n    card: Extract<cardGridTypes, 'cardMedia'>;\n    ident?: string;\n    logo?: NSPanel.PageItemDataItemsOptions | undefined;\n    data: ChangeTypeOfKeys<PageMediaBaseConfig, NSPanel.DataItemsOptions | undefined>;\n} & PageMenuBaseConfig;\n\nexport type cardMediaDataItems = {\n    card: Extract<cardGridTypes, 'cardMedia'>;\n    dpInit?: string | RegExp; // ''\n    ident?: string;\n    logo?: NSPanel.PageItemDataItemsOptions | undefined;\n    logoItem?: PageItem | undefined;\n\n    data: ChangeTypeOfKeys<PageMediaBaseConfig, dataItem.Dataitem | undefined>;\n};\n\n// Screensaver Types - optimiert mit const assertion\nexport type screenSaverCardType = 'screensaver' | 'screensaver2' | 'screensaver3';\n\nexport type screensaverDataItemOptions = {\n    card: Extends<PageTypeCards, screenSaverCardType>;\n    mode: NSPanel.ScreensaverModeType;\n    rotationTime: number;\n    model: NSPanel.NSpanelModel;\n    screensaverSwipe: boolean;\n    screensaverIndicatorButtons: boolean;\n    data: undefined;\n};\ntype Extends<T, U extends T> = U;\nexport type ChangeDeepPartial<Obj> = Obj extends\n    | object\n    | listItem\n    | PageTypeCards\n    | NSPanel.IconBoolean\n    | NSPanel.TextEntryType\n    | NSPanel.ValueEntryType\n    | NSPanel.IconEntryType\n    | NSPanel.ScaledNumberType\n    | PageGridPowerConfigElement\n    | NSPanel.RGB\n    | NSPanel.ColorEntryType\n    | PageMediaBaseConfig\n    | NSPanel.SerialTypePageElements\n    ? Obj extends NSPanel.DataItemsOptions\n        ? NSPanel.DataItemsOptions | null\n        : {\n              [K in keyof Obj]?: ChangeDeepPartial<Obj[K]> | null;\n          }\n    : NSPanel.DataItemsOptions | null;\n\nexport type ChangeTypeOfKeys<Obj, N> = Obj extends\n    | object\n    | listItem\n    | PageTypeCards\n    | NSPanel.IconBoolean\n    | NSPanel.TextEntryType\n    | NSPanel.ValueEntryType\n    | NSPanel.IconEntryType\n    | NSPanel.ScaledNumberType\n    | PageGridPowerConfigElement\n    | NSPanel.RGB\n    | NSPanel.ColorEntryType\n    | PageMediaBaseConfig\n    | NSPanel.SerialTypePageElements\n    ? Obj extends NSPanel.RGB | NSPanel.IconScaleElement | NSPanel.DataItemsOptions\n        ? N\n        : {\n              [K in keyof Obj]?: ChangeTypeOfKeys<Obj[K], N>;\n          }\n    : N;\n\nexport type ChangeTypeOfKeysGeneric<Obj, N> = Obj extends object\n    ? Obj extends NSPanel.RGB\n        ? N\n        : {\n              [K in keyof Obj]: ChangeTypeOfKeysGeneric<Obj[K], N>;\n          }\n    : N;\n\nexport type PageMediaBaseConfig = {\n    headline: string;\n    alwaysOnDisplay?: boolean;\n    album?: string;\n    title?: NSPanel.ValueEntryTypeWithColor;\n    duration?: string;\n    elapsed?: string;\n    station?: boolean;\n    artist?: NSPanel.ValueEntryTypeWithColor;\n    shuffle?: NSPanel.ScaledNumberType;\n    volume?: NSPanel.ScaledNumberType;\n    useGroupVolume?: boolean;\n    volumeGroup?: NSPanel.ScaledNumberType;\n    icon?: string;\n    play?: string;\n    onOffColor?: NSPanel.ColorEntryTypeBooleanStandard;\n    mediaState?: string;\n    isPlaying?: boolean;\n    stop?: string;\n    pause?: string;\n    forward?: string;\n    backward?: string;\n    coordinator?: boolean;\n};\n\ntype PageGridBaseConfig = {\n    headline: string;\n    list: string;\n};\n\ntype PageEntitiesBaseConfig = {\n    headline: string;\n    list?: string;\n};\n\ntype PageGridPowerConfig = {\n    headline: string;\n    homeValueTop: NSPanel.ValueEntryType;\n    homeIcon: NSPanel.IconEntryType;\n    homeValueBot: NSPanel.ValueEntryType;\n    leftTop: PageGridPowerConfigElement;\n    leftMiddle: PageGridPowerConfigElement;\n    leftBottom: PageGridPowerConfigElement;\n    rightTop: PageGridPowerConfigElement;\n    rightMiddle: PageGridPowerConfigElement;\n    rightBottom: PageGridPowerConfigElement;\n};\n\nexport type PageGridPowerConfigElement =\n    | {\n          icon?: NSPanel.IconEntryType;\n          value?: NSPanel.ValueEntryType;\n          speed?: NSPanel.ScaledNumberType;\n          text?: NSPanel.TextEntryType;\n      }\n    | undefined;\n\nexport type cardThermo2DataItemOptions = {\n    card: Extract<cardGridTypes, 'cardThermo2'>;\n\n    sortOrder?: 'H' | 'V' | 'HM' | 'VM' | 'HB' | 'VB';\n    cardRole?: CardRole;\n    data: ChangeTypeOfKeys<PageThermo2BaseConfig, NSPanel.DataItemsOptions | undefined>;\n} & PageMenuBaseConfig;\nexport type cardThermo2DataItems = {\n    card: Extract<cardGridTypes, 'cardThermo2'>;\n    data: ChangeTypeOfKeys<PageThermo2BaseConfig, dataItem.Dataitem | undefined>;\n};\n\ntype PageThermo2BaseConfig = Thermo2DataSetBase | Thermo2DataSetBase[];\n\ntype Thermo2DataSetBase = {\n    entity3?: NSPanel.ValueEntryType; // Thermostat\n    entity1: NSPanel.ValueEntryType; // sensor\n    icon1?: NSPanel.IconEntryType;\n    entity2?: NSPanel.ValueEntryType; // humidity\n    icon2?: NSPanel.IconEntryType;\n    icon4?: NSPanel.IconEntryType;\n    icon5?: NSPanel.IconEntryType;\n    headline?: string;\n    minValue?: number;\n    maxValue?: number;\n    stepValue?: number;\n    power?: boolean;\n    mode?: string;\n};\n\n/*type ThermoDataSetBase = {\n    entity1: NSPanel.ValueEntryType;\n    humidity?: NSPanel.ValueEntryType;\n    set: boolean;\n    unit: string;\n    headline: string;\n    minTemp: number; // *10\n    maxTemp: number; // *10\n    tempStep: number; // *10\n    power: boolean;\n};*/\n\ntype PageThermoBaseConfig = {\n    auto?: boolean;\n    boost?: boolean;\n    error?: boolean;\n    humidity?: number;\n    manual?: boolean;\n    //mode?: string;\n    party?: boolean;\n    unreach?: boolean;\n    windowopen?: boolean;\n    cool?: boolean;\n    heat?: boolean;\n    lowbat?: boolean;\n    maintain?: boolean;\n    power?: boolean;\n    set1: boolean;\n    set2?: boolean;\n    speed?: number;\n    swing?: number;\n    unit: string;\n    headline: string;\n    mixed1: NSPanel.ValueEntryType;\n    mixed2: NSPanel.ValueEntryType;\n    mixed3: NSPanel.ValueEntryType;\n    mixed4: NSPanel.ValueEntryType;\n    minTemp: number; // *10\n    maxTemp: number; // *10\n    tempStep: number; // *10\n    icon?: string;\n    color?: string;\n};\n\nexport type PageMediaBaseConfigWrite = {\n    pplay: writeItem;\n    pause: writeItem;\n    forward: writeItem;\n    backward: writeItem;\n    stop: writeItem;\n    off: writeItem;\n    shuffle: writeItem;\n    tracklist: writeItem;\n    playlist: writeItem;\n    equalizerList: writeItem;\n    repeat: writeItem;\n    toolstring: writeItem;\n};\nexport type PageMediaMessage = {\n    event: 'entityUpd';\n    headline: string;\n    navigation: string;\n    id: string;\n    name: string;\n    titelColor: string;\n    artist: string;\n    artistColor: string;\n    volume: string;\n    iconplaypause: AllIcons;\n    onoffbuttonColor: string;\n    shuffle_icon: AllIcons;\n    logo: string;\n    options: [string?, string?, string?, string?, string?];\n};\n\nexport type PagePowerMessage = {\n    event: 'entityUpd';\n    headline: string;\n    navigation: string;\n    homeValueTop: string;\n    homeIcon: string;\n    homeColor: string;\n    homeName: string;\n    homeValueBot: string;\n    leftTop: PagePowerMessageItem;\n    leftMiddle: PagePowerMessageItem;\n    leftBottom: PagePowerMessageItem;\n    rightTop: PagePowerMessageItem;\n    rightMiddle: PagePowerMessageItem;\n    rightBottom: PagePowerMessageItem;\n};\n\nexport type PageAlarmMessage = {\n    event: 'entityUpd';\n    intNameEntity: string;\n    headline: string;\n    navigation: string;\n    button1: string;\n    status1: AlarmButtonEvents;\n    button2: string;\n    status2: AlarmButtonEvents;\n    button3: string;\n    status3: AlarmButtonEvents;\n    button4: string;\n    status4: AlarmButtonEvents;\n    icon: string;\n    iconColor: string;\n    numpad: 'enable' | 'disable';\n    flashing: 'enable' | 'disable';\n};\n\nexport type PageQRMessage = {\n    event: 'entityUpd';\n    headline: string;\n    navigation: string;\n    textQR: string;\n    type1: string;\n    internalName1: string;\n    iconId1: string;\n    iconColor1: string;\n    displayName1: string;\n    optionalValue1: string;\n    type2: string;\n    internalName2: string;\n    iconId2: string;\n    iconColor2: string;\n    displayName2: string;\n    optionalValue2: string;\n};\n\nexport type PageChartMessage = {\n    event: 'entityUpd';\n    headline: string;\n    navigation: string;\n    color: string;\n    text: string;\n    ticks: string[];\n    value: string;\n};\n\nexport type PagePowerMessageItem = {\n    icon: string;\n    iconColor: string;\n    name: string;\n    value: string;\n    speed: number;\n};\n\nexport type PageGridMessage = {\n    event: 'entityUpd';\n    headline: string;\n    navigation: string;\n    options: [string?, string?, string?, string?, string?, string?, string?, string?];\n};\n\nexport type PageNotifyMessage = {\n    event: 'entityUpd';\n    headline: string;\n    hColor: string;\n    blText: string;\n    blColor: string;\n    brText: string;\n    brColor: string;\n    text: string;\n    textColor: string;\n    timeout: number;\n    fontSet: string;\n    icon: string;\n    iconColor: string;\n    placeholder: string;\n};\n/*+ getState(popupNotifyInternalName).val + '~'\n                + heading + '~'\n                + v_popupNotifyHeadingColor + '~'\n                + getState(popupNotifyButton1Text).val + '~'\n                + v_popupNotifyButton1TextColor + '~'\n                + getState(popupNotifyButton2Text).val + '~'\n                + v_popupNotifyButton2TextColor + '~'\n                + text + '~'\n                + v_popupNotifyTextColor + '~'\n                + getState(popupNotifySleepTimeout).val;*/\nexport type screensaverMessage = {\n    options: Record<NSPanel.ScreenSaverPlaces, string[]>;\n};\n\nexport type PageEntitiesMessage = {\n    event: 'entityUpd';\n    headline: string;\n    navigation: string;\n    options: [string?, string?, string?, string?, string?, string?, string?, string?];\n};\n\nexport type PageScheduleMessage = {\n    event: 'entityUpd';\n    headline: string;\n    navigation: string;\n    options: [string?, string?, string?, string?, string?, string?, string?, string?];\n};\nexport type PageThermo2Message = {\n    event: 'entityUpd';\n    headline: string;\n    navigation: string;\n    internalName: string;\n    dstTemp: number | string; // *10\n    minTemp: number | string; // *10\n    maxTemp: number | string; // *10\n    tempStep: string; // *10\n    unit: string;\n    power: boolean;\n    options: [\n        /*Info*/\n        string?,\n        string?,\n        string?,\n        string?,\n        string?,\n        string?,\n        string?,\n        string?,\n        /** option */\n        string?,\n        /** Pageitems */\n        string?,\n        string?,\n        string?,\n        string?,\n        string?,\n        string?,\n        string?,\n        string?,\n    ];\n};\n\nexport type PageThermoMessage = {\n    event: 'entityUpd';\n    headline: string;\n    intNameEntity: string;\n    navigation: string;\n    currentTemp: number | string;\n    dstTemp: number | string; // *10\n    status: string;\n    minTemp: number | string; // *10\n    maxTemp: number | string; // *10\n    tempStep: string; // *10\n    options: [string, string, string, string, string, string, string, string];\n    tCurTempLbl: string;\n    tStateLbl: string;\n    tALbl: ''; // ignored\n    tCF: string;\n    temp2: number | string; // *10\n    btDetail: '0' | '1'; // 1 ist aus\n};\n\ntype writeItem = { dp: string } | undefined;\nexport type listItem = NSPanel.listItem;\n\nexport type toolboxItem = ChangeTypeOfKeys<listItem, NSPanel.DataItemsOptions | undefined> & {\n    action: NSPanel.MediaToolBoxAction;\n};\nexport type toolboxItemDataItem = ChangeTypeOfKeys<NSPanel.listItem, dataItem.Dataitem | undefined> & {\n    action: NSPanel.MediaToolBoxAction;\n};\n\nexport type placeholderType = Record<\n    string,\n    {\n        text?: string;\n        dp?: string;\n    }\n>;\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
