{
  "version": 3,
  "sources": ["../../../src/lib/types/pages.ts"],
  "sourcesContent": ["import * as Types from './types';\nimport { Dataitem } from '../classes/data-item';\nimport { RGB } from './Color';\nimport { IconBoolean, ValueEntryType, TextEntryType, ColorEntryType, PageItemUnion } from './pageItem';\nimport { MessageItemMedia } from './pageItem';\nimport { MediaToolBoxAction } from './pageItem';\n\nexport type PageTypeCards =\n    | 'cardChart'\n    | 'cardLChart'\n    | 'cardEntities'\n    | 'cardGrid'\n    | 'cardGrid2'\n    | 'cardThermo'\n    | 'cardMedia'\n    | 'cardUnlock'\n    | 'cardQR'\n    | 'cardAlarm'\n    | 'cardPower'\n    | 'screensaver'\n    | 'screensaver2'; //| 'cardBurnRec'\n\n/*export type PageType =\n    | Types.PageChart\n    | Types.PageEntities\n    | Types.PageGrid\n    | Types.PageGrid2\n    | Types.PageThermo\n    | Types.PageMedia\n    | Types.PageUnlock\n    | Types.PageQR\n    | Types.PageAlarm\n    | Types.PagePower;\n*/\nexport type PageRole = PageMediaRoles;\n\nexport type PageMediaRoles =\n    | 'button.play'\n    | 'button.pause'\n    | 'button.next'\n    | 'button.prev'\n    | 'button.stop'\n    | 'button.volume.up'\n    | 'button.volume.down'\n    | 'media.seek' // (common.type=number) %\n    | 'media.mode.shuffle' //(common.type=number) 0 - none, 1 - all, 2 - one\n    | 'media.mode.repeat' //(common.type=boolean)\n    | 'media.state' //['play','stop','pause'] or [0 - pause, 1 - play, 2 - stop] or [true - playing/false - pause]\n    | 'media.artist'\n    | 'media.album'\n    | 'media.title'\n    | 'media.duration'\n    | 'media.elapsed.text'\n    | 'media.elapsed'\n    | 'media.mute'\n    | 'level.volume'\n    | 'media.album'\n    | 'media.playlist';\n\nexport function isPageRole(F: string | PageRole): F is PageRole {\n    switch (F as PageRole) {\n        case 'button.play':\n        case 'button.pause':\n        case 'button.next':\n        case 'button.prev':\n        case 'button.stop':\n        case 'button.volume.up':\n        case 'button.volume.down':\n        case 'media.seek':\n        case 'media.mode.shuffle':\n        case 'media.mode.repeat':\n        case 'media.state':\n        case 'media.artist':\n        case 'media.album':\n        case 'media.title':\n        case 'media.duration':\n        case 'media.elapsed.text':\n        case 'media.elapsed':\n        case 'media.mute':\n        case 'level.volume':\n        case 'media.playlist':\n            return true;\n        default:\n            return false;\n    }\n}\nexport function isButtonActionType(F: string | Types.ButtonActionType): F is Types.ButtonActionType {\n    switch (F) {\n        case 'bExit':\n        case 'bUp':\n        case 'bNext':\n        case 'bSubNext':\n        case 'bPrev':\n        case 'bSubPrev':\n        case 'bHome':\n        case 'notifyAction':\n        case 'OnOff':\n        case 'button':\n        case 'up':\n        case 'stop':\n        case 'down':\n        case 'positionSlider':\n        case 'tiltOpen':\n        case 'tiltStop':\n        case 'tiltSlider':\n        case 'tiltClose':\n        case 'brightnessSlider':\n        case 'colorTempSlider':\n        case 'colorWheel':\n        case 'tempUpd':\n        case 'tempUpdHighLow':\n        case 'media-back':\n        case 'media-pause':\n        case 'media-next':\n        case 'media-shuffle':\n        case 'volumeSlider':\n        case 'mode-speakerlist':\n        case 'mode-playlist':\n        case 'mode-tracklist':\n        case 'mode-repeat':\n        case 'mode-equalizer':\n        case 'mode-seek':\n        case 'mode-crossfade':\n        case 'mode-favorites':\n        case 'mode-insel':\n        case 'media-OnOff':\n        case 'timer-start':\n        case 'timer-pause':\n        case 'timer-cancle':\n        case 'timer-finish':\n        case 'hvac_action':\n        case 'mode-modus1':\n        case 'mode-modus2':\n        case 'mode-modus3':\n        case 'number-set':\n        case 'mode-preset_modes':\n        case 'A1':\n        case 'A2':\n        case 'A3':\n        case 'A4':\n        case 'D1':\n        case 'U1':\n            return true;\n        default:\n            console.info(F + ' is not isButtonActionType!');\n            return false;\n    }\n}\nexport function convertToEvent(msg: string): Types.IncomingEvent | null {\n    msg = (JSON.parse(msg) || {}).CustomRecv;\n    if (msg === undefined) return null;\n    const temp = msg.split(',');\n    if (!Types.isEventType(temp[0])) return null;\n    if (!Types.isEventMethod(temp[1])) return null;\n    const arr = String(temp[3]).split('?');\n    if (arr[2])\n        return {\n            type: temp[0],\n            method: temp[1],\n            page: parseInt(arr[0]),\n            subPage: parseInt(arr[1]),\n            command: isButtonActionType(arr[2]) ? arr[2] : '',\n            mode: temp[2],\n            opt: temp[4] ?? '',\n        };\n    else if (arr[1])\n        return {\n            type: temp[0],\n            method: temp[1],\n            page: parseInt(arr[0]),\n            command: isButtonActionType(arr[1]) ? arr[1] : '',\n            mode: temp[2],\n            opt: temp[4] ?? '',\n        };\n    else\n        return {\n            type: temp[0],\n            method: temp[1],\n            command: isButtonActionType(arr[0]) ? arr[0] : '',\n            mode: temp[2],\n            opt: temp[4] ?? '',\n        };\n}\nexport type PageMediaBase = {\n    //    type: PlayerType;\n    card: PageTypeCards;\n    initMode: 'auto' | 'custom';\n    dpInit: string; // '' and initMode 'auto' throw an error\n\n    //    mediaNamespace: string;\n    config: ChangeTypeOfKeys<PageMediaBaseConfig, Types.DataItemsOptions | undefined> & {\n        toolbox: (toolboxItem | undefined)[];\n    } & { logo: toolboxItem | undefined };\n    items:\n        | (ChangeTypeOfKeys<PageMediaBaseConfig, Dataitem | undefined> & {\n              toolbox: (toolboxItemDataItem | undefined)[];\n          } & { logo: toolboxItemDataItem | undefined })\n        | undefined;\n    writeItems: PageMediaBaseConfigWrite | undefined;\n};\nexport type ChangeTypeOfKeys<Obj, N> = Obj extends\n    | object\n    | listItem\n    | PageTypeCards\n    | IconBoolean\n    | TextEntryType\n    | ValueEntryType\n    | RGB\n    | ColorEntryType\n    | Types.IconScaleElement\n    | PageItemUnion['data']\n    ? Obj extends RGB | Types.IconScaleElement\n        ? N\n        : {\n              [K in keyof Obj]: ChangeTypeOfKeys<Obj[K], N>;\n          }\n    : N;\ntype PageMediaBaseConfig = {\n    heading: string;\n    alwaysOnDisplay: boolean;\n    album: string;\n    titel: listItem;\n    duration: string;\n    elapsed: string;\n    artist: listItem;\n    shuffle: string;\n    volume: number;\n    icon: string;\n    play: string;\n    mediaState: string;\n    stop: string;\n    pause: string;\n    forward: string;\n    backward: string;\n};\nexport function isColorEntryType(F: object | ColorEntryType): F is ColorEntryType {\n    if ('true' in F && 'false' in F && 'scale' in F) return true;\n    return false;\n}\nexport type PageMediaBaseConfigWrite = {\n    pplay: writeItem;\n    pause: writeItem;\n    forward: writeItem;\n    backward: writeItem;\n    stop: writeItem;\n    off: writeItem;\n    shuffle: writeItem;\n    tracklist: writeItem;\n    playlist: writeItem;\n    equalizerList: writeItem;\n    repeat: writeItem;\n    toolstring: writeItem;\n};\nexport type PageMediaMessage = {\n    event: 'entityUpd';\n    headline: string;\n    getNavigation: string;\n    id: string;\n    title: string;\n    titelColor: string;\n    artist: string;\n    artistColor: string;\n    volume: string;\n    iconplaypause: AllIcons;\n    onoffbuttonColor: string;\n    shuffle_icon: AllIcons;\n    logo: string;\n    options: [\n        (MessageItemMedia | string)?,\n        (MessageItemMedia | string)?,\n        (MessageItemMedia | string)?,\n        (MessageItemMedia | string)?,\n        (MessageItemMedia | string)?,\n    ];\n};\ntype writeItem = { dp: string } | undefined;\nexport type listItem =\n    | {\n          on: string;\n          text: string;\n          color: ColorEntryType | string | undefined;\n          icon: IconBoolean | string | undefined;\n          list: string | undefined;\n      }\n    | undefined; // mean string start with getState(' and end with ').val\nexport type toolboxItem = ChangeTypeOfKeys<listItem, Types.DataItemsOptions | undefined> & {\n    action: MediaToolBoxAction;\n};\nexport type toolboxItemDataItem = ChangeTypeOfKeys<listItem, Dataitem | undefined> & { action: MediaToolBoxAction };\n"],
  "mappings": "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",
  "names": []
}
