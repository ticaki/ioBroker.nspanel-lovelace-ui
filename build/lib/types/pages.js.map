{
  "version": 3,
  "sources": ["../../../src/lib/types/pages.ts"],
  "sourcesContent": ["import type * as dataItem from '../classes/data-item';\nimport type { RGB } from '../const/Color';\nimport type * as typePageItem from './type-pageItem';\nimport type * as Types from './types';\n\nexport type CardRole = 'AdapterConnection' | 'AdapterStopped' | 'AdapterUpdates';\nexport type PageTypeCards =\n    | 'cardChart'\n    | 'cardLChart'\n    | 'cardEntities'\n    | 'cardGrid'\n    | 'cardGrid2'\n    | 'cardGrid3'\n    | 'cardThermo'\n    | 'cardMedia'\n    | 'cardUnlock'\n    | 'cardQR'\n    | 'cardAlarm'\n    | 'cardPower'\n    | 'screensaver'\n    | 'screensaver2'\n    | 'screensaver3'\n    | 'cardBurnRec'\n    | 'cardItemSpecial' // besonders, interne Card zum verwalten von pageItems\n    | 'popupNotify'\n    | 'popupNotify2';\n\nexport const arrayOfAll =\n    <T>() =>\n    <U extends T[]>(array: U & ([T] extends [U[number]] ? unknown : 'Invalid') & { 0: T }): U =>\n        array;\nexport function exhaustiveCheck(_param: never): void {}\nconst arrayOfAllStateRole = arrayOfAll<StateRole>();\nconst arrayOfAllScreenSaverMode = arrayOfAll<Types.ScreensaverModeType>();\nconst arrayOfAllScreenSaverCards = arrayOfAll<screenSaverCardType>();\nexport const screenSaverCardArray: screenSaverCardType[] = arrayOfAllScreenSaverCards([\n    'screensaver',\n    'screensaver2',\n    'screensaver3',\n]);\nexport function isScreenSaverCardType(F: any): F is screenSaverCardType {\n    if (typeof F !== 'string') {\n        return false;\n    }\n\n    switch (F) {\n        case 'screensaver':\n        case 'screensaver2':\n        case 'screensaver3':\n            return true;\n        default:\n            console.info(`${F} is not isScreenSaverCardType!`);\n            return false;\n    }\n}\nexport const screenSaverModeArray = arrayOfAllScreenSaverMode(['standard', 'advanced', 'alternate', 'easyview']);\nexport function isScreenSaverMode(F: any): F is Types.ScreensaverModeType {\n    if (typeof F !== 'string') {\n        return false;\n    }\n\n    switch (F) {\n        case 'standard':\n        case 'advanced':\n        case 'alternate':\n        case 'easyview':\n            return true;\n        default:\n            console.info(`${F} is not isScreenSaverMode!`);\n            return false;\n    }\n}\n\n/**\n * if u get a error here, u have to add the new stateRole to the type StateRole or visa versa\n */\nexport const stateRoleArray = arrayOfAllStateRole([\n    'button',\n    'button.close',\n    'button.close.blind',\n    'button.close.tilt',\n    'button.next',\n    'button.open',\n    'button.open.blind',\n    'button.open.tilt',\n    'button.pause',\n    'button.play',\n    'button.press',\n    'button.prev',\n    'button.stop',\n    'button.stop.blind',\n    'button.stop.tilt',\n    'button.volume.down',\n    'button.volume.up',\n    'date',\n    'date.sunrise.forecast.0',\n    'date.sunrise.forecast.1',\n    'date.sunset.forecast.0',\n    'date.sunset.forecast.1',\n    'indicator.error',\n    'indicator.lowbat',\n    'indicator.maintenance',\n    'indicator.maintenance.lowbat',\n    'indicator.maintenance.unreach',\n    'indicator.working',\n    'level',\n    'level.blind',\n    'level.brightness',\n    'level.color.blue',\n    'level.color.cie',\n    'level.color.green',\n    'level.color.hue',\n    'level.color.name',\n    'level.color.red',\n    'level.color.rgb',\n    'level.color.temperature',\n    'level.color.white',\n    'level.dimmer',\n    'level.mode.airconditioner',\n    'level.mode.fan',\n    'level.mode.thermostat',\n    'level.temperature',\n    'level.tilt',\n    'level.value',\n    'level.volume',\n    'media.album',\n    'media.artist',\n    'media.duration',\n    'media.elapsed',\n    'media.elapsed.text',\n    'media.mode.repeat',\n    'media.mode.shuffle',\n    'media.mute',\n    'media.playlist',\n    'media.seek',\n    'media.state',\n    'media.title',\n    'sensor.door',\n    'sensor.light',\n    'sensor.motion',\n    'sensor.open',\n    'sensor.window',\n    'state',\n    'state.light',\n    'switch',\n    'switch.gate',\n    'switch.light',\n    'switch.lock',\n    'switch.mode.auto',\n    'switch.mode.boost',\n    'switch.mode.manual',\n    'switch.mode.party',\n    'switch.mode.swing',\n    'switch.power',\n    'text',\n    'timestamp',\n    'value',\n    'value.battery',\n    'value.blind',\n    'value.dimmer',\n    'value.humidity',\n    'value.power',\n    'value.rgb',\n    'value.temperature',\n    'value.tilt',\n    'value.volume',\n    'value.warning',\n    'weather.icon.forecast',\n    'weather.title',\n    'weather.title.short',\n    'level.mode.select',\n    'value.mode.select',\n    'level.timer',\n    'value.timer',\n    'level.mode',\n    '',\n]);\n\nexport type StateRole =\n    | 'level.mode'\n    | 'value.timer'\n    | 'level.timer'\n    | 'level.mode.select'\n    | 'value.mode.select'\n    | 'button'\n    | 'button.close'\n    | 'button.close.blind'\n    | 'button.close.tilt'\n    | 'button.next'\n    | 'button.open'\n    | 'button.open.blind'\n    | 'button.open.tilt'\n    | 'button.pause'\n    | 'button.play'\n    | 'button.prev'\n    | 'button.press'\n    | 'button.stop'\n    | 'button.stop.blind'\n    | 'button.stop.tilt'\n    | 'button.volume.down'\n    | 'button.volume.up'\n    | 'date'\n    | 'date.sunrise.forecast.0'\n    | 'date.sunrise.forecast.1'\n    | 'date.sunset.forecast.0'\n    | 'date.sunset.forecast.1'\n    | 'indicator.error'\n    | 'indicator.lowbat'\n    | 'indicator.maintenance'\n    | 'indicator.maintenance.lowbat'\n    | 'indicator.maintenance.unreach'\n    | 'indicator.working'\n    | 'level'\n    | 'level.blind'\n    | 'level.brightness'\n    | 'level.color.blue'\n    | 'level.color.cie'\n    | 'level.color.green'\n    | 'level.color.hue'\n    | 'level.color.name'\n    | 'level.color.red'\n    | 'level.color.rgb'\n    | 'level.color.temperature'\n    | 'level.color.white'\n    | 'level.dimmer'\n    | 'level.mode.airconditioner'\n    | 'level.mode.fan'\n    | 'level.mode.thermostat'\n    | 'level.temperature'\n    | 'level.tilt'\n    | 'level.value'\n    | 'level.volume'\n    | 'media.album'\n    | 'media.artist'\n    | 'media.duration'\n    | 'media.elapsed'\n    | 'media.elapsed.text'\n    | 'media.mode.repeat'\n    | 'media.mode.shuffle'\n    | 'media.mute'\n    | 'media.playlist'\n    | 'media.seek'\n    | 'media.state'\n    | 'media.title'\n    | 'sensor.door'\n    | 'sensor.light'\n    | 'sensor.motion'\n    | 'sensor.open'\n    | 'sensor.window'\n    | 'state'\n    | 'state.light'\n    | 'switch'\n    | 'switch.gate'\n    | 'switch.light'\n    | 'switch.lock'\n    | 'switch.mode.auto'\n    | 'switch.mode.boost'\n    | 'switch.mode.manual'\n    | 'switch.mode.party'\n    | 'switch.mode.swing'\n    | 'switch.power'\n    | 'text'\n    | 'timestamp'\n    | 'value'\n    | 'value.battery'\n    | 'value.blind'\n    | 'value.dimmer'\n    | 'value.humidity'\n    | 'value.power'\n    | 'value.rgb'\n    | 'value.temperature'\n    | 'value.tilt'\n    | 'value.volume'\n    | 'value.warning'\n    | 'weather.icon.forecast'\n    | 'weather.title'\n    | 'weather.title.short'\n    | '';\n\nexport type DeviceRole =\n    | '2values'\n    | '4values'\n    | 'arrow'\n    | 'battery'\n    | 'blind'\n    | 'button'\n    | 'buttonSensor'\n    | 'cie'\n    | 'combined'\n    | 'ct'\n    | 'dimmer'\n    | 'door'\n    | 'gate'\n    | 'hue'\n    | 'iconNotText'\n    | 'indicator'\n    | 'light'\n    | 'media.repeat'\n    | 'motion'\n    | 'rgb.hex'\n    | 'rgbSingle'\n    | 'rgbThree'\n    | 'socket'\n    | 'spotify-playlist'\n    | 'test'\n    | 'text'\n    | 'text.list'\n    | 'textNotIcon'\n    | 'timer'\n    | 'window'\n    | 'info'\n    | 'humidity'\n    | 'temperature'\n    | '';\n\nexport function isStateRole(F: string): F is StateRole {\n    switch (F as StateRole) {\n        case 'button.play':\n        case 'button.pause':\n        case 'button.next':\n        case 'button.prev':\n        case 'button.stop':\n        case 'button.volume.up':\n        case 'button.volume.down':\n        case 'media.seek':\n        case 'media.mode.shuffle':\n        case 'media.mode.repeat':\n        case 'media.state':\n        case 'media.artist':\n        case 'media.album':\n        case 'media.title':\n        case 'media.duration':\n        case 'media.elapsed.text':\n        case 'media.elapsed':\n        case 'media.mute':\n        case 'level.volume':\n        case 'media.playlist':\n            return true;\n        default:\n            return true;\n    }\n}\nexport function isButtonActionType(F: string): F is Types.ButtonActionType {\n    switch (F) {\n        case 'bExit':\n        case 'bUp':\n        case 'bNext':\n        case 'bSubNext':\n        case 'bPrev':\n        case 'bSubPrev':\n        case 'bHome':\n        case 'notifyAction':\n        case 'OnOff':\n        case 'button':\n        case 'up':\n        case 'stop':\n        case 'down':\n        case 'positionSlider':\n        case 'tiltOpen':\n        case 'tiltStop':\n        case 'tiltSlider':\n        case 'tiltClose':\n        case 'brightnessSlider':\n        case 'colorTempSlider':\n        case 'colorWheel':\n        case 'tempUpd':\n        case 'tempUpdHighLow':\n        case 'media-back':\n        case 'media-pause':\n        case 'media-next':\n        case 'media-shuffle':\n        case 'volumeSlider':\n        case 'mode-speakerlist':\n        case 'mode-playlist':\n        case 'mode-tracklist':\n        case 'mode-repeat':\n        case 'mode-equalizer':\n        case 'mode-seek':\n        case 'mode-crossfade':\n        case 'mode-favorites':\n        case 'mode-insel':\n        case 'media-OnOff':\n        case 'timer-start':\n        case 'timer-pause':\n        case 'timer-cancle':\n        case 'timer-finish':\n        case 'hvac_action':\n        case 'mode-modus1':\n        case 'mode-modus2':\n        case 'mode-modus3':\n        case 'number-set':\n        case 'mode-preset_modes':\n        case 'A1':\n        case 'A2':\n        case 'A3':\n        case 'A4':\n        case 'D1':\n        case 'U1':\n        case 'eu':\n            return true;\n        default:\n            console.info(`${F} is not isButtonActionType!`);\n            return false;\n    }\n}\n\nexport type PageBaseConfigTemplate =\n    | {\n          card: Exclude<PageTypeCards, 'screensaver' | 'screensaver2' | 'screensaver3'>;\n          adapter: string;\n          alwaysOn: 'none' | 'always' | 'action';\n          useColor?: boolean;\n          pageItems: typePageItem.PageItemDataItemsOptions[];\n\n          //    mediaNamespace: string;\n          config:\n              | undefined\n              | cardPowerDataItemOptions\n              | cardMediaDataItemOptions\n              | cardGridDataItemOptions\n              | cardThermoDataItemOptions\n              | cardEntitiesDataItemOptions\n              | cardAlarmDataItemOptions\n              | cardQRDataItemOptions\n              | screensaverDataItemOptions\n              | cardNotifyDataItemOptions\n              | cardNotify2DataItemOptions;\n          items: undefined;\n      }\n    | {\n          card: Extract<PageTypeCards, 'screensaver' | 'screensaver2'>;\n          template: Types.PageTemplateIdent;\n          adapter: string;\n          alwaysOn: 'none' | 'always' | 'action';\n          useColor?: boolean;\n          pageItems: typePageItem.PageItemDataItemsOptions[];\n\n          //    mediaNamespace: string;\n          config: undefined | screensaverDataItemOptions;\n          items: undefined;\n      };\n\nexport type AlarmButtonEvents = 'A1' | 'A2' | 'A3' | 'A4' | 'D1' | 'U1' | '';\nexport type AlarmStates = 'disarmed' | 'armed' | 'arming' | 'pending' | 'triggered';\n\nexport function isAlarmButtonEvent(F: any): F is AlarmButtonEvents {\n    return ['A1', 'A2', 'A3', 'A4', 'D1', 'U1'].indexOf(F) !== -1;\n}\n\nexport type PageBaseConfig = (\n    | (\n          | {\n                //    type: PlayerType;\n                //card: Exclude<PageTypeCards, 'screensaver' | 'screensaver2'>;\n                uniqueID: string;\n                template?: Types.PageTemplateIdent;\n                dpInit?: string | RegExp; // ''\n                enums?: string | string[];\n                device?: string;\n                alwaysOn: 'none' | 'always' | 'action';\n                useColor?: boolean;\n                pageItems: typePageItem.PageItemDataItemsOptions[];\n                //    mediaNamespace: string;\n                config:\n                    | cardPowerDataItemOptions\n                    | cardMediaDataItemOptions\n                    | cardGridDataItemOptions\n                    | cardThermoDataItemOptions\n                    | cardEntitiesDataItemOptions\n                    | cardAlarmDataItemOptions\n                    | cardNotifyDataItemOptions\n                    | cardNotify2DataItemOptions\n                    | cardQRDataItemOptions\n                    | cardChartDataItemOptions\n                    | cardLChartDataItemOptions;\n            }\n          | {\n                //    type: PlayerType;\n                //card: Extract<PageTypeCards, 'screensaver' | 'screensaver2'>;\n                uniqueID: string;\n                template?: Types.PageTemplateIdent;\n                dpInit: string | RegExp; // ''\n                enums?: string | string[];\n                alwaysOn: 'none' | 'always' | 'action';\n                device?: string;\n                useColor?: boolean;\n                cardRole?: CardRole;\n                pageItems: typePageItem.PageItemDataItemsOptions[];\n                /*&\n                    Required<Pick<typePageItem.PageItemDataItemsOptions, 'modeScr'>>*/\n\n                //    mediaNamespace: string;\n                config: screensaverDataItemOptions;\n            }\n      )\n    | ({\n          //card: PageTypeCards;\n          uniqueID: string;\n          template: Types.PageTemplateIdent;\n          dpInit: string | RegExp;\n      } & Partial<Omit<PageBaseConfigTemplate, 'template'>>)\n) & {\n    items?:\n        | undefined\n        | cardEntitiesDataItems\n        | cardPowerDataItems\n        | cardMediaDataItems\n        | cardGridDataItems\n        | cardThermoDataItems\n        | cardAlarmDataItems\n        | cardNotifyDataItems\n        | cardNotify2DataItems\n        | cardQRDataItems\n        | cardChartDataItems\n        | cardLChartDataItems;\n};\ntype PageNotifyConfig = {\n    headline: string;\n    entity1?: typePageItem.ValueEntryType;\n    colorHeadline: typePageItem.ColorEntryTypeNew;\n    buttonLeft: string;\n    colorButtonLeft: typePageItem.ColorEntryTypeNew;\n    buttonRight: string;\n    colorButtonRight: typePageItem.ColorEntryTypeNew;\n    text: string;\n    colorText: typePageItem.ColorEntryTypeNew;\n    timeout: number;\n    optionalValue?: string;\n    setValue1?: string;\n    setValue2?: string;\n    closingBehaviour?: string;\n};\nexport type cardNotifyDataItemOptions = {\n    card: 'popupNotify';\n    data: ChangeTypeOfKeys<PageNotifyConfig, Types.DataItemsOptions | undefined>;\n};\n\nexport type closingBehaviour = 'both' | 'yes' | 'no' | 'none';\nexport function isClosingBehavior(F: any): F is closingBehaviour {\n    return ['both', 'yes', 'no', 'none'].indexOf(F) !== -1;\n}\nexport type cardNotifyDataItems = {\n    card: 'popupNotify';\n    data: ChangeTypeOfKeys<PageNotifyConfig, dataItem.Dataitem | undefined>;\n};\n\ntype PageNotify2Config = {\n    textSize: string;\n    icon: typePageItem.IconEntryType;\n} & PageNotifyConfig;\n\nexport type cardNotify2DataItemOptions = {\n    card: 'popupNotify2';\n    data: ChangeTypeOfKeys<PageNotify2Config, Types.DataItemsOptions | undefined>;\n};\nexport type cardNotify2DataItems = {\n    card: 'popupNotify2';\n    data: ChangeTypeOfKeys<PageNotify2Config, dataItem.Dataitem | undefined>;\n};\n\ntype PageChartConfig = {\n    headline: string;\n    text: string;\n    color: typePageItem.ColorEntryTypeNew;\n    ticks: string;\n    value: string;\n    entity1: typePageItem.ValueEntryType;\n};\n\nexport type cardChartDataItemOptions = {\n    card: 'cardChart';\n    data: ChangeTypeOfKeys<PageChartConfig, Types.DataItemsOptions | undefined>;\n};\nexport type cardChartDataItems = {\n    card: 'cardChart';\n    data: ChangeTypeOfKeys<PageChartConfig, dataItem.Dataitem | undefined>;\n};\n\ntype PageLChartConfig = {\n    headline: string;\n    text: string;\n    color: typePageItem.ColorEntryTypeNew;\n    ticks: string;\n    value: string;\n    entity1: typePageItem.ValueEntryType;\n};\n\nexport type cardLChartDataItemOptions = {\n    card: 'cardLChart';\n    data: ChangeTypeOfKeys<PageLChartConfig, Types.DataItemsOptions | undefined>;\n};\nexport type cardLChartDataItems = {\n    card: 'cardLChart';\n    data: ChangeTypeOfKeys<PageLChartConfig, dataItem.Dataitem | undefined>;\n};\n\ntype PageAlarmPowerConfig = {\n    alarmType?: string; //alarm unlock\n    headline: string;\n    entity1: typePageItem.ValueEntryType;\n    button1: string;\n    button2: string;\n    button3: string;\n    button4: string;\n    icon: typePageItem.IconEntryType;\n    pin: number;\n    approved?: boolean;\n    setNavi?: string;\n};\nexport type cardAlarmDataItemOptions = {\n    card: 'cardAlarm';\n    data: ChangeTypeOfKeys<PageAlarmPowerConfig, Types.DataItemsOptions | undefined>;\n};\nexport type cardAlarmDataItems = {\n    card: 'cardAlarm';\n    data: ChangeTypeOfKeys<PageAlarmPowerConfig, dataItem.Dataitem | undefined>;\n};\n\ntype PageQRBaseConfig = {\n    headline: string;\n    entity1?: string;\n};\nexport type cardQRDataItemOptions = {\n    card: 'cardQR';\n    index: number;\n    data: ChangeTypeOfKeys<PageQRBaseConfig, Types.DataItemsOptions | undefined>;\n};\nexport type cardQRDataItems = {\n    card: 'cardQR';\n    data: ChangeTypeOfKeys<PageQRBaseConfig, dataItem.Dataitem | undefined>;\n};\nexport type QRButtonEvent = 'OnOff';\nexport function isQRButtonEvent(F: any): F is QRButtonEvent {\n    return ['OnOff'].indexOf(F) !== -1;\n}\n\nexport type cardPowerDataItemOptions = {\n    card: 'cardPower';\n    data: ChangeTypeOfKeys<PageGridPowerConfig, Types.DataItemsOptions | undefined>;\n};\nexport type cardPowerDataItems = {\n    card: 'cardPower';\n    data: ChangeTypeOfKeys<PageGridPowerConfig, dataItem.Dataitem | undefined>;\n};\n\nexport type cardGridDataItemOptions = {\n    card: 'cardGrid' | 'cardGrid2' | 'cardGrid3';\n    cardRole?: CardRole;\n    scrollType?: 'page';\n    filterType?: 'true' | 'false';\n    data: ChangeTypeOfKeys<PageGridBaseConfig, Types.DataItemsOptions | undefined>;\n};\nexport type cardGridDataItems = {\n    card: 'cardGrid' | 'cardGrid2' | 'cardGrid3';\n    data: ChangeTypeOfKeys<PageGridBaseConfig, dataItem.Dataitem | undefined>;\n};\n\nexport type cardEntitiesDataItemOptions = {\n    card: 'cardEntities';\n    cardRole?: CardRole;\n    scrollType?: 'page';\n    filterType?: 'true' | 'false';\n    data: ChangeTypeOfKeys<PageEntitiesBaseConfig, Types.DataItemsOptions | undefined>;\n};\nexport type cardEntitiesDataItems = {\n    card: 'cardEntities';\n    data: ChangeTypeOfKeys<PageEntitiesBaseConfig, dataItem.Dataitem | undefined>;\n};\n\nexport type cardThermoDataItemOptions = {\n    card: 'cardThermo';\n    data: ChangeTypeOfKeys<PageThermoBaseConfig, Types.DataItemsOptions | undefined>;\n};\nexport type cardThermoDataItems = {\n    card: 'cardThermo';\n    data: ChangeTypeOfKeys<PageThermoBaseConfig, dataItem.Dataitem | undefined>;\n};\n\nexport type cardMediaDataItemOptions = {\n    card: 'cardMedia';\n    data: ChangeTypeOfKeys<PageMediaBaseConfig, Types.DataItemsOptions | undefined> & { logo: toolboxItem | undefined };\n};\n\nexport type cardMediaDataItems = {\n    card: 'cardMedia';\n    data: ChangeTypeOfKeys<PageMediaBaseConfig, dataItem.Dataitem | undefined> & {\n        toolbox: (toolboxItemDataItem | undefined)[];\n    } & { logo: toolboxItemDataItem | undefined };\n};\nexport type screenSaverCardType = 'screensaver' | 'screensaver2' | 'screensaver3';\nexport type screensaverDataItemOptions = {\n    card: Extends<PageTypeCards, screenSaverCardType>;\n    mode: Types.ScreensaverModeType;\n    rotationTime: number;\n    model: Types.NSpanelModel;\n    screensaverSwipe: boolean;\n    screensaverIndicatorButtons: boolean;\n    data: undefined;\n};\ntype Extends<T, U extends T> = U;\nexport type ChangeDeepPartial<Obj> = Obj extends\n    | object\n    | listItem\n    | PageTypeCards\n    | typePageItem.IconBoolean\n    | typePageItem.TextEntryType\n    | typePageItem.ValueEntryType\n    | typePageItem.IconEntryType\n    | typePageItem.ScaledNumberType\n    | PageGridPowerConfigElement\n    | RGB\n    | typePageItem.ColorEntryType\n    | PageMediaBaseConfig\n    | Types.SerialTypePageElements\n    ? Obj extends Types.DataItemsOptions\n        ? Types.DataItemsOptions | null\n        : {\n              [K in keyof Obj]?: ChangeDeepPartial<Obj[K]> | null;\n          }\n    : Types.DataItemsOptions | null;\n\nexport type ChangeTypeOfKeys<Obj, N> = Obj extends\n    | object\n    | listItem\n    | PageTypeCards\n    | typePageItem.IconBoolean\n    | typePageItem.TextEntryType\n    | typePageItem.ValueEntryType\n    | typePageItem.IconEntryType\n    | typePageItem.ScaledNumberType\n    | PageGridPowerConfigElement\n    | RGB\n    | typePageItem.ColorEntryType\n    | PageMediaBaseConfig\n    | Types.SerialTypePageElements\n    ? Obj extends RGB | Types.IconScaleElement | Types.DataItemsOptions\n        ? N\n        : {\n              [K in keyof Obj]?: ChangeTypeOfKeys<Obj[K], N>;\n          }\n    : N;\n\nexport type ChangeTypeOfKeysGeneric<Obj, N> = Obj extends object\n    ? Obj extends RGB\n        ? N\n        : {\n              [K in keyof Obj]: ChangeTypeOfKeysGeneric<Obj[K], N>;\n          }\n    : N;\n/*export type DeepPartial<Obj, N> = Obj extends\n    | object\n    | listItem\n    | PageTypeCards\n    | IconBoolean\n    | TextEntryType\n    | ValueEntryType\n    | IconEntryType\n    | ScaledNumberType\n    | PageGridPowerConfigElement\n    | RGB\n    | ColorEntryType\n    | PageMediaBaseConfig\n    | Types.SerialTypePageElements\n    ? Obj extends Dataitem\n        ? Dataitem\n        : {\n              [K in keyof Obj]+?: ChangeTypeOfKeys<Obj[K], N>;\n          }\n    : Dataitem;*/\n\ntype PageMediaBaseConfig = {\n    headline: string;\n    alwaysOnDisplay: boolean;\n    album: string;\n    title: listItem;\n    duration: string;\n    elapsed: string;\n    artist: listItem;\n    shuffle: typePageItem.ScaledNumberType;\n    volume: typePageItem.ScaledNumberType;\n    icon: string;\n    play: string;\n    mediaState: string;\n    stop: string;\n    pause: string;\n    forward: string;\n    backward: string;\n};\n\ntype PageGridBaseConfig = {\n    headline: string;\n    list: string;\n};\n\ntype PageEntitiesBaseConfig = {\n    headline: string;\n    list?: string;\n};\n\ntype PageGridPowerConfig = {\n    headline: string;\n    homeValueTop: typePageItem.ValueEntryType;\n    homeIcon: typePageItem.IconEntryType;\n    homeValueBot: typePageItem.ValueEntryType;\n    leftTop: PageGridPowerConfigElement;\n    leftMiddle: PageGridPowerConfigElement;\n    leftBottom: PageGridPowerConfigElement;\n    rightTop: PageGridPowerConfigElement;\n    rightMiddle: PageGridPowerConfigElement;\n    rightBottom: PageGridPowerConfigElement;\n};\n\nexport type PageGridPowerConfigElement =\n    | {\n          icon?: typePageItem.IconEntryType;\n          value?: typePageItem.ValueEntryType;\n          speed?: typePageItem.ScaledNumberType;\n          text?: typePageItem.TextEntryType;\n      }\n    | undefined;\n\ntype PageThermoBaseConfig = {\n    auto?: boolean;\n    boost?: boolean;\n    error?: boolean;\n    humidity?: number;\n    manual?: boolean;\n    //mode?: string;\n    party?: boolean;\n    unreach?: boolean;\n    windowopen?: boolean;\n    cool?: boolean;\n    heat?: boolean;\n    lowbat?: boolean;\n    maintain?: boolean;\n    power?: boolean;\n    set1: boolean;\n    set2?: boolean;\n    speed?: number;\n    swing?: number;\n    unit: string;\n    headline: string;\n    mixed1: typePageItem.ValueEntryType;\n    mixed2: typePageItem.ValueEntryType;\n    mixed3: typePageItem.ValueEntryType;\n    mixed4: typePageItem.ValueEntryType;\n    minTemp: number; // *10\n    maxTemp: number; // *10\n    tempStep: number; // *10\n    icon?: string;\n    color?: string;\n};\nexport function isColorEntryType(F: object | typePageItem.ColorEntryType): F is typePageItem.ColorEntryType {\n    if ('true' in F && 'false' in F && 'scale' in F) {\n        return true;\n    }\n    return false;\n}\nexport type PageMediaBaseConfigWrite = {\n    pplay: writeItem;\n    pause: writeItem;\n    forward: writeItem;\n    backward: writeItem;\n    stop: writeItem;\n    off: writeItem;\n    shuffle: writeItem;\n    tracklist: writeItem;\n    playlist: writeItem;\n    equalizerList: writeItem;\n    repeat: writeItem;\n    toolstring: writeItem;\n};\nexport type PageMediaMessage = {\n    event: 'entityUpd';\n    headline: string;\n    navigation: string;\n    id: string;\n    name: string;\n    titelColor: string;\n    artist: string;\n    artistColor: string;\n    volume: string;\n    iconplaypause: AllIcons;\n    onoffbuttonColor: string;\n    shuffle_icon: AllIcons;\n    logo: string;\n    options: [string?, string?, string?, string?, string?];\n};\n\nexport type PagePowerMessage = {\n    event: 'entityUpd';\n    headline: string;\n    navigation: string;\n    homeValueTop: string;\n    homeIcon: string;\n    homeColor: string;\n    homeName: string;\n    homeValueBot: string;\n    leftTop: PagePowerMessageItem;\n    leftMiddle: PagePowerMessageItem;\n    leftBottom: PagePowerMessageItem;\n    rightTop: PagePowerMessageItem;\n    rightMiddle: PagePowerMessageItem;\n    rightBottom: PagePowerMessageItem;\n};\n\nexport type PageAlarmMessage = {\n    event: 'entityUpd';\n    intNameEntity: string;\n    headline: string;\n    navigation: string;\n    button1: string;\n    status1: AlarmButtonEvents;\n    button2: string;\n    status2: AlarmButtonEvents;\n    button3: string;\n    status3: AlarmButtonEvents;\n    button4: string;\n    status4: AlarmButtonEvents;\n    icon: string;\n    iconColor: string;\n    numpad: 'enable' | 'disable';\n    flashing: 'enable' | 'disable';\n};\n\nexport type PageQRMessage = {\n    event: 'entityUpd';\n    headline: string;\n    navigation: string;\n    textQR: string;\n    type1: string;\n    internalName1: string;\n    iconId1: string;\n    iconColor1: string;\n    displayName1: string;\n    optionalValue1: string;\n    type2: string;\n    internalName2: string;\n    iconId2: string;\n    iconColor2: string;\n    displayName2: string;\n    optionalValue2: string;\n};\n\nexport type PageChartMessage = {\n    event: 'entityUpd';\n    headline: string;\n    navigation: string;\n    color: string;\n    text: string;\n    ticks: string[];\n    value: string;\n};\n\nexport type PagePowerMessageItem = {\n    icon: string;\n    iconColor: string;\n    name: string;\n    value: string;\n    speed: number;\n};\n\nexport type PageGridMessage = {\n    event: 'entityUpd';\n    headline: string;\n    navigation: string;\n    options: [string?, string?, string?, string?, string?, string?, string?, string?];\n};\n\nexport type PageNotifyMessage = {\n    event: 'entityUpd';\n    headline: string;\n    hColor: string;\n    blText: string;\n    blColor: string;\n    brText: string;\n    brColor: string;\n    text: string;\n    textColor: string;\n    timeout: number;\n    fontSet: string;\n    icon: string;\n    iconColor: string;\n    placeholder: string;\n};\n/*+ getState(popupNotifyInternalName).val + '~'\n                + heading + '~'\n                + v_popupNotifyHeadingColor + '~'\n                + getState(popupNotifyButton1Text).val + '~'\n                + v_popupNotifyButton1TextColor + '~'\n                + getState(popupNotifyButton2Text).val + '~'\n                + v_popupNotifyButton2TextColor + '~'\n                + text + '~'\n                + v_popupNotifyTextColor + '~'\n                + getState(popupNotifySleepTimeout).val;*/\nexport type screensaverMessage = {\n    options: Record<Types.ScreenSaverPlaces, string[]>;\n};\n\nexport type PageEntitiesMessage = {\n    event: 'entityUpd';\n    headline: string;\n    navigation: string;\n    options: [string?, string?, string?, string?, string?, string?, string?, string?];\n};\n\nexport type PageThermoMessage = {\n    event: 'entityUpd';\n    headline: string;\n    intNameEntity: string;\n    navigation: string;\n    currentTemp: number | string;\n    dstTemp: number | string; // *10\n    status: string;\n    minTemp: number | string; // *10\n    maxTemp: number | string; // *10\n    tempStep: string; // *10\n    options: [string, string, string, string, string, string, string, string];\n    tCurTempLbl: string;\n    tStateLbl: string;\n    tALbl: ''; // ignored\n    tCF: string;\n    temp2: number | string; // *10\n    btDetail: '0' | '1'; // 1 ist aus\n};\n\ntype writeItem = { dp: string } | undefined;\nexport type listItem =\n    | {\n          on: string;\n          text: string;\n          color: typePageItem.ColorEntryType | string | undefined;\n          icon?: typePageItem.IconBoolean | string | undefined;\n          list?: string | undefined;\n      }\n    | undefined; // mean string start with getState(' and end with ').val\nexport type toolboxItem = ChangeTypeOfKeys<listItem, Types.DataItemsOptions | undefined> & {\n    action: typePageItem.MediaToolBoxAction;\n};\nexport type toolboxItemDataItem = ChangeTypeOfKeys<listItem, dataItem.Dataitem | undefined> & {\n    action: typePageItem.MediaToolBoxAction;\n};\n\nexport type placeholderType = Record<\n    string,\n    {\n        text?: string;\n        dp?: string;\n    }\n>;\n\nexport function isPlaceholderType(F: any): F is placeholderType {\n    if (!F || typeof F !== 'object') {\n        return false;\n    }\n    for (const a in F) {\n        let count = 0;\n        if (!F[a]) {\n            return false;\n        }\n        for (const b in F[a]) {\n            if (['text', 'dp'].indexOf(b) !== -1 && F[a][b] !== undefined) {\n                count++;\n            }\n        }\n        if (count !== 1) {\n            return false;\n        }\n    }\n    return true;\n}\n"],
  "mappings": "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",
  "names": []
}
