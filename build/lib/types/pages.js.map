{
  "version": 3,
  "sources": ["../../../src/lib/types/pages.ts"],
  "sourcesContent": ["import * as dataItem from '../classes/data-item';\nimport * as Color from '../const/Color';\nimport * as typePageItem from './type-pageItem';\nimport * as Types from './types';\n\nexport type PageTypeCards =\n    | 'cardChart'\n    | 'cardLChart'\n    | 'cardEntities'\n    | 'cardGrid'\n    | 'cardGrid2'\n    | 'cardThermo'\n    | 'cardMedia'\n    | 'cardUnlock'\n    | 'cardQR'\n    | 'cardAlarm'\n    | 'cardPower'\n    | 'screensaver'\n    | 'screensaver2'\n    | 'cardBurnRec'\n    | 'cardItemSpecial'\n    | 'popupNotify'\n    | 'popupNotify2'; // besonders, interne Card zum verwalten von pageItems\n\n/*export type PageType =\n    | Types.PageChart\n    | Types.PageEntities\n    | Types.PageGrid\n    | Types.PageGrid2\n    | Types.PageThermo\n    | Types.PageMedia\n    | Types.PageUnlock\n    | Types.PageQR\n    | Types.PageAlarm\n    | Types.PagePower;\n*/\nexport type StateRole =\n    | 'value.power'\n    | 'button.play'\n    | 'button.pause'\n    | 'button.next'\n    | 'button.prev'\n    | 'button.stop'\n    | 'button.volume.up'\n    | 'button.volume.down'\n    | 'media.seek' // (common.type=number) %\n    | 'media.mode.shuffle' //(common.type=number) 0 - none, 1 - all, 2 - one\n    | 'media.mode.repeat' //(common.type=boolean)\n    | 'media.state' //['play','stop','pause'] or [0 - pause, 1 - play, 2 - stop] or [true - playing/false - pause]\n    | 'media.artist'\n    | 'media.album'\n    | 'media.title'\n    | 'media.duration'\n    | 'media.elapsed.text'\n    | 'media.elapsed'\n    | 'media.mute'\n    | 'level.volume'\n    | 'media.album'\n    | 'media.playlist'\n    | 'button.open.blind'\n    | 'button.open'\n    | 'button.close.blind'\n    | 'button.close'\n    | 'button.stop.blind'\n    | 'button.stop'\n    | 'button.open.tilt'\n    | 'button.stop.tilt'\n    | 'button.close.tilt'\n    | 'level.tilt'\n    | 'level.blind'\n    | 'level.color.name'\n    | 'state'\n    | 'level.color.blue'\n    | 'level.color.red'\n    | 'level.color.green'\n    | 'level.color.white'\n    | 'level.brightness'\n    | 'switch'\n    | 'button'\n    | 'sensor.window'\n    | 'sensor.open'\n    | 'value.temperature'\n    | 'value.battery'\n    | 'indicator.lowbat'\n    | 'value'\n    | ''\n    | 'level.value'\n    | 'date';\n\nexport type DeviceRole =\n    | 'text'\n    | 'socket'\n    | 'light'\n    | 'dimmer'\n    | 'hue'\n    | 'ct'\n    | 'cie'\n    | 'rgbSingle'\n    | 'rgb'\n    | 'ct'\n    | 'blind'\n    | 'door'\n    | 'window'\n    | 'gate'\n    | 'motion'\n    | 'buttonSensor'\n    | 'button'\n    | 'media.repeat'\n    | 'text.list'\n    | 'arrow'\n    | 'spotify-playlist'\n    | 'timer'\n    | 'rgb.hex'\n    | 'text.list'\n    | 'rgb'\n    | 'indicator'\n    | '2values'\n    | 'combined'\n    | 'textNotIcon'\n    | 'iconNotText'\n    | 'test'\n    | ''\n    | 'battery'; // timer with internal counter\n\nexport function isStateRole(F: string | StateRole): F is StateRole {\n    switch (F as StateRole) {\n        case 'button.play':\n        case 'button.pause':\n        case 'button.next':\n        case 'button.prev':\n        case 'button.stop':\n        case 'button.volume.up':\n        case 'button.volume.down':\n        case 'media.seek':\n        case 'media.mode.shuffle':\n        case 'media.mode.repeat':\n        case 'media.state':\n        case 'media.artist':\n        case 'media.album':\n        case 'media.title':\n        case 'media.duration':\n        case 'media.elapsed.text':\n        case 'media.elapsed':\n        case 'media.mute':\n        case 'level.volume':\n        case 'media.playlist':\n            return true;\n        default:\n            return true;\n    }\n}\nexport function isButtonActionType(F: string | Types.ButtonActionType): F is Types.ButtonActionType {\n    switch (F) {\n        case 'bExit':\n        case 'bUp':\n        case 'bNext':\n        case 'bSubNext':\n        case 'bPrev':\n        case 'bSubPrev':\n        case 'bHome':\n        case 'notifyAction':\n        case 'OnOff':\n        case 'button':\n        case 'up':\n        case 'stop':\n        case 'down':\n        case 'positionSlider':\n        case 'tiltOpen':\n        case 'tiltStop':\n        case 'tiltSlider':\n        case 'tiltClose':\n        case 'brightnessSlider':\n        case 'colorTempSlider':\n        case 'colorWheel':\n        case 'tempUpd':\n        case 'tempUpdHighLow':\n        case 'media-back':\n        case 'media-pause':\n        case 'media-next':\n        case 'media-shuffle':\n        case 'volumeSlider':\n        case 'mode-speakerlist':\n        case 'mode-playlist':\n        case 'mode-tracklist':\n        case 'mode-repeat':\n        case 'mode-equalizer':\n        case 'mode-seek':\n        case 'mode-crossfade':\n        case 'mode-favorites':\n        case 'mode-insel':\n        case 'media-OnOff':\n        case 'timer-start':\n        case 'timer-pause':\n        case 'timer-cancle':\n        case 'timer-finish':\n        case 'hvac_action':\n        case 'mode-modus1':\n        case 'mode-modus2':\n        case 'mode-modus3':\n        case 'number-set':\n        case 'mode-preset_modes':\n        case 'A1':\n        case 'A2':\n        case 'A3':\n        case 'A4':\n        case 'D1':\n        case 'U1':\n            return true;\n        default:\n            console.info(F + ' is not isButtonActionType!');\n            return false;\n    }\n}\n\nexport type PageBaseConfigTemplate =\n    | {\n          card: Exclude<PageTypeCards, 'screensaver' | 'screensaver2'>;\n          adapter: string;\n          alwaysOn: 'none' | 'always' | 'action';\n          useColor: boolean;\n          pageItems: typePageItem.PageItemDataItemsOptions[];\n\n          //    mediaNamespace: string;\n          config:\n              | undefined\n              | cardPowerDataItemOptions\n              | cardMediaDataItemOptions\n              | cardGridDataItemOptions\n              | cardThermoDataItemOptions\n              | cardEntitiesDataItemOptions\n              | cardAlarmDataItemOptions\n              | screensaverDataItemOptions\n              | cardNotifyDataItemOptions\n              | cardNotify2DataItemOptions;\n          items: undefined;\n      }\n    | {\n          card: Extract<PageTypeCards, 'screensaver' | 'screensaver2'>;\n          template: Types.PageTemplateIdent;\n          adapter: string;\n          alwaysOn: 'none' | 'always' | 'action';\n          useColor: boolean;\n          pageItems: typePageItem.PageItemDataItemsOptions[];\n\n          //    mediaNamespace: string;\n          config: undefined | screensaverDataItemOptions;\n          items: undefined;\n      };\n\nexport type PageBaseConfig = (\n    | (\n          | {\n                //    type: PlayerType;\n                card: Exclude<PageTypeCards, 'screensaver' | 'screensaver2'>;\n                uniqueID: string;\n                template?: Types.PageTemplateIdent;\n                dpInit: string; // '' and initMode 'auto' throw an error\n                alwaysOn: 'none' | 'always' | 'action';\n                useColor: boolean;\n                pageItems: typePageItem.PageItemDataItemsOptions[];\n\n                //    mediaNamespace: string;\n                config:\n                    | undefined\n                    | cardPowerDataItemOptions\n                    | cardMediaDataItemOptions\n                    | cardGridDataItemOptions\n                    | cardThermoDataItemOptions\n                    | cardEntitiesDataItemOptions\n                    | cardAlarmDataItemOptions\n                    | cardNotifyDataItemOptions\n                    | cardNotify2DataItemOptions;\n            }\n          | {\n                //    type: PlayerType;\n                card: Extract<PageTypeCards, 'screensaver' | 'screensaver2'>;\n                uniqueID: string;\n                template?: Types.PageTemplateIdent;\n                dpInit: string; // '' and initMode 'auto' throw an error\n                alwaysOn: 'none' | 'always' | 'action';\n                useColor: boolean;\n                pageItems: typePageItem.PageItemDataItemsOptions[];\n                /*&\n                    Required<Pick<typePageItem.PageItemDataItemsOptions, 'modeScr'>>*/\n\n                //    mediaNamespace: string;\n                config: undefined | screensaverDataItemOptions;\n            }\n      )\n    | ({\n          card: PageTypeCards;\n          uniqueID: string;\n          template: Types.PageTemplateIdent;\n          dpInit: string;\n      } & Partial<Omit<PageBaseConfigTemplate, 'template'>>)\n) & {\n    items?:\n        | undefined\n        | cardEntitiesDataItems\n        | cardPowerDataItems\n        | cardMediaDataItems\n        | cardGridDataItems\n        | cardThermoDataItems\n        | cardAlarmDataItems\n        | cardNotifyDataItems\n        | cardNotify2DataItems;\n};\ntype PageNotifyConfig = {\n    headline: string;\n    entity1?: typePageItem.ValueEntryType;\n    colorHeadline: typePageItem.ColorEntryTypeNew;\n    buttonLeft: string;\n    colorButtonLeft: typePageItem.ColorEntryTypeNew;\n    buttonRight: string;\n    colorButtonRight: typePageItem.ColorEntryTypeNew;\n    text: string;\n    colorText: typePageItem.ColorEntryTypeNew;\n    timeout: number;\n    optionalValue?: string;\n    setValue1?: string;\n    setValue2?: string;\n};\nexport type cardNotifyDataItemOptions = {\n    card: 'popupNotify';\n    data: ChangeTypeOfKeys<PageNotifyConfig, Types.DataItemsOptions | undefined>;\n};\nexport type cardNotifyDataItems = {\n    card: 'popupNotify';\n    data: ChangeTypeOfKeys<PageNotifyConfig, dataItem.Dataitem | undefined>;\n};\n\ntype PageNotify2Config = {\n    textSize: string;\n    icon: typePageItem.IconEntryType;\n} & PageNotifyConfig;\n\nexport type cardNotify2DataItemOptions = {\n    card: 'popupNotify2';\n    data: ChangeTypeOfKeys<PageNotify2Config, Types.DataItemsOptions | undefined>;\n};\nexport type cardNotify2DataItems = {\n    card: 'popupNotify2';\n    data: ChangeTypeOfKeys<PageNotify2Config, dataItem.Dataitem | undefined>;\n};\n\ntype PageAlarmPowerConfig = {\n    headline: string;\n    entity1: typePageItem.ValueEntryType;\n    button1: string;\n    button2: string;\n    button3: string;\n    button4: string;\n    icon: typePageItem.IconEntryType;\n};\nexport type cardAlarmDataItemOptions = {\n    card: 'cardAlarm';\n    data: ChangeTypeOfKeys<PageAlarmPowerConfig, Types.DataItemsOptions | undefined>;\n};\nexport type cardAlarmDataItems = {\n    card: 'cardAlarm';\n    data: ChangeTypeOfKeys<PageAlarmPowerConfig, dataItem.Dataitem | undefined>;\n};\n\nexport type cardPowerDataItemOptions = {\n    card: 'cardPower';\n    data: ChangeTypeOfKeys<PageGridPowerConfig, Types.DataItemsOptions | undefined>;\n};\nexport type cardPowerDataItems = {\n    card: 'cardPower';\n    data: ChangeTypeOfKeys<PageGridPowerConfig, dataItem.Dataitem | undefined>;\n};\n\nexport type cardGridDataItemOptions = {\n    card: 'cardGrid' | 'cardGrid2';\n    data: ChangeTypeOfKeys<PageGridBaseConfig, Types.DataItemsOptions | undefined>;\n};\nexport type cardGridDataItems = {\n    card: 'cardGrid' | 'cardGrid2';\n    data: ChangeTypeOfKeys<PageGridBaseConfig, dataItem.Dataitem | undefined>;\n};\n\nexport type cardEntitiesDataItemOptions = {\n    card: 'cardEntities';\n    data: ChangeTypeOfKeys<PageEntitiesBaseConfig, Types.DataItemsOptions | undefined>;\n};\nexport type cardEntitiesDataItems = {\n    card: 'cardEntities';\n    data: ChangeTypeOfKeys<PageEntitiesBaseConfig, dataItem.Dataitem | undefined>;\n};\n\nexport type cardThermoDataItemOptions = {\n    card: 'cardThermo';\n    data: ChangeTypeOfKeys<PageThermoBaseConfig, Types.DataItemsOptions | undefined>;\n};\nexport type cardThermoDataItems = {\n    card: 'cardThermo';\n    data: ChangeTypeOfKeys<PageThermoBaseConfig, dataItem.Dataitem | undefined>;\n};\n\nexport type cardMediaDataItemOptions = {\n    card: 'cardMedia';\n    data: ChangeTypeOfKeys<PageMediaBaseConfig, Types.DataItemsOptions | undefined> & { logo: toolboxItem | undefined };\n};\n\nexport type cardMediaDataItems = {\n    card: 'cardMedia';\n    data: ChangeTypeOfKeys<PageMediaBaseConfig, dataItem.Dataitem | undefined> & {\n        toolbox: (toolboxItemDataItem | undefined)[];\n    } & { logo: toolboxItemDataItem | undefined };\n};\n\nexport type screensaverDataItemOptions = {\n    card: 'screensaver' | 'screensaver2';\n    mode: Types.ScreensaverModeType;\n    rotationTime: number;\n    model: Types.NSpanelModel;\n    data: undefined;\n};\n\nexport type ChangeDeepPartial<Obj> = Obj extends\n    | object\n    | listItem\n    | PageTypeCards\n    | typePageItem.IconBoolean\n    | typePageItem.TextEntryType\n    | typePageItem.ValueEntryType\n    | typePageItem.IconEntryType\n    | typePageItem.ScaledNumberType\n    | PageGridPowerConfigElement\n    | Color.RGB\n    | typePageItem.ColorEntryType\n    | PageMediaBaseConfig\n    | Types.SerialTypePageElements\n    ? Obj extends Types.DataItemsOptions\n        ? Types.DataItemsOptions | null\n        : {\n              [K in keyof Obj]?: ChangeDeepPartial<Obj[K]> | null;\n          }\n    : Types.DataItemsOptions | null;\n\nexport type ChangeTypeOfKeys<Obj, N> = Obj extends\n    | object\n    | listItem\n    | PageTypeCards\n    | typePageItem.IconBoolean\n    | typePageItem.TextEntryType\n    | typePageItem.ValueEntryType\n    | typePageItem.IconEntryType\n    | typePageItem.ScaledNumberType\n    | PageGridPowerConfigElement\n    | Color.RGB\n    | typePageItem.ColorEntryType\n    | PageMediaBaseConfig\n    | Types.SerialTypePageElements\n    ? Obj extends Color.RGB | Types.IconScaleElement | Types.DataItemsOptions\n        ? N\n        : {\n              [K in keyof Obj]: ChangeTypeOfKeys<Obj[K], N>;\n          }\n    : N;\n\n/*export type DeepPartial<Obj, N> = Obj extends\n    | object\n    | listItem\n    | PageTypeCards\n    | IconBoolean\n    | TextEntryType\n    | ValueEntryType\n    | IconEntryType\n    | ScaledNumberType\n    | PageGridPowerConfigElement\n    | RGB\n    | ColorEntryType\n    | PageMediaBaseConfig\n    | Types.SerialTypePageElements\n    ? Obj extends Dataitem\n        ? Dataitem\n        : {\n              [K in keyof Obj]+?: ChangeTypeOfKeys<Obj[K], N>;\n          }\n    : Dataitem;*/\n\ntype PageMediaBaseConfig = {\n    headline: string;\n    alwaysOnDisplay: boolean;\n    album: string;\n    title: listItem;\n    duration: string;\n    elapsed: string;\n    artist: listItem;\n    shuffle: typePageItem.ScaledNumberType;\n    volume: typePageItem.ScaledNumberType;\n    icon: string;\n    play: string;\n    mediaState: string;\n    stop: string;\n    pause: string;\n    forward: string;\n    backward: string;\n};\n\ntype PageGridBaseConfig = {\n    headline: string;\n};\n\ntype PageEntitiesBaseConfig = {\n    headline: string;\n};\n\ntype PageGridPowerConfig = {\n    headline: string;\n    homeValueTop: typePageItem.ValueEntryType;\n    homeIcon: typePageItem.IconEntryType;\n    homeValueBot: typePageItem.ValueEntryType;\n    leftTop: PageGridPowerConfigElement;\n    leftMiddle: PageGridPowerConfigElement;\n    leftBottom: PageGridPowerConfigElement;\n    rightTop: PageGridPowerConfigElement;\n    rightMiddle: PageGridPowerConfigElement;\n    rightBottom: PageGridPowerConfigElement;\n};\n\nexport type PageGridPowerConfigElement =\n    | {\n          icon?: typePageItem.IconEntryType;\n          value?: typePageItem.ValueEntryType;\n          speed?: typePageItem.ScaledNumberType;\n          text?: typePageItem.TextEntryType;\n      }\n    | undefined;\n\ntype PageThermoBaseConfig = {\n    auto?: boolean;\n    boost?: boolean;\n    error?: boolean;\n    humidity?: number;\n    manual?: boolean;\n    //mode?: string;\n    party?: boolean;\n    unreach?: boolean;\n    windowopen?: boolean;\n    cool?: boolean;\n    heat?: boolean;\n    lowbat?: boolean;\n    maintain?: boolean;\n    power?: boolean;\n    set1: boolean;\n    set2?: boolean;\n    speed?: number;\n    swing?: number;\n    unit: string;\n    headline: string;\n    text1: string;\n    text2: string;\n    text3: string;\n    text4: string;\n    minTemp: number; // *10\n    maxTemp: number; // *10\n    tempStep: number; // *10\n    icon?: string;\n    color?: string;\n};\nexport function isColorEntryType(F: object | typePageItem.ColorEntryType): F is typePageItem.ColorEntryType {\n    if ('true' in F && 'false' in F && 'scale' in F) return true;\n    return false;\n}\nexport type PageMediaBaseConfigWrite = {\n    pplay: writeItem;\n    pause: writeItem;\n    forward: writeItem;\n    backward: writeItem;\n    stop: writeItem;\n    off: writeItem;\n    shuffle: writeItem;\n    tracklist: writeItem;\n    playlist: writeItem;\n    equalizerList: writeItem;\n    repeat: writeItem;\n    toolstring: writeItem;\n};\nexport type PageMediaMessage = {\n    event: 'entityUpd';\n    headline: string;\n    navigation: string;\n    id: string;\n    name: string;\n    titelColor: string;\n    artist: string;\n    artistColor: string;\n    volume: string;\n    iconplaypause: AllIcons;\n    onoffbuttonColor: string;\n    shuffle_icon: AllIcons;\n    logo: string;\n    options: [string?, string?, string?, string?, string?];\n};\n\nexport type PagePowerMessage = {\n    event: 'entityUpd';\n    headline: string;\n    navigation: string;\n    homeValueTop: string;\n    homeIcon: string;\n    homeColor: string;\n    homeName: string;\n    homeValueBot: string;\n    leftTop: PagePowerMessageItem;\n    leftMiddle: PagePowerMessageItem;\n    leftBottom: PagePowerMessageItem;\n    rightTop: PagePowerMessageItem;\n    rightMiddle: PagePowerMessageItem;\n    rightBottom: PagePowerMessageItem;\n};\n\nexport type PageAlarmMessage = {\n    event: 'entityUpd';\n    intNameEntity: string;\n    headline: string;\n    navigation: string;\n    button1: string;\n    button2: string;\n    button3: string;\n    button4: string;\n    icon: string;\n    iconColor: string;\n    numpad: 'enable' | 'disable';\n    flashing: 'enable' | 'disable';\n};\n\nexport type PagePowerMessageItem = {\n    icon: string;\n    iconColor: string;\n    name: string;\n    value: string;\n    speed: number;\n};\n\nexport type PageGridMessage = {\n    event: 'entityUpd';\n    headline: string;\n    navigation: string;\n    options: [string?, string?, string?, string?, string?, string?, string?, string?];\n};\n\nexport type PageNotifyMessage = {\n    event: 'entityUpd';\n    headline: string;\n    hColor: string;\n    blText: string;\n    blColor: string;\n    brText: string;\n    brColor: string;\n    text: string;\n    textColor: string;\n    timeout: number;\n    fontSet: string;\n    icon: string;\n    iconColor: string;\n    placeholder: string;\n};\n/*+ getState(popupNotifyInternalName).val + '~'\n                + heading + '~'\n                + v_popupNotifyHeadingColor + '~'\n                + getState(popupNotifyButton1Text).val + '~'\n                + v_popupNotifyButton1TextColor + '~'\n                + getState(popupNotifyButton2Text).val + '~'\n                + v_popupNotifyButton2TextColor + '~'\n                + text + '~'\n                + v_popupNotifyTextColor + '~'\n                + getState(popupNotifySleepTimeout).val;*/\nexport type screensaverMessage = {\n    options: Record<Types.ScreenSaverPlaces, string[]>;\n};\n\nexport type PageEntitiesMessage = {\n    event: 'entityUpd';\n    headline: string;\n    navigation: string;\n    options: [string?, string?, string?, string?, string?, string?, string?, string?];\n};\n\nexport type PageThermoMessage = {\n    event: 'entityUpd';\n    headline: string;\n    intNameEntity: string;\n    navigation: string;\n    currentTemp: number | string;\n    dstTemp: number | string; // *10\n    status: string;\n    minTemp: number | string; // *10\n    maxTemp: number | string; // *10\n    tempStep: string; // *10\n    options: [string, string, string, string, string, string, string, string];\n    tCurTempLbl: string;\n    tStateLbl: string;\n    tALbl: ''; // ignored\n    tCF: string;\n    temp2: number | string; // *10\n    btDetail: '0' | '1'; // 1 ist aus\n};\n\ntype writeItem = { dp: string } | undefined;\nexport type listItem =\n    | {\n          on: string;\n          text: string;\n          color: typePageItem.ColorEntryType | string | undefined;\n          icon?: typePageItem.IconBoolean | string | undefined;\n          list?: string | undefined;\n      }\n    | undefined; // mean string start with getState(' and end with ').val\nexport type toolboxItem = ChangeTypeOfKeys<listItem, Types.DataItemsOptions | undefined> & {\n    action: typePageItem.MediaToolBoxAction;\n};\nexport type toolboxItemDataItem = ChangeTypeOfKeys<listItem, dataItem.Dataitem | undefined> & {\n    action: typePageItem.MediaToolBoxAction;\n};\n\nexport type placeholderType = Record<\n    string,\n    {\n        text?: string;\n        dp?: string;\n    }\n>;\n\nexport function isPlaceholderType(F: any): F is placeholderType {\n    if (!F || typeof F !== 'object') return false;\n    for (const a in F) {\n        let count = 0;\n        if (!F[a]) return false;\n        for (const b in F[a]) {\n            if (['text', 'dp'].indexOf(b) !== -1 && F[a][b] !== undefined) count++;\n        }\n        if (count !== 1) return false;\n    }\n    return true;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4HO,SAAS,YAAY,GAAuC;AAC/D,UAAQ,GAAgB;AAAA,IACpB,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,aAAO;AAAA,IACX;AACI,aAAO;AAAA,EACf;AACJ;AACO,SAAS,mBAAmB,GAAiE;AAChG,UAAQ,GAAG;AAAA,IACP,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,aAAO;AAAA,IACX;AACI,cAAQ,KAAK,IAAI,6BAA6B;AAC9C,aAAO;AAAA,EACf;AACJ;AA8VO,SAAS,iBAAiB,GAA2E;AACxG,MAAI,UAAU,KAAK,WAAW,KAAK,WAAW;AAAG,WAAO;AACxD,SAAO;AACX;AAiKO,SAAS,kBAAkB,GAA8B;AAC5D,MAAI,CAAC,KAAK,OAAO,MAAM;AAAU,WAAO;AACxC,aAAW,KAAK,GAAG;AACf,QAAI,QAAQ;AACZ,QAAI,CAAC,EAAE;AAAI,aAAO;AAClB,eAAW,KAAK,EAAE,IAAI;AAClB,UAAI,CAAC,QAAQ,IAAI,EAAE,QAAQ,CAAC,MAAM,MAAM,EAAE,GAAG,OAAO;AAAW;AAAA,IACnE;AACA,QAAI,UAAU;AAAG,aAAO;AAAA,EAC5B;AACA,SAAO;AACX;",
  "names": []
}
