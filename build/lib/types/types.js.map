{
  "version": 3,
  "sources": ["../../../src/lib/types/types.ts"],
  "sourcesContent": ["import * as dataItem from '../classes/data-item';\nimport { RGB } from '../const/Color';\nimport * as typePageItem from './type-pageItem';\nimport * as pages from './pages';\n\n/**\n * Bitte an folgendes Schema halten\n * card.adapter?.aufgabe?.ger\u00E4t?\n */\n\nexport type TemplateItems = Partial<Record<TemplateIdent, typePageItem.PageItemOptionsTemplate>>;\n\nexport type PageTemplateIdent =\n    | 'entities.waste-calendar'\n    | 'media.spotify-premium'\n    | 'entities.fahrplan.departure-timetable'\n    | 'entities.fahrplan.routes'\n    | 'thermo.hmip.valve'\n    | 'thermo.hmip.wallthermostat';\n\nexport type TemplateIdent =\n    | 'generic.shutter'\n    | 'shutter.shelly.2PM'\n    | 'light.shelly.rgbw2'\n    | 'text.window.isClose'\n    | 'text.window.isOpen'\n    | 'text.battery'\n    | 'text.temperature'\n    | 'text.battery.low'\n    | 'button.iconRightSize'\n    | 'button.iconLeftSize'\n    | 'shutter.deconz.ikea.fyrtur'\n    | 'shutter.basic'\n    | 'shutter.basic.onlyV'\n    | 'text.battery.bydhvs'\n    | 'text.accuweather.bot2values'\n    | 'text.accuweather.sunriseset'\n    | 'button.esphome.powerplug'\n    | 'button.service.adapter.stopped'\n    | 'button.service.adapter.noconnection'\n    | 'text.fahrplan.departure'\n    | ''\n    | ''\n    | ''\n    | ''\n    | ''\n    | ''\n    | ''\n    | ''\n    | ''\n    | ''\n    | ''\n    | ''\n    | ''\n    | ''\n    | ''\n    | ''\n    | '';\n\nexport function isEventMethod(F: string | EventMethod): F is EventMethod {\n    switch (F as EventMethod) {\n        case 'startup':\n        case 'sleepReached':\n        case 'pageOpenDetail':\n        case 'buttonPress2':\n        case 'renderCurrentPage':\n        case 'button1':\n        case 'button2':\n            return true;\n        default:\n            // Have to talk about this.\n            throw new Error(`Please report to developer: Unknown EventMethod: ${F} `);\n            return false;\n    }\n}\n\nexport type InternalStatesObject = {\n    val: ioBroker.StateValue;\n    ack: boolean;\n    common: ioBroker.StateCommon;\n    noTrigger?: boolean;\n};\nexport type PanelInternalCommand =\n    | 'cmd/power2'\n    | 'cmd/power1'\n    | 'cmd/bigIconRight'\n    | 'cmd/detachLeft'\n    | 'cmd/detachRight'\n    | 'cmd/bigIconLeft'\n    | 'cmd/dimActive'\n    | 'cmd/dimStandby'\n    | 'cmd/screensaverTimeout'\n    | 'cmd/NotificationCleared2'\n    | 'cmd/NotificationNext2'\n    | 'cmd/popupNotification2'\n    | 'cmd/NotificationCleared'\n    | 'cmd/NotificationNext'\n    | 'info/NotificationCounter'\n    | 'cmd/popupNotification'\n    | 'info/modelVersion'\n    | 'info/displayVersion'\n    | 'info/tasmotaVersion'\n    | 'info/Tasmota'\n    | 'cmd/TasmotaRestart';\n\nexport function isPopupType(F: PopupType | any): F is PopupType {\n    switch (F as PopupType) {\n        case 'popupFan':\n        case 'popupInSel':\n        case 'popupLight':\n        case 'popupLightNew':\n        case 'popupNotify':\n        case 'popupShutter':\n        case 'popupThermo':\n        case 'popupTimer':\n            return true;\n        default:\n            console.info(`Unknown PopupType: ${F} `);\n            return false;\n    }\n}\n\nexport type nsPanelState = ioBroker.State | (Omit<ioBroker.State, 'val'> & { val: nsPanelStateVal });\nexport type nsPanelStateVal = ioBroker.State['val'] | Record<string | number, any>;\nexport type EventMethod =\n    | 'startup'\n    | 'sleepReached'\n    | 'pageOpenDetail'\n    | 'buttonPress2'\n    | 'renderCurrentPage'\n    | 'button1'\n    | 'button2';\n\nexport type panelRecvType = {\n    event: 'event';\n    method: EventMethod;\n};\n\nexport const SerialTypeArray = [\n    'light', //popup\n    'shutter', //popup\n    'delete',\n    'text',\n    'button',\n    'switch', // nur f\u00FCr cardQR\n    'number',\n    'input_sel', //popup\n    'timer', //popup\n    'fan', //popup\n];\n\nexport type PopupType =\n    | 'popupFan'\n    | 'popupInSel'\n    | 'popupLight'\n    | 'popupLightNew'\n    | 'popupNotify'\n    | 'popupShutter'\n    | 'popupThermo'\n    | 'popupTimer';\n\nexport type SerialTypePageElements =\n    | 'button' //~button~button.entityName~3~17299~bt-name~bt-text\n    | 'light' // ~light~light.entityName~1~17299~Light1~0\n    | 'shutter' // ~shutter~cover.entityName~0~17299~Shutter2~iconUp|iconStop|iconDown\n    | 'text' // ~text~sensor.entityName~3~17299~Temperature~content\n    | 'input_sel' //~input_sel~input_select.entityName~3~17299~sel-name~sel-text\n    | 'number' //~number~input_number.entityName~4~17299~Number123~value|min|max\n    | 'switch' // ~switch~switch.entityName~4~17299~Switch1~0\n    | 'delete'; //~delete~~~~~\n\nexport type SerialTypePopup =\n    | 'button'\n    | 'light'\n    | 'shutter'\n    | 'text'\n    | 'input_sel'\n    | 'timer'\n    | 'number'\n    | 'fan'\n    | 'switch'\n    | 'delete';\n\nexport type ButtonActionType =\n    | 'bExit'\n    | 'bUp'\n    | 'bNext'\n    | 'bSubNext'\n    | 'bPrev'\n    | 'bSubPrev'\n    | 'bHome'\n    | 'notifyAction'\n    | 'OnOff'\n    | 'button'\n    | 'up'\n    | 'stop'\n    | 'down'\n    | 'positionSlider'\n    | 'tiltOpen'\n    | 'tiltStop'\n    | 'tiltSlider'\n    | 'tiltClose'\n    | 'brightnessSlider'\n    | 'colorTempSlider'\n    | 'colorWheel'\n    | 'tempUpd'\n    | 'tempUpdHighLow'\n    | 'media-back'\n    | 'media-pause'\n    | 'media-next'\n    | 'media-shuffle'\n    | 'volumeSlider'\n    | 'mode-speakerlist'\n    | 'mode-playlist'\n    | 'mode-tracklist'\n    | 'mode-repeat'\n    | 'mode-equalizer'\n    | 'mode-seek'\n    | 'mode-crossfade'\n    | 'mode-favorites'\n    | 'mode-insel'\n    | 'media-OnOff'\n    | 'timer-start'\n    | 'timer-pause'\n    | 'timer-cancle'\n    | 'timer-finish'\n    | 'hvac_action'\n    | 'mode-modus1'\n    | 'mode-modus2'\n    | 'mode-modus3'\n    | 'number-set'\n    | 'mode-preset_modes'\n    | 'A1'\n    | 'A2'\n    | 'A3'\n    | 'A4'\n    | 'D1'\n    | 'U1';\n\nexport type Payload = {\n    payload: string;\n};\nexport type BooleanUnion = 'true' | 'false';\n\nexport type DimMode = {\n    dimmodeOn: boolean | undefined;\n    brightnessDay: number | undefined;\n    brightnessNight: number | undefined;\n    timeDay: string | undefined;\n    timeNight: string | undefined;\n};\n\nexport type ValueDateFormat = { local: string; format: any };\n\nexport function isValueDateFormat(F: any | ValueDateFormat): F is ValueDateFormat {\n    return F && typeof F === 'object' && F.local !== undefined && F.format !== undefined;\n}\n\nexport type ScreenSaverPlaces = 'left' | 'bottom' | 'indicator' | 'alternate' | 'favorit' | 'mricon' | 'time' | 'date';\nexport type NSpanelModel = 'eu';\nexport type Config = {\n    leftEntity: boolean;\n    indicatorEntity: any;\n    mrIcon1Entity: any;\n    mrIcon2Entity: any;\n    panelRecvTopic: string;\n    panelSendTopic: string;\n    weatherEntity: string;\n    screensaver: {\n        favoritEntity: [ScreenSaverElement];\n        leftEntity: ScreenSaverElement[];\n        bottomEntity: ScreenSaverElement[];\n        alternateEntity: [ScreenSaverElement?];\n        indicatorEntity: ScreenSaverElement[];\n        mrIconEntity: [ScreenSaverElement, ScreenSaverElement];\n    };\n    defaultColor: RGB;\n    defaultOnColor: RGB;\n    defaultOffColor: RGB;\n    defaultBackgroundColor: RGB;\n};\nexport type leftScreensaverEntityType =\n    | [ScreenSaverElementWithUndefined, ScreenSaverElementWithUndefined, ScreenSaverElementWithUndefined]\n    | [];\nexport type indicatorScreensaverEntityType =\n    | [\n          ScreenSaverElementWithUndefined?,\n          ScreenSaverElementWithUndefined?,\n          ScreenSaverElementWithUndefined?,\n          ScreenSaverElementWithUndefined?,\n          ScreenSaverElementWithUndefined?,\n      ]\n    | [];\nexport type ScreenSaverElementWithUndefined = null | undefined | ScreenSaverElement;\n\nexport type ScreenSaverDataItems = {\n    entityValue: pages.ChangeTypeOfKeys<typePageItem.ValueEntryType, dataItem.Dataitem | undefined>;\n    entityDateFormat: dataItem.Dataitem | undefined;\n    entityIcon: pages.ChangeTypeOfKeys<typePageItem.IconEntryType, dataItem.Dataitem | undefined>;\n    entityText: pages.ChangeTypeOfKeys<typePageItem.TextEntryType, dataItem.Dataitem | undefined>;\n    entityIconSelect: dataItem.Dataitem | undefined;\n};\nexport type ScreenSaverElement = {\n    entityValue: pages.ChangeTypeOfKeys<typePageItem.ValueEntryType, DataItemsOptions | undefined>;\n    entityDateFormat: ScreenSaverElementConfig;\n    entityIcon: pages.ChangeTypeOfKeys<typePageItem.IconEntryType, DataItemsOptions | undefined>;\n    entityText: pages.ChangeTypeOfKeys<typePageItem.TextEntryType, DataItemsOptions | undefined>;\n    entityIconSelect: ScreenSaverElementConfig;\n};\n\ntype ScreenSaverElementConfig = DataItemsOptions | undefined;\n\nexport type IconScaleElement = {\n    val_min: number;\n    val_max: number;\n    val_best?: number;\n    log10?: 'max' | 'min';\n};\n\nexport function isIconScaleElement(F: any | IconScaleElement): F is IconScaleElement {\n    return F && 'val_min' in (F as IconScaleElement) && 'val_max' in (F as IconScaleElement);\n}\nexport function isPartialIconScaleElement(F: any | IconScaleElement): F is IconScaleElement {\n    return F && ('val_min' in (F as IconScaleElement) || 'val_max' in (F as IconScaleElement));\n}\n\nexport type DataItemstype = DataItemsOptions['type'];\nexport type DataItemsMode = 'custom' | 'auto';\nexport type DataItemsOptionsIcon =\n    | Exclude<DataItemsOptions, DataItemsOptionsConst>\n    | (DataItemsOptionsConst & {\n          constVal: AllIcons;\n      });\nexport type DataItemsOptions = {\n    name?: string;\n    scale?: { min: number; max: number };\n} & (\n    | DataItemsOptionsConst\n    | DataItemsOptionsState\n    | DataItemsOptionsTriggered\n    | DataItemsOptionsInternal\n    | DataItemsOptionsInternalState\n);\n\ntype DataItemsOptionsAuto = {\n    mode: 'auto' | 'done'; // not set means custom\n    role: pages.StateRole | pages.StateRole[];\n    regexp?: RegExp;\n};\ntype DataItemsOptionsCustom = {\n    mode?: 'custom'; // not set means custom\n    role?: string;\n};\n\ntype DataItemsOptionsConst = {\n    type: 'const';\n    role?: pages.StateRole;\n    constVal: StateValue | AllIcons | RGB | pages.placeholderType | IconScaleElement;\n    state?: State | null; // use just inside of class\n    forceType?: 'string' | 'number' | 'boolean'; // force a type\n};\ntype DataItemsOptionsInternal = {\n    type: 'internal';\n    role?: string;\n    dp: string;\n    read?: string | ((val: any) => any);\n    write?: string | ((val: any) => any);\n};\n\ntype DataItemsOptionsInternalState = {\n    type: 'internalState';\n    role?: string;\n    dp: string;\n    read?: string | ((val: any) => any);\n    write?: string | ((val: any) => any);\n};\ntype DataItemsOptionsState = (DataItemsOptionsAuto | DataItemsOptionsCustom) & {\n    type: 'state';\n    dp: string;\n    state?: State | null; // use just inside of class\n    substring?: [number, number | undefined]; // only used with getString()\n    forceType?: 'string' | 'number' | 'boolean'; // force a type\n    read?: string | ((val: any) => any);\n    write?: string | ((val: any) => any);\n    response?: 'now' | 'medium';\n};\ntype DataItemsOptionsTriggered = (DataItemsOptionsAuto | DataItemsOptionsCustom) & {\n    type: 'triggered';\n    dp: string;\n    state?: State | null; // use just inside of class\n    substring?: [number, number | undefined]; // only used with getString()\n    forceType?: 'string' | 'number' | 'boolean'; // force a type\n    read?: string | ((val: any) => any);\n    write?: string | ((val: any) => any);\n    change?: 'ts';\n};\n\n//type internalDatapoints = 'Relais1' | 'Relais2';\nexport type IncomingEvent = {\n    type: EventType;\n    method: EventMethod;\n    action: ButtonActionType | '' | string;\n    target?: number;\n    page?: number;\n    cmd?: number;\n    popup?: string;\n    id: string; //| PopupType;\n    opt: string;\n};\n\nexport type Event = {\n    type: EventType;\n    method: EventMethod;\n    page: any | null;\n    data: string[];\n    opt: string[];\n};\nexport type EventType = 'event';\nexport function isEventType(F: string | EventType): F is EventType {\n    return ['event'].indexOf(F) != -1;\n}\nexport type ScreensaverModeType = 'standard' | 'alternate' | 'advanced';\n\nexport interface State extends Omit<ioBroker.State, 'val'> {\n    val: StateValue;\n}\nexport type StateValue = ioBroker.StateValue | object;\n\nexport type TasmotaIncomingTopics = 'stat/POWER2' | 'stat/POWER1' | 'stat/STATUS0';\n\n/**\n * Json to Status0 from Tasmota\n */\nexport type STATUS0 = {\n    Status: {\n        Module: number;\n        DeviceName: string;\n        FriendlyName: Array<string>;\n        Topic: string;\n        ButtonTopic: string;\n        Power: number;\n        PowerOnState: number;\n        LedState: number;\n        LedMask: string;\n        SaveData: number;\n        SaveState: number;\n        SwitchTopic: string;\n        SwitchMode: Array<number>;\n        ButtonRetain: number;\n        SwitchRetain: number;\n        SensorRetain: number;\n        PowerRetain: number;\n        InfoRetain: number;\n        StateRetain: number;\n        StatusRetain: number;\n    };\n    StatusPRM: {\n        Baudrate: number;\n        SerialConfig: string;\n        GroupTopic: string;\n        OtaUrl: string;\n        RestartReason: string;\n        Uptime: string;\n        StartupUTC: string;\n        Sleep: number;\n        CfgHolder: number;\n        BootCount: number;\n        BCResetTime: string;\n        SaveCount: number;\n    };\n    StatusFWR: {\n        Version: string;\n        BuildDateTime: string;\n        Core: string;\n        SDK: string;\n        CpuFrequency: number;\n        Hardware: string;\n        CR: string;\n    };\n    StatusLOG: {\n        SerialLog: number;\n        WebLog: number;\n        MqttLog: number;\n        SysLog: number;\n        LogHost: string;\n        LogPort: number;\n        SSId: Array<string>;\n        TelePeriod: number;\n        Resolution: string;\n        SetOption: Array<string>;\n    };\n    StatusMEM: {\n        ProgramSize: number;\n        Free: number;\n        Heap: number;\n        StackLowMark: number;\n        PsrMax: number;\n        PsrFree: number;\n        ProgramFlashSize: number;\n        FlashSize: number;\n        FlashChipId: string;\n        FlashFrequency: number;\n        FlashMode: string;\n        Features: Array<string>;\n        Drivers: string;\n        Sensors: string;\n        I2CDriver: string;\n    };\n    StatusNET: {\n        Hostname: string;\n        IPAddress: string;\n        Gateway: string;\n        Subnetmask: string;\n        DNSServer1: string;\n        DNSServer2: string;\n        Mac: string;\n        IP6Global: string;\n        IP6Local: string;\n        Ethernet: {\n            Hostname: string;\n            IPAddress: string;\n            Gateway: string;\n            Subnetmask: string;\n            DNSServer1: string;\n            DNSServer2: string;\n            Mac: string;\n            IP6Global: string;\n            IP6Local: string;\n        };\n        Webserver: number;\n        HTTP_API: number;\n        WifiConfig: number;\n        WifiPower: number;\n    };\n    StatusMQT: {\n        MqttHost: string;\n        MqttPort: number;\n        MqttClientMask: string;\n        MqttClient: string;\n        MqttUser: string;\n        MqttCount: number;\n        MAX_PACKET_SIZE: number;\n        KEEPALIVE: number;\n        SOCKET_TIMEOUT: number;\n    };\n    StatusTIM: {\n        UTC: string;\n        Local: string;\n        StartDST: string;\n        EndDST: string;\n        Timezone: string;\n        Sunrise: string;\n        Sunset: string;\n    };\n    StatusSNS: {\n        Time: string;\n        ANALOG: {\n            Temperature1: number;\n        };\n        TempUnit: string;\n    };\n    StatusSTS: {\n        Time: string;\n        Uptime: string;\n        UptimeSec: number;\n        Heap: number;\n        SleepMode: string;\n        Sleep: number;\n        LoadAvg: number;\n        MqttCount: number;\n        Berry: {\n            HeapUsed: number;\n            Objects: number;\n        };\n        POWER1: string;\n        POWER2: string;\n        Wifi: {\n            AP: number;\n            SSId: string;\n            BSSId: string;\n            Channel: number;\n            Mode: string;\n            RSSI: number;\n            Signal: number;\n            LinkCount: number;\n            Downtime: string;\n        };\n    };\n};\n\nexport type PanelInfo = {\n    nspanel: {\n        displayVersion: number;\n        model: string;\n        bigIconLeft: boolean;\n        bigIconRight: boolean;\n        isOnline: boolean;\n        currentPage: string;\n    };\n    tasmota: {\n        firmwareversion: string;\n        onlineVersion: string;\n        net: STATUS0['StatusNET'];\n        uptime: string;\n        sts: STATUS0['StatusSTS'];\n    };\n};\n\nexport type TasmotaOnlineResponse = {\n    url: string;\n    assets_url: string;\n    upload_url: string;\n    html_url: string;\n    id: number;\n    author: {\n        login: string;\n        id: number;\n        node_id: string;\n        avatar_url: string;\n        gravatar_id: string;\n        url: string;\n        html_url: string;\n        followers_url: string;\n        following_url: string;\n        gists_url: string;\n        starred_url: string;\n        subscriptions_url: string;\n        organizations_url: string;\n        repos_url: string;\n        events_url: string;\n        received_events_url: string;\n        type: string;\n        site_admin: boolean;\n    };\n    node_id: string;\n    tag_name: string;\n    target_commitish: string;\n    name: string;\n    draft: boolean;\n    prerelease: boolean;\n    created_at: string;\n    published_at: string;\n    assets: Array<{\n        url: string;\n        id: number;\n        node_id: string;\n        name: string;\n        label: string;\n        uploader: {\n            login: string;\n            id: number;\n            node_id: string;\n            avatar_url: string;\n            gravatar_id: string;\n            url: string;\n            html_url: string;\n            followers_url: string;\n            following_url: string;\n            gists_url: string;\n            starred_url: string;\n            subscriptions_url: string;\n            organizations_url: string;\n            repos_url: string;\n            events_url: string;\n            received_events_url: string;\n            type: string;\n            site_admin: boolean;\n        };\n        content_type: string;\n        state: string;\n        size: number;\n        download_count: number;\n        created_at: string;\n        updated_at: string;\n        browser_download_url: string;\n    }>;\n    tarball_url: string;\n    zipball_url: string;\n    body: string;\n    reactions: {\n        url: string;\n        total_count: number;\n        '+1': number;\n        '-1': number;\n        laugh: number;\n        hooray: number;\n        confused: number;\n        heart: number;\n        rocket: number;\n        eyes: number;\n    };\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2DO,SAAS,cAAc,GAA2C;AACrE,UAAQ,GAAkB;AAAA,IACtB,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,aAAO;AAAA,IACX;AAEI,YAAM,IAAI,MAAM,oDAAoD,CAAC,GAAG;AACxE,aAAO;AAAA,EACf;AACJ;AA+BO,SAAS,YAAY,GAAoC;AAC5D,UAAQ,GAAgB;AAAA,IACpB,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,aAAO;AAAA,IACX;AACI,cAAQ,KAAK,sBAAsB,CAAC,GAAG;AACvC,aAAO;AAAA,EACf;AACJ;AAkBO,MAAM,kBAAkB;AAAA,EAC3B;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AACJ;AAyGO,SAAS,kBAAkB,GAAgD;AAC9E,SAAO,KAAK,OAAO,MAAM,YAAY,EAAE,UAAU,UAAa,EAAE,WAAW;AAC/E;AA+DO,SAAS,mBAAmB,GAAkD;AACjF,SAAO,KAAK,aAAc,KAA0B,aAAc;AACtE;AACO,SAAS,0BAA0B,GAAkD;AACxF,SAAO,MAAM,aAAc,KAA0B,aAAc;AACvE;AA8FO,SAAS,YAAY,GAAuC;AAC/D,SAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,KAAK;AACnC;",
  "names": []
}
