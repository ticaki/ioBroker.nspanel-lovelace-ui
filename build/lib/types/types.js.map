{
  "version": 3,
  "sources": ["../../../src/lib/types/types.ts"],
  "sourcesContent": ["import { Dataitem } from '../classes/data-item';\nimport { RGB } from './Color';\nimport { IconEntryType, TextEntryType, ValueEntryType } from './pageItem';\nimport { ChangeTypeOfKeys, PageRole } from './pages';\n\n/**\n * Join arguments with ~ and return the string;\n * @param tokens unlimited numbers of strings\n * @returns\n */\nexport function buildNSPanelString(...tokens: (string | number)[]): string {\n    return tokens.join('~');\n}\n\nconst ArrayPlayerTypeWithMediaDevice = ['alexa2', 'sonos', 'squeezeboxrpc'] as const;\nconst ArrayPlayerTypeWithOutMediaDevice = ['spotify-premium', 'volumio', 'bosesoundtouch'] as const;\n\nexport function isPlayerWithMediaDevice(F: string | _PlayerTypeWithMediaDevice): F is _PlayerTypeWithMediaDevice {\n    return ArrayPlayerTypeWithMediaDevice.indexOf(F as _PlayerTypeWithMediaDevice) != -1;\n}\n/** check if adapterPlayerInstanceType has all Playertypes */\nexport function checkSortedPlayerType(F: notSortedPlayerType): adapterPlayerInstanceType {\n    return F;\n}\n\nexport function isEventMethod(F: string | EventMethod): F is EventMethod {\n    switch (F as EventMethod) {\n        case 'startup':\n        case 'sleepReached':\n        case 'pageOpenDetail':\n        case 'buttonPress2':\n        case 'renderCurrentPage':\n        case 'button1':\n        case 'button2':\n            return true;\n        default:\n            // Have to talk about this.\n            throw new Error(`Please report to developer: Unknown EventMethod: ${F} `);\n            return false;\n    }\n}\n\nexport function isPopupType(F: PopupType | string): F is PopupType {\n    switch (F as PopupType) {\n        case 'popupFan':\n        case 'popupInSel':\n        case 'popupLight':\n        case 'popupLightNew':\n        case 'popupNotify':\n        case 'popupShutter':\n        case 'popupThermo':\n        case 'popupTimer':\n            return true;\n        default:\n            console.info(`Unknown PopupType: ${F} `);\n            return false;\n    }\n}\n// If u get a error here u forgot something in PageTypeCards or PageType\n/*export function checkPageType(F: PageTypeCards, A: PageType): void {\n    A.type = F;\n}*/\n\n/*export function isPageThermoItem(F: PageItem | PageThermoItem): F is PageThermoItem {\n    return 'popupThermoMode1' in F;\n}\n\nexport function isPageMedia(F: PageType | PageMedia): F is PageMedia {\n    return F.type == 'cardMedia';\n}\nexport function isPagePower(F: PageType | PagePower): F is PagePower {\n    return F.type == 'cardPower';\n}\n*/\nexport type PopupType =\n    | 'popupFan'\n    | 'popupInSel'\n    | 'popupLight'\n    | 'popupLightNew'\n    | 'popupNotify'\n    | 'popupShutter'\n    | 'popupThermo'\n    | 'popupTimer';\n\nexport type EventMethod =\n    | 'startup'\n    | 'sleepReached'\n    | 'pageOpenDetail'\n    | 'buttonPress2'\n    | 'renderCurrentPage'\n    | 'button1'\n    | 'button2';\nexport type panelRecvType = {\n    event: 'event';\n    method: EventMethod;\n};\n\nexport const SerialTypeArray = [\n    'light',\n    'shutter',\n    'delete',\n    'text',\n    'button',\n    'switch',\n    'number',\n    'input_sel',\n    'timer',\n    'fan',\n];\n\nexport type SerialType =\n    | 'button'\n    | 'light'\n    | 'shutter'\n    | 'text'\n    | 'input_sel'\n    | 'timer'\n    | 'number'\n    | 'fan'\n    | 'switch'\n    | 'delete';\n\nexport type roles =\n    | 'light'\n    | 'socket'\n    | 'dimmer'\n    | 'hue'\n    | 'rgb'\n    | 'rgbSingle'\n    | 'cd'\n    | 'blind'\n    | 'door'\n    | 'window'\n    | 'volumeGroup'\n    | 'volume'\n    | 'info'\n    | 'humidity'\n    | 'temperature'\n    | 'value.temperature'\n    | 'value.humidity'\n    | 'sensor.door'\n    | 'sensor.window'\n    | 'thermostat'\n    | 'warning'\n    | 'ct'\n    | 'cie'\n    | 'gate'\n    | 'motion'\n    | 'buttonSensor'\n    | 'button'\n    | 'value.time'\n    | 'level.timer'\n    | 'value.alarmtime'\n    | 'level.mode.fan'\n    | 'lock'\n    | 'slider'\n    | 'switch.mode.wlan'\n    | 'media'\n    | 'timeTable'\n    | 'airCondition';\n\nexport type ButtonActionType =\n    | 'bExit'\n    | 'bUp'\n    | 'bNext'\n    | 'bSubNext'\n    | 'bPrev'\n    | 'bSubPrev'\n    | 'bHome'\n    | 'notifyAction'\n    | 'OnOff'\n    | 'button'\n    | 'up'\n    | 'stop'\n    | 'down'\n    | 'positionSlider'\n    | 'tiltOpen'\n    | 'tiltStop'\n    | 'tiltSlider'\n    | 'tiltClose'\n    | 'brightnessSlider'\n    | 'colorTempSlider'\n    | 'colorWheel'\n    | 'tempUpd'\n    | 'tempUpdHighLow'\n    | 'media-back'\n    | 'media-pause'\n    | 'media-next'\n    | 'media-shuffle'\n    | 'volumeSlider'\n    | 'mode-speakerlist'\n    | 'mode-playlist'\n    | 'mode-tracklist'\n    | 'mode-repeat'\n    | 'mode-equalizer'\n    | 'mode-seek'\n    | 'mode-crossfade'\n    | 'mode-favorites'\n    | 'mode-insel'\n    | 'media-OnOff'\n    | 'timer-start'\n    | 'timer-pause'\n    | 'timer-cancle'\n    | 'timer-finish'\n    | 'hvac_action'\n    | 'mode-modus1'\n    | 'mode-modus2'\n    | 'mode-modus3'\n    | 'number-set'\n    | 'mode-preset_modes'\n    | 'A1'\n    | 'A2'\n    | 'A3'\n    | 'A4'\n    | 'D1'\n    | 'U1';\n\nexport type Payload = {\n    payload: string;\n};\nexport type BooleanUnion = 'true' | 'false';\n\n/*export type PageBaseType = {\n    type: PageTypeCards;\n    heading: string;\n    items: PageItem[];\n    useColor: boolean;\n    subPage?: boolean;\n    parent?: PageType;\n    parentIcon?: string;\n    parentIconColor?: RGB;\n    prev?: string;\n    prevIcon?: string;\n    prevIconColor?: RGB;\n    next?: string;\n    nextIcon?: string;\n    nextIconColor?: RGB;\n    home?: string;\n    homeIcon?: string;\n    homeIconColor?: RGB;\n};\nexport type PageEntities = {\n    type: 'cardEntities';\n    items: [PageItem?, PageItem?, PageItem?, PageItem?, PageItem?];\n} & PageBaseType;\n\nexport type PageGrid = {\n    type: 'cardGrid';\n    items: [PageItem?, PageItem?, PageItem?, PageItem?, PageItem?, PageItem?];\n} & PageBaseType;\n\nexport type PageGrid2 = {\n    type: 'cardGrid2';\n    items: [PageItem?, PageItem?, PageItem?, PageItem?, PageItem?, PageItem?, PageItem?, PageItem?];\n} & PageBaseType;\n\nexport type PageThermo = {\n    type: 'cardThermo';\n    items: [PageThermoItem];\n} & Omit<PageBaseType, 'useColor'>;\n\nexport type PageMedia = {\n    type: 'cardMedia';\n    items: [PageMediaItem];\n} & Omit<PageBaseType, 'useColor' | 'autoCreateAlias'>;\n\nexport type PageAlarm = {\n    type: 'cardAlarm';\n    items: [PageItem];\n} & Omit<PageBaseType, 'useColor'>;\n\nexport type PageUnlock = {\n    type: 'cardUnlock';\n    items: [PageItem];\n} & Omit<PageBaseType, 'useColor'> &\n    Partial<Pick<PageBaseType, 'useColor'>>;\n\nexport type PageQR = {\n    type: 'cardQR';\n    items: [PageItem];\n} & Omit<PageBaseType, 'useColor'>;\n\nexport type PagePower = {\n    type: 'cardPower';\n    items: [PageItem];\n} & Omit<PageBaseType, 'useColor'>;\n\nexport type PageChart = {\n    type: 'cardChart' | 'cardLChart';\n    items: PageItem[];\n} & Omit<PageBaseType, 'useColor'>;\n\nexport type PageItem = PageBaseItem | PageMediaItem | PageThermoItem;\n*/\nexport type DimMode = {\n    dimmodeOn: boolean | undefined;\n    brightnessDay: number | undefined;\n    brightnessNight: number | undefined;\n    timeDay: string | undefined;\n    timeNight: string | undefined;\n};\n\n/*export type ConfigButtonFunction = {\n    mode: 'page' | 'toggle' | 'set' | null;\n    page:\n        | PageThermo\n        | PageMedia\n        | PageAlarm\n        | PageQR\n        | PageEntities\n        | PageGrid\n        | PageGrid2\n        | PagePower\n        | PageChart\n        | PageUnlock\n        | null;\n    entity: string | null;\n    setValue: string | number | boolean | null;\n};*/\n\nexport type Config = {\n    leftEntity: boolean;\n    indicatorEntity: any;\n    mrIcon1Entity: any;\n    mrIcon2Entity: any;\n    panelRecvTopic: string;\n    panelSendTopic: string;\n    weatherEntity: string;\n    screensaver: {\n        favoritEntity: [ScreenSaverElement];\n        leftEntity: ScreenSaverElement[];\n        bottomEntity: ScreenSaverElement[];\n        alternateEntity: [ScreenSaverElement?];\n        indicatorEntity: ScreenSaverElement[];\n        mrIconEntity: [ScreenSaverElement, ScreenSaverElement];\n    };\n    defaultColor: RGB;\n    defaultOnColor: RGB;\n    defaultOffColor: RGB;\n    defaultBackgroundColor: RGB;\n};\nexport type leftScreensaverEntityType =\n    | [ScreenSaverElementWithUndefined, ScreenSaverElementWithUndefined, ScreenSaverElementWithUndefined]\n    | [];\nexport type indicatorScreensaverEntityType =\n    | [\n          ScreenSaverElementWithUndefined?,\n          ScreenSaverElementWithUndefined?,\n          ScreenSaverElementWithUndefined?,\n          ScreenSaverElementWithUndefined?,\n          ScreenSaverElementWithUndefined?,\n      ]\n    | [];\nexport type ScreenSaverElementWithUndefined = null | undefined | ScreenSaverElement;\n/*export type ScreenSaverElement = {\n    entity: string;\n    entityText: string;\n    entityFactor?: number | string;\n    entityDecimalPlaces?: number | string;\n    entityDateFormat?: Intl.DateTimeFormatOptions | string;\n    entityIconOn?: string | null;\n    entityIconOff?: string | null;\n    entityUnitText?: string;\n    entityIconColor?: RGB | IconScaleElement | string;\n    entityOnColor?: RGB | string;\n    entityOffColor?: RGB | string;\n    entityOnText?: string | null;\n    entityOffText?: string | null;\n};*/\nexport type ScreenSaverDataItems = {\n    entityValue: ChangeTypeOfKeys<ValueEntryType, Dataitem | undefined>;\n    entityDateFormat: Dataitem | undefined;\n    entityIcon: ChangeTypeOfKeys<IconEntryType, Dataitem | undefined>;\n    entityText: ChangeTypeOfKeys<TextEntryType, Dataitem | undefined>;\n    entityIconSelect: Dataitem | undefined;\n};\nexport type ScreenSaverElement = {\n    entityValue: ChangeTypeOfKeys<ValueEntryType, DataItemsOptions | undefined>;\n    entityDateFormat: ScreenSaverElementConfig;\n    entityIcon: ChangeTypeOfKeys<IconEntryType, DataItemsOptions | undefined>;\n    entityText: ChangeTypeOfKeys<TextEntryType, DataItemsOptions | undefined>;\n    entityIconSelect: ScreenSaverElementConfig;\n};\n/*export type ScreenSaverMRDataItems = Record<keyof ScreenSaverMRElement, Dataitem | undefined>;\n/*export type ScreenSaverMRElement = {\n    entity: ChangeTypeOfKeys<NumberEntryType, DataItemsOptions | undefined>;\n    entityDateFormat: ScreenSaverElementConfig;\n    entityIcon: ChangeTypeOfKeys<IconEntryType, DataItemsOptions | undefined>;\n    entityText: ChangeTypeOfKeys<TextEntryType, DataItemsOptions | undefined>;\n    entityIconSelect: ScreenSaverElementConfig;\n}; /*\nexport type ScreenSaverMRDataElement = {\n    entity: string | number | boolean | null;\n    entityIconOn: string | null;\n    entityIconOff: string | null;\n    entityValue: string | number | boolean | null;\n    entityValueDecimalPlace: number | null;\n    entityValueUnit: string | null;\n    entityOnColor: RGB;\n    entityOffColor: RGB;\n    entityIconSelect: { [key: string]: string } | null;\n};*/\ntype ScreenSaverElementConfig = DataItemsOptions | undefined;\n\nexport type IconScaleElement = {\n    val_min: number;\n    val_max: number;\n    val_best?: number;\n};\n\nexport function isIconScaleElement(F: any | IconScaleElement): F is IconScaleElement {\n    return F && 'val_min' in (F as IconScaleElement) && 'val_max' in (F as IconScaleElement);\n}\n/** we need this to have a nice order when using switch() */\nexport type adapterPlayerInstanceType =\n    | 'alexa2.0.'\n    | 'alexa2.1.'\n    | 'alexa2.2.'\n    | 'alexa2.3.'\n    | 'alexa2.4.'\n    | 'alexa2.5.'\n    | 'alexa2.6.'\n    | 'alexa2.7.'\n    | 'alexa2.8.'\n    | 'alexa2.9.'\n    | 'sonos.0.'\n    | 'sonos.1.'\n    | 'sonos.2.'\n    | 'sonos.3.'\n    | 'sonos.4.'\n    | 'sonos.5.'\n    | 'sonos.6.'\n    | 'sonos.7.'\n    | 'sonos.8.'\n    | 'sonos.9.'\n    | 'spotify-premium.0.'\n    | 'spotify-premium.1.'\n    | 'spotify-premium.2.'\n    | 'spotify-premium.3.'\n    | 'spotify-premium.4.'\n    | 'spotify-premium.5.'\n    | 'spotify-premium.6.'\n    | 'spotify-premium.7.'\n    | 'spotify-premium.8.'\n    | 'spotify-premium.9.'\n    | 'volumio.0.'\n    | 'volumio.1.'\n    | 'volumio.2.'\n    | 'volumio.3.'\n    | 'volumio.4.'\n    | 'volumio.5.'\n    | 'volumio.6.'\n    | 'volumio.7.'\n    | 'volumio.8.'\n    | 'volumio.9.'\n    | 'squeezeboxrpc.0.'\n    | 'squeezeboxrpc.1.'\n    | 'squeezeboxrpc.2.'\n    | 'squeezeboxrpc.3.'\n    | 'squeezeboxrpc.4.'\n    | 'squeezeboxrpc.5.'\n    | 'squeezeboxrpc.6.'\n    | 'squeezeboxrpc.7.'\n    | 'squeezeboxrpc.8.'\n    | 'squeezeboxrpc.9.'\n    | 'bosesoundtouch.0.'\n    | 'bosesoundtouch.1.'\n    | 'bosesoundtouch.2.'\n    | 'bosesoundtouch.3.'\n    | 'bosesoundtouch.4.'\n    | 'bosesoundtouch.5.'\n    | 'bosesoundtouch.6.'\n    | 'bosesoundtouch.7.'\n    | 'bosesoundtouch.8.'\n    | 'bosesoundtouch.9.';\n\nexport type PlayerType = _PlayerTypeWithMediaDevice | _PlayerTypeWithOutMediaDevice;\n\nexport type _PlayerTypeWithOutMediaDevice = (typeof ArrayPlayerTypeWithOutMediaDevice)[number];\nexport type _PlayerTypeWithMediaDevice = (typeof ArrayPlayerTypeWithMediaDevice)[number];\n\nexport type notSortedPlayerType =\n    | `${PlayerType}.0.`\n    | `${PlayerType}.1.`\n    | `${PlayerType}.2.`\n    | `${PlayerType}.3.`\n    | `${PlayerType}.4.`\n    | `${PlayerType}.5.`\n    | `${PlayerType}.6.`\n    | `${PlayerType}.7.`\n    | `${PlayerType}.8.`\n    | `${PlayerType}.9.`;\n\nexport type mediaOptional =\n    | 'seek'\n    | 'crossfade'\n    | 'speakerlist'\n    | 'playlist'\n    | 'tracklist'\n    | 'equalizer'\n    | 'repeat'\n    | 'favorites';\n\nexport type DataItemstype = DataItemsOptions['type'];\nexport type DataItemsMode = 'custom' | 'auto';\nexport type DataItemsOptionsIcon =\n    | Exclude<\n          DataItemsOptions,\n          {\n              type: 'const';\n              role?: string;\n              constVal: StateValue | AllIcons;\n              state?: State | null; // use just inside of class\n          }\n      >\n    | ({\n          name?: string;\n      } & {\n          type: 'const';\n          role?: string;\n          constVal: AllIcons;\n          state?: State | null; // use just inside of class\n      });\nexport type DataItemsOptions = {\n    name?: string;\n} & (\n    | {\n          type: 'const';\n          role?: string;\n          constVal: StateValue | AllIcons;\n          state?: State | null; // use just inside of class\n          forceType?: 'string' | 'number' | 'boolean'; // force a type\n      }\n    | ((\n          | {\n                mode: 'auto' | 'done'; // not set means custom\n                role: PageRole | PageRole[];\n            }\n          | {\n                mode?: 'custom'; // not set means custom\n                role?: string;\n            }\n      ) & {\n          type: 'state';\n          dp: string;\n          state?: State | null; // use just inside of class\n          substring?: [number, number | undefined]; // only used with getString()\n          forceType?: 'string' | 'number' | 'boolean'; // force a type\n          read?: string | ((val: any) => any);\n          response?: 'now' | 'medium' | 'slow';\n      })\n    | ((\n          | {\n                mode: 'auto' | 'done'; // not set means custom\n                role: PageRole | PageRole[];\n            }\n          | {\n                mode?: 'custom'; // not set means custom\n                role?: string;\n            }\n      ) & {\n          type: 'triggered';\n          dp: string;\n          state?: State | null; // use just inside of class\n          substring?: [number, number | undefined]; // only used with getString()\n          forceType?: 'string' | 'number' | 'boolean'; // force a type\n          read?: string | ((val: any) => any);\n          response?: 'now' | 'medium' | 'slow';\n      })\n    | {\n          type: 'internal';\n          dp: internalDatapoints;\n      }\n);\n\ntype internalDatapoints = 'Relais1' | 'Relais2';\nexport type IncomingEvent = {\n    type: EventType;\n    method: EventMethod;\n    mode: string;\n    page?: number;\n    subPage?: number;\n    command: ButtonActionType | '';\n    opt: string;\n};\n\nexport type Event = {\n    type: EventType;\n    method: EventMethod;\n    page: any | null;\n    data: string[];\n    opt: string[];\n};\nexport type EventType = 'event';\nexport function isEventType(F: string | EventType): F is EventType {\n    return ['event'].indexOf(F) != -1;\n}\nexport type ScreensaverModeType = 'standard' | 'alternate' | 'advanced';\n\nexport type ScreensaverOptionsType = {\n    favoritEntity: Config['screensaver']['favoritEntity'];\n    leftEntity: Config['screensaver']['leftEntity'];\n    bottomEntity: Config['screensaver']['bottomEntity'];\n    alternateEntity: Config['screensaver']['alternateEntity'];\n    indicatorEntity: Config['screensaver']['indicatorEntity'];\n    mrIconEntity: Config['screensaver']['mrIconEntity'];\n};\nexport interface State extends Omit<ioBroker.State, 'val'> {\n    val: StateValue;\n}\nexport type StateValue = ioBroker.StateValue | object;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUO,SAAS,sBAAsB,QAAqC;AACvE,SAAO,OAAO,KAAK,GAAG;AAC1B;AAEA,MAAM,iCAAiC,CAAC,UAAU,SAAS,eAAe;AAC1E,MAAM,oCAAoC,CAAC,mBAAmB,WAAW,gBAAgB;AAElF,SAAS,wBAAwB,GAAyE;AAC7G,SAAO,+BAA+B,QAAQ,CAA+B,KAAK;AACtF;AAEO,SAAS,sBAAsB,GAAmD;AACrF,SAAO;AACX;AAEO,SAAS,cAAc,GAA2C;AACrE,UAAQ,GAAkB;AAAA,IACtB,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,aAAO;AAAA,IACX;AAEI,YAAM,IAAI,MAAM,oDAAoD,IAAI;AACxE,aAAO;AAAA,EACf;AACJ;AAEO,SAAS,YAAY,GAAuC;AAC/D,UAAQ,GAAgB;AAAA,IACpB,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,aAAO;AAAA,IACX;AACI,cAAQ,KAAK,sBAAsB,IAAI;AACvC,aAAO;AAAA,EACf;AACJ;AAwCO,MAAM,kBAAkB;AAAA,EAC3B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AA8SO,SAAS,mBAAmB,GAAkD;AACjF,SAAO,KAAK,aAAc,KAA0B,aAAc;AACtE;AAsLO,SAAS,YAAY,GAAuC;AAC/D,SAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,KAAK;AACnC;",
  "names": []
}
