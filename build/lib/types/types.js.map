{
  "version": 3,
  "sources": ["../../../src/lib/types/types.ts"],
  "sourcesContent": ["import type * as dataItem from '../controller/data-item';\nimport { type RGB } from '../const/Color';\nimport type * as pages from './pages';\nimport type { NSPanel } from './NSPanel';\n\n/**\n * Bitte an folgendes Schema halten\n * card.adapter?.aufgabe?.ger\u00E4t?\n */\n\nexport type TemplateItems = Partial<Record<TemplateIdent, NSPanel.PageItemOptionsTemplate>>;\n\nexport type PageTemplateIdent =\n    | 'entities.waste-calendar'\n    | 'media.spotify-premium'\n    | 'entities.fahrplan.departure-timetable'\n    | 'entities.fahrplan.routes'\n    | 'thermo.hmip.valve'\n    | 'thermo.hmip.wallthermostat'\n    | 'thermo.script'\n    | 'media.amazon';\n\nexport type TemplateIdent =\n    | 'text.roborock.status'\n    | 'button.alias.fahrplan.departure'\n    | 'text.brightsky.bot1Value'\n    | 'text.clock'\n    | 'text.brightsky.hourlyweather'\n    | 'text.brightsky.windgust'\n    | 'text.brightsky.solar'\n    | 'text.brightsky.winddirection'\n    | 'text.brightsky.windspeed'\n    | 'text.brightsky.bot2values'\n    | 'text.brightsky.favorit'\n    | 'text.brightsky.sunriseset'\n    | 'text.pirate-weather.hourlyweather'\n    | 'text.pirate-weather.windgust'\n    | 'text.pirate-weather.uvindex'\n    | 'text.pirate-weather.winddirection'\n    | 'text.pirate-weather.windspeed'\n    | 'text.pirate-weather.bot2values'\n    | 'text.pirate-weather.favorit'\n    | 'text.pirate-weather.sunriseset'\n    | 'text.custom.windarrow'\n    | 'text.openweathermap.windgust'\n    | 'text.openweathermap.uvindex'\n    | 'text.openweathermap.winddirection'\n    | 'text.openweathermap.windspeed'\n    | 'text.openweathermap.bot2values'\n    | 'text.openweathermap.favorit'\n    | 'text.openweathermap.sunriseset'\n    | 'text.isOnline'\n    | 'text.hmip.windcombo'\n    | 'text.sainlogic.windarrow'\n    | 'button.slider'\n    | 'number.slider'\n    | 'text.lock'\n    | 'button.select'\n    | 'value.temperature'\n    | 'level.temperature'\n    | 'text.shutter.navigation'\n    | 'text.accuweather.uvindex'\n    | 'text.accuweather.windspeed'\n    | 'text.accuweather.winddirection'\n    | 'text.accuweather.windgust'\n    | 'text.wlan'\n    | 'text.info'\n    | 'text.warning'\n    | 'number.volume'\n    | 'button.volume'\n    | 'text.motion'\n    | 'text.door.isOpen'\n    | 'text.gate.isOpen'\n    | 'generic.shutter'\n    | 'shutter.shelly.2PM'\n    | 'light.shelly.rgbw2'\n    | 'text.window.isClose'\n    | 'text.window.isOpen'\n    | 'text.battery'\n    | 'button.temperature'\n    | 'text.battery.low'\n    | 'button.iconRightSize'\n    | 'button.iconLeftSize'\n    | 'shutter.deconz.ikea.fyrtur'\n    | 'shutter.basic'\n    | 'shutter.basic.onlyV'\n    | 'text.battery.bydhvs'\n    | 'text.accuweather.bot2values'\n    | 'text.accuweather.sunriseset'\n    | 'button.esphome.powerplug'\n    | 'button.service.adapter.stopped'\n    | 'button.service.adapter.noconnection'\n    | 'text.fahrplan.departure'\n    | ''\n    | 'button.humidity'\n    | 'text.temperature'\n    | 'script.light'\n    | 'script.socket'\n    | 'script.hue'\n    | 'script.rgb'\n    | 'script.rgbSingle'\n    | 'script.rgbSingleHEX'\n    | 'script.ct'\n    | 'script.dimmer'\n    | 'script.gate'\n    | 'script.door'\n    | 'script.motion'\n    | 'script.humidity'\n    | 'script.temperature'\n    | 'script.lock'\n    | 'script.slider'\n    | 'script.warning'\n    | 'script.volume'\n    | 'text.accuweather.favorit'\n    | 'text.alias.fahrplan.departure';\n\nexport type InternalStatesObject = {\n    val: ioBroker.StateValue;\n    ack: boolean;\n    common: ioBroker.StateCommon;\n    noTrigger?: boolean;\n};\nexport type PanelInternalCommand =\n    | 'cmd/screensaverHeadingNotification'\n    | 'cmd/screensaverTextNotification'\n    | 'cmd/screensaverActivateNotification'\n    | 'cmd/screenSaverInfoIcon'\n    | 'info/PopupInfo'\n    | 'cmd/power2'\n    | 'cmd/power1'\n    | 'cmd/bigIconRight'\n    | 'cmd/detachLeft'\n    | 'cmd/detachRight'\n    | 'cmd/bigIconLeft'\n    | 'cmd/dimActive'\n    | 'cmd/dimStandby'\n    | 'cmd/screenSaverTimeout'\n    | 'cmd/NotificationCleared2'\n    | 'cmd/NotificationNext2'\n    | 'cmd/popupNotification2'\n    | 'cmd/NotificationCleared'\n    | 'cmd/NotificationNext'\n    | 'info/NotificationCounter'\n    | 'cmd/popupNotification'\n    | 'info/modelVersion'\n    | 'info/displayVersion'\n    | 'info/tasmotaVersion'\n    | 'info/Tasmota'\n    | 'cmd/TasmotaRestart'\n    | 'cmd/screenSaverRotationTime'\n    | 'cmd/dimNightActive'\n    | 'cmd/dimNightStandby'\n    | 'cmd/dimNightHourStart'\n    | 'cmd/dimNightHourEnd'\n    | 'cmd/screenSaverDoubleClick'\n    | 'cmd/screenSaverLayout'\n    | 'cmd/hideCards'\n    | 'cmd/buzzer';\n\n/**\n * Defines how the panel handles \"always on\" behavior.\n *\n * - `\"always\"` \u2192 Screen is forced to stay on permanently.\n *   A timeout of `0` means \"never turn off\".\n * - `\"none\"` \u2192 No special handling; normal timeout rules apply.\n * - `\"ignore\"` \u2192 Skip \"always on\" logic completely for this page/item.\n * - `\"action\"` \u2192 Extend screen-on time only when a state/action event occurs.\n */\nexport type AlwaysOnMode = 'always' | 'none' | 'ignore' | 'action';\n\nexport type nsPanelState = ioBroker.State | (Omit<ioBroker.State, 'val'> & { val: nsPanelStateVal });\nexport type nsPanelStateVal = ioBroker.State['val'] | Record<string | number, any>;\nexport type EventMethod =\n    | 'startup'\n    | 'sleepReached'\n    | 'pageOpenDetail'\n    | 'buttonPress2'\n    | 'renderCurrentPage'\n    | 'button1'\n    | 'button2';\n\nexport type panelRecvType = {\n    event: 'event';\n    method: EventMethod;\n};\n\nexport type PopupType = NSPanel.PopupType;\n\nexport type SerialTypePageElements = NSPanel.SerialTypePageElements;\n\nexport type SerialTypePopup = NSPanel.SerialTypePopup;\n\nexport type ButtonActionType = NSPanel.ButtonActionType;\n\nexport type Payload = {\n    payload: string;\n};\nexport type BooleanUnion = 'true' | 'false';\n\nexport type DimMode = {\n    dimmodeOn: boolean | undefined;\n    brightnessDay: number | undefined;\n    brightnessNight: number | undefined;\n    timeDay: string | undefined;\n    timeNight: string | undefined;\n};\n\nexport type ValueDateFormat = { local: string; format: any };\n\nexport type NSpanelModel = 'eu' | 'us-p' | 'us-l';\n\nexport type IconScaleElement = IconColorElement | IconSelectElement;\n\nexport type IconSelectElement = {\n    valIcon_min: number;\n    valIcon_max: number;\n    valIcon_best?: number;\n};\nexport type IconColorElement = {\n    val_min: number;\n    val_max: number;\n    val_best?: number;\n    /**\n     * Optional best-color (nur wirksam, wenn `val_best` gesetzt ist).\n     */\n    color_best?: RGB;\n    /**\n     * Color scale mode. Default is 'mixed'.\n     * - 'mixed': interpolate linearly between two RGB colors.\n     * - 'cie': interpolate using CIE color table.\n     * - 'hue': interpolate via hue/saturation/brightness.\n     * - 'triGrad': three-color gradient red\u2192yellow\u2192green, ignores custom colors.\n     * - 'triGradAnchor': like triGrad but anchors yellow to val_best.\n     * - 'quadriGrad': four-color gradient red\u2192yellow\u2192green\u2192blue, ignores custom colors.\n     * - 'quadriGradAnchor': like quadriGrad but anchors green to val_best.\n     */\n    mode?: 'mixed' | 'hue' | 'cie' | 'triGrad' | 'triGradAnchor' | 'quadriGrad' | 'quadriGradAnchor';\n    /**\n     * Apply logarithmic scaling. Use 'max' or 'min'.\n     * Undefined = linear scaling.\n     */\n    log10?: 'max' | 'min';\n};\n\nexport type DataItemstype = NSPanel.DataItemsOptions['type'];\nexport type DataItemsMode = 'custom' | 'auto';\nexport type DataItemsOptionsIcon =\n    | Exclude<NSPanel.DataItemsOptions, DataItemsOptionsConst>\n    | (DataItemsOptionsConst & {\n          constVal: AllIcons;\n      });\n\ntype RequireAtLeastOne<T, K extends keyof T = keyof T> = Pick<T, Exclude<keyof T, K>> &\n    { [P in K]-?: Required<Pick<T, P>> & Partial<Pick<T, Exclude<K, P>>> }[K];\n\ntype Base = {\n    mode: 'auto' | 'done' | 'fail';\n    role?: pages.StateRole | pages.StateRole[];\n    commonType?: ioBroker.StateCommon['type'] | ioBroker.StateCommon['type'][] | '';\n    regexp?: RegExp;\n    def?: string | number | boolean | RGB;\n    required?: boolean;\n    writeable?: boolean;\n};\n\ntype AutoNeedOne = RequireAtLeastOne<Pick<Base, 'role' | 'commonType' | 'regexp'>, 'role' | 'commonType' | 'regexp'>;\n\ntype Rest = Omit<Base, 'mode' | 'role' | 'commonType' | 'regexp'>;\n\nexport type DataItemsOptionsAuto = { mode: 'auto' | 'done' | 'fail' } & Rest & AutoNeedOne; // bei 'auto': mind. eins von role/commonType/regexp\n\ntype DataItemsOptionsConst = {\n    type: 'const';\n    role?: pages.StateRole;\n    commonType?: ioBroker.StateCommon['type'] | ioBroker.StateCommon['type'][] | '';\n    // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\n    constVal: StateValue | AllIcons | RGB | pages.placeholderType | IconScaleElement;\n    state?: State | null; // use just inside of class\n    forceType?: 'string' | 'number' | 'boolean'; // force a type\n    read?: string | ((val: any) => any);\n    write?: string | ((val: any) => any);\n};\n\n//type internalDatapoints = 'Relais1' | 'Relais2';\nexport type IncomingEvent = {\n    type: EventType;\n    method: EventMethod;\n    // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\n    action: ButtonActionType | '' | string;\n    target?: number;\n    page?: number;\n    cmd?: number;\n    popup?: string;\n    id: string; //| PopupType;\n    opt: string;\n};\n\nexport type Event = {\n    type: EventType;\n    method: EventMethod;\n    // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\n    page: any | null;\n    data: string[];\n    opt: string[];\n};\nexport type EventType = 'event';\nexport type ScreensaverModeType = 'standard' | 'alternate' | 'advanced' | 'easyview';\nexport type ScreensaverModeTypeAsNumber = 0 | 1 | 2 | 3;\nexport interface State extends Omit<ioBroker.State, 'val'> {\n    val: StateValue;\n}\nexport type StateValue = ioBroker.StateValue | object;\n\nexport type TasmotaIncomingTopics = 'stat/POWER2' | 'stat/POWER1' | 'stat/STATUS0';\n\n/**\n * Represents the configuration for a button function.\n * This type can be one of the following modes:\n * - 'page': Navigates to a specified page.\n * - 'switch': Toggles the state of a datapoint.\n * - 'button': Triggers a button datapoint with a true value.\n * - null: Represents no configuration.\n */\nexport type ConfigButtonFunction =\n    | {\n          /**\n           * Mode for navigating to a page.\n           *\n           */\n          mode: 'page';\n          /**\n           * The page to navigate to.\n           *\n           */\n          page: string;\n      }\n    | {\n          /**\n           * Mode for toggling a datapoint.\n           *\n           */\n          mode: 'switch';\n          /**\n           * The state of the datapoint to toggle.\n           *\n           */\n          state: string | dataItem.Dataitem;\n      }\n    | {\n          /**\n           * Mode for triggering a button datapoint.\n           *\n           */\n          mode: 'button';\n          /**\n           * The state of the button datapoint to trigger.\n           *\n           */\n          state: string | dataItem.Dataitem;\n      }\n    | null;\n/**\n * Json to Status0 from Tasmota\n */\nexport type STATUS0 = {\n    Status: {\n        Module: number;\n        DeviceName: string;\n        FriendlyName: Array<string>;\n        Topic: string;\n        ButtonTopic: string;\n        Power: string;\n        PowerLock: string;\n        PowerOnState: number;\n        LedState: number;\n        LedMask: string;\n        SaveData: number;\n        SaveState: number;\n        SwitchTopic: string;\n        SwitchMode: Array<number>;\n        ButtonRetain: number;\n        SwitchRetain: number;\n        SensorRetain: number;\n        PowerRetain: number;\n        InfoRetain: number;\n        StateRetain: number;\n        StatusRetain: number;\n    };\n    StatusPRM: {\n        Baudrate: number;\n        SerialConfig: string;\n        GroupTopic: string;\n        OtaUrl: string;\n        RestartReason: string;\n        Uptime: string;\n        StartupUTC: string;\n        Sleep: number;\n        CfgHolder: number;\n        BootCount: number;\n        BCResetTime: string;\n        SaveCount: number;\n    };\n    StatusFWR: {\n        Version: string;\n        BuildDateTime: string;\n        Core: string;\n        SDK: string;\n        CpuFrequency: number;\n        Hardware: string;\n        CR: string;\n    };\n    StatusLOG: {\n        SerialLog: number;\n        WebLog: number;\n        MqttLog: number;\n        FileLog: number;\n        SysLog: number;\n        LogHost: string;\n        LogPort: number;\n        SSId: Array<string>;\n        TelePeriod: number;\n        Resolution: string;\n        SetOption: Array<string>;\n    };\n    StatusMEM: {\n        ProgramSize: number;\n        Free: number;\n        Heap: number;\n        StackLowMark: number;\n        PsrMax: number;\n        PsrFree: number;\n        ProgramFlashSize: number;\n        FlashSize: number;\n        FlashChipId: string;\n        FlashFrequency: number;\n        FlashMode: string;\n        Features: Array<string>;\n        Drivers: string;\n        Sensors: string;\n        I2CDriver: string;\n    };\n    StatusNET: {\n        Hostname: string;\n        IPAddress: string;\n        Gateway: string;\n        Subnetmask: string;\n        DNSServer1: string;\n        DNSServer2: string;\n        Mac: string;\n        IP6Global: string;\n        IP6Local: string;\n        Ethernet: {\n            Hostname: string;\n            IPAddress: string;\n            Gateway: string;\n            Subnetmask: string;\n            DNSServer1: string;\n            DNSServer2: string;\n            Mac: string;\n            IP6Global: string;\n            IP6Local: string;\n        };\n        Webserver: number;\n        HTTP_API: number;\n        WifiConfig: number;\n        WifiPower: number;\n    };\n    StatusMQT: {\n        MqttHost: string;\n        MqttPort: number;\n        MqttClientMask: string;\n        MqttClient: string;\n        MqttUser: string;\n        MqttCount: number;\n        MqttTLS: number;\n        MAX_PACKET_SIZE: number;\n        KEEPALIVE: number;\n        SOCKET_TIMEOUT: number;\n    };\n    StatusTIM: {\n        UTC: string;\n        Local: string;\n        StartDST: string;\n        EndDST: string;\n        Timezone: string;\n        Sunrise: string;\n        Sunset: string;\n    };\n    StatusSNS: {\n        Time: string;\n        ANALOG: {\n            Temperature1: number;\n        };\n        TempUnit: string;\n    };\n    StatusSTS: {\n        Time: string;\n        Uptime: string;\n        UptimeSec: number;\n        Heap: number;\n        SleepMode: string;\n        Sleep: number;\n        LoadAvg: number;\n        MqttCount: number;\n        Berry: {\n            HeapUsed: number;\n            Objects: number;\n        };\n        POWER1: string;\n        POWER2: string;\n        Wifi: {\n            AP: number;\n            SSId: string;\n            BSSId: string;\n            Channel: number;\n            Mode: string;\n            RSSI: number;\n            Signal: number;\n            LinkCount: number;\n            Downtime: string;\n        };\n    };\n};\n\nexport type PanelInfo = {\n    isOnline?: boolean;\n    nspanel: {\n        displayVersion: string;\n        model: string;\n        bigIconLeft: boolean;\n        bigIconRight: boolean;\n        onlineVersion: string;\n        firmwareUpdate: number;\n        currentPage: string;\n        scriptVersion: string;\n        berryDriverVersion: number;\n        berryDriverVersionOnline: number;\n    };\n    tasmota: {\n        firmwareversion: string;\n        onlineVersion: string;\n        safeboot: boolean;\n        net: STATUS0['StatusNET'];\n        uptime: string;\n        sts: STATUS0['StatusSTS'];\n        mqttClient: string;\n    };\n};\n\nexport type oldQRType = {\n    pageName: string;\n    headline: string;\n    alwaysOnDisplay: boolean;\n    hiddenByTrigger: boolean;\n    optionalText: string;\n    SSIDURLTEL: string;\n    selType: 0 | 1 | 2 | 3;\n    wlantype?: 'nopass' | 'WPA' | 'WPA2' | 'WPA3' | 'WEP';\n    qrPass?: number;\n    wlanhidden?: boolean;\n    pwdhidden?: boolean;\n    setState?: string;\n};\n\nexport type TasmotaOnlineResponse = {\n    url: string;\n    assets_url: string;\n    upload_url: string;\n    html_url: string;\n    id: number;\n    author: {\n        login: string;\n        id: number;\n        node_id: string;\n        avatar_url: string;\n        gravatar_id: string;\n        url: string;\n        html_url: string;\n        followers_url: string;\n        following_url: string;\n        gists_url: string;\n        starred_url: string;\n        subscriptions_url: string;\n        organizations_url: string;\n        repos_url: string;\n        events_url: string;\n        received_events_url: string;\n        type: string;\n        site_admin: boolean;\n    };\n    node_id: string;\n    tag_name: string;\n    target_commitish: string;\n    name: string;\n    draft: boolean;\n    prerelease: boolean;\n    created_at: string;\n    published_at: string;\n    assets: Array<{\n        url: string;\n        id: number;\n        node_id: string;\n        name: string;\n        label: string;\n        uploader: {\n            login: string;\n            id: number;\n            node_id: string;\n            avatar_url: string;\n            gravatar_id: string;\n            url: string;\n            html_url: string;\n            followers_url: string;\n            following_url: string;\n            gists_url: string;\n            starred_url: string;\n            subscriptions_url: string;\n            organizations_url: string;\n            repos_url: string;\n            events_url: string;\n            received_events_url: string;\n            type: string;\n            site_admin: boolean;\n        };\n        content_type: string;\n        state: string;\n        size: number;\n        download_count: number;\n        created_at: string;\n        updated_at: string;\n        browser_download_url: string;\n    }>;\n    tarball_url: string;\n    zipball_url: string;\n    body: string;\n    reactions: {\n        url: string;\n        total_count: number;\n        '+1': number;\n        '-1': number;\n        laugh: number;\n        hooray: number;\n        confused: number;\n        heart: number;\n        rocket: number;\n        eyes: number;\n    };\n};\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
