{
  "version": 3,
  "sources": ["../../../src/lib/types/type-pageItem.ts"],
  "sourcesContent": ["import type * as dataItem from '../classes/data-item';\nimport type { RGB } from '../const/Color';\nimport type * as pages from './pages';\nimport type * as Types from './types';\n\nexport type PageLightItem = {\n    type: 'light' | 'dimmer' | 'brightnessSlider' | 'hue' | 'rgb';\n    bri: PageItemMinMaxValue;\n    ct: PageItemMinMaxValue;\n    hue: PageItemMinMaxValue; //0-360\n    rgb: RGB;\n};\n\ntype PageItemMinMaxValue = { min: number; max: number };\nexport type PageItemColorSwitch = { on: RGB; off: RGB };\n\nexport type IconBoolean = Record<Types.BooleanUnion, string | undefined>;\nexport type ThisCardMessageTypes = 'input_sel' | 'button';\n\nexport interface MessageItem extends MessageItemInterface {\n    mainId?: string;\n    subId?: string;\n}\nexport type entityUpdateDetailMessage =\n    | {\n          type: '2Sliders';\n          entityName: string;\n          icon?: string;\n          slidersColor: string; // | 'disable';\n          buttonState: boolean | 'disable';\n          slider1Pos: number | 'disable';\n          slider2Pos: number | 'disable';\n          hueMode: boolean;\n          hue_translation: string; //| '';\n          slider2Translation: string; //| '';\n          slider1Translation: string; //| '';\n          popup: boolean;\n      }\n    | {\n          type: 'insel';\n          entityName: string;\n          textColor: string;\n          currentState: string;\n          list: string;\n          headline: string;\n      }\n    | {\n          type: 'seperator';\n          entityName: string;\n      }\n    | {\n          type: 'popupThermo';\n          headline: string;\n          entityName: string;\n          currentState: string;\n          list: string;\n      }\n    | ({\n          type: 'popupLight';\n      } & Record<\n          | 'entityName'\n          | 'icon'\n          | 'iconColor'\n          | 'power'\n          | 'sliderBriPos'\n          | 'sliderCtPos'\n          | 'colorMode'\n          | 'colorIdentifier'\n          | 'ctIdentifier'\n          | 'briIdentifier'\n          | 'effect_supported',\n          string\n      >)\n    | ({ type: 'popupShutter2' } & Record<\n          | 'entityName'\n          | 'pos1' //\n          | 'text2'\n          | 'pos1text'\n          | 'icon'\n          | 'iconT1'\n          | 'iconM1'\n          | 'iconB1'\n          | 'statusT1' // 'disable' allowed\n          | 'statusM1' // 'disable' allowed\n          | 'statusB1' // 'disable' allowed\n          | 'iconT2'\n          | 'iconT2Color'\n          | 'iconT2Enable'\n          | 'iconM2'\n          | 'iconM2Color'\n          | 'iconM2Enable'\n          | 'iconB2'\n          | 'iconB2Color'\n          | 'iconB2Enable'\n          | 'shutterClosedIsZero',\n          string\n      > & { shutterTyp: 'shutter' })\n    | ({ type: 'popupShutter' } & Record<\n          | 'entityName'\n          | 'pos1' // 'disable' allowed\n          | 'text2'\n          | 'pos1text'\n          | 'icon'\n          | 'iconL1'\n          | 'iconM1'\n          | 'iconR1'\n          | 'statusL1' // 'disable' allowed\n          | 'statusM1' // 'disable' allowed\n          | 'statusR1' // 'disable' allowed\n          | 'pos2text'\n          | 'iconL2'\n          | 'iconM2'\n          | 'iconR2'\n          | 'statusL2' // 'disable' allowed\n          | 'statusM2' // 'disable' allowed\n          | 'statusR2' // 'disable' allowed\n          | 'pos2', // 'disable' allowed\n          string\n      >)\n    | ({\n          type: 'popupFan';\n      } & Record<\n          | 'entityName'\n          | 'icon'\n          | 'iconColor'\n          | 'buttonstate'\n          | 'slider1'\n          | 'slider1Max'\n          | 'speedText'\n          | 'mode'\n          | 'modeList',\n          string\n      >)\n    | ({\n          type: 'popupSlider';\n      } & Record<\n          | 'entityName'\n          | 'tSlider1'\n          | 'tSlider2'\n          | 'tSlider3'\n          | 'tIconS1M'\n          | 'tIconS1P'\n          | 'tIconS2M'\n          | 'tIconS2P'\n          | 'tIconS3M'\n          | 'tIconS3P'\n          | 'hSlider1CurVal'\n          | 'hSlider2CurVal'\n          | 'hSlider3CurVal'\n          | 'hSlider1MaxVal'\n          | 'hSlider2MaxVal'\n          | 'hSlider3MaxVal'\n          | 'hSlider1MinVal'\n          | 'hSlider2MinVal'\n          | 'hSlider3MinVal'\n          | 'hSlider1ZeroVal'\n          | 'hSlider2ZeroVal'\n          | 'hSlider3ZeroVal'\n          | 'hSlider1Step'\n          | 'hSlider2Step'\n          | 'hSlider3Step'\n          | 'hSlider1Visibility'\n          | 'hSlider2Visibility'\n          | 'hSlider3Visibility',\n          string\n      >)\n    | ({\n          type: 'popupTimer';\n      } & Record<\n          | 'entityName'\n          | 'iconColor'\n          | 'minutes'\n          | 'seconds'\n          | 'editable'\n          | 'action1'\n          | 'action2'\n          | 'action3'\n          | 'text1'\n          | 'text2'\n          | 'text3',\n          string\n      >);\n\n//export type entityUpdateDetailMessageType = '2Sliders' | 'insel';\n\nexport interface MessageItemInterface {\n    type: Types.SerialTypePopup;\n    intNameEntity: string;\n    icon: string;\n    iconColor: string;\n    displayName: string;\n    optionalValue: string;\n}\nexport type MediaToolBoxAction =\n    | 'speaker'\n    | 'play'\n    | 'tool'\n    | 'track'\n    | 'favor'\n    | 'equal'\n    | 'repeat'\n    | 'seek'\n    | 'cross'\n    | 'nexttool';\nexport type PageItemDataItems = Omit<PageItemUnion, 'data' | 'type'> &\n    (\n        | PageItemNumberDataItems\n        | PageItemButtonDataItems\n        | PageItemShutterDataItems\n        | PageItemShutter2DataItems\n        | PageItemInputSelDataItems\n        | PageItemLightDataItems\n        | PageItemTextDataItems\n        | PageItemFanDataItems\n        | PageItemTimerDataItems\n        | PageItemSeparator\n    );\n\nexport type PageItemDataItemsOptionsWithOutTemplate = Omit<PageItemUnion, 'data' | 'type'> &\n    (\n        | PageItemButtonDataItemsOptions\n        | PageItemShutterDataItemsOptions\n        | PageItemShutter2DataItemsOptions\n        | PageItemInputSelDataItemsOptions\n        | PageItemLightDataItemsOptions\n        | PageItemNumberDataItemsOptions\n        | PageItemTextDataItemsOptions\n        | PageItemFanDataItemsOptions\n        | PageItemTimerDataItemsOptions\n        | PageItemSeparator\n    ) & { filter?: true | false | number };\nexport type PageItemDataItemsOptions =\n    | ({\n          template: Types.TemplateIdent;\n          dpInit?: string | RegExp;\n          /**\n           * not implemented yet\n           */\n          appendix?: string;\n          color?: { true?: Types.DataItemsOptions; false?: Types.DataItemsOptions; scale?: Types.IconScaleElement };\n          icon?: { true?: Types.DataItemsOptions; false?: Types.DataItemsOptions };\n          iconText?: { true?: Types.DataItemsOptions; false?: Types.DataItemsOptions };\n          filter?: true | false | number;\n      } & Partial<\n          Omit<PageItemUnion, 'template' | 'data' | 'type'> &\n              pages.ChangeDeepPartial<\n                  | PageItemButtonDataItemsOptions\n                  | PageItemShutterDataItemsOptions\n                  | PageItemShutter2DataItemsOptions\n                  | PageItemInputSelDataItemsOptions\n                  | PageItemLightDataItemsOptions\n                  | PageItemNumberDataItemsOptions\n                  | PageItemTextDataItemsOptions\n                  | PageItemFanDataItemsOptions\n                  | PageItemTimerDataItemsOptions\n                  | PageItemSeparator\n              >\n      >)\n    | PageItemDataItemsOptionsWithOutTemplate;\n\nexport type PageItemOptionsTemplate = {\n    template?: Types.TemplateIdent;\n    role?: pages.DeviceRole;\n    /**\n     * check vs dpInit if the template is allowed\n     */\n    adapter: string;\n    modeScr?: string;\n    dpInit?: string;\n    type: Types.SerialTypePageElements;\n} & (\n    | ({ template?: undefined } & Omit<PageItemUnion, 'template' | 'data' | 'type' | 'dpInit' | 'modeScr'> &\n          (\n              | PageItemButtonDataItemsOptions\n              | PageItemShutterDataItemsOptions\n              | PageItemShutter2DataItemsOptions\n              | PageItemInputSelDataItemsOptions\n              | PageItemLightDataItemsOptions\n              | PageItemNumberDataItemsOptions\n              | PageItemTextDataItemsOptions\n              | PageItemFanDataItemsOptions\n              | PageItemTimerDataItemsOptions\n          ))\n    | ({ template: Types.TemplateIdent } & Omit<PageItemUnion, 'template' | 'data' | 'type' | 'dpInit' | 'modeScr'> &\n          pages.ChangeTypeOfKeys<\n              | PageItemButtonDataItemsOptions\n              | PageItemShutterDataItemsOptions\n              | PageItemShutter2DataItemsOptions\n              | PageItemInputSelDataItemsOptions\n              | PageItemLightDataItemsOptions\n              | PageItemNumberDataItemsOptions\n              | PageItemTextDataItemsOptions\n              | PageItemFanDataItemsOptions\n              | PageItemTimerDataItemsOptions,\n              Types.DataItemsOptions | undefined | null\n          >)\n);\n\nexport type PageItemTimer = Pick<\n    PageItemBase,\n    | 'filter'\n    // value or set the time\n    | 'entity1'\n    | 'text'\n    | 'headline'\n    | 'icon'\n    // the state to trigger if internal trigger ends\n    | 'setValue1'\n    // set current status\n    | 'setValue2'\n    | 'enabled'\n>;\nexport type PageItemTimerDataItemsOptions = {\n    type: 'timer';\n    data: pages.ChangeTypeOfKeys<PageItemTimer, Types.DataItemsOptions | undefined>;\n};\nexport type PageItemTimerDataItems = {\n    type: 'timer';\n    data: pages.ChangeTypeOfKeys<PageItemTimer, dataItem.Dataitem | undefined>;\n};\n\nexport type PageItemFan = Pick<\n    PageItemBase,\n    | 'filter'\n    | 'entity1'\n    | 'speed'\n    | 'text'\n    | 'headline'\n    | 'icon'\n    | 'entityInSel'\n    | 'valueList'\n    | 'valueList2'\n    | 'setList'\n    | 'enabled'\n>;\nexport type PageItemFanDataItemsOptions = {\n    type: 'fan';\n    data: pages.ChangeTypeOfKeys<PageItemFan, Types.DataItemsOptions | undefined>;\n};\nexport type PageItemFanDataItems = {\n    type: 'fan';\n    data: pages.ChangeTypeOfKeys<PageItemFan, dataItem.Dataitem | undefined>;\n};\n\nexport type PageItemNumber = Pick<\n    PageItemBase,\n    | 'filter'\n    | 'switch1'\n    | 'text'\n    | 'icon'\n    | 'entity1'\n    | 'minValue1'\n    | 'maxValue1'\n    | 'steps1'\n    | 'zero1'\n    | 'entity2'\n    | 'minValue2'\n    | 'maxValue2'\n    | 'steps2'\n    | 'zero2'\n    | 'entity3'\n    | 'minValue3'\n    | 'maxValue3'\n    | 'steps3'\n    | 'zero3'\n    | 'heading1'\n    | 'heading2'\n    | 'heading3'\n    | 'enabled'\n>;\nexport type PageItemNumberDataItemsOptions = {\n    type: 'number';\n    data: pages.ChangeTypeOfKeys<PageItemNumber, Types.DataItemsOptions | undefined>;\n};\nexport type PageItemNumberDataItems = {\n    type: 'number';\n    data: pages.ChangeTypeOfKeys<PageItemNumber, dataItem.Dataitem | undefined>;\n};\n\nexport type PageItemButton = Pick<\n    PageItemBase,\n    | 'filter'\n    | 'setValue1'\n    | 'setValue2'\n    | 'text'\n    | 'text1'\n    | 'icon'\n    | 'color'\n    | 'entity1'\n    | 'entity2'\n    | 'entity3'\n    | 'setNavi'\n    | 'confirm'\n    | 'entity4'\n    | 'popup'\n    | 'enabled'\n    | 'additionalId'\n>;\nexport type PageItemButtonDataItemsOptions = {\n    type: 'button' | 'switch';\n    data: pages.ChangeTypeOfKeys<PageItemButton, Types.DataItemsOptions | undefined>;\n};\nexport type PageItemButtonDataItems = {\n    type: 'button' | 'switch';\n    data: pages.ChangeTypeOfKeys<PageItemButton, dataItem.Dataitem | undefined>;\n};\n\nexport type PageItemText = Pick<\n    PageItemBase,\n    'filter' | 'entity1' | 'text' | 'text1' | 'entity2' | 'entity3' | 'entity4' | 'icon'\n>;\nexport type PageItemTextDataItemsOptions = {\n    type: 'text';\n    data: pages.ChangeTypeOfKeys<PageItemButton, Types.DataItemsOptions | undefined>;\n};\nexport type PageItemTextDataItems = {\n    type: 'text';\n    data: pages.ChangeTypeOfKeys<PageItemButton, dataItem.Dataitem | undefined>;\n};\n\nexport type PageItemLight = Pick<\n    PageItemBase,\n    | 'filter'\n    | 'valueList'\n    | 'valueList2'\n    | 'setList'\n    | 'text1'\n    | 'text2'\n    | 'text3'\n    | 'icon'\n    | 'color'\n    | 'entity1'\n    | 'Red'\n    | 'Green'\n    | 'Blue'\n    | 'White'\n    | 'saturation'\n    | 'dimmer'\n    | 'hue'\n    | 'entityInSel'\n    | 'ct'\n    | 'headline'\n    | 'colorMode'\n    | 'setValue1'\n    | 'setValue2'\n    | 'enabled'\n>;\nexport type PageItemSeparator = {\n    type: 'empty';\n    data: undefined;\n};\nexport type PageItemSeparatorDataItems = {\n    type: 'empty';\n    data: undefined;\n};\nexport type PageItemLightDataItemsOptions = {\n    type: 'light' | 'light2';\n    data: pages.ChangeTypeOfKeys<PageItemLight, Types.DataItemsOptions | undefined>;\n};\nexport type PageItemLightDataItems = {\n    type: 'light' | 'light2';\n    data: pages.ChangeTypeOfKeys<PageItemLight, dataItem.Dataitem | undefined>;\n};\n\nexport type PageItemInputSel = Pick<\n    PageItemBase,\n    | 'filter'\n    | 'entityInSel'\n    | 'text'\n    | 'entity2'\n    | 'icon'\n    | 'color'\n    | 'headline'\n    | 'valueList'\n    | 'valueList2'\n    | 'setList'\n    | 'setValue1'\n    | 'enabled'\n>;\n\nexport type PageItemInputSelDataItemsOptions = {\n    type: 'input_sel';\n    data: pages.ChangeTypeOfKeys<PageItemInputSel, Types.DataItemsOptions | undefined>;\n};\n\nexport type PageItemInputSelDataItems = {\n    type: 'input_sel';\n    data: pages.ChangeTypeOfKeys<PageItemInputSel, dataItem.Dataitem | undefined>;\n};\n\nexport type PageItemShutter = Pick<\n    PageItemBase,\n    | 'filter'\n    | 'up'\n    | 'down'\n    | 'stop'\n    | 'up2'\n    | 'down2'\n    | 'stop2'\n    | 'entity1'\n    | 'entity2'\n    | 'text'\n    | 'text1'\n    | 'text2'\n    | 'icon'\n    | 'color'\n    | 'headline'\n    | 'valueList'\n    | 'setList'\n    | 'setValue1'\n    | 'setValue2'\n    | 'enabled'\n>;\nexport type PageItemShutterDataItemsOptions = {\n    type: 'shutter';\n    data: pages.ChangeTypeOfKeys<PageItemShutter, Types.DataItemsOptions | undefined>;\n};\nexport type PageItemShutterDataItems = {\n    type: 'shutter';\n    data: pages.ChangeTypeOfKeys<PageItemShutter, dataItem.Dataitem | undefined>;\n};\n\nexport type PageItemShutter2 = Pick<\n    PageItemBase,\n    | 'filter'\n    | 'up'\n    | 'down'\n    | 'stop'\n    | 'entity1'\n    | 'text'\n    | 'text1'\n    | 'icon'\n    | 'headline'\n    | 'entity2'\n    | 'entity3'\n    | 'entity4'\n    | 'icon2'\n    | 'icon3'\n    | 'icon4'\n    | 'enabled'\n>;\n\nexport type PageItemShutter2DataItemsOptions = {\n    type: 'shutter2';\n    data: pages.ChangeTypeOfKeys<PageItemShutter2, Types.DataItemsOptions | undefined>;\n};\nexport type PageItemShutter2DataItems = {\n    type: 'shutter2';\n    data: pages.ChangeTypeOfKeys<PageItemShutter2, dataItem.Dataitem | undefined>;\n};\n\nexport type PageItemBase = {\n    headline?: string;\n    color?: ColorEntryType;\n    icon?: IconEntryType;\n    icon1?: IconEntryType;\n    icon2?: IconEntryType;\n    icon3?: IconEntryType;\n    icon4?: IconEntryType;\n    text?: TextEntryType | TextEntryType2;\n    entityInSel: ValueEntryType;\n    entity1?: ValueEntryType; // Readonly Werte die angezeigt werden soll. wird immer f\u00FCr insel verwendet\n    entity2?: ValueEntryType; // Readonly Werte die angezeigt werden soll.\n    entity3?: ValueEntryType; // Readonly Werte die angezeigt werden soll.\n    entity4?: ValueEntryType; // Readonly Werte die angezeigt werden soll.\n    /**\n     * Zur Zeit bei number mit cardGrid\n     */\n    switch1?: string; // true/false only\n    text1?: TextEntryType;\n    text2?: TextEntryType;\n    text3?: TextEntryType;\n    mixed1?: ValueEntryType; // Readonly Werte die angezeigt werden soll. wird immer f\u00FCr insel verwendet\n    mixed2?: ValueEntryType; // Readonly Werte die angezeigt werden soll.\n    mixed3?: ValueEntryType; // Readonly Werte die angezeigt werden soll.\n    mixed4?: ValueEntryType; // Readonly Werte die angezeigt werden soll.\n    setValue1?: string;\n    setValue2?: string;\n    setValue3?: string;\n    valueList?: number;\n    valueList2?: number;\n    setNavi?: number;\n    confirm?: string;\n    setList?: number;\n    popup?: PopupEntryType;\n    /**\n     * use with slider\n     */\n    maxValue1?: number;\n    /**\n     * use with slider\n     */\n    minValue1?: number;\n    minValue2?: number;\n    maxValue2?: number;\n    minValue3?: number;\n    maxValue3?: number;\n    heading1: string; // heading for slider\n    heading2?: string; // heading for slider\n    heading3?: string; // heading for slider\n    steps1?: number; // steps for slider\n    steps2?: number; // steps for slider\n    steps3?: number; // steps for slider\n    zero1?: number; // zero for slider\n    zero2?: number; // zero for slider\n    zero3?: number; // zero for slider\n    interpolateColor?: boolean;\n    dimmer?: ScaledNumberType;\n    speed?: ScaledNumberType;\n    ct?: ScaledNumberType;\n    hue?: string;\n    colorMode: boolean; // true rgb, false ct\n    saturation?: string;\n    useColor?: string;\n    Red?: number;\n    Green?: number;\n    Blue?: number;\n    White?: ScaledNumberType;\n    up: number;\n    stop?: number;\n    down: number;\n    up2?: number;\n    stop2?: number;\n    down2?: number;\n    filter?: number; // filter for PageMenu\n    enabled?: boolean;\n    additionalId?: string; // to differ between multiple same entities\n};\n\nexport type PageTypeUnionTemplate = {\n    role: pages.DeviceRole;\n    type: Types.SerialTypePageElements;\n    data: {\n        headline?: string | undefined;\n        color?: RGB | undefined;\n        icon?: { true: { value: string; color: RGB | null }; false: { value: string; color: RGB | null } } | undefined;\n        text?: { true: string; false: string } | undefined;\n        entity1: true | undefined | 'invert' | '';\n        entity2?: true | undefined | 'invert';\n        entity3?: true | undefined | 'invert';\n        text1?: { true: string; false: string } | undefined;\n        text2?: { true: string; false: string } | undefined;\n        text3?: { true: string; false: string } | undefined;\n        setValue1?: true | undefined;\n        setValue2?: true | undefined;\n        setValue3?: true | undefined;\n        modeList?: true | undefined;\n        maxValue1?: number | undefined;\n        minValue1?: number | undefined;\n        minValue2?: number | undefined;\n        maxValue2?: number | undefined;\n        interpolateColor?: true | undefined;\n        dimmer?: true | undefined;\n        hue?: true | undefined;\n        saturation?: true | undefined;\n        useColor?: true | undefined;\n        RGB3?: true | undefined;\n        optionalData?: any[] | string | true | undefined; //shutter icons - string for true?false or just true\n    };\n};\n//XOR<XOR<A, B>, C>\n\nexport type PageItemUnion = {\n    role?: pages.DeviceRole;\n    template?: undefined;\n    readOptions?: Record<string, string>;\n    dpInit?: string | RegExp;\n    enums?: string | string[];\n    device?: string;\n    modeScr?: Types.ScreenSaverPlaces | undefined;\n    type: Types.SerialTypePageElements;\n    data: PageItemBase;\n    filter?: true | false | number;\n};\n\nexport type ColorEntryType = Record<Types.BooleanUnion, RGB | undefined> & { scale?: Types.IconScaleElement };\n\nexport type ColorEntryTypeBooleanStandard =\n    | (Partial<Record<Types.BooleanUnion, { color: RGB }>> & {\n          scale?: Types.IconScaleElement | undefined;\n          maxBri?: string;\n          minBri?: string;\n      })\n    | undefined;\nexport type IconEntryType =\n    | (Partial<Record<Types.BooleanUnion, { value: string; text?: TextSizeEntryType }>> &\n          ColorEntryTypeBooleanStandard & { unstable: { value: string; text?: TextSizeEntryType; color: RGB } })\n    | undefined;\n\nexport type TextEntryType = Record<Types.BooleanUnion, string>;\nexport type TextSizeEntryType = ValueEntryType & { textSize?: number };\nexport type TextEntryType2 = Record<Types.BooleanUnion, { value: string; prefix: string; suffix: string }>;\n\nexport type PopupEntryType =\n    | {\n          isActive?: boolean;\n          getMessage: string;\n          getHeadline?: string;\n          setMessage: string;\n      }\n    | undefined;\n\nexport type ValueEntryTypeWithColor = (ValueEntryType & ColorEntryTypeBooleanStandard) | undefined;\nexport type ValueEntryType =\n    | {\n          value: number;\n          decimal?: number;\n          factor?: number;\n          unit?: string;\n          /**\n           * scale the value\n           */\n          minScale?: number;\n          maxScale?: number;\n          set?: number;\n          dateFormat?: string;\n          math?: string;\n          suffix?: string;\n          prefix?: string;\n      }\n    | undefined;\nexport type ScaledNumberType =\n    | {\n          value: number;\n          minScale?: number;\n          maxScale?: number;\n          factor?: number;\n          set?: number;\n          mode?: string; // atm 'kelvin' | 'mired'\n          negate?: boolean;\n          enabled?: boolean;\n      }\n    | undefined;\nexport type listCommand = { id: string; value: string; command?: listCommandUnion };\ntype listCommandUnion = 'flip';\nexport function islistCommandUnion(F: any): F is listCommandUnion {\n    switch (F as listCommandUnion) {\n        case 'flip': {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport type spotifyPlaylist = Array<{\n    id: string;\n    title: string;\n    artistName: string;\n    artistArray: Array<{\n        id: string;\n        name: string;\n    }>;\n    album: {\n        id: string;\n        name: string;\n    };\n    durationMs: number;\n    duration: string;\n    addedAt: string;\n    addedBy: string;\n    discNumber: number;\n    episode: boolean;\n    explicit: boolean;\n    popularity: number;\n}>;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AA+tBO,SAAS,mBAAmB,GAA+B;AAC9D,UAAQ,GAAuB;AAAA,IAC3B,KAAK,QAAQ;AACT,aAAO;AAAA,IACX;AAAA,EACJ;AACA,SAAO;AACX;",
  "names": []
}
