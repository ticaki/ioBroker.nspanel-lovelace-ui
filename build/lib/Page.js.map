{
  "version": 3,
  "sources": ["../../src/lib/Page.ts"],
  "sourcesContent": ["import { NspanelLovelaceUi } from '../main';\nimport { BaseClass } from './library';\nimport * as Nspanel from './types';\n\nexport class PageClass extends BaseClass {\n    config: Nspanel.PageType;\n    navigate: Nspanel.PageType; //Nspanel.PageNavigationType\n    constructor(adapter: NspanelLovelaceUi, options: { config: Nspanel.PageType; navigate: Nspanel.PageType }) {\n        super(adapter, 'Page');\n        this.config = options.config;\n        this.navigate = options.navigate;\n    }\n    /*\n    GeneratePage (page: PageType): void {\n        try {\n            activePage = page;\n            write.dp(NSPanel_Path + 'ActivePage.type', activePage!.type);\n            setIfExists(NSPanel_Path + 'ActivePage.heading', activePage!.heading);\n            setIfExists(NSPanel_Path + 'ActivePage.id0', activePage!.items[0].id);\n            switch (page.type) {\n                case 'cardEntities':\n                    SendToPanel(GenerateEntitiesPage(page));\n                    break;\n                case 'cardThermo':\n                    SendToPanel(GenerateThermoPage(page));\n                    break;\n                case 'cardGrid':\n                    SendToPanel(GenerateGridPage(page));\n                    break;\n                case 'cardGrid2':\n                    SendToPanel(GenerateGridPage2(page));\n                    break;\n                case 'cardMedia':\n                    useMediaEvents = true;\n                    SendToPanel(GenerateMediaPage(page));\n                    break;\n                case 'cardAlarm':\n                    SendToPanel(GenerateAlarmPage(page));\n                    break;\n                case 'cardQR':\n                    SendToPanel(GenerateQRPage(page));\n                    break;\n                case 'cardPower':\n                    SendToPanel(GeneratePowerPage(page));\n                    break;\n                case 'cardChart':\n                    SendToPanel(GenerateChartPage(page));\n                    break;\n                case 'cardLChart':\n                    SendToPanel(GenerateChartPage(page));\n                    break;\n                case 'cardUnlock':\n                    SendToPanel(GenerateUnlockPage(page));\n                    break;\n            }\n        } catch (err: any) {\n            if (err.message == \"Cannot read properties of undefined (reading 'type')\") {\n                log(\n                    'Please wait a few seconds longer when launching the NSPanel. Not all parameters are loaded yet.',\n                    'warn',\n                );\n            } else {\n                log('error at function GeneratePage: ' + err.message, 'warn');\n            }\n        }\n    }*/\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,qBAA0B;AAGnB,MAAM,kBAAkB,yBAAU;AAAA,EACrC;AAAA,EACA;AAAA,EACA,YAAY,SAA4B,SAAmE;AACvG,UAAM,SAAS,MAAM;AACrB,SAAK,SAAS,QAAQ;AACtB,SAAK,WAAW,QAAQ;AAAA,EAC5B;AAuDJ;",
  "names": []
}
