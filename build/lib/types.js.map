{
  "version": 3,
  "sources": ["../../src/lib/types.ts"],
  "sourcesContent": ["import { Dataitem } from './data-item';\n\n/**\n * Join arguments with ~ and return the string;\n * @param tokens unlimited numbers of strings\n * @returns\n */\nexport function buildNSPanelString(...tokens: (string | number)[]): string {\n    return tokens.join('~');\n}\n\nconst ArrayPlayerTypeWithMediaDevice = ['alexa2', 'sonos', 'squeezeboxrpc'] as const;\nconst ArrayPlayerTypeWithOutMediaDevice = ['spotify-premium', 'volumio', 'bosesoundtouch'] as const;\n\nexport function isPlayerWithMediaDevice(F: string | _PlayerTypeWithMediaDevice): F is _PlayerTypeWithMediaDevice {\n    return ArrayPlayerTypeWithMediaDevice.indexOf(F as _PlayerTypeWithMediaDevice) != -1;\n}\n/** check if adapterPlayerInstanceType has all Playertypes */\nexport function checkSortedPlayerType(F: notSortedPlayerType): adapterPlayerInstanceType {\n    return F;\n}\n\nexport function isMediaOptional(F: string | mediaOptional): F is mediaOptional {\n    switch (F as mediaOptional) {\n        case 'seek':\n        case 'crossfade':\n        case 'speakerlist':\n        case 'playlist':\n        case 'tracklist':\n        case 'equalizer':\n        case 'repeat':\n        case 'favorites':\n            return true;\n        default:\n            return false;\n    }\n}\nexport function isRGB(F: RGB | any): F is RGB {\n    return typeof (F as RGB) == 'object' && 'red' in (F as RGB) && 'blue' in (F as RGB) && 'green' in (F as RGB);\n}\n\nexport function isEventMethod(F: string | EventMethod): F is EventMethod {\n    switch (F as EventMethod) {\n        case 'startup':\n        case 'sleepReached':\n        case 'pageOpenDetail':\n        case 'buttonPress2':\n        case 'renderCurrentPage':\n        case 'button1':\n        case 'button2':\n            return true;\n        default:\n            // Have to talk about this.\n            throw new Error(`Please report to developer: Unknown EventMethod: ${F} `);\n            return false;\n    }\n}\n\nexport function isPopupType(F: PopupType | string): F is PopupType {\n    switch (F as PopupType) {\n        case 'popupFan':\n        case 'popupInSel':\n        case 'popupLight':\n        case 'popupLightNew':\n        case 'popupNotify':\n        case 'popupShutter':\n        case 'popupThermo':\n        case 'popupTimer':\n            return true;\n        default:\n            throw new Error(`Please report to developer: Unknown PopupType: ${F} `);\n    }\n}\n// If u get a error here u forgot something in PagetypeType or PageType\nexport function checkPageType(F: PagetypeType, A: PageType): void {\n    A.type = F;\n}\nexport function isPageMediaItem(F: PageItem | PageMediaItem): F is PageMediaItem {\n    return 'adapterPlayerInstance' in F;\n}\n\nexport function isPageThermoItem(F: PageItem | PageThermoItem): F is PageThermoItem {\n    return 'popupThermoMode1' in F;\n}\n\nexport function isPageMedia(F: PageType | PageMedia): F is PageMedia {\n    return F.type == 'cardMedia';\n}\nexport function isPagePower(F: PageType | PagePower): F is PagePower {\n    return F.type == 'cardPower';\n}\n\nexport type PopupType =\n    | 'popupFan'\n    | 'popupInSel'\n    | 'popupLight'\n    | 'popupLightNew'\n    | 'popupNotify'\n    | 'popupShutter'\n    | 'popupThermo'\n    | 'popupTimer';\n\nexport type EventMethod =\n    | 'startup'\n    | 'sleepReached'\n    | 'pageOpenDetail'\n    | 'buttonPress2'\n    | 'renderCurrentPage'\n    | 'button1'\n    | 'button2';\nexport type panelRecvType = {\n    event: 'event';\n    method: EventMethod;\n};\n\nexport type SerialType = 'button' | 'light' | 'shutter' | 'text' | 'input_sel' | 'timer' | 'number' | 'fan';\n\nexport type roles =\n    | 'light'\n    | 'socket'\n    | 'dimmer'\n    | 'hue'\n    | 'rgb'\n    | 'rgbSingle'\n    | 'cd'\n    | 'blind'\n    | 'door'\n    | 'window'\n    | 'volumeGroup'\n    | 'volume'\n    | 'info'\n    | 'humidity'\n    | 'temperature'\n    | 'value.temperature'\n    | 'value.humidity'\n    | 'sensor.door'\n    | 'sensor.window'\n    | 'thermostat'\n    | 'warning'\n    | 'ct'\n    | 'cie'\n    | 'gate'\n    | 'motion'\n    | 'buttonSensor'\n    | 'button'\n    | 'value.time'\n    | 'level.timer'\n    | 'value.alarmtime'\n    | 'level.mode.fan'\n    | 'lock'\n    | 'slider'\n    | 'switch.mode.wlan'\n    | 'media'\n    | 'timeTable'\n    | 'airCondition';\n\nexport type ButtonActionType =\n    | 'bExit'\n    | 'bUp'\n    | 'bNext'\n    | 'bSubNext'\n    | 'bPrev'\n    | 'bSubPrev'\n    | 'bHome'\n    | 'notifyAction'\n    | 'OnOff'\n    | 'button'\n    | 'up'\n    | 'stop'\n    | 'down'\n    | 'positionSlider'\n    | 'tiltOpen'\n    | 'tiltStop'\n    | 'tiltSlider'\n    | 'tiltClose'\n    | 'brightnessSlider'\n    | 'colorTempSlider'\n    | 'colorWheel'\n    | 'tempUpd'\n    | 'tempUpdHighLow'\n    | 'media-back'\n    | 'media-pause'\n    | 'media-next'\n    | 'media-shuffle'\n    | 'volumeSlider'\n    | 'mode-speakerlist'\n    | 'mode-playlist'\n    | 'mode-tracklist'\n    | 'mode-repeat'\n    | 'mode-equalizer'\n    | 'mode-seek'\n    | 'mode-crossfade'\n    | 'mode-favorites'\n    | 'mode-insel'\n    | 'media-OnOff'\n    | 'timer-start'\n    | 'timer-pause'\n    | 'timer-cancle'\n    | 'timer-finish'\n    | 'hvac_action'\n    | 'mode-modus1'\n    | 'mode-modus2'\n    | 'mode-modus3'\n    | 'number-set'\n    | 'mode-preset_modes'\n    | 'A1'\n    | 'A2'\n    | 'A3'\n    | 'A4'\n    | 'D1'\n    | 'U1';\n\nexport type RGB = {\n    red: number;\n    green: number;\n    blue: number;\n};\n\nexport type Payload = {\n    payload: string;\n};\n\nexport type PageBaseType = {\n    type: PagetypeType;\n    heading: string;\n    items: PageItem[];\n    useColor: boolean;\n    subPage?: boolean;\n    parent?: PageType;\n    parentIcon?: string;\n    parentIconColor?: RGB;\n    prev?: string;\n    prevIcon?: string;\n    prevIconColor?: RGB;\n    next?: string;\n    nextIcon?: string;\n    nextIconColor?: RGB;\n    home?: string;\n    homeIcon?: string;\n    homeIconColor?: RGB;\n};\n\nexport type PagetypeType =\n    | 'cardChart'\n    | 'cardLChart'\n    | 'cardEntities'\n    | 'cardGrid'\n    | 'cardGrid2'\n    | 'cardThermo'\n    | 'cardMedia'\n    | 'cardUnlock'\n    | 'cardQR'\n    | 'cardAlarm'\n    | 'cardPower'; //| 'cardBurnRec'\n\nexport type PageType =\n    | PageChart\n    | PageEntities\n    | PageGrid\n    | PageGrid2\n    | PageThermo\n    | PageMedia\n    | PageUnlock\n    | PageQR\n    | PageAlarm\n    | PagePower;\n\nexport type PageEntities = {\n    type: 'cardEntities';\n    items: [PageItem?, PageItem?, PageItem?, PageItem?, PageItem?];\n} & PageBaseType;\n\nexport type PageGrid = {\n    type: 'cardGrid';\n    items: [PageItem?, PageItem?, PageItem?, PageItem?, PageItem?, PageItem?];\n} & PageBaseType;\n\nexport type PageGrid2 = {\n    type: 'cardGrid2';\n    items: [PageItem?, PageItem?, PageItem?, PageItem?, PageItem?, PageItem?, PageItem?, PageItem?];\n} & PageBaseType;\n\nexport type PageThermo = {\n    type: 'cardThermo';\n    items: [PageThermoItem];\n} & Omit<PageBaseType, 'useColor'>;\n\nexport type PageMedia = {\n    type: 'cardMedia';\n    items: [PageMediaItem];\n} & Omit<PageBaseType, 'useColor' | 'autoCreateAlias'>;\n\nexport type PageAlarm = {\n    type: 'cardAlarm';\n    items: [PageItem];\n} & Omit<PageBaseType, 'useColor'>;\n\nexport type PageUnlock = {\n    type: 'cardUnlock';\n    items: [PageItem];\n} & Omit<PageBaseType, 'useColor'> &\n    Partial<Pick<PageBaseType, 'useColor'>>;\n\nexport type PageQR = {\n    type: 'cardQR';\n    items: [PageItem];\n} & Omit<PageBaseType, 'useColor'>;\n\nexport type PagePower = {\n    type: 'cardPower';\n    items: [PageItem];\n} & Omit<PageBaseType, 'useColor'>;\n\nexport type PageChart = {\n    type: 'cardChart' | 'cardLChart';\n    items: PageItem[];\n} & Omit<PageBaseType, 'useColor'>;\n\nexport type PageItem = PageBaseItem | PageMediaItem | PageThermoItem;\n\nexport type PageMediaItem = {\n    adapterPlayerInstance: adapterPlayerInstanceType;\n    mediaDevice?: string;\n    colorMediaIcon?: RGB;\n    colorMediaArtist?: RGB;\n    colorMediaTitle?: RGB;\n    speakerList?: string[];\n    playList?: string[];\n    equalizerList?: string[];\n    repeatList?: string[];\n    globalTracklist?: string[];\n    crossfade?: boolean;\n} & PageBaseItem;\n\nexport type PageThermoItem =\n    | ({\n          popupThermoMode1?: string[];\n          popupThermoMode2?: string[];\n          popupThermoMode3?: string[];\n          popUpThermoName?: string[];\n          setThermoAlias?: string[];\n          setThermoDestTemp2?: string;\n      } & PageBaseItem)\n    | ({\n          popupThermoMode1?: string[];\n          popupThermoMode2?: string[];\n          popupThermoMode3?: string[];\n          popUpThermoName?: string[];\n          setThermoAlias?: string[];\n          setThermoDestTemp2?: string;\n      } & PageBaseItem);\n// mean string start with getState(' and end with ').val\ntype getStateID = string;\nexport type PageBaseItem = {\n    id?: string | null;\n    icon?: string;\n    icon2?: string;\n    onColor?: RGB;\n    offColor?: RGB;\n    useColor?: boolean;\n    interpolateColor?: boolean;\n    minValueBrightness?: number;\n    maxValueBrightness?: number;\n    minValueColorTemp?: number;\n    maxValueColorTemp?: number;\n    minValueLevel?: number;\n    maxValueLevel?: number;\n    minValueTilt?: number;\n    maxValueTilt?: number;\n    minValue?: number;\n    maxValue?: number;\n    stepValue?: number;\n    prefixName?: string;\n    suffixName?: string;\n    name?: string | getStateID;\n    secondRow?: string;\n    buttonText?: string;\n    unit?: string;\n    navigate?: boolean;\n    colormode?: string;\n    colorScale?: IconScaleElement;\n    //adapterPlayerInstance?: adapterPlayerInstanceType,\n    targetPage?: string;\n    modeList?: string[];\n    hidePassword?: boolean;\n    autoCreateALias?: boolean;\n    yAxis?: string;\n    yAxisTicks?: number[] | string;\n    xAxisDecorationId?: string;\n    useValue?: boolean;\n    monobutton?: boolean;\n    inSel_ChoiceState?: boolean;\n    iconArray?: string[];\n    fontSize?: number;\n    actionStringArray?: string[];\n    alwaysOnDisplay?: boolean;\n};\n\nexport type DimMode = {\n    dimmodeOn: boolean | undefined;\n    brightnessDay: number | undefined;\n    brightnessNight: number | undefined;\n    timeDay: string | undefined;\n    timeNight: string | undefined;\n};\n\nexport type ConfigButtonFunction = {\n    mode: 'page' | 'toggle' | 'set' | null;\n    page:\n        | PageThermo\n        | PageMedia\n        | PageAlarm\n        | PageQR\n        | PageEntities\n        | PageGrid\n        | PageGrid2\n        | PagePower\n        | PageChart\n        | PageUnlock\n        | null;\n    entity: string | null;\n    setValue: string | number | boolean | null;\n};\n\nexport type Config = {\n    leftEntity: boolean;\n    indicatorEntity: any;\n    mrIcon1Entity: any;\n    mrIcon2Entity: any;\n    panelRecvTopic: string;\n    panelSendTopic: string;\n    weatherEntity: string;\n    screensaver: {\n        favoritEntity: ScreenSaverElement[];\n        leftEntity: ScreenSaverElement[];\n        bottomEntity: ScreenSaverElement[];\n        indicatorEntity: ScreenSaverElement[];\n        mrIconEntity: [ScreenSaverMRElement, ScreenSaverMRElement];\n    };\n    defaultColor: RGB;\n    defaultOnColor: RGB;\n    defaultOffColor: RGB;\n    defaultBackgroundColor: RGB;\n    pages: PageType[];\n    subPages: PageType[];\n    button1: ConfigButtonFunction;\n    button2: ConfigButtonFunction;\n};\nexport type leftScreensaverEntityType =\n    | [ScreenSaverElementWithUndefined, ScreenSaverElementWithUndefined, ScreenSaverElementWithUndefined]\n    | [];\nexport type indicatorScreensaverEntityType =\n    | [\n          ScreenSaverElementWithUndefined?,\n          ScreenSaverElementWithUndefined?,\n          ScreenSaverElementWithUndefined?,\n          ScreenSaverElementWithUndefined?,\n          ScreenSaverElementWithUndefined?,\n      ]\n    | [];\nexport type ScreenSaverElementWithUndefined = null | undefined | ScreenSaverElement;\n/*export type ScreenSaverElement = {\n    entity: string;\n    entityText: string;\n    entityFactor?: number | string;\n    entityDecimalPlaces?: number | string;\n    entityDateFormat?: Intl.DateTimeFormatOptions | string;\n    entityIconOn?: string | null;\n    entityIconOff?: string | null;\n    entityUnitText?: string;\n    entityIconColor?: RGB | IconScaleElement | string;\n    entityOnColor?: RGB | string;\n    entityOffColor?: RGB | string;\n    entityOnText?: string | null;\n    entityOffText?: string | null;\n};*/\nexport type ScreenSaverDataItems = Record<keyof ScreenSaverElement, Dataitem | undefined>;\nexport type ScreenSaverElement = {\n    entity: ScreenSaverElementConfig;\n    entityText: ScreenSaverElementConfig;\n    entityFactor: ScreenSaverElementConfig;\n    entityDecimalPlaces: ScreenSaverElementConfig;\n    entityDateFormat: ScreenSaverElementConfig;\n    entityIconOn: ScreenSaverElementConfig;\n    entityIconOff: ScreenSaverElementConfig;\n    entityUnitText: ScreenSaverElementConfig;\n    entityIconColor: ScreenSaverElementConfig;\n    entityIconColorScale: ScreenSaverElementConfig; // result rgb\n    entityOnColor: ScreenSaverElementConfig;\n    entityOffColor: ScreenSaverElementConfig;\n    entityOnText: ScreenSaverElementConfig;\n    entityOffText: ScreenSaverElementConfig;\n    entityIconSelect: ScreenSaverElementConfig;\n};\nexport type ScreenSaverMRDataItems = Record<keyof ScreenSaverMRElement, Dataitem | undefined>;\nexport type ScreenSaverMRElement = {\n    entity: ScreenSaverElementConfig;\n    entityIconOn: ScreenSaverElementConfig;\n    entityIconSelect: ScreenSaverElementConfig;\n    entityIconOff: ScreenSaverElementConfig;\n    entityValue: ScreenSaverElementConfig;\n    entityValueDecimalPlace: ScreenSaverElementConfig;\n    entityValueUnit: ScreenSaverElementConfig;\n    entityOnColor: ScreenSaverElementConfig;\n    entityOffColor: ScreenSaverElementConfig;\n}; /*\nexport type ScreenSaverMRDataElement = {\n    entity: string | number | boolean | null;\n    entityIconOn: string | null;\n    entityIconOff: string | null;\n    entityValue: string | number | boolean | null;\n    entityValueDecimalPlace: number | null;\n    entityValueUnit: string | null;\n    entityOnColor: RGB;\n    entityOffColor: RGB;\n    entityIconSelect: { [key: string]: string } | null;\n};*/\ntype ScreenSaverElementConfig =\n    | ScreenSaverElementConfigTriggered\n    | ScreenSaverElementConfigState\n    | ScreenSaverElementConfigConst\n    | undefined;\n\ntype ScreenSaverElementConfigConst = {\n    name?: string;\n    role?: string;\n    type: 'const';\n    constVal: StateValue;\n};\ntype ScreenSaverElementConfigState = {\n    name?: string;\n    role?: string;\n    type: 'state';\n    dp: string;\n};\n\ntype ScreenSaverElementConfigTriggered = {\n    name?: string;\n    role?: string;\n    type: 'triggered';\n    dp: string;\n};\n\nexport type IconScaleElement = {\n    val_min: number;\n    val_max: number;\n    val_best?: number;\n};\n\nexport function isIconScaleElement(F: any | IconScaleElement): F is IconScaleElement {\n    return F && 'val_min' in (F as IconScaleElement) && 'val_max' in (F as IconScaleElement);\n}\n/** we need this to have a nice order when using switch() */\nexport type adapterPlayerInstanceType =\n    | 'alexa2.0.'\n    | 'alexa2.1.'\n    | 'alexa2.2.'\n    | 'alexa2.3.'\n    | 'alexa2.4.'\n    | 'alexa2.5.'\n    | 'alexa2.6.'\n    | 'alexa2.7.'\n    | 'alexa2.8.'\n    | 'alexa2.9.'\n    | 'sonos.0.'\n    | 'sonos.1.'\n    | 'sonos.2.'\n    | 'sonos.3.'\n    | 'sonos.4.'\n    | 'sonos.5.'\n    | 'sonos.6.'\n    | 'sonos.7.'\n    | 'sonos.8.'\n    | 'sonos.9.'\n    | 'spotify-premium.0.'\n    | 'spotify-premium.1.'\n    | 'spotify-premium.2.'\n    | 'spotify-premium.3.'\n    | 'spotify-premium.4.'\n    | 'spotify-premium.5.'\n    | 'spotify-premium.6.'\n    | 'spotify-premium.7.'\n    | 'spotify-premium.8.'\n    | 'spotify-premium.9.'\n    | 'volumio.0.'\n    | 'volumio.1.'\n    | 'volumio.2.'\n    | 'volumio.3.'\n    | 'volumio.4.'\n    | 'volumio.5.'\n    | 'volumio.6.'\n    | 'volumio.7.'\n    | 'volumio.8.'\n    | 'volumio.9.'\n    | 'squeezeboxrpc.0.'\n    | 'squeezeboxrpc.1.'\n    | 'squeezeboxrpc.2.'\n    | 'squeezeboxrpc.3.'\n    | 'squeezeboxrpc.4.'\n    | 'squeezeboxrpc.5.'\n    | 'squeezeboxrpc.6.'\n    | 'squeezeboxrpc.7.'\n    | 'squeezeboxrpc.8.'\n    | 'squeezeboxrpc.9.'\n    | 'bosesoundtouch.0.'\n    | 'bosesoundtouch.1.'\n    | 'bosesoundtouch.2.'\n    | 'bosesoundtouch.3.'\n    | 'bosesoundtouch.4.'\n    | 'bosesoundtouch.5.'\n    | 'bosesoundtouch.6.'\n    | 'bosesoundtouch.7.'\n    | 'bosesoundtouch.8.'\n    | 'bosesoundtouch.9.';\n\nexport type PlayerType = _PlayerTypeWithMediaDevice | _PlayerTypeWithOutMediaDevice;\n\nexport type _PlayerTypeWithOutMediaDevice = (typeof ArrayPlayerTypeWithOutMediaDevice)[number];\nexport type _PlayerTypeWithMediaDevice = (typeof ArrayPlayerTypeWithMediaDevice)[number];\n\nexport type notSortedPlayerType =\n    | `${PlayerType}.0.`\n    | `${PlayerType}.1.`\n    | `${PlayerType}.2.`\n    | `${PlayerType}.3.`\n    | `${PlayerType}.4.`\n    | `${PlayerType}.5.`\n    | `${PlayerType}.6.`\n    | `${PlayerType}.7.`\n    | `${PlayerType}.8.`\n    | `${PlayerType}.9.`;\n\nexport type mediaOptional =\n    | 'seek'\n    | 'crossfade'\n    | 'speakerlist'\n    | 'playlist'\n    | 'tracklist'\n    | 'equalizer'\n    | 'repeat'\n    | 'favorites';\n\nexport type DataItemstype = DataItemsOptions['type'];\nexport type DataItemsOptions = { name?: string } & (\n    | {\n          type: 'const';\n          role?: string;\n          constVal: StateValue;\n          value?: State | null;\n      }\n    | {\n          type: 'state';\n          dp: string;\n          role?: string;\n          value?: State | null;\n          substring?: [number, number | undefined];\n      }\n    | {\n          type: 'triggered';\n          dp: string; // used if there and then ignore value\n          role?: string;\n          value?: State | null;\n          substring?: [number, number | undefined];\n      }\n);\n\nexport type ScreensaverModeType = 'standard' | 'alternate' | 'advanced';\n\nexport type ScreensaverOptionsType = {\n    favoritEntity: Config['screensaver']['favoritEntity'];\n    leftEntity: Config['screensaver']['leftEntity'];\n    bottomEntity: Config['screensaver']['bottomEntity'];\n    indicatorEntity: Config['screensaver']['indicatorEntity'];\n    mrIconEntity: Config['screensaver']['mrIconEntity'];\n};\nexport interface State extends Omit<ioBroker.State, 'val'> {\n    val: StateValue;\n}\nexport type StateValue = ioBroker.StateValue | object;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOO,SAAS,sBAAsB,QAAqC;AACvE,SAAO,OAAO,KAAK,GAAG;AAC1B;AAEA,MAAM,iCAAiC,CAAC,UAAU,SAAS,eAAe;AAC1E,MAAM,oCAAoC,CAAC,mBAAmB,WAAW,gBAAgB;AAElF,SAAS,wBAAwB,GAAyE;AAC7G,SAAO,+BAA+B,QAAQ,CAA+B,KAAK;AACtF;AAEO,SAAS,sBAAsB,GAAmD;AACrF,SAAO;AACX;AAEO,SAAS,gBAAgB,GAA+C;AAC3E,UAAQ,GAAoB;AAAA,IACxB,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,aAAO;AAAA,IACX;AACI,aAAO;AAAA,EACf;AACJ;AACO,SAAS,MAAM,GAAwB;AAC1C,SAAO,OAAQ,KAAa,YAAY,SAAU,KAAa,UAAW,KAAa,WAAY;AACvG;AAEO,SAAS,cAAc,GAA2C;AACrE,UAAQ,GAAkB;AAAA,IACtB,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,aAAO;AAAA,IACX;AAEI,YAAM,IAAI,MAAM,oDAAoD,IAAI;AACxE,aAAO;AAAA,EACf;AACJ;AAEO,SAAS,YAAY,GAAuC;AAC/D,UAAQ,GAAgB;AAAA,IACpB,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,aAAO;AAAA,IACX;AACI,YAAM,IAAI,MAAM,kDAAkD,IAAI;AAAA,EAC9E;AACJ;AAEO,SAAS,cAAc,GAAiB,GAAmB;AAC9D,IAAE,OAAO;AACb;AACO,SAAS,gBAAgB,GAAiD;AAC7E,SAAO,2BAA2B;AACtC;AAEO,SAAS,iBAAiB,GAAmD;AAChF,SAAO,sBAAsB;AACjC;AAEO,SAAS,YAAY,GAAyC;AACjE,SAAO,EAAE,QAAQ;AACrB;AACO,SAAS,YAAY,GAAyC;AACjE,SAAO,EAAE,QAAQ;AACrB;AA2cO,SAAS,mBAAmB,GAAkD;AACjF,SAAO,KAAK,aAAc,KAA0B,aAAc;AACtE;",
  "names": []
}
