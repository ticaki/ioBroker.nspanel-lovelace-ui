{
  "version": 3,
  "sources": ["../../../src/lib/const/Color.ts"],
  "sourcesContent": ["import { RGB } from '../types/Color';\nimport { PageItemDataitems } from '../types/pageItem';\n\nexport const HMIOff: RGB = { red: 68, green: 115, blue: 158 }; // Blue-Off - Original Entity Off\nexport const HMIOn: RGB = { red: 3, green: 169, blue: 244 }; // Blue-On\nexport const HMIDark: RGB = { red: 29, green: 29, blue: 29 }; // Original Background Color\nexport const Off: RGB = { red: 253, green: 128, blue: 0 }; // Orange-Off - nicer color transitions\nexport const On: RGB = { red: 253, green: 216, blue: 53 };\nexport const MSRed: RGB = { red: 251, green: 105, blue: 98 };\nexport const MSYellow: RGB = { red: 255, green: 235, blue: 156 };\nexport const MSGreen: RGB = { red: 121, green: 222, blue: 121 };\nexport const Red: RGB = { red: 255, green: 0, blue: 0 };\nexport const White: RGB = { red: 255, green: 255, blue: 255 };\nexport const Yellow: RGB = { red: 255, green: 255, blue: 0 };\nexport const Green: RGB = { red: 0, green: 255, blue: 0 };\nexport const Blue: RGB = { red: 0, green: 0, blue: 255 };\nexport const DarkBlue: RGB = { red: 0, green: 0, blue: 136 };\nexport const Gray: RGB = { red: 136, green: 136, blue: 136 };\nexport const Black: RGB = { red: 0, green: 0, blue: 0 };\nexport const Cyan: RGB = { red: 0, green: 255, blue: 255 };\nexport const Magenta: RGB = { red: 255, green: 0, blue: 255 };\nexport const colorSpotify: RGB = { red: 30, green: 215, blue: 96 };\nexport const colorAlexa: RGB = { red: 49, green: 196, blue: 243 };\nexport const colorSonos: RGB = { red: 216, green: 161, blue: 88 };\nexport const colorRadio: RGB = { red: 255, green: 127, blue: 0 };\nexport const BatteryFull: RGB = { red: 96, green: 176, blue: 62 };\nexport const BatteryEmpty: RGB = { red: 179, green: 45, blue: 25 };\n\n//Menu Icon Colors\nexport const Menu: RGB = { red: 150, green: 150, blue: 100 };\nexport const MenuLowInd: RGB = { red: 255, green: 235, blue: 156 };\nexport const MenuHighInd: RGB = { red: 251, green: 105, blue: 98 };\n\n//Dynamische Indikatoren (Abstufung gr\u00FCn nach gelb nach rot)\nexport const colorScale0: RGB = { red: 99, green: 190, blue: 123 };\nexport const colorScale1: RGB = { red: 129, green: 199, blue: 126 };\nexport const colorScale2: RGB = { red: 161, green: 208, blue: 127 };\nexport const colorScale3: RGB = { red: 129, green: 217, blue: 126 };\nexport const colorScale4: RGB = { red: 222, green: 226, blue: 131 };\nexport const colorScale5: RGB = { red: 254, green: 235, blue: 132 };\nexport const colorScale6: RGB = { red: 255, green: 210, blue: 129 };\nexport const colorScale7: RGB = { red: 251, green: 185, blue: 124 };\nexport const colorScale8: RGB = { red: 251, green: 158, blue: 117 };\nexport const colorScale9: RGB = { red: 248, green: 131, blue: 111 };\nexport const colorScale10: RGB = { red: 248, green: 105, blue: 107 };\n\n//Screensaver Default Theme Colors\nexport const scbackground: RGB = { red: 0, green: 0, blue: 0 };\nexport const scbackgroundInd1: RGB = { red: 255, green: 0, blue: 0 };\nexport const scbackgroundInd2: RGB = { red: 121, green: 222, blue: 121 };\nexport const scbackgroundInd3: RGB = { red: 255, green: 255, blue: 0 };\nexport const sctime: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctimeAMPM: RGB = { red: 255, green: 255, blue: 255 };\nexport const scdate: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctMainIcon: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctMainText: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctForecast1: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctForecast2: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctForecast3: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctForecast4: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctF1Icon: RGB = { red: 255, green: 235, blue: 156 };\nexport const sctF2Icon: RGB = { red: 255, green: 235, blue: 156 };\nexport const sctF3Icon: RGB = { red: 255, green: 235, blue: 156 };\nexport const sctF4Icon: RGB = { red: 255, green: 235, blue: 156 };\nexport const sctForecast1Val: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctForecast2Val: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctForecast3Val: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctForecast4Val: RGB = { red: 255, green: 255, blue: 255 };\nexport const scbar: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctMainIconAlt: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctMainTextAlt: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctTimeAdd: RGB = { red: 255, green: 255, blue: 255 };\n\n//Auto-Weather-Colors\nexport const swClearNight: RGB = { red: 150, green: 150, blue: 100 };\nexport const swCloudy: RGB = { red: 75, green: 75, blue: 75 };\nexport const swExceptional: RGB = { red: 255, green: 50, blue: 50 };\nexport const swFog: RGB = { red: 150, green: 150, blue: 150 };\nexport const swHail: RGB = { red: 200, green: 200, blue: 200 };\nexport const swLightning: RGB = { red: 200, green: 200, blue: 0 };\nexport const swLightningRainy: RGB = { red: 200, green: 200, blue: 150 };\nexport const swPartlycloudy: RGB = { red: 150, green: 150, blue: 150 };\nexport const swPouring: RGB = { red: 50, green: 50, blue: 255 };\nexport const swRainy: RGB = { red: 100, green: 100, blue: 255 };\nexport const swSnowy: RGB = { red: 150, green: 150, blue: 150 };\nexport const swSnowyRainy: RGB = { red: 150, green: 150, blue: 255 };\nexport const swSunny: RGB = { red: 255, green: 255, blue: 0 };\nexport const swWindy: RGB = { red: 150, green: 150, blue: 150 };\n\nconst defaultOnColor = HMIOn;\nconst defaultOffColor = HMIOff;\n\nexport function rgb_dec565(rgb: RGB): number {\n    //return ((Math.floor(rgb.red / 255 * 31) << 11) | (Math.floor(rgb.green / 255 * 63) << 5) | (Math.floor(rgb.blue / 255 * 31)));\n    return ((rgb.red >> 3) << 11) | ((rgb.green >> 2) << 5) | (rgb.blue >> 3);\n}\n\nexport function rgbHexToObject(rgb: string): RGB {\n    const result = { red: 0, green: 0, blue: 0 };\n    if (rgb.startsWith('#') && rgb.length == 7) {\n        result.red = parseInt(rgb.substring(1, 3), 16);\n        result.green = parseInt(rgb.substring(3, 5), 16);\n        result.blue = parseInt(rgb.substring(5), 16);\n    }\n    return result;\n}\n\nexport function scale(number: number, inMin: number, inMax: number, outMin: number, outMax: number): number {\n    return outMax + outMin - (((number - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin);\n}\n\nexport function HandleColorScale(valueScaletemp: string): number {\n    switch (valueScaletemp) {\n        case '0':\n            return rgb_dec565(colorScale0);\n        case '1':\n            return rgb_dec565(colorScale1);\n        case '2':\n            return rgb_dec565(colorScale2);\n        case '3':\n            return rgb_dec565(colorScale3);\n        case '4':\n            return rgb_dec565(colorScale4);\n        case '5':\n            return rgb_dec565(colorScale5);\n        case '6':\n            return rgb_dec565(colorScale6);\n        case '7':\n            return rgb_dec565(colorScale7);\n        case '8':\n            return rgb_dec565(colorScale8);\n        case '9':\n            return rgb_dec565(colorScale9);\n        case '10':\n            return rgb_dec565(colorScale10);\n        default:\n            return rgb_dec565(colorScale10);\n    }\n}\nexport function Interpolate(color1: RGB, color2: RGB, fraction: number): RGB {\n    const r: number = InterpolateNum(color1.red, color2.red, fraction);\n    const g: number = InterpolateNum(color1.green, color2.green, fraction);\n    const b: number = InterpolateNum(color1.blue, color2.blue, fraction);\n    return { red: Math.round(r), green: Math.round(g), blue: Math.round(b) };\n}\n\nexport function InterpolateNum(d1: number, d2: number, fraction: number): number {\n    return d1 + (d2 - d1) * fraction;\n}\n\nexport async function GetIconColor(pageItem: PageItemDataitems, value: boolean | number): Promise<string> {\n    // dimmer\n    const useColor = pageItem.data.useColor && (await pageItem.data.useColor.getBoolean());\n    const interpolateColor = pageItem.data.interpolateColor && (await pageItem.data.interpolateColor.getBoolean());\n    const onColor =\n        pageItem.data.color &&\n        'true' in pageItem.data.color &&\n        pageItem.data.color.true &&\n        (await pageItem.data.color.true.getRGBValue());\n    const offColor =\n        pageItem.data.color &&\n        'true' in pageItem.data.color &&\n        pageItem.data.color.true &&\n        (await pageItem.data.color.true.getRGBValue());\n    if (useColor && interpolateColor && typeof value === 'number') {\n        let val: number = typeof value === 'number' ? value : 0;\n        const maxValue =\n            (pageItem.data.maxValueBrightness && (await pageItem.data.maxValueBrightness.getNumber())) || 100;\n        const minValue =\n            (pageItem.data.minValueBrightness && (await pageItem.data.minValueBrightness.getNumber())) || 0;\n        val = val > maxValue ? maxValue : val;\n        val = val < minValue ? minValue : val;\n\n        return String(\n            rgb_dec565(\n                Interpolate(\n                    offColor ? offColor : defaultOffColor,\n                    onColor ? onColor : defaultOnColor,\n                    scale(100 - val, minValue, maxValue, 0, 1),\n                ),\n            ),\n        );\n    }\n    if (\n        (useColor && typeof value === 'boolean' && value) ||\n        (typeof value === 'number' &&\n            value >\n                (pageItem.data.minValueBrightness !== undefined\n                    ? (await pageItem.data.minValueBrightness.getNumber()) ?? 0\n                    : 0))\n    ) {\n        return String(rgb_dec565(onColor ? onColor : defaultOnColor));\n    }\n    return String(rgb_dec565(offColor ? offColor : defaultOffColor));\n}\n\n/**\n * Convert radians to degrees\n * @param rad radians to convert, expects rad in range +/- PI per Math.atan2\n * @returns {number} degrees equivalent of rad\n */\nexport function rad2deg(rad: number): number {\n    return (360 + (180 * rad) / Math.PI) % 360;\n}\n\nexport function ColorToHex(color: number): string {\n    const hexadecimal: string = color.toString(16);\n    return hexadecimal.length == 1 ? '0' + hexadecimal : hexadecimal;\n}\n\nexport function ConvertRGBtoHex(red: number, green: number, blue: number): string {\n    return '#' + ColorToHex(red) + ColorToHex(green) + ColorToHex(blue);\n}\nexport function ConvertHexToRgb(hex: string): RGB {\n    return {\n        red: parseInt(hex.substring(1, 3), 16),\n        green: parseInt(hex.substring(3, 5), 16),\n        blue: parseInt(hex.substring(5, 7), 16),\n    };\n}\n\n/**\n * Convert h,s,v values to r,g,b\n * @param hue in range [0, 360]\n * @param saturation in range 0 to 1\n * @param value in range 0 to 1\n * @returns {[number, number, number]} [r, g,b] in range 0 to 255\n */\nexport function hsv2rgb(hue: number, saturation: number, value: number): [number, number, number] {\n    hue /= 60;\n    const chroma = value * saturation;\n    const x = chroma * (1 - Math.abs((hue % 2) - 1));\n    const rgb: [number, number, number] =\n        hue <= 1\n            ? [chroma, x, 0]\n            : hue <= 2\n              ? [x, chroma, 0]\n              : hue <= 3\n                ? [0, chroma, x]\n                : hue <= 4\n                  ? [0, x, chroma]\n                  : hue <= 5\n                    ? [x, 0, chroma]\n                    : [chroma, 0, x];\n\n    return rgb.map((v) => (v + value - chroma) * 255) as [number, number, number];\n}\n\nexport function getHue(red: number, green: number, blue: number): number {\n    const min = Math.min(Math.min(red, green), blue);\n    const max = Math.max(Math.max(red, green), blue);\n\n    if (min == max) {\n        return 0;\n    }\n\n    let hue = 0;\n    if (max == red) {\n        hue = (green - blue) / (max - min);\n    } else if (max == green) {\n        hue = 2 + (blue - red) / (max - min);\n    } else {\n        hue = 4 + (red - green) / (max - min);\n    }\n\n    hue = hue * 60;\n    if (hue < 0) hue = hue + 360;\n\n    return Math.round(hue);\n}\n\nexport function pos_to_color(x: number, y: number): RGB {\n    let r = 160 / 2;\n    x = Math.round(((x - r) / r) * 100) / 100;\n    y = Math.round(((r - y) / r) * 100) / 100;\n\n    r = Math.sqrt(x * x + y * y);\n    let sat = 0;\n    if (r > 1) {\n        sat = 0;\n    } else {\n        sat = r;\n    }\n\n    const hsv = rad2deg(Math.atan2(y, x));\n    const rgb = hsv2rgb(hsv, sat, 1);\n\n    return { red: Math.round(rgb[0]), green: Math.round(rgb[1]), blue: Math.round(rgb[2]) };\n}\n\n/**\n *\n * @param red\n * @param green\n * @param blue\n * @returns\n */\nexport function rgb_to_cie(red: number, green: number, blue: number): string {\n    //Apply a gamma correction to the RGB values, which makes the color more vivid and more the like the color displayed on the screen of your device\n    const vred = red > 0.04045 ? Math.pow((red + 0.055) / (1.0 + 0.055), 2.4) : red / 12.92;\n    const vgreen = green > 0.04045 ? Math.pow((green + 0.055) / (1.0 + 0.055), 2.4) : green / 12.92;\n    const vblue = blue > 0.04045 ? Math.pow((blue + 0.055) / (1.0 + 0.055), 2.4) : blue / 12.92;\n\n    //RGB values to XYZ using the Wide RGB D65 conversion formula\n    const X = vred * 0.664511 + vgreen * 0.154324 + vblue * 0.162028;\n    const Y = vred * 0.283881 + vgreen * 0.668433 + vblue * 0.047685;\n    const Z = vred * 0.000088 + vgreen * 0.07231 + vblue * 0.986039;\n\n    //Calculate the xy values from the XYZ values\n    const ciex = (X / (X + Y + Z)).toFixed(4);\n    const ciey = (Y / (X + Y + Z)).toFixed(4);\n    const cie = '[' + ciex + ',' + ciey + ']';\n\n    return cie;\n}\nexport function isRGB(F: RGB | any): F is RGB {\n    return typeof F == 'object' && 'red' in F && 'blue' in F && 'green' in F;\n}\n"],
  "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",
  "names": []
}
