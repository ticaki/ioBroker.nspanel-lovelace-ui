{
  "version": 3,
  "sources": ["../../../src/lib/const/Color.ts"],
  "sourcesContent": ["import { RGB } from '../types/types';\n\nexport const HMIOff: RGB = { red: 68, green: 115, blue: 158 }; // Blue-Off - Original Entity Off\nexport const HMIOn: RGB = { red: 3, green: 169, blue: 244 }; // Blue-On\nexport const HMIDark: RGB = { red: 29, green: 29, blue: 29 }; // Original Background Color\nexport const Off: RGB = { red: 253, green: 128, blue: 0 }; // Orange-Off - nicer color transitions\nexport const On: RGB = { red: 253, green: 216, blue: 53 };\nexport const MSRed: RGB = { red: 251, green: 105, blue: 98 };\nexport const MSYellow: RGB = { red: 255, green: 235, blue: 156 };\nexport const MSGreen: RGB = { red: 121, green: 222, blue: 121 };\nexport const Red: RGB = { red: 255, green: 0, blue: 0 };\nexport const White: RGB = { red: 255, green: 255, blue: 255 };\nexport const Yellow: RGB = { red: 255, green: 255, blue: 0 };\nexport const Green: RGB = { red: 0, green: 255, blue: 0 };\nexport const Blue: RGB = { red: 0, green: 0, blue: 255 };\nexport const DarkBlue: RGB = { red: 0, green: 0, blue: 136 };\nexport const Gray: RGB = { red: 136, green: 136, blue: 136 };\nexport const Black: RGB = { red: 0, green: 0, blue: 0 };\nexport const Cyan: RGB = { red: 0, green: 255, blue: 255 };\nexport const Magenta: RGB = { red: 255, green: 0, blue: 255 };\nexport const colorSpotify: RGB = { red: 30, green: 215, blue: 96 };\nexport const colorAlexa: RGB = { red: 49, green: 196, blue: 243 };\nexport const colorSonos: RGB = { red: 216, green: 161, blue: 88 };\nexport const colorRadio: RGB = { red: 255, green: 127, blue: 0 };\nexport const BatteryFull: RGB = { red: 96, green: 176, blue: 62 };\nexport const BatteryEmpty: RGB = { red: 179, green: 45, blue: 25 };\n\n//Menu Icon Colors\nexport const Menu: RGB = { red: 150, green: 150, blue: 100 };\nexport const MenuLowInd: RGB = { red: 255, green: 235, blue: 156 };\nexport const MenuHighInd: RGB = { red: 251, green: 105, blue: 98 };\n\n//Dynamische Indikatoren (Abstufung gr\u00FCn nach gelb nach rot)\nexport const colorScale0: RGB = { red: 99, green: 190, blue: 123 };\nexport const colorScale1: RGB = { red: 129, green: 199, blue: 126 };\nexport const colorScale2: RGB = { red: 161, green: 208, blue: 127 };\nexport const colorScale3: RGB = { red: 129, green: 217, blue: 126 };\nexport const colorScale4: RGB = { red: 222, green: 226, blue: 131 };\nexport const colorScale5: RGB = { red: 254, green: 235, blue: 132 };\nexport const colorScale6: RGB = { red: 255, green: 210, blue: 129 };\nexport const colorScale7: RGB = { red: 251, green: 185, blue: 124 };\nexport const colorScale8: RGB = { red: 251, green: 158, blue: 117 };\nexport const colorScale9: RGB = { red: 248, green: 131, blue: 111 };\nexport const colorScale10: RGB = { red: 248, green: 105, blue: 107 };\n\n//Screensaver Default Theme Colors\nexport const scbackground: RGB = { red: 0, green: 0, blue: 0 };\nexport const scbackgroundInd1: RGB = { red: 255, green: 0, blue: 0 };\nexport const scbackgroundInd2: RGB = { red: 121, green: 222, blue: 121 };\nexport const scbackgroundInd3: RGB = { red: 255, green: 255, blue: 0 };\nexport const sctime: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctimeAMPM: RGB = { red: 255, green: 255, blue: 255 };\nexport const scdate: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctMainIcon: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctMainText: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctForecast1: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctForecast2: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctForecast3: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctForecast4: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctF1Icon: RGB = { red: 255, green: 235, blue: 156 };\nexport const sctF2Icon: RGB = { red: 255, green: 235, blue: 156 };\nexport const sctF3Icon: RGB = { red: 255, green: 235, blue: 156 };\nexport const sctF4Icon: RGB = { red: 255, green: 235, blue: 156 };\nexport const sctForecast1Val: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctForecast2Val: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctForecast3Val: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctForecast4Val: RGB = { red: 255, green: 255, blue: 255 };\nexport const scbar: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctMainIconAlt: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctMainTextAlt: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctTimeAdd: RGB = { red: 255, green: 255, blue: 255 };\n\n//Auto-Weather-Colors\nexport const swClearNight: RGB = { red: 150, green: 150, blue: 100 };\nexport const swCloudy: RGB = { red: 75, green: 75, blue: 75 };\nexport const swExceptional: RGB = { red: 255, green: 50, blue: 50 };\nexport const swFog: RGB = { red: 150, green: 150, blue: 150 };\nexport const swHail: RGB = { red: 200, green: 200, blue: 200 };\nexport const swLightning: RGB = { red: 200, green: 200, blue: 0 };\nexport const swLightningRainy: RGB = { red: 200, green: 200, blue: 150 };\nexport const swPartlycloudy: RGB = { red: 150, green: 150, blue: 150 };\nexport const swPouring: RGB = { red: 50, green: 50, blue: 255 };\nexport const swRainy: RGB = { red: 100, green: 100, blue: 255 };\nexport const swSnowy: RGB = { red: 150, green: 150, blue: 150 };\nexport const swSnowyRainy: RGB = { red: 150, green: 150, blue: 255 };\nexport const swSunny: RGB = { red: 255, green: 255, blue: 0 };\nexport const swWindy: RGB = { red: 150, green: 150, blue: 150 };\n\nexport function rgb_dec565(rgb: RGB): number {\n    //return ((Math.floor(rgb.red / 255 * 31) << 11) | (Math.floor(rgb.green / 255 * 63) << 5) | (Math.floor(rgb.blue / 255 * 31)));\n    return ((rgb.red >> 3) << 11) | ((rgb.green >> 2) << 5) | (rgb.blue >> 3);\n}\n\nexport function rgbHexToObject(rgb: string): RGB {\n    const result = { red: 0, green: 0, blue: 0 };\n    if (rgb.startsWith('#') && rgb.length == 7) {\n        result.red = parseInt(rgb.substring(1, 3), 16);\n        result.green = parseInt(rgb.substring(3, 5), 16);\n        result.blue = parseInt(rgb.substring(5), 16);\n    }\n    return result;\n}\n\nexport function scale(number: number, inMin: number, inMax: number, outMin: number, outMax: number): number {\n    return outMax + outMin - (((number - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin);\n}\n\nexport function HandleColorScale(valueScaletemp: string): number {\n    switch (valueScaletemp) {\n        case '0':\n            return rgb_dec565(colorScale0);\n        case '1':\n            return rgb_dec565(colorScale1);\n        case '2':\n            return rgb_dec565(colorScale2);\n        case '3':\n            return rgb_dec565(colorScale3);\n        case '4':\n            return rgb_dec565(colorScale4);\n        case '5':\n            return rgb_dec565(colorScale5);\n        case '6':\n            return rgb_dec565(colorScale6);\n        case '7':\n            return rgb_dec565(colorScale7);\n        case '8':\n            return rgb_dec565(colorScale8);\n        case '9':\n            return rgb_dec565(colorScale9);\n        case '10':\n            return rgb_dec565(colorScale10);\n        default:\n            return rgb_dec565(colorScale10);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
