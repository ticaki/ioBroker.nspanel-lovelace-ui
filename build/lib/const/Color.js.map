{
  "version": 3,
  "sources": ["../../../src/lib/const/Color.ts"],
  "sourcesContent": ["import { colord, extend } from 'colord';\nimport namesPlugin from 'colord/plugins/names';\nimport mixPlugin from 'colord/plugins/mix';\n\nextend([namesPlugin, mixPlugin]);\n\nexport type mixedOptions = {\n    swap?: boolean;\n    anchorHigh?: boolean;\n};\nexport type RGB = {\n    r: number;\n    g: number;\n    b: number;\n};\n\nexport interface ColorThemenInterface {\n    good: RGB;\n    bad: RGB;\n    true: RGB;\n    false: RGB;\n    activated: RGB;\n    deactivated: RGB;\n    attention: RGB;\n    info: RGB;\n    option1: RGB;\n    option2: RGB;\n    option3: RGB;\n    option4: RGB;\n    open: RGB;\n    close: RGB;\n}\n\n/**\n * check if Color has all propertys of ColorThemenInterface\n *\n * @param k just a key\n * @returns any\n */\nexport function test(k: keyof ColorThemenInterface): any {\n    return Color[k];\n}\nclass ColorBase {\n    constructor() {}\n    static good: RGB | string = 'default.color.from.start.good';\n    static bad: RGB | string = 'default.color.from.start.bad';\n    static true: RGB | string = 'default.color.from.start.true';\n    static false: RGB | string = 'default.color.from.start.false';\n    static activated: RGB | string = 'default.color.from.start.activated';\n    static deactivated: RGB | string = 'default.color.from.start.deactivated';\n    static attention: RGB | string = 'default.color.from.start.attention';\n    static info: RGB | string = 'default.color.from.start.info';\n    static option1: RGB | string = 'default.color.from.start.option1';\n    static option2: RGB | string = 'default.color.from.start.option2';\n    static option3: RGB | string = 'default.color.from.start.option3';\n    static option4: RGB | string = 'default.color.from.start.option3';\n    static open: RGB | string = 'default.color.from.start.open';\n    static close: RGB | string = 'default.color.from.start.close';\n}\n\nexport class Color extends ColorBase {\n    static readonly HMIOff: RGB = { r: 68, g: 115, b: 158 }; // Blue-Off - Original Entity Off\n    static readonly HMIOn: RGB = { r: 3, g: 169, b: 244 }; // Blue-On\n    static readonly HMIDark: RGB = { r: 29, g: 29, b: 29 }; // Original Background Color\n    static readonly Off: RGB = { r: 253, g: 128, b: 0 }; // Orange-Off - nicer color transitions\n    static readonly On: RGB = { r: 253, g: 216, b: 53 };\n    static readonly MSRed: RGB = { r: 251, g: 105, b: 98 };\n    static readonly MSYellow: RGB = { r: 255, g: 235, b: 156 };\n    static readonly MSGreen: RGB = { r: 121, g: 222, b: 121 };\n    static readonly Red: RGB = { r: 255, g: 0, b: 0 };\n    static readonly White: RGB = { r: 255, g: 255, b: 255 };\n    static readonly Yellow: RGB = { r: 255, g: 255, b: 0 };\n    static readonly Green: RGB = { r: 0, g: 255, b: 0 };\n    static readonly Blue: RGB = { r: 0, g: 0, b: 255 };\n    static readonly DarkBlue: RGB = { r: 0, g: 0, b: 136 };\n    static readonly Gray: RGB = { r: 136, g: 136, b: 136 };\n    static readonly Black: RGB = { r: 0, g: 0, b: 0 };\n    static readonly Cyan: RGB = { r: 0, g: 255, b: 255 };\n    static readonly Magenta: RGB = { r: 255, g: 0, b: 255 };\n    static readonly colorSpotify: RGB = { r: 30, g: 215, b: 96 };\n    static readonly colorAlexa: RGB = { r: 49, g: 196, b: 243 };\n    static readonly colorSonos: RGB = { r: 216, g: 161, b: 88 };\n    static readonly colorRadio: RGB = { r: 255, g: 127, b: 0 };\n    static readonly BatteryFull: RGB = { r: 96, g: 176, b: 62 };\n    static readonly BatteryEmpty: RGB = { r: 179, g: 45, b: 25 };\n\n    //Menu Icon Colors\n    static readonly Menu: RGB = { r: 150, g: 150, b: 100 };\n    static readonly MenuLowInd: RGB = { r: 255, g: 235, b: 156 };\n    static readonly MenuHighInd: RGB = { r: 251, g: 105, b: 98 };\n\n    //Dynamische Indikatoren (Abstufung gr\u00FCn nach gelb nach rot)\n    static readonly colorScale0: RGB = { r: 99, g: 190, b: 123 };\n    static readonly colorScale1: RGB = { r: 129, g: 199, b: 126 };\n    static readonly colorScale2: RGB = { r: 161, g: 208, b: 127 };\n    static readonly colorScale3: RGB = { r: 129, g: 217, b: 126 };\n    static readonly colorScale4: RGB = { r: 222, g: 226, b: 131 };\n    static readonly colorScale5: RGB = { r: 254, g: 235, b: 132 };\n    static readonly colorScale6: RGB = { r: 255, g: 210, b: 129 };\n    static readonly colorScale7: RGB = { r: 251, g: 185, b: 124 };\n    static readonly colorScale8: RGB = { r: 251, g: 158, b: 117 };\n    static readonly colorScale9: RGB = { r: 248, g: 131, b: 111 };\n    static readonly colorScale10: RGB = { r: 248, g: 105, b: 107 };\n\n    //Screensaver Default Theme Colors\n    static readonly scbackground: RGB = { r: 0, g: 0, b: 0 };\n    static readonly scbackgroundInd1: RGB = { r: 255, g: 0, b: 0 };\n    static readonly scbackgroundInd2: RGB = { r: 121, g: 222, b: 121 };\n    static readonly scbackgroundInd3: RGB = { r: 255, g: 255, b: 0 };\n    static readonly sctime: RGB = { r: 255, g: 255, b: 255 };\n    static readonly sctimeAMPM: RGB = { r: 255, g: 255, b: 255 };\n    static readonly scdate: RGB = { r: 255, g: 255, b: 255 };\n    static readonly sctMainIcon: RGB = { r: 255, g: 255, b: 255 };\n    static readonly sctMainText: RGB = { r: 255, g: 255, b: 255 };\n    static readonly sctForecast1: RGB = { r: 255, g: 255, b: 255 };\n    static readonly sctForecast2: RGB = { r: 255, g: 255, b: 255 };\n    static readonly sctForecast3: RGB = { r: 255, g: 255, b: 255 };\n    static readonly sctForecast4: RGB = { r: 255, g: 255, b: 255 };\n    static readonly sctF1Icon: RGB = { r: 255, g: 235, b: 156 };\n    static readonly sctF2Icon: RGB = { r: 255, g: 235, b: 156 };\n    static readonly sctF3Icon: RGB = { r: 255, g: 235, b: 156 };\n    static readonly sctF4Icon: RGB = { r: 255, g: 235, b: 156 };\n    static readonly sctForecast1Val: RGB = { r: 255, g: 255, b: 255 };\n    static readonly sctForecast2Val: RGB = { r: 255, g: 255, b: 255 };\n    static readonly sctForecast3Val: RGB = { r: 255, g: 255, b: 255 };\n    static readonly sctForecast4Val: RGB = { r: 255, g: 255, b: 255 };\n    static readonly scbar: RGB = { r: 255, g: 255, b: 255 };\n    static readonly sctMainIconAlt: RGB = { r: 255, g: 255, b: 255 };\n    static readonly sctMainTextAlt: RGB = { r: 255, g: 255, b: 255 };\n    static readonly sctTimeAdd: RGB = { r: 255, g: 255, b: 255 };\n\n    //Auto-Weather-Colors\n    static readonly swClearNight: RGB = { r: 150, g: 150, b: 100 };\n    static readonly swCloudy: RGB = { r: 75, g: 75, b: 75 };\n    static readonly swExceptional: RGB = { r: 255, g: 50, b: 50 };\n    static readonly swFog: RGB = { r: 150, g: 150, b: 150 };\n    static readonly swHail: RGB = { r: 200, g: 200, b: 200 };\n    static readonly swLightning: RGB = { r: 200, g: 200, b: 0 };\n    static readonly swLightningRainy: RGB = { r: 200, g: 200, b: 150 };\n    static readonly swPartlycloudy: RGB = { r: 150, g: 150, b: 150 };\n    static readonly swPouring: RGB = { r: 50, g: 50, b: 255 };\n    static readonly swRainy: RGB = { r: 100, g: 100, b: 255 };\n    static readonly swSnowy: RGB = { r: 150, g: 150, b: 150 };\n    static readonly swSnowyRainy: RGB = { r: 150, g: 150, b: 255 };\n    static readonly swSunny: RGB = { r: 255, g: 255, b: 0 };\n    static readonly swWindy: RGB = { r: 150, g: 150, b: 150 };\n\n    static getColorFromDefault(s: any): RGB | string {\n        if (typeof s === 'string') {\n            switch (s) {\n                case 'default.color.from.start.good':\n                    return Color.good;\n                case 'default.color.from.start.bad':\n                    return Color.bad;\n                case 'default.color.from.start.true':\n                    return Color.true;\n                case 'default.color.from.start.false':\n                    return Color.false;\n                case 'default.color.from.start.activated':\n                    return Color.activated;\n                case 'default.color.from.start.deactivated':\n                    return Color.deactivated;\n                case 'default.color.from.start.attention':\n                    return Color.attention;\n                case 'default.color.from.start.info':\n                    return Color.info;\n                case 'default.color.from.start.option1':\n                    return Color.option1;\n                case 'default.color.from.start.option2':\n                    return Color.option2;\n                case 'default.color.from.start.option3':\n                    return Color.option3;\n                case 'default.color.from.start.option4':\n                    return Color.option4;\n            }\n        }\n        return s;\n    }\n    static currentTheme: ColorThemenInterface = {\n        good: Color.Green,\n        bad: Color.Red,\n        true: Color.Green,\n        false: Color.Red,\n        activated: Color.Yellow,\n        deactivated: Color.Gray,\n        attention: Color.Cyan,\n        info: Color.White,\n        option1: Color.Yellow,\n        option2: Color.MSYellow,\n        option3: Color.MSRed,\n        option4: Color.MSGreen,\n        open: Color.Red,\n        close: Color.Green,\n    };\n\n    /**\n     * set color theme...\n     *\n     * @param s ColorThemenInterface\n     */\n    static setTheme(s: ColorThemenInterface): void {\n        for (const a in s) {\n            Color[a as keyof ColorThemenInterface] = s[a as keyof ColorThemenInterface];\n        }\n    }\n\n    static rgb_dec565(rgb: RGB): number {\n        //return ((Math.floor(rgb.red / 255 * 31) << 11) | (Math.floor(rgb.green / 255 * 63) << 5) | (Math.floor(rgb.blue / 255 * 31)));\n        return ((rgb.r >> 3) << 11) | ((rgb.g >> 2) << 5) | (rgb.b >> 3);\n    }\n\n    static decToRgb(decimal: number): RGB {\n        return {\n            r: ((decimal >> 11) << 3) & 0xff,\n            g: ((decimal >> 5) << 2) & 0xff,\n            b: (decimal << 3) & 0xff,\n        };\n    }\n\n    static rgbHexToObject(rgb: string): RGB {\n        const result: RGB = { r: 0, g: 0, b: 0 };\n        if (rgb.startsWith('#') && rgb.length == 7) {\n            result.r = parseInt(rgb.substring(1, 3), 16);\n            result.g = parseInt(rgb.substring(3, 5), 16);\n            result.b = parseInt(rgb.substring(5), 16);\n        }\n        return result;\n    }\n\n    static scale(number: number, inMin: number | null, inMax: number | null, outMin: number, outMax: number): number {\n        if (inMin === null || inMax === null) {\n            return number;\n        }\n        return outMax + outMin - (((number - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin);\n    }\n\n    static mixColorHue(startRGB: RGB, endRGB: RGB, t: number, _options?: mixedOptions): RGB {\n        const startHSB = colord(startRGB).toHsv();\n        const endHSB = colord(endRGB).toHsv();\n\n        t = Math.min(1, Math.max(0, t));\n\n        // Hue muss \u00FCber den k\u00FCrzesten Weg interpoliert werden\n        const deltaH = ((endHSB.h - startHSB.h + 540) % 360) - 180;\n        const h = (startHSB.h + t * deltaH + 360) % 360;\n\n        const s = startHSB.s + t * (endHSB.s - startHSB.s);\n        const v = startHSB.v + t * (endHSB.v - startHSB.v);\n\n        return colord({ h, s, v }).toRgb();\n    }\n\n    static HandleColorScale(valueScaletemp: string): number {\n        switch (valueScaletemp) {\n            case '0':\n                return Color.rgb_dec565(Color.colorScale0);\n            case '1':\n                return Color.rgb_dec565(Color.colorScale1);\n            case '2':\n                return Color.rgb_dec565(Color.colorScale2);\n            case '3':\n                return Color.rgb_dec565(Color.colorScale3);\n            case '4':\n                return Color.rgb_dec565(Color.colorScale4);\n            case '5':\n                return Color.rgb_dec565(Color.colorScale5);\n            case '6':\n                return Color.rgb_dec565(Color.colorScale6);\n            case '7':\n                return Color.rgb_dec565(Color.colorScale7);\n            case '8':\n                return Color.rgb_dec565(Color.colorScale8);\n            case '9':\n                return Color.rgb_dec565(Color.colorScale9);\n            case '10':\n                return Color.rgb_dec565(Color.colorScale10);\n            default:\n                return Color.rgb_dec565(Color.colorScale10);\n        }\n    }\n    static Interpolate(color1: RGB, color2: RGB, fraction: number): RGB {\n        const r: number = Color.InterpolateNum(color1.r, color2.r, fraction);\n        const g: number = Color.InterpolateNum(color1.g, color2.g, fraction);\n        const b: number = Color.InterpolateNum(color1.b, color2.b, fraction);\n        return { r: Math.round(r), g: Math.round(g), b: Math.round(b) };\n    }\n\n    static triGradAnchor(_from: RGB, _to: RGB, factor: number, _options?: mixedOptions): RGB {\n        factor = _options?.anchorHigh ? (1 - factor) / 2 + 0.5 : factor / 2;\n        return Color.perc2color(_from, _to, factor, { ..._options });\n    }\n    /**\n     * Interpolate between two colors\n     *\n     * @param _from from this color\n     * @param _to to this\n     * @param factor 0-1 mix value\n     * @param _options swap input and use triGradAnchor\n     * @returns RGB\n     */\n    static perc2color(_from: RGB, _to: RGB, factor: number, _options?: mixedOptions): RGB {\n        factor = Math.min(1, Math.max(0, factor));\n        let r = 0;\n        let g = 0;\n        const b = 0;\n        if (_options?.swap === false) {\n            if (factor < 0.5) {\n                r = 255;\n                g = Math.round(510 * factor);\n            } else {\n                g = 255;\n                r = Math.round(510 - 510 * factor);\n            }\n        } else {\n            if (factor < 0.5) {\n                g = 255;\n                r = Math.round(510 * factor);\n            } else {\n                r = 255;\n                g = Math.round(510 - 510 * factor);\n            }\n        }\n        return { r, g, b };\n    }\n    /**\n     *\n     * @param c1 from this color\n     * @param c2 to this\n     * @param r 0-1 mix value\n     * @param _options no use\n     * @returns RGB\n     */\n    static mixColorCie(c1: RGB, c2: RGB, r: number, _options?: mixedOptions): RGB {\n        return colord(c1).mix(c2, r).toRgb();\n    }\n\n    /**\n     *\n     * @param c1 from this color\n     * @param c2 to this\n     * @param x 0-1 mix value\n     * @param _options no use\n     * @returns RGB\n     */\n    static mixColor(c1: RGB, c2: RGB, x: number, _options?: mixedOptions): RGB {\n        const r = Math.round(c1.r + (c2.r - c1.r) * x);\n        const g = Math.round(c1.g + (c2.g - c1.g) * x);\n        const b = Math.round(c1.b + (c2.b - c1.b) * x);\n        return { r, g, b };\n    }\n    static InterpolateNum(d1: number, d2: number, fraction: number): number {\n        return d1 + (d2 - d1) * fraction;\n    }\n    static brightness(c: RGB, s: number): RGB {\n        //s = Color.scale(s, 0, 1, 0, 0.6);\n        let r = c.r * s;\n        let g = c.g * s;\n        let b = c.b * s;\n        r = Math.min(255, Math.max(1, r));\n        g = Math.min(255, Math.max(1, g));\n        b = Math.min(255, Math.max(1, b));\n        return { r, g, b };\n    }\n\n    static darken(c: RGB, s: number): RGB {\n        s = Color.scale(s, 0, 1, 0, 0.5);\n        return colord(c).darken(s).toRgb();\n    }\n    /**\n     * Convert radians to degrees\n     *\n     * @param rad radians to convert, expects rad in range +/- PI per Math.atan2\n     * @returns degrees equivalent of rad\n     */\n    static rad2deg(rad: number): number {\n        return (360 + (180 * rad) / Math.PI) % 360;\n    }\n\n    static ColorToHex(color: number): string {\n        const hexadecimal: string = color.toString(16);\n        return hexadecimal.length == 1 ? `0${hexadecimal}` : hexadecimal;\n    }\n\n    static ConvertRGBtoHex(red: number, green: number, blue: number): string {\n        return `#${Color.ColorToHex(red)}${Color.ColorToHex(green)}${Color.ColorToHex(blue)}`;\n    }\n    static ConvertWithColordtoRgb(colorName: string): RGB {\n        return colord(colorName).toRgb();\n    }\n    static ConvertHexToRgb(hex: string): RGB {\n        return {\n            r: parseInt(hex.substring(1, 3), 16),\n            g: parseInt(hex.substring(3, 5), 16),\n            b: parseInt(hex.substring(5, 7), 16),\n        };\n    }\n\n    /**\n     * Convert h,s,v values to r,g,b\n     *\n     * @param hue in range [0, 360]\n     * @param saturation in range 0 to 1\n     * @param value in range 0 to 1\n     * @returns [r, g,b] in range 0 to 255\n     */\n    static hsv2rgb(hue: number, saturation: number, value: number): [number, number, number] {\n        hue /= 60;\n        const chroma = value * saturation;\n        const x = chroma * (1 - Math.abs((hue % 2) - 1));\n        const rgb: [number, number, number] =\n            hue <= 1\n                ? [chroma, x, 0]\n                : hue <= 2\n                  ? [x, chroma, 0]\n                  : hue <= 3\n                    ? [0, chroma, x]\n                    : hue <= 4\n                      ? [0, x, chroma]\n                      : hue <= 5\n                        ? [x, 0, chroma]\n                        : [chroma, 0, x];\n\n        return rgb.map(v => (v + value - chroma) * 255) as [number, number, number];\n    }\n    static hsv2RGB(hue: number, saturation: number, value: number): RGB {\n        const arr = Color.hsv2rgb(hue, saturation, value);\n        return { r: arr[0], g: arr[1], b: arr[2] };\n    }\n\n    static hsvtodec(hue: number | null, saturation: number, value: number): string | null {\n        if (hue === null) {\n            return null;\n        }\n        const result = Color.hsv2rgb(hue, saturation, value);\n        return String(Color.rgb_dec565({ r: result[0], g: result[1], b: result[2] }));\n    }\n\n    static resultToRgb(r: string): RGB {\n        const arr = r.split('|');\n        return Color.pos_to_color(parseInt(arr[0]), parseInt(arr[1]));\n    }\n    static getHue(red: number, green: number, blue: number): number {\n        const min = Math.min(Math.min(red, green), blue);\n        const max = Math.max(Math.max(red, green), blue);\n\n        if (min == max) {\n            return 0;\n        }\n\n        let hue = 0;\n        if (max == red) {\n            hue = (green - blue) / (max - min);\n        } else if (max == green) {\n            hue = 2 + (blue - red) / (max - min);\n        } else {\n            hue = 4 + (red - green) / (max - min);\n        }\n\n        hue = hue * 60;\n        if (hue < 0) {\n            hue = hue + 360;\n        }\n\n        return Math.round(hue);\n    }\n\n    static pos_to_color(x: number, y: number): RGB {\n        let r = 160 / 2;\n        x = Math.round(((x - r) / r) * 100) / 100;\n        y = Math.round(((r - y) / r) * 100) / 100;\n\n        r = Math.sqrt(x * x + y * y);\n        let sat = 0;\n        if (r > 1) {\n            sat = 0;\n        } else {\n            sat = r;\n        }\n\n        const hsv = Color.rad2deg(Math.atan2(y, x));\n        const rgb = Color.hsv2rgb(hsv, sat, 1);\n\n        return { r: Math.round(rgb[0]), g: Math.round(rgb[1]), b: Math.round(rgb[2]) };\n    }\n\n    /**\n     * Convert RGB to CIE 1931\n     *\n     * @param red red value\n     * @param green green value\n     * @param blue blue value\n     * @returns CIE 1931 color space\n     */\n    static rgb_to_cie(red: number, green: number, blue: number): string {\n        //Apply a gamma correction to the RGB values, which makes the color more vivid and more the like the color displayed on the screen of your device\n        const vred = red > 0.04045 ? Math.pow((red + 0.055) / (1.0 + 0.055), 2.4) : red / 12.92;\n        const vgreen = green > 0.04045 ? Math.pow((green + 0.055) / (1.0 + 0.055), 2.4) : green / 12.92;\n        const vblue = blue > 0.04045 ? Math.pow((blue + 0.055) / (1.0 + 0.055), 2.4) : blue / 12.92;\n\n        //RGB values to XYZ using the Wide RGB D65 conversion formula\n        const X = vred * 0.664511 + vgreen * 0.154324 + vblue * 0.162028;\n        const Y = vred * 0.283881 + vgreen * 0.668433 + vblue * 0.047685;\n        const Z = vred * 0.000088 + vgreen * 0.07231 + vblue * 0.986039;\n\n        //Calculate the xy values from the XYZ values\n        const ciex = (X / (X + Y + Z)).toFixed(4);\n        const ciey = (Y / (X + Y + Z)).toFixed(4);\n        const cie = `[${ciex},${ciey}]`;\n\n        return cie;\n    }\n    static isRGB(F: any): F is RGB {\n        return typeof F == 'object' && 'r' in F && 'b' in F && 'g' in F;\n    }\n\n    static isScriptRGB(F: any): F is ScriptConfig.RGB {\n        return typeof F == 'object' && 'red' in F && 'blue' in F && 'green' in F;\n    }\n\n    static convertScriptRGBtoRGB(F: any): RGB {\n        return { r: F.red, g: F.green, b: F.blue };\n    }\n\n    static isOldRGB(F: any): F is RGB {\n        return this.isRGB(F);\n    }\n    /*\nstatic getBlendedColorfunction(color: RGB | null, percent: number) {\n    // limit percent between 0 and 1.\n    // this percent is the amount of 'color' rgb components to use\n    let p = percent > 0 ? percent : 0;\n    p = p < 1 ? p : 1;\n\n    // amount of 'this' rgb components to use\n    const tp = 1 - p;\n\n    // blend the colors\n    const red = Math.round(tp * this.r + p * color.r);\n    const green = Math.round(tp * this.g + p * color.g);\n    const blue = Math.round(tp * this.b + p * color.b);\n\n    // return new color object\n    return (red, green, blue);\n} // getBlendedColor ()\nvar newColor = c.getBlendedColor(new Color('#ffffff'), 0.50);*/\n    static readonly kelvinToRGB: { [key: number]: RGB } = {\n        1000: { r: 255, g: 56, b: 0 },\n        1100: { r: 255, g: 71, b: 0 },\n        1200: { r: 255, g: 83, b: 0 },\n        1300: { r: 255, g: 93, b: 0 },\n        1400: { r: 255, g: 101, b: 0 },\n        1500: { r: 255, g: 109, b: 0 },\n        1600: { r: 255, g: 115, b: 0 },\n        1700: { r: 255, g: 121, b: 0 },\n        1800: { r: 255, g: 126, b: 0 },\n        1900: { r: 255, g: 131, b: 0 },\n        2000: { r: 255, g: 138, b: 18 },\n        2100: { r: 255, g: 142, b: 33 },\n        2200: { r: 255, g: 147, b: 44 },\n        2300: { r: 255, g: 152, b: 54 },\n        2400: { r: 255, g: 157, b: 63 },\n        2500: { r: 255, g: 161, b: 72 },\n        2600: { r: 255, g: 165, b: 79 },\n        2700: { r: 255, g: 169, b: 87 },\n        2800: { r: 255, g: 173, b: 94 },\n        2900: { r: 255, g: 177, b: 101 },\n        3000: { r: 255, g: 180, b: 107 },\n        3100: { r: 255, g: 184, b: 114 },\n        3200: { r: 255, g: 187, b: 120 },\n        3300: { r: 255, g: 190, b: 126 },\n        3400: { r: 255, g: 193, b: 132 },\n        3500: { r: 255, g: 196, b: 137 },\n        3600: { r: 255, g: 199, b: 143 },\n        3700: { r: 255, g: 201, b: 148 },\n        3800: { r: 255, g: 204, b: 153 },\n        3900: { r: 255, g: 206, b: 159 },\n        4000: { r: 255, g: 209, b: 163 },\n        4100: { r: 255, g: 211, b: 168 },\n        4200: { r: 255, g: 213, b: 173 },\n        4300: { r: 255, g: 215, b: 177 },\n        4400: { r: 255, g: 217, b: 182 },\n        4500: { r: 255, g: 219, b: 186 },\n        4600: { r: 255, g: 221, b: 190 },\n        4700: { r: 255, g: 223, b: 194 },\n        4800: { r: 255, g: 225, b: 198 },\n        4900: { r: 255, g: 227, b: 202 },\n        5000: { r: 255, g: 228, b: 206 },\n        5100: { r: 255, g: 230, b: 210 },\n        5200: { r: 255, g: 232, b: 213 },\n        5300: { r: 255, g: 233, b: 217 },\n        5400: { r: 255, g: 235, b: 220 },\n        5500: { r: 255, g: 236, b: 224 },\n        5600: { r: 255, g: 238, b: 227 },\n        5700: { r: 255, g: 239, b: 230 },\n        5800: { r: 255, g: 240, b: 233 },\n        5900: { r: 255, g: 242, b: 236 },\n        6000: { r: 255, g: 243, b: 239 },\n        6100: { r: 255, g: 244, b: 242 },\n        6200: { r: 255, g: 245, b: 245 },\n        6300: { r: 255, g: 246, b: 247 },\n        6400: { r: 255, g: 248, b: 251 },\n        6500: { r: 255, g: 249, b: 253 },\n        6600: { r: 254, g: 249, b: 255 },\n        6700: { r: 252, g: 247, b: 255 },\n        6800: { r: 249, g: 246, b: 255 },\n        6900: { r: 247, g: 245, b: 255 },\n        7000: { r: 245, g: 243, b: 255 },\n        7100: { r: 243, g: 242, b: 255 },\n        7200: { r: 240, g: 241, b: 255 },\n        7300: { r: 239, g: 240, b: 255 },\n        7400: { r: 237, g: 239, b: 255 },\n        7500: { r: 235, g: 238, b: 255 },\n        7600: { r: 233, g: 237, b: 255 },\n        7700: { r: 231, g: 236, b: 255 },\n        7800: { r: 230, g: 235, b: 255 },\n        7900: { r: 228, g: 234, b: 255 },\n        8000: { r: 227, g: 233, b: 255 },\n        8100: { r: 225, g: 232, b: 255 },\n        8200: { r: 224, g: 231, b: 255 },\n        8300: { r: 222, g: 230, b: 255 },\n        8400: { r: 221, g: 230, b: 255 },\n        8500: { r: 220, g: 229, b: 255 },\n        8600: { r: 218, g: 229, b: 255 },\n        8700: { r: 217, g: 227, b: 255 },\n        8800: { r: 216, g: 227, b: 255 },\n        8900: { r: 215, g: 226, b: 255 },\n        9000: { r: 214, g: 225, b: 255 },\n        9100: { r: 212, g: 225, b: 255 },\n        9200: { r: 211, g: 224, b: 255 },\n        9300: { r: 210, g: 223, b: 255 },\n        9400: { r: 209, g: 223, b: 255 },\n        9500: { r: 208, g: 222, b: 255 },\n        9600: { r: 207, g: 221, b: 255 },\n        9700: { r: 207, g: 221, b: 255 },\n        9800: { r: 206, g: 220, b: 255 },\n        9900: { r: 205, g: 220, b: 255 },\n        10000: { r: 207, g: 218, b: 255 },\n        10100: { r: 207, g: 218, b: 255 },\n        10200: { r: 206, g: 217, b: 255 },\n        10300: { r: 205, g: 217, b: 255 },\n        10400: { r: 204, g: 216, b: 255 },\n        10500: { r: 204, g: 216, b: 255 },\n        10600: { r: 203, g: 215, b: 255 },\n        10700: { r: 202, g: 215, b: 255 },\n        10800: { r: 202, g: 214, b: 255 },\n        10900: { r: 201, g: 214, b: 255 },\n        11000: { r: 200, g: 213, b: 255 },\n        11100: { r: 200, g: 213, b: 255 },\n        11200: { r: 199, g: 212, b: 255 },\n        11300: { r: 198, g: 212, b: 255 },\n        11400: { r: 198, g: 212, b: 255 },\n        11500: { r: 197, g: 211, b: 255 },\n        11600: { r: 197, g: 211, b: 255 },\n        11700: { r: 197, g: 210, b: 255 },\n        11800: { r: 196, g: 210, b: 255 },\n        11900: { r: 195, g: 210, b: 255 },\n        12000: { r: 195, g: 209, b: 255 },\n    };\n}\n"],
  "mappings": "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IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,KAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,KAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,KAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,KAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,KAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,KAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,KAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAChC,MAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAChC,MAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EACpC;AACJ;",
  "names": ["namesPlugin", "mixPlugin"]
}
