{
  "version": 3,
  "sources": ["../../../src/lib/const/Color.ts"],
  "sourcesContent": ["import { colord, extend } from 'colord';\nimport namesPlugin from 'colord/plugins/names';\nimport mixPlugin from 'colord/plugins/mix';\n\nextend([namesPlugin, mixPlugin]);\n\nexport type mixedOptions = {\n    swap?: boolean;\n    anchorHigh?: boolean;\n};\nexport type RGB = {\n    r: number;\n    g: number;\n    b: number;\n};\n\nexport type hex = `#${string}`;\n\ninterface MixedOptions {\n    swap?: boolean;\n}\nexport interface ColorThemenInterface {\n    good: RGB;\n    bad: RGB;\n    true: RGB;\n    false: RGB;\n    activated: RGB;\n    deactivated: RGB;\n    attention: RGB;\n    info: RGB;\n    option1: RGB;\n    option2: RGB;\n    option3: RGB;\n    option4: RGB;\n    open: RGB;\n    close: RGB;\n    hot: RGB;\n    cold: RGB;\n    on: RGB;\n    off: RGB;\n    light: RGB;\n    dark: RGB;\n    warning?: RGB;\n    success?: RGB;\n    neutral?: RGB;\n    background?: RGB;\n    highlight?: RGB;\n    disabled?: RGB;\n    // Navigation\n    navLeft: RGB;\n    navRight: RGB;\n    navDownLeft: RGB;\n    navDownRight: RGB;\n    navDown: RGB;\n    navHome: RGB;\n    navParent: RGB;\n    sunny?: RGB;\n    partlyCloudy?: RGB;\n    cloudy?: RGB;\n    fog?: RGB;\n    hail?: RGB;\n    lightning?: RGB;\n    lightningRainy?: RGB;\n    pouring?: RGB;\n    rainy?: RGB;\n    snowy?: RGB;\n    snowyHeavy?: RGB;\n    snowyRainy?: RGB;\n    windy?: RGB;\n    tornado?: RGB;\n    clearNight?: RGB;\n    exceptional?: RGB;\n    foreground?: RGB;\n    fgTime?: RGB;\n    fgTimeAmPm?: RGB;\n    fgDate?: RGB;\n    fgMain?: RGB;\n    fgMainAlt?: RGB;\n    fgTimeAdd?: RGB;\n    fgForecast?: RGB;\n    fgBar?: RGB;\n    solar?: RGB;\n    temperature?: RGB;\n    gust?: RGB;\n    sunrise?: RGB;\n    sunset?: RGB;\n    // Neue Media-spezifische Theme-Eintr\u00E4ge\n    mediaArtistOn?: RGB;\n    mediaArtistOff?: RGB;\n    mediaTitleOn?: RGB;\n    mediaTitleOff?: RGB;\n    mediaOnOffColor?: RGB;\n}\n\n/**\n * check if Color has all propertys of ColorThemenInterface\n *\n * @param k just a key\n * @returns any\n */\nexport function test(k: keyof ColorThemenInterface): any {\n    return Color[k];\n}\nclass ColorBase {\n    constructor() {}\n    static good: RGB | string = 'default.color.from.start.good';\n    static bad: RGB | string = 'default.color.from.start.bad';\n    static true: RGB | string = 'default.color.from.start.true';\n    static false: RGB | string = 'default.color.from.start.false';\n    static activated: RGB | string = 'default.color.from.start.activated';\n    static deactivated: RGB | string = 'default.color.from.start.deactivated';\n    static attention: RGB | string = 'default.color.from.start.attention';\n    static info: RGB | string = 'default.color.from.start.info';\n    static option1: RGB | string = 'default.color.from.start.option1';\n    static option2: RGB | string = 'default.color.from.start.option2';\n    static option3: RGB | string = 'default.color.from.start.option3';\n    static option4: RGB | string = 'default.color.from.start.option4';\n    static open: RGB | string = 'default.color.from.start.open';\n    static close: RGB | string = 'default.color.from.start.close';\n    static hot: RGB | string = 'default.color.from.start.hot';\n    static cold: RGB | string = 'default.color.from.start.cold';\n    static on: RGB | string = 'default.color.from.start.on';\n    static off: RGB | string = 'default.color.from.start.off';\n    static light: RGB | string = 'default.color.from.start.light';\n    static dark: RGB | string = 'default.color.from.start.dark';\n    static warning: RGB | string = 'default.color.from.start.warning';\n    static success: RGB | string = 'default.color.from.start.success';\n    static neutral: RGB | string = 'default.color.from.start.neutral';\n    static background: RGB | string = 'default.color.from.start.background';\n    static highlight: RGB | string = 'default.color.from.start.highlight';\n    static disabled: RGB | string = 'default.color.from.start.disabled';\n    // Navigation\n    static navLeft: RGB | string = 'default.color.from.start.navLeft';\n    static navRight: RGB | string = 'default.color.from.start.navRight';\n    static navDownLeft: RGB | string = 'default.color.from.start.navDownLeft';\n    static navDownRight: RGB | string = 'default.color.from.start.navDownRight';\n    static navDown: RGB | string = 'default.color.from.start.navDown';\n    static navHome: RGB | string = 'default.color.from.start.navHome';\n    static navParent: RGB | string = 'default.color.from.start.navParent';\n    static sunny: RGB | string = 'default.color.from.start.sunny';\n    static partlyCloudy: RGB | string = 'default.color.from.start.partlyCloudy';\n    static cloudy: RGB | string = 'default.color.from.start.cloudy';\n    static fog: RGB | string = 'default.color.from.start.fog';\n    static hail: RGB | string = 'default.color.from.start.hail';\n    static lightning: RGB | string = 'default.color.from.start.lightning';\n    static lightningRainy: RGB | string = 'default.color.from.start.lightningRainy';\n    static pouring: RGB | string = 'default.color.from.start.pouring';\n    static rainy: RGB | string = 'default.color.from.start.rainy';\n    static snowy: RGB | string = 'default.color.from.start.snowy';\n    static snowyHeavy: RGB | string = 'default.color.from.start.snowyHeavy';\n    static snowyRainy: RGB | string = 'default.color.from.start.snowyRainy';\n    static windy: RGB | string = 'default.color.from.start.windy';\n    static tornado: RGB | string = 'default.color.from.start.tornado';\n    static clearNight: RGB | string = 'default.color.from.start.clearNight';\n    static exceptional: RGB | string = 'default.color.from.start.exceptional';\n    static foreground: RGB | string = 'default.color.from.start.foreground';\n    static fgTime: RGB | string = 'default.color.from.start.foreground';\n    static fgTimeAmPm: RGB | string = 'default.color.from.start.foreground';\n    static fgDate: RGB | string = 'default.color.from.start.foreground';\n    static fgMain: RGB | string = 'default.color.from.start.foreground';\n    static fgMainAlt: RGB | string = 'default.color.from.start.foreground';\n    static fgTimeAdd: RGB | string = 'default.color.from.start.foreground';\n    static fgForecast: RGB | string = 'default.color.from.start.foreground';\n    static fgBar: RGB | string = 'default.color.from.start.foreground';\n    static solar: RGB | string = 'default.color.from.start.solar';\n    static temperature: RGB | string = 'default.color.from.start.temperature';\n    static gust: RGB | string = 'default.color.from.start.gust';\n    static sunrise: RGB | string = 'default.color.from.start.sunrise';\n    static sunset: RGB | string = 'default.color.from.start.sunset';\n    // Neue Media-spezifische Defaults\n    static mediaArtistOn: RGB | string = 'default.color.from.start.mediaArtistOn';\n    static mediaArtistOff: RGB | string = 'default.color.from.start.mediaArtistOff';\n    static mediaTitleOn: RGB | string = 'default.color.from.start.mediaTitleOn';\n    static mediaTitleOff: RGB | string = 'default.color.from.start.mediaTitleOff';\n    static mediaOnOffColor: RGB | string = 'default.color.from.start.mediaOnOffColor';\n}\n\nexport class Color extends ColorBase {\n    // \u2014\u2014\u2014 Extra dark additions (neu) \u2014\u2014\u2014\n    static readonly ExtraDarkRed: RGB = { r: 40, g: 0, b: 0 }; // very dark backdrop with warm tint\n    static readonly ExtraDarkGreen: RGB = { r: 0, g: 40, b: 0 }; // very dark backdrop with status/ok tint\n    static readonly ExtraDarkBlue: RGB = { r: 0, g: 0, b: 40 }; // very dark backdrop with cool tint\n\n    // \u2014\u2014\u2014 Very dark / Black-ish \u2014\u2014\u2014\n    static readonly Black: RGB = { r: 0, g: 0, b: 0 }; // absolute black, OLED backgrounds\n    static readonly HMIDark: RGB = { r: 29, g: 29, b: 29 }; // original background color\n    static readonly Charcoal: RGB = { r: 30, g: 30, b: 30 }; // deep dark panels/cards\n    static readonly DarkGrayBlue: RGB = { r: 10, g: 13, b: 30 }; // dark bluish UI bars\n    static readonly DeepOcean: RGB = { r: 0, g: 60, b: 120 }; // very dark cool header strip\n    static readonly DarkBlue: RGB = { r: 0, g: 0, b: 146 }; // dark blue accents\n\n    // \u2014\u2014\u2014 Grays / Neutrals \u2014\u2014\u2014\n    static readonly DarkGray: RGB = { r: 64, g: 64, b: 64 }; // disabled controls, muted icons\n    static readonly AshGray: RGB = { r: 110, g: 110, b: 110 }; // secondary labels\n    static readonly Divider: RGB = { r: 120, g: 130, b: 140 }; // separators, chart gridlines\n    static readonly Gray: RGB = { r: 136, g: 136, b: 136 }; // neutral text on light bg\n    static readonly LightGray: RGB = { r: 211, g: 211, b: 211 }; // cards/kacheln light\n    static readonly ForegroundSoft: RGB = { r: 210, g: 220, b: 230 }; // soft UI foregrounds\n    static readonly ForegroundStrong: RGB = { r: 245, g: 248, b: 252 }; // headlines on dark\n    static readonly White: RGB = { r: 255, g: 255, b: 255 }; // primary text on dark\n\n    // \u2014\u2014\u2014 Reds \u2014\u2014\u2014\n    static readonly LavaDeep: RGB = { r: 92, g: 12, b: 12 }; // critical banners (dark)\n    static readonly LavaGlow: RGB = { r: 156, g: 32, b: 26 }; // alarm background\n    static readonly MagmaRed: RGB = { r: 200, g: 34, b: 28 }; // danger buttons\n    static readonly LavaCore: RGB = { r: 180, g: 22, b: 0 }; // strong warning fill\n    static readonly Brown: RGB = { r: 165, g: 42, b: 42 }; // brownish alerts\n    static readonly BatteryEmpty: RGB = { r: 179, g: 45, b: 25 }; // battery critical\n    static readonly Sunset: RGB = { r: 255, g: 94, b: 77 }; // live/record indicator\n    static readonly MSRed: RGB = { r: 251, g: 105, b: 98 }; // soft error/warn\n    static readonly Coral: RGB = { r: 255, g: 127, b: 80 }; // notification accent\n    static readonly Red: RGB = { r: 255, g: 0, b: 0 }; // hard error\n\n    // \u2014\u2014\u2014 Oranges / Warme T\u00F6ne \u2014\u2014\u2014\n    static readonly FireGlow: RGB = { r: 255, g: 80, b: 0 }; // strong warning CTA\n    static readonly EmberOrange: RGB = { r: 255, g: 109, b: 36 }; // active highlight\n    static readonly colorRadio: RGB = { r: 255, g: 127, b: 0 }; // radio/stream accent\n    static readonly Off: RGB = { r: 253, g: 128, b: 0 }; // off/inactive warm\n    static readonly Orange: RGB = { r: 255, g: 165, b: 0 }; // classic orange\n    static readonly Mango: RGB = { r: 255, g: 166, b: 77 }; // decorative warm\n    static readonly Sand: RGB = { r: 237, g: 201, b: 175 }; // sand beige, backgrounds\n    static readonly colorSonos: RGB = { r: 216, g: 161, b: 88 }; // brand warm\n\n    // \u2014\u2014\u2014 Yellows \u2014\u2014\u2014\n    static readonly FireYellow: RGB = { r: 255, g: 201, b: 71 }; // warm emphasis\n    static readonly FlameYellow: RGB = { r: 255, g: 220, b: 60 }; // bright highlight\n    static readonly Sun: RGB = { r: 255, g: 223, b: 0 }; // sunny yellow\n    static readonly On: RGB = { r: 253, g: 216, b: 53 }; // activated state (warm)\n    static readonly MSYellow: RGB = { r: 255, g: 235, b: 156 }; // soft warn/info\n    static readonly MenuLowInd: RGB = { r: 255, g: 235, b: 156 }; // menu low indicator\n    static readonly Yellow: RGB = { r: 255, g: 255, b: 0 }; // peak indicator\n\n    // \u2014\u2014\u2014 Greens \u2014\u2014\u2014\n    static readonly Palm: RGB = { r: 0, g: 153, b: 76 }; // confirm/apply\n    static readonly BatteryFull: RGB = { r: 96, g: 176, b: 62 }; // battery ok\n    static readonly MSGreen: RGB = { r: 121, g: 222, b: 121 }; // soft success\n    static readonly colorSpotify: RGB = { r: 30, g: 215, b: 96 }; // media active\n    static readonly Mint: RGB = { r: 189, g: 252, b: 201 }; // subtle success bg\n    static readonly Lime: RGB = { r: 173, g: 255, b: 47 }; // fresh success\n    static readonly Green: RGB = { r: 0, g: 255, b: 0 }; // max OK / full\n\n    // \u2014\u2014\u2014 Cyans / Blue-greens \u2014\u2014\u2014\n    static readonly Turquoise: RGB = { r: 64, g: 224, b: 208 }; // decorative info\n    static readonly colorAlexa: RGB = { r: 49, g: 196, b: 243 }; // voice assistant\n    static readonly HMIOn: RGB = { r: 3, g: 169, b: 244 }; // CTA/primary active\n    static readonly HMIOff: RGB = { r: 68, g: 115, b: 158 }; // inactive (cool)\n    static readonly DarkHMIOff: RGB = { r: 54, g: 92, b: 126 }; // inactive (cool)\n    static readonly TechMint: RGB = { r: 200, g: 255, b: 255 }; // clean info bg\n    static readonly Cyan: RGB = { r: 0, g: 255, b: 255 }; // info/neutral progress\n\n    // \u2014\u2014\u2014 Blues \u2014\u2014\u2014\n    static readonly Ocean: RGB = { r: 0, g: 119, b: 190 }; // primary (cool)\n    static readonly BlueLight: RGB = { r: 135, g: 206, b: 250 }; // light info\n    static readonly TimeAccent: RGB = { r: 160, g: 200, b: 255 }; // time accent\n    static readonly TimePrimary: RGB = { r: 220, g: 240, b: 255 }; // clock main\n    static readonly Blue: RGB = { r: 0, g: 0, b: 255 }; // strong link/series\n    static readonly TealBlue: RGB = { r: 0, g: 20, b: 156 }; // slightly brighter teal-blue\n    static readonly BrightTealBlue: RGB = { r: 50, g: 30, b: 156 }; // brighter teal-blue with red tint\n    static readonly GrayBlue: RGB = { r: 90, g: 90, b: 200 }; // softer gray-blue, ~30% lighter\n    static readonly LightGrayBlue: RGB = { r: 130, g: 130, b: 230 }; // softer gray-blue, ~30% lighter\n\n    // \u2014\u2014\u2014 Violets / Pinks \u2014\u2014\u2014\n    static readonly Purple: RGB = { r: 128, g: 0, b: 128 }; // category/secondary\n    static readonly Orchid: RGB = { r: 218, g: 112, b: 214 }; // decorative\n    static readonly Violet: RGB = { r: 238, g: 130, b: 238 }; // secondary highlight\n    static readonly Magenta: RGB = { r: 255, g: 0, b: 255 }; // attention/beta\n    static readonly Pink: RGB = { r: 255, g: 192, b: 203 }; // soft badges\n\n    // \u2014\u2014\u2014 Menu Icon Colors (unver\u00E4ndert, referenziert oben nach Farbwertn\u00E4he) \u2014\u2014\u2014\n    static readonly Menu: RGB = { r: 150, g: 150, b: 100 }; // neutral menu icon\n    static readonly MenuHighInd: RGB = { r: 251, g: 105, b: 98 }; // high indicator\n\n    // \u2014\u2014\u2014 Dynamische Indikatoren (unver\u00E4ndert) \u2014\u2014\u2014\n    static readonly colorScale0: RGB = { r: 99, g: 190, b: 123 };\n    static readonly colorScale1: RGB = { r: 129, g: 199, b: 126 };\n    static readonly colorScale2: RGB = { r: 161, g: 208, b: 127 };\n    static readonly colorScale3: RGB = { r: 129, g: 217, b: 126 };\n    static readonly colorScale4: RGB = { r: 222, g: 226, b: 131 };\n    static readonly colorScale5: RGB = { r: 254, g: 235, b: 132 };\n    static readonly colorScale6: RGB = { r: 255, g: 210, b: 129 };\n    static readonly colorScale7: RGB = { r: 251, g: 185, b: 124 };\n    static readonly colorScale8: RGB = { r: 251, g: 158, b: 117 };\n    static readonly colorScale9: RGB = { r: 248, g: 131, b: 111 };\n    static readonly colorScale10: RGB = { r: 248, g: 105, b: 107 };\n\n    // \u2014\u2014\u2014 Screensaver Default Theme Colors (unver\u00E4ndert) \u2014\u2014\u2014\n    static readonly scbackground: RGB = { r: 0, g: 0, b: 0 };\n    static readonly scbackgroundInd1: RGB = { r: 255, g: 0, b: 0 };\n    static readonly scbackgroundInd2: RGB = { r: 121, g: 222, b: 121 };\n    static readonly scbackgroundInd3: RGB = { r: 255, g: 255, b: 0 };\n    static readonly sctime: RGB = { r: 255, g: 255, b: 255 };\n    static readonly sctimeAMPM: RGB = { r: 255, g: 255, b: 255 };\n    static readonly scdate: RGB = { r: 255, g: 255, b: 255 };\n    static readonly sctMainIcon: RGB = { r: 255, g: 255, b: 255 };\n    static readonly sctMainText: RGB = { r: 255, g: 255, b: 255 };\n    static readonly sctForecast1: RGB = { r: 255, g: 255, b: 255 };\n    static readonly sctForecast2: RGB = { r: 255, g: 255, b: 255 };\n    static readonly sctForecast3: RGB = { r: 255, g: 255, b: 255 };\n    static readonly sctForecast4: RGB = { r: 255, g: 255, b: 255 };\n    static readonly sctF1Icon: RGB = { r: 255, g: 235, b: 156 };\n    static readonly sctF2Icon: RGB = { r: 255, g: 235, b: 156 };\n    static readonly sctF3Icon: RGB = { r: 255, g: 235, b: 156 };\n    static readonly sctF4Icon: RGB = { r: 255, g: 235, b: 156 };\n    static readonly sctForecast1Val: RGB = { r: 255, g: 255, b: 255 };\n    static readonly sctForecast2Val: RGB = { r: 255, g: 255, b: 255 };\n    static readonly sctForecast3Val: RGB = { r: 255, g: 255, b: 255 };\n    static readonly sctForecast4Val: RGB = { r: 255, g: 255, b: 255 };\n    static readonly scbar: RGB = { r: 255, g: 255, b: 255 };\n    static readonly sctMainIconAlt: RGB = { r: 255, g: 255, b: 255 };\n    static readonly sctMainTextAlt: RGB = { r: 255, g: 255, b: 255 };\n    static readonly sctTimeAdd: RGB = { r: 255, g: 255, b: 255 };\n\n    // \u2014\u2014\u2014 Auto-Weather-Colors (unver\u00E4ndert) \u2014\u2014\u2014\n    static readonly swClearNight: RGB = { r: 150, g: 150, b: 100 };\n    static readonly swCloudy: RGB = { r: 75, g: 75, b: 75 };\n    static readonly swExceptional: RGB = { r: 255, g: 50, b: 50 };\n    static readonly swFog: RGB = { r: 150, g: 150, b: 150 };\n    static readonly swHail: RGB = { r: 200, g: 200, b: 200 };\n    static readonly swLightning: RGB = { r: 200, g: 200, b: 0 };\n    static readonly swLightningRainy: RGB = { r: 200, g: 200, b: 150 };\n    static readonly swPartlycloudy: RGB = { r: 150, g: 150, b: 150 };\n    static readonly swPouring: RGB = { r: 50, g: 50, b: 255 };\n    static readonly swRainy: RGB = { r: 100, g: 100, b: 255 };\n    static readonly swSnowy: RGB = { r: 150, g: 150, b: 150 };\n    static readonly swSnowyRainy: RGB = { r: 150, g: 150, b: 255 };\n    static readonly swSunny: RGB = { r: 255, g: 255, b: 0 };\n    static readonly swWindy: RGB = { r: 150, g: 150, b: 150 };\n    static getColorFromDefaultOrReturn(s: any): RGB | string {\n        if (typeof s === 'string' && s && s.startsWith('default.color.from.start.')) {\n            switch (s) {\n                case 'default.color.from.start.good':\n                    return Color.good;\n                case 'default.color.from.start.bad':\n                    return Color.bad;\n                case 'default.color.from.start.true':\n                    return Color.true;\n                case 'default.color.from.start.false':\n                    return Color.false;\n                case 'default.color.from.start.activated':\n                    return Color.activated;\n                case 'default.color.from.start.deactivated':\n                    return Color.deactivated;\n                case 'default.color.from.start.attention':\n                    return Color.attention;\n                case 'default.color.from.start.info':\n                    return Color.info;\n                case 'default.color.from.start.option1':\n                    return Color.option1;\n                case 'default.color.from.start.option2':\n                    return Color.option2;\n                case 'default.color.from.start.option3':\n                    return Color.option3;\n                case 'default.color.from.start.option4':\n                    return Color.option4;\n                case 'default.color.from.start.open':\n                    return Color.open;\n                case 'default.color.from.start.close':\n                    return Color.close;\n                case 'default.color.from.start.hot':\n                    return Color.hot;\n                case 'default.color.from.start.cold':\n                    return Color.cold;\n                case 'default.color.from.start.on':\n                    return Color.on;\n                case 'default.color.from.start.off':\n                    return Color.off;\n                case 'default.color.from.start.light':\n                    return Color.light;\n                case 'default.color.from.start.dark':\n                    return Color.dark;\n                case 'default.color.from.start.warning':\n                    return Color.warning;\n                case 'default.color.from.start.success':\n                    return Color.success;\n                case 'default.color.from.start.neutral':\n                    return Color.neutral;\n                case 'default.color.from.start.background':\n                    return Color.background;\n                case 'default.color.from.start.highlight':\n                    return Color.highlight;\n                case 'default.color.from.start.disabled':\n                    return Color.disabled;\n                case 'default.color.from.start.navLeft':\n                    return Color.navLeft;\n                case 'default.color.from.start.navRight':\n                    return Color.navRight;\n                case 'default.color.from.start.navDownLeft':\n                    return Color.navDownLeft;\n                case 'default.color.from.start.navDownRight':\n                    return Color.navDownRight;\n                case 'default.color.from.start.navDown':\n                    return Color.navDown;\n                case 'default.color.from.start.navHome':\n                    return Color.navHome;\n                case 'default.color.from.start.navParent':\n                    return Color.navParent;\n                case 'default.color.from.start.sunny':\n                    return Color.sunny;\n                case 'default.color.from.start.partlyCloudy':\n                    return Color.partlyCloudy;\n                case 'default.color.from.start.cloudy':\n                    return Color.cloudy;\n                case 'default.color.from.start.fog':\n                    return Color.fog;\n                case 'default.color.from.start.hail':\n                    return Color.hail;\n                case 'default.color.from.start.lightning':\n                    return Color.lightning;\n                case 'default.color.from.start.lightningRainy':\n                    return Color.lightningRainy;\n                case 'default.color.from.start.pouring':\n                    return Color.pouring;\n                case 'default.color.from.start.rainy':\n                    return Color.rainy;\n                case 'default.color.from.start.snowy':\n                    return Color.snowy;\n                case 'default.color.from.start.snowyHeavy':\n                    return Color.snowyHeavy;\n                case 'default.color.from.start.snowyRainy':\n                    return Color.snowyRainy;\n                case 'default.color.from.start.windy':\n                    return Color.windy;\n                case 'default.color.from.start.tornado':\n                    return Color.tornado;\n                case 'default.color.from.start.clearNight':\n                    return Color.clearNight;\n                case 'default.color.from.start.exceptional':\n                    return Color.exceptional;\n                case 'default.color.from.start.foreground':\n                    return Color.foreground;\n                case 'default.color.from.start.fgTime':\n                    return Color.fgTime;\n                case 'default.color.from.start.fgTimeAmPm':\n                    return Color.fgTimeAmPm;\n                case 'default.color.from.start.fgDate':\n                    return Color.fgDate;\n                case 'default.color.from.start.fgMain':\n                    return Color.fgMain;\n                case 'default.color.from.start.fgMainAlt':\n                    return Color.fgMainAlt;\n                case 'default.color.from.start.fgTimeAdd':\n                    return Color.fgTimeAdd;\n                case 'default.color.from.start.fgForecast':\n                    return Color.fgForecast;\n                case 'default.color.from.start.fgBar':\n                    return Color.fgBar;\n                case 'default.color.from.start.solar':\n                    return Color.solar;\n                case 'default.color.from.start.temperature':\n                    return Color.temperature;\n                case 'default.color.from.start.gust':\n                    return Color.gust;\n                case 'default.color.from.start.sunrise':\n                    return Color.sunrise;\n                case 'default.color.from.start.sunset':\n                    return Color.sunset;\n                // Neue Media-spezifische Defaults\n                case 'default.color.from.start.mediaArtistOn':\n                    return Color.mediaArtistOn;\n                case 'default.color.from.start.mediaArtistOff':\n                    return Color.mediaArtistOff;\n                case 'default.color.from.start.mediaTitleOn':\n                    return Color.mediaTitleOn;\n                case 'default.color.from.start.mediaTitleOff':\n                    return Color.mediaTitleOff;\n                case 'default.color.from.start.mediaOnOffColor':\n                    return Color.mediaOnOffColor;\n                default:\n                    console.warn(`Color.getColorFromDefault: unknown default color ${s}`);\n            }\n        }\n        return s;\n    }\n\n    // default\n    static defaultTheme: ColorThemenInterface = {\n        good: Color.Green,\n        bad: Color.Red,\n        true: Color.Green,\n        false: Color.Red,\n        activated: Color.Yellow,\n        deactivated: Color.Gray,\n        attention: Color.Cyan,\n        info: Color.White,\n        option1: Color.Yellow,\n        option2: Color.MSYellow,\n        option3: Color.MSRed,\n        option4: Color.MSGreen,\n        open: Color.Red,\n        close: Color.Green,\n        hot: Color.Red,\n        cold: Color.Blue,\n        on: Color.On,\n        off: Color.Off,\n        light: Color.White,\n        dark: Color.Gray,\n        warning: Color.Orange,\n        success: Color.Green,\n        neutral: Color.Gray,\n        background: Color.HMIDark,\n        highlight: Color.HMIOn,\n        disabled: Color.HMIOff,\n        navLeft: Color.White,\n        navRight: Color.White,\n        navDownLeft: Color.White,\n        navDownRight: Color.White,\n        navDown: Color.White,\n        navHome: Color.White,\n        navParent: Color.White,\n        sunny: Color.swSunny,\n        partlyCloudy: Color.swPartlycloudy,\n        cloudy: Color.swCloudy,\n        fog: Color.swFog,\n        hail: Color.swHail,\n        lightning: Color.swLightning,\n        lightningRainy: Color.swLightningRainy,\n        pouring: Color.swPouring,\n        rainy: Color.swRainy,\n        snowy: Color.swSnowy,\n        snowyHeavy: Color.swSnowy,\n        snowyRainy: Color.swSnowyRainy,\n        windy: Color.swWindy,\n        tornado: Color.swExceptional,\n        clearNight: Color.swClearNight,\n        exceptional: Color.swExceptional,\n        foreground: Color.White,\n        solar: Color.On,\n        temperature: Color.Red,\n        gust: Color.Blue,\n        sunrise: Color.Yellow,\n        sunset: Color.Orange,\n        // NEW theme keys\n        fgTime: Color.White,\n        fgTimeAmPm: Color.MSYellow,\n        fgDate: Color.LightGray,\n        fgMain: Color.White,\n        fgMainAlt: Color.MSYellow,\n        fgTimeAdd: Color.HMIOn,\n        fgForecast: Color.LightGray,\n        fgBar: Color.LightGray,\n        // Media-spezifisch\n        mediaArtistOn: Color.Yellow,\n        mediaArtistOff: Color.Gray,\n        mediaTitleOn: Color.Yellow,\n        mediaTitleOff: Color.Gray,\n        mediaOnOffColor: Color.White,\n    };\n\n    // tropical\n    static topicalTheme: ColorThemenInterface = {\n        good: Color.Palm,\n        bad: Color.Coral,\n        true: Color.Lime,\n        false: Color.Sunset,\n        activated: Color.Turquoise,\n        deactivated: Color.Sand,\n        attention: Color.Mango,\n        info: Color.Orchid,\n        option1: Color.Turquoise,\n        option2: Color.Mango,\n        option3: Color.Coral,\n        option4: Color.Lime,\n        open: Color.Ocean,\n        close: Color.Palm,\n        hot: Color.Sunset,\n        cold: Color.Turquoise,\n        on: Color.Mango,\n        off: Color.Sand,\n        light: Color.Sun,\n        dark: Color.Ocean,\n        warning: Color.Coral,\n        success: Color.Palm,\n        neutral: Color.Sand,\n        background: Color.DeepOcean,\n        highlight: Color.Sunset,\n        disabled: Color.Gray,\n        navLeft: Color.Turquoise,\n        navRight: Color.Turquoise,\n        navDownLeft: Color.Mango,\n        navDownRight: Color.Mango,\n        navDown: Color.Sun,\n        navHome: Color.Sunset,\n        navParent: Color.Sand,\n        sunny: Color.Sun,\n        partlyCloudy: Color.BlueLight,\n        cloudy: Color.Sand,\n        fog: Color.LightGray,\n        hail: Color.LightGray,\n        lightning: Color.Mango,\n        lightningRainy: Color.Coral,\n        pouring: Color.Ocean,\n        rainy: Color.Blue,\n        snowy: Color.White,\n        snowyHeavy: Color.LightGray,\n        snowyRainy: Color.BlueLight,\n        windy: Color.Turquoise,\n        tornado: Color.Red,\n        clearNight: Color.Ocean,\n        exceptional: Color.Red,\n        foreground: Color.Sun,\n        gust: Color.Turquoise,\n        sunrise: Color.Sun,\n        sunset: Color.Sunset,\n        // NEW theme keys\n        fgTime: Color.Sun,\n        fgTimeAmPm: Color.Mango,\n        fgDate: Color.Sand,\n        fgMain: Color.Orchid,\n        fgMainAlt: Color.Mango,\n        fgTimeAdd: Color.Turquoise,\n        fgForecast: Color.Sand,\n        fgBar: Color.Sand,\n        solar: Color.Sun,\n        temperature: Color.Sunset,\n        // Media-spezifisch\n        mediaArtistOn: Color.Turquoise,\n        mediaArtistOff: Color.Sand,\n        mediaTitleOn: Color.White,\n        mediaTitleOff: Color.LightGray,\n        mediaOnOffColor: Color.Turquoise,\n    };\n\n    // technical\n    static technicalTheme: ColorThemenInterface = {\n        good: Color.HMIOn,\n        bad: Color.MSRed,\n        true: Color.Green,\n        false: Color.Red,\n        activated: Color.Cyan,\n        deactivated: Color.Gray,\n        attention: Color.Yellow,\n        info: Color.White,\n        option1: Color.Blue,\n        option2: Color.LightGray,\n        option3: Color.Cyan,\n        option4: Color.HMIOff,\n        open: Color.Cyan,\n        close: Color.DarkBlue,\n        hot: Color.Red,\n        cold: Color.Blue,\n        on: Color.HMIOn,\n        off: Color.DarkHMIOff,\n        light: Color.White,\n        dark: Color.DarkGray,\n        warning: Color.Yellow,\n        success: Color.Green,\n        neutral: Color.Gray,\n        background: Color.DarkGrayBlue,\n        highlight: Color.Cyan,\n        disabled: Color.HMIOff,\n        navLeft: Color.Cyan,\n        navRight: Color.Cyan,\n        navDownLeft: Color.Blue,\n        navDownRight: Color.Blue,\n        navDown: Color.DarkBlue,\n        navHome: Color.Yellow,\n        navParent: Color.HMIOff,\n        sunny: Color.Yellow,\n        partlyCloudy: Color.BlueLight,\n        cloudy: Color.HMIOff,\n        fog: Color.LightGray,\n        hail: Color.LightGray,\n        lightning: Color.Yellow,\n        lightningRainy: Color.MSYellow,\n        pouring: Color.GrayBlue,\n        rainy: Color.LightGrayBlue,\n        snowy: Color.White,\n        snowyHeavy: Color.LightGray,\n        snowyRainy: Color.BlueLight,\n        windy: Color.Cyan,\n        gust: Color.Cyan,\n        sunrise: Color.Cyan,\n        sunset: Color.Yellow,\n        tornado: Color.MSRed,\n        clearNight: Color.HMIOff,\n        exceptional: Color.MSRed,\n        foreground: Color.TechMint,\n        solar: Color.MSYellow,\n        temperature: Color.TechMint,\n\n        // NEW theme keys\n        fgTime: Color.TechMint,\n        fgTimeAmPm: Color.Cyan,\n        fgDate: Color.LightGray,\n        fgMain: Color.White,\n        fgMainAlt: Color.Cyan,\n        fgTimeAdd: Color.Cyan,\n        fgForecast: Color.BlueLight,\n        fgBar: Color.DarkGray,\n\n        // Media-spezifisch\n        mediaArtistOn: Color.TechMint,\n        mediaArtistOff: Color.AshGray,\n        mediaTitleOn: Color.White,\n        mediaTitleOff: Color.DarkGray,\n        mediaOnOffColor: Color.Cyan,\n    };\n\n    // sunset\n    static sunsetTheme: ColorThemenInterface = {\n        good: Color.MSGreen,\n        bad: Color.MSRed,\n        true: Color.On,\n        false: Color.Off,\n        activated: Color.Yellow,\n        deactivated: Color.Gray,\n        attention: Color.colorRadio,\n        info: Color.White,\n        option1: Color.Red,\n        option2: Color.Orange ?? { r: 255, g: 140, b: 0 },\n        option3: Color.Magenta,\n        option4: Color.colorSonos,\n        open: Color.Red,\n        close: Color.Green,\n        hot: Color.Off,\n        cold: Color.DarkBlue,\n        on: Color.Yellow,\n        off: Color.Off,\n        light: Color.White,\n        dark: Color.HMIDark,\n        warning: Color.Off,\n        success: Color.Green,\n        neutral: Color.Gray,\n        background: { r: 48, g: 27, b: 63 },\n        highlight: Color.Magenta,\n        disabled: Color.HMIOff,\n        navLeft: Color.Off,\n        navRight: Color.Off,\n        navDownLeft: Color.Magenta,\n        navDownRight: Color.Magenta,\n        navDown: Color.Yellow,\n        navHome: Color.colorSonos,\n        navParent: Color.Gray,\n        sunny: Color.On,\n        partlyCloudy: Color.colorSonos,\n        cloudy: Color.Off,\n        fog: Color.LightGray,\n        hail: Color.LightGray,\n        lightning: Color.Magenta,\n        lightningRainy: Color.Red,\n        pouring: Color.DarkBlue,\n        rainy: Color.Blue,\n        snowy: Color.White,\n        snowyHeavy: Color.LightGray,\n        snowyRainy: Color.Violet,\n        windy: Color.Orange,\n        tornado: Color.Red,\n        clearNight: Color.DarkBlue,\n        exceptional: Color.MSRed,\n        foreground: Color.Yellow,\n        solar: Color.On,\n        temperature: Color.Magenta,\n        gust: Color.Orange,\n        sunrise: Color.Orange,\n        sunset: Color.Magenta,\n        // NEW theme keys\n        fgTime: Color.Yellow,\n        fgTimeAmPm: Color.Orange ?? { r: 255, g: 140, b: 0 },\n        fgDate: Color.Orange,\n        fgMain: Color.Magenta,\n        fgMainAlt: Color.Magenta,\n        fgTimeAdd: Color.Magenta,\n        fgForecast: Color.colorSonos,\n        fgBar: Color.Off,\n\n        // Media-spezifisch\n        mediaArtistOn: Color.Sunset,\n        mediaArtistOff: Color.Gray,\n        mediaTitleOn: Color.Yellow,\n        mediaTitleOff: Color.Off,\n        mediaOnOffColor: Color.Orange ?? { r: 255, g: 140, b: 0 },\n    };\n\n    // volcano\n    static volcanoTheme: ColorThemenInterface = {\n        good: Color.FlameYellow,\n        bad: Color.MagmaRed,\n        true: Color.FlameYellow,\n        false: Color.MagmaRed,\n        activated: Color.FireGlow,\n        deactivated: Color.AshGray,\n        attention: Color.FireGlow,\n        info: Color.White,\n        option1: Color.FireGlow,\n        option2: Color.FlameYellow,\n        option3: Color.MagmaRed,\n        option4: Color.LavaGlow,\n        open: Color.MagmaRed,\n        close: Color.MSGreen,\n        hot: Color.MagmaRed,\n        cold: Color.Blue,\n        on: Color.FireGlow,\n        off: Color.Charcoal,\n        light: Color.White,\n        dark: Color.Gray,\n        warning: Color.FireGlow,\n        success: Color.MSGreen,\n        neutral: Color.AshGray,\n\n        background: Color.LavaCore, // jetzt feuriges Rot als Hintergrund\n        highlight: Color.FireGlow,\n        disabled: Color.AshGray,\n\n        navLeft: Color.FireGlow,\n        navRight: Color.FireGlow,\n        navDownLeft: Color.FlameYellow,\n        navDownRight: Color.FlameYellow,\n        navDown: Color.MagmaRed,\n        navHome: Color.FlameYellow,\n        navParent: Color.AshGray,\n\n        sunny: Color.FlameYellow,\n        partlyCloudy: Color.FireGlow,\n        cloudy: Color.AshGray,\n        fog: Color.LightGray,\n        hail: Color.LightGray,\n        lightning: Color.FlameYellow,\n        lightningRainy: Color.FireGlow,\n        pouring: Color.DarkBlue,\n        rainy: Color.Blue,\n        snowy: Color.White,\n        snowyHeavy: Color.LightGray,\n        snowyRainy: Color.BlueLight,\n        windy: Color.AshGray,\n        gust: Color.FireGlow,\n        sunrise: Color.FlameYellow,\n        sunset: Color.FireGlow,\n        tornado: Color.MagmaRed,\n        clearNight: Color.Charcoal,\n        exceptional: Color.MagmaRed,\n\n        foreground: Color.FlameYellow,\n        solar: Color.FlameYellow,\n        temperature: Color.MagmaRed,\n\n        fgTime: Color.FlameYellow, // Uhrzeit sehr strahlend\n        fgTimeAmPm: Color.FireGlow, // AM/PM orange\n        fgDate: Color.FireGlow, // Datum klar sichtbar (kr\u00E4ftiges Orange)\n        fgMain: Color.White, // Haupttext neutral\n        fgMainAlt: Color.FlameYellow, // alternative Haupttexte in Gelb\n        fgTimeAdd: Color.FireGlow,\n        fgForecast: Color.FlameYellow, // Forecast-Werte hellgelb f\u00FCr Kontrast\n        fgBar: Color.AshGray,\n        // Media-spezifisch\n        mediaArtistOn: Color.LavaCore,\n        mediaArtistOff: Color.AshGray,\n        mediaTitleOn: Color.White,\n        mediaTitleOff: Color.FlameYellow,\n        mediaOnOffColor: Color.FireGlow,\n    };\n\n    /**\n     * set color theme...\n     *\n     * @param s ColorThemenInterface\n     */\n    static setTheme(s: ColorThemenInterface): void {\n        for (const a in s) {\n            if (a) {\n                const value = s[a as keyof ColorThemenInterface];\n                if (value !== undefined) {\n                    Color[a as keyof ColorThemenInterface] = value;\n                }\n            }\n        }\n    }\n\n    static rgb_dec565(rgb: RGB): number {\n        //return ((Math.floor(rgb.red / 255 * 31) << 11) | (Math.floor(rgb.green / 255 * 63) << 5) | (Math.floor(rgb.blue / 255 * 31)));\n        return ((rgb.r >> 3) << 11) | ((rgb.g >> 2) << 5) | (rgb.b >> 3);\n    }\n\n    static decToRgb(decimal: number): RGB {\n        return {\n            r: ((decimal >> 11) << 3) & 0xff,\n            g: ((decimal >> 5) << 2) & 0xff,\n            b: (decimal << 3) & 0xff,\n        };\n    }\n\n    static rgbHexToObject(rgb: string): RGB {\n        const result: RGB = { r: 0, g: 0, b: 0 };\n        if (rgb.startsWith('#') && rgb.length == 7) {\n            result.r = parseInt(rgb.substring(1, 3), 16);\n            result.g = parseInt(rgb.substring(3, 5), 16);\n            result.b = parseInt(rgb.substring(5), 16);\n        }\n        return result;\n    }\n\n    /**\n     * Scales a number from one range to another range.\n     *\n     * This function takes a number and maps it from an input range\n     * (defined by `inMin` and `inMax`) to an output range\n     * (defined by `outMin` and `outMax`). If either `inMin` or `inMax`\n     * is `null`, the function returns the input number unchanged.\n     *\n     * @param number - The number to be scaled.\n     * @param inMin - The minimum value of the input range. If `null`, scaling is skipped.\n     * @param inMax - The maximum value of the input range. If `null`, scaling is skipped.\n     * @param outMin - The minimum value of the output range.\n     * @param outMax - The maximum value of the output range.\n     * @returns The scaled number, or the input number if `inMin` or `inMax` is `null`.\n     */\n    static scale(number: number, inMin: number | null, inMax: number | null, outMin: number, outMax: number): number {\n        if (inMax === null || inMin === null) {\n            return number;\n        }\n        return outMax + outMin - (((number - inMax) * (outMax - outMin)) / (inMin - inMax) + outMin);\n    }\n\n    static mixColorHue(startRGB: RGB, endRGB: RGB, t: number, _options?: mixedOptions): RGB {\n        const startHSB = colord(startRGB).toHsv();\n        const endHSB = colord(endRGB).toHsv();\n\n        t = Math.min(1, Math.max(0, t));\n\n        // Hue muss \u00FCber den k\u00FCrzesten Weg interpoliert werden\n        const deltaH = ((endHSB.h - startHSB.h + 540) % 360) - 180;\n        const h = (startHSB.h + t * deltaH + 360) % 360;\n\n        const s = startHSB.s + t * (endHSB.s - startHSB.s);\n        const v = startHSB.v + t * (endHSB.v - startHSB.v);\n\n        return colord({ h, s, v }).toRgb();\n    }\n\n    static HandleColorScale(valueScaletemp: string): number {\n        switch (valueScaletemp) {\n            case '0':\n                return Color.rgb_dec565(Color.colorScale0);\n            case '1':\n                return Color.rgb_dec565(Color.colorScale1);\n            case '2':\n                return Color.rgb_dec565(Color.colorScale2);\n            case '3':\n                return Color.rgb_dec565(Color.colorScale3);\n            case '4':\n                return Color.rgb_dec565(Color.colorScale4);\n            case '5':\n                return Color.rgb_dec565(Color.colorScale5);\n            case '6':\n                return Color.rgb_dec565(Color.colorScale6);\n            case '7':\n                return Color.rgb_dec565(Color.colorScale7);\n            case '8':\n                return Color.rgb_dec565(Color.colorScale8);\n            case '9':\n                return Color.rgb_dec565(Color.colorScale9);\n            case '10':\n                return Color.rgb_dec565(Color.colorScale10);\n            default:\n                return Color.rgb_dec565(Color.colorScale10);\n        }\n    }\n    static Interpolate(color1: RGB, color2: RGB, fraction: number): RGB {\n        const r: number = Color.InterpolateNum(color1.r, color2.r, fraction);\n        const g: number = Color.InterpolateNum(color1.g, color2.g, fraction);\n        const b: number = Color.InterpolateNum(color1.b, color2.b, fraction);\n        return { r: Math.round(r), g: Math.round(g), b: Math.round(b) };\n    }\n\n    static triGradAnchor(_from: RGB, _to: RGB, factor: number, _options?: mixedOptions): RGB {\n        factor = _options?.anchorHigh ? (1 - factor) / 2 + 0.5 : factor / 2;\n        return Color.triGradColorScale(_from, _to, factor, { ..._options });\n    }\n    /**\n     * Interpolate between two colors\n     *\n     * @param _from ignored\n     * @param _to ignored\n     * @param factor 0-1 mix value\n     * @param _options swap input and use triGradAnchor\n     * @returns RGB\n     */\n    static triGradColorScale(_from: RGB, _to: RGB, factor: number, _options?: mixedOptions): RGB {\n        factor = Math.min(1, Math.max(0, factor));\n        let r = 0;\n        let g = 0;\n        const b = 0;\n        if (_options?.swap === true) {\n            factor = 1 - factor;\n        }\n        if (factor < 0.5) {\n            r = 255;\n            g = Math.round(510 * factor);\n        } else {\n            g = 255;\n            r = Math.round(510 - 510 * factor);\n        }\n        return { r, g, b };\n    }\n\n    static quadriGradAnchor(_from: RGB, _to: RGB, factor: number, _options?: mixedOptions): RGB {\n        factor = _options?.anchorHigh ? (1 - factor) / 2 + 0.5 : factor / 2;\n        return Color.quadriGradColorScale(_from, _to, factor, { ..._options });\n    }\n    /**\n     * Generates a color gradient based on a four-segment scale, transitioning through red, green, and blue.\n     * The gradient is determined by the `factor` parameter, which ranges from 0 to 1.\n     *\n     * @param _from - The starting RGB color (not used in the current implementation).\n     * @param _to - The ending RGB color (not used in the current implementation).\n     * @param factor - A number between 0 and 1 that determines the position in the gradient.\n     *                 Values closer to 0 result in red, transitioning through green, and ending in blue.\n     * @param _options - Optional settings for the gradient generation.\n     *                   - `swap` (boolean): If `false`, the gradient direction is reversed.\n     * @returns An RGB object representing the interpolated color at the specified `factor`..\n     */\n\n    static quadriGradColorScale(_from: RGB, _to: RGB, factor: number, _options?: MixedOptions): RGB {\n        // clamp 0..1\n        let f = Math.min(1, Math.max(0, factor));\n\n        if (_options?.swap) {\n            f = 1 - f;\n        }\n\n        // Skala in 4 Segmente teilen: 0\u20130.25, 0.25\u20130.5, 0.5\u20130.75, 0.75\u20131\n        const seg = Math.floor(f * 4);\n        const local = f * 4 - seg; // 0..1 innerhalb des Segments\n\n        let r = 0,\n            g = 0,\n            b = 0;\n\n        switch (seg) {\n            case 0: // Rot \u2192 Gelb\n                r = 255;\n                g = Math.round(255 * local);\n                break;\n            case 1: // Gelb \u2192 Gr\u00FCn\n                g = 255;\n                r = Math.round(255 * (1 - local));\n                break;\n            case 2: // Gr\u00FCn \u2192 Cyan\n                g = 255;\n                b = Math.round(255 * local);\n                break;\n            case 3: // Cyan \u2192 Blau\n                b = 255;\n                g = Math.round(255 * (1 - local));\n                break;\n        }\n\n        return { r, g, b };\n    }\n    /**\n     *\n     * @param c1 from this color\n     * @param c2 to this\n     * @param r 0-1 mix value\n     * @param _options no use\n     * @returns RGB\n     */\n    static mixColorCie(c1: RGB, c2: RGB, r: number, _options?: mixedOptions): RGB {\n        return colord(c1).mix(c2, r).toRgb();\n    }\n\n    /**\n     *\n     * @param c1 from this color\n     * @param c2 to this\n     * @param x 0-1 mix value\n     * @param _options no use\n     * @returns RGB\n     */\n    static mixColor(c1: RGB, c2: RGB, x: number, _options?: mixedOptions): RGB {\n        const r = Math.round(c1.r + (c2.r - c1.r) * x);\n        const g = Math.round(c1.g + (c2.g - c1.g) * x);\n        const b = Math.round(c1.b + (c2.b - c1.b) * x);\n        return { r, g, b };\n    }\n    static InterpolateNum(d1: number, d2: number, fraction: number): number {\n        return d1 + (d2 - d1) * fraction;\n    }\n    static brightness(c: RGB, s: number): RGB {\n        //s = Color.scale(s, 0, 1, 0, 0.6);\n        let r = c.r * s;\n        let g = c.g * s;\n        let b = c.b * s;\n        r = Math.min(255, Math.max(1, r));\n        g = Math.min(255, Math.max(1, g));\n        b = Math.min(255, Math.max(1, b));\n        return { r, g, b };\n    }\n\n    static darken(c: RGB, s: number): RGB {\n        s = Color.scale(s, 0, 1, 0, 0.5);\n        return colord(c).darken(s).toRgb();\n    }\n    /**\n     * Convert radians to degrees\n     *\n     * @param rad radians to convert, expects rad in range +/- PI per Math.atan2\n     * @returns degrees equivalent of rad\n     */\n    static rad2deg(rad: number): number {\n        return (360 + (180 * rad) / Math.PI) % 360;\n    }\n\n    static ColorToHex(color: number): string {\n        const hexadecimal: string = color.toString(16);\n        return hexadecimal.length == 1 ? `0${hexadecimal}` : hexadecimal;\n    }\n\n    static ConvertRGBtoHex(red: number, green: number, blue: number): string {\n        return `#${Color.ColorToHex(red)}${Color.ColorToHex(green)}${Color.ColorToHex(blue)}`;\n    }\n    static ConvertWithColordtoRgb(colorName: string): RGB {\n        return colord(colorName).toRgb();\n    }\n    static ConvertHexToRgb(hex: string): RGB {\n        return {\n            r: parseInt(hex.substring(1, 3), 16),\n            g: parseInt(hex.substring(3, 5), 16),\n            b: parseInt(hex.substring(5, 7), 16),\n        };\n    }\n\n    /**\n     * Convert h,s,v values to r,g,b\n     *\n     * @param hue in range [0, 360]\n     * @param saturation in range 0 to 1\n     * @param value in range 0 to 1\n     * @returns [r, g,b] in range 0 to 255\n     */\n    static hsv2rgb(hue: number, saturation: number, value: number): [number, number, number] {\n        const c = value * saturation; // chroma\n        const h = (hue % 360) / 60; // Hue-Sektor [0..6)\n        const x = c * (1 - Math.abs((h % 2) - 1));\n        const m = value - c;\n\n        let rgb: [number, number, number];\n        switch (Math.floor(h)) {\n            case 0:\n                rgb = [c, x, 0];\n                break;\n            case 1:\n                rgb = [x, c, 0];\n                break;\n            case 2:\n                rgb = [0, c, x];\n                break;\n            case 3:\n                rgb = [0, x, c];\n                break;\n            case 4:\n                rgb = [x, 0, c];\n                break;\n            default:\n                rgb = [c, 0, x];\n                break; // sector 5\n        }\n\n        // Offset addieren + 0\u2013255 skalieren\n        return rgb.map(v => Math.round((v + m) * 255)) as [number, number, number];\n    }\n    static hsv2RGB(hue: number, saturation: number, value: number): RGB {\n        const arr = Color.hsv2rgb(hue, saturation, value);\n        return { r: arr[0], g: arr[1], b: arr[2] };\n    }\n\n    static hsvtodec(hue: number | null, saturation: number, value: number): string | null {\n        if (hue === null) {\n            return null;\n        }\n        const result = Color.hsv2rgb(hue, saturation, value);\n        return String(Color.rgb_dec565({ r: result[0], g: result[1], b: result[2] }));\n    }\n\n    static resultToRgb(r: string): RGB {\n        const arr = r.split('|');\n        return Color.pos_to_color(parseInt(arr[0]), parseInt(arr[1]));\n    }\n    static getHue(red: number, green: number, blue: number): number {\n        const min = Math.min(red, green, blue);\n        const max = Math.max(red, green, blue);\n        const delta = max - min;\n\n        if (delta === 0) {\n            return 0;\n        } // grau \u2192 kein Hue\n\n        let hue: number;\n        if (max === red) {\n            hue = (green - blue) / delta;\n        } else if (max === green) {\n            hue = 2 + (blue - red) / delta;\n        } else {\n            hue = 4 + (red - green) / delta;\n        }\n\n        hue = (hue * 60 + 360) % 360;\n        return Math.round(hue);\n    }\n\n    static pos_to_color(x: number, y: number): RGB {\n        let r = 160 / 2;\n        x = Math.round(((x - r) / r) * 100) / 100;\n        y = Math.round(((r - y) / r) * 100) / 100;\n\n        r = Math.sqrt(x * x + y * y);\n        let sat = 0;\n        if (r > 1) {\n            sat = 0;\n        } else {\n            sat = r;\n        }\n\n        const hsv = Color.rad2deg(Math.atan2(y, x));\n        const rgb = Color.hsv2rgb(hsv, sat, 1);\n\n        return { r: Math.round(rgb[0]), g: Math.round(rgb[1]), b: Math.round(rgb[2]) };\n    }\n\n    /**\n     * Convert RGB to CIE 1931\n     *\n     * @param red red value\n     * @param green green value\n     * @param blue blue value\n     * @returns CIE 1931 color space\n     */\n    static rgb_to_cie(red: number, green: number, blue: number): string {\n        //Apply a gamma correction to the RGB values, which makes the color more vivid and more the like the color displayed on the screen of your device\n        const vred = red > 0.040_45 ? Math.pow((red + 0.055) / (1.0 + 0.055), 2.4) : red / 12.92;\n        const vgreen = green > 0.040_45 ? Math.pow((green + 0.055) / (1.0 + 0.055), 2.4) : green / 12.92;\n        const vblue = blue > 0.040_45 ? Math.pow((blue + 0.055) / (1.0 + 0.055), 2.4) : blue / 12.92;\n\n        //RGB values to XYZ using the Wide RGB D65 conversion formula\n        const X = vred * 0.664_511 + vgreen * 0.154_324 + vblue * 0.162_028;\n        const Y = vred * 0.283_881 + vgreen * 0.668_433 + vblue * 0.047_685;\n        const Z = vred * 0.000_088 + vgreen * 0.072_31 + vblue * 0.986_039;\n\n        //Calculate the xy values from the XYZ values\n        const ciex = (X / (X + Y + Z)).toFixed(4);\n        const ciey = (Y / (X + Y + Z)).toFixed(4);\n        const cie = `[${ciex},${ciey}]`;\n\n        return cie;\n    }\n    static isRGB(F: any): F is RGB {\n        return typeof F == 'object' && 'r' in F && 'b' in F && 'g' in F;\n    }\n\n    static isHex(F: any): F is hex {\n        return typeof F == 'string' && F.startsWith('#') && F.length == 7;\n    }\n\n    static isScriptRGB(F: any): F is ScriptConfig.RGB {\n        return typeof F == 'object' && 'red' in F && 'blue' in F && 'green' in F;\n    }\n\n    static convertScriptRGBtoRGB(F: any): RGB {\n        return { r: F.red, g: F.green, b: F.blue };\n    }\n\n    static isOldRGB(F: any): F is RGB {\n        return this.isRGB(F);\n    }\n    /*\nstatic getBlendedColorfunction(color: RGB | null, percent: number) {\n    // limit percent between 0 and 1.\n    // this percent is the amount of 'color' rgb components to use\n    let p = percent > 0 ? percent : 0;\n    p = p < 1 ? p : 1;\n\n    // amount of 'this' rgb components to use\n    const tp = 1 - p;\n\n    // blend the colors\n    const red = Math.round(tp * this.r + p * color.r);\n    const green = Math.round(tp * this.g + p * color.g);\n    const blue = Math.round(tp * this.b + p * color.b);\n\n    // return new color object\n    return (red, green, blue);\n} // getBlendedColor ()\nvar newColor = c.getBlendedColor(new Color('#ffffff'), 0.50);*/\n    static readonly kelvinToRGB: { [key: number]: RGB } = {\n        1000: { r: 255, g: 56, b: 0 },\n        1100: { r: 255, g: 71, b: 0 },\n        1200: { r: 255, g: 83, b: 0 },\n        1300: { r: 255, g: 93, b: 0 },\n        1400: { r: 255, g: 101, b: 0 },\n        1500: { r: 255, g: 109, b: 0 },\n        1600: { r: 255, g: 115, b: 0 },\n        1700: { r: 255, g: 121, b: 0 },\n        1800: { r: 255, g: 126, b: 0 },\n        1900: { r: 255, g: 131, b: 0 },\n        2000: { r: 255, g: 138, b: 18 },\n        2100: { r: 255, g: 142, b: 33 },\n        2200: { r: 255, g: 147, b: 44 },\n        2300: { r: 255, g: 152, b: 54 },\n        2400: { r: 255, g: 157, b: 63 },\n        2500: { r: 255, g: 161, b: 72 },\n        2600: { r: 255, g: 165, b: 79 },\n        2700: { r: 255, g: 169, b: 87 },\n        2800: { r: 255, g: 173, b: 94 },\n        2900: { r: 255, g: 177, b: 101 },\n        3000: { r: 255, g: 180, b: 107 },\n        3100: { r: 255, g: 184, b: 114 },\n        3200: { r: 255, g: 187, b: 120 },\n        3300: { r: 255, g: 190, b: 126 },\n        3400: { r: 255, g: 193, b: 132 },\n        3500: { r: 255, g: 196, b: 137 },\n        3600: { r: 255, g: 199, b: 143 },\n        3700: { r: 255, g: 201, b: 148 },\n        3800: { r: 255, g: 204, b: 153 },\n        3900: { r: 255, g: 206, b: 159 },\n        4000: { r: 255, g: 209, b: 163 },\n        4100: { r: 255, g: 211, b: 168 },\n        4200: { r: 255, g: 213, b: 173 },\n        4300: { r: 255, g: 215, b: 177 },\n        4400: { r: 255, g: 217, b: 182 },\n        4500: { r: 255, g: 219, b: 186 },\n        4600: { r: 255, g: 221, b: 190 },\n        4700: { r: 255, g: 223, b: 194 },\n        4800: { r: 255, g: 225, b: 198 },\n        4900: { r: 255, g: 227, b: 202 },\n        5000: { r: 255, g: 228, b: 206 },\n        5100: { r: 255, g: 230, b: 210 },\n        5200: { r: 255, g: 232, b: 213 },\n        5300: { r: 255, g: 233, b: 217 },\n        5400: { r: 255, g: 235, b: 220 },\n        5500: { r: 255, g: 236, b: 224 },\n        5600: { r: 255, g: 238, b: 227 },\n        5700: { r: 255, g: 239, b: 230 },\n        5800: { r: 255, g: 240, b: 233 },\n        5900: { r: 255, g: 242, b: 236 },\n        6000: { r: 255, g: 243, b: 239 },\n        6100: { r: 255, g: 244, b: 242 },\n        6200: { r: 255, g: 245, b: 245 },\n        6300: { r: 255, g: 246, b: 247 },\n        6400: { r: 255, g: 248, b: 251 },\n        6500: { r: 255, g: 249, b: 253 },\n        6600: { r: 254, g: 249, b: 255 },\n        6700: { r: 252, g: 247, b: 255 },\n        6800: { r: 249, g: 246, b: 255 },\n        6900: { r: 247, g: 245, b: 255 },\n        7000: { r: 245, g: 243, b: 255 },\n        7100: { r: 243, g: 242, b: 255 },\n        7200: { r: 240, g: 241, b: 255 },\n        7300: { r: 239, g: 240, b: 255 },\n        7400: { r: 237, g: 239, b: 255 },\n        7500: { r: 235, g: 238, b: 255 },\n        7600: { r: 233, g: 237, b: 255 },\n        7700: { r: 231, g: 236, b: 255 },\n        7800: { r: 230, g: 235, b: 255 },\n        7900: { r: 228, g: 234, b: 255 },\n        8000: { r: 227, g: 233, b: 255 },\n        8100: { r: 225, g: 232, b: 255 },\n        8200: { r: 224, g: 231, b: 255 },\n        8300: { r: 222, g: 230, b: 255 },\n        8400: { r: 221, g: 230, b: 255 },\n        8500: { r: 220, g: 229, b: 255 },\n        8600: { r: 218, g: 229, b: 255 },\n        8700: { r: 217, g: 227, b: 255 },\n        8800: { r: 216, g: 227, b: 255 },\n        8900: { r: 215, g: 226, b: 255 },\n        9000: { r: 214, g: 225, b: 255 },\n        9100: { r: 212, g: 225, b: 255 },\n        9200: { r: 211, g: 224, b: 255 },\n        9300: { r: 210, g: 223, b: 255 },\n        9400: { r: 209, g: 223, b: 255 },\n        9500: { r: 208, g: 222, b: 255 },\n        9600: { r: 207, g: 221, b: 255 },\n        9700: { r: 207, g: 221, b: 255 },\n        9800: { r: 206, g: 220, b: 255 },\n        9900: { r: 205, g: 220, b: 255 },\n        10_000: { r: 207, g: 218, b: 255 },\n        10_100: { r: 207, g: 218, b: 255 },\n        10_200: { r: 206, g: 217, b: 255 },\n        10_300: { r: 205, g: 217, b: 255 },\n        10_400: { r: 204, g: 216, b: 255 },\n        10_500: { r: 204, g: 216, b: 255 },\n        10_600: { r: 203, g: 215, b: 255 },\n        10_700: { r: 202, g: 215, b: 255 },\n        10_800: { r: 202, g: 214, b: 255 },\n        10_900: { r: 201, g: 214, b: 255 },\n        11_000: { r: 200, g: 213, b: 255 },\n        11_100: { r: 200, g: 213, b: 255 },\n        11_200: { r: 199, g: 212, b: 255 },\n        11_300: { r: 198, g: 212, b: 255 },\n        11_400: { r: 198, g: 212, b: 255 },\n        11_500: { r: 197, g: 211, b: 255 },\n        11_600: { r: 197, g: 211, b: 255 },\n        11_700: { r: 197, g: 210, b: 255 },\n        11_800: { r: 196, g: 210, b: 255 },\n        11_900: { r: 195, g: 210, b: 255 },\n        12_000: { r: 195, g: 209, b: 255 },\n    };\n}\n"],
  "mappings": "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BAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,QACjB,KAAK;AACD,iBAAO,MAAM;AAAA,Q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E,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,KAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,KAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,KAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,KAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,KAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,KAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IAC/B,KAAQ,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IACjC,OAAQ,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IACjC,OAAQ,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IACjC,OAAQ,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IACjC,OAAQ,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IACjC,OAAQ,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IACjC,OAAQ,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IACjC,OAAQ,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IACjC,OAAQ,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IACjC,OAAQ,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IACjC,MAAQ,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IACjC,OAAQ,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IACjC,OAAQ,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IACjC,OAAQ,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IACjC,OAAQ,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IACjC,OAAQ,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IACjC,OAAQ,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IACjC,OAAQ,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IACjC,OAAQ,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IACjC,OAAQ,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,IACjC,MAAQ,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EACrC;AACJ;",
  "names": ["namesPlugin", "mixPlugin"]
}
