{
  "version": 3,
  "sources": ["../../../src/lib/configuration/admin.ts"],
  "sourcesContent": ["import type { NavigationItemConfig } from '../classes/navigation';\nimport { BaseClass } from '../controller/library';\nimport type { panelConfigPartial } from '../controller/panel';\nimport * as ShareConfig from '../types/adminShareConfig';\nimport { exhaustiveCheck } from '../types/function-and-const';\nimport type { NspanelLovelaceUi } from '../types/NspanelLovelaceUi';\nimport type { PageBase } from '../types/pages';\nimport type { AlwaysOnMode } from '../types/types';\n\nexport class AdminConfiguration extends BaseClass {\n    private pageConfig: ShareConfig.PageConfig[] = [];\n    constructor(adapter: NspanelLovelaceUi) {\n        super(adapter, 'AdminConfiguration');\n        this.adapter = adapter;\n        this.pageConfig = this.adapter.config.pageConfig || [];\n    }\n\n    public processPanels(options: panelConfigPartial[]): panelConfigPartial[] {\n        for (const option of options) {\n            this.processentrys(option);\n        }\n        return options;\n    }\n    /**\n     * Process configurable pages from adapter config and build navigation entries.\n     * Supports ALL_PANELS_SPECIAL_ID for applying pages to all panels at once,\n     * then allows individual panel overrides or exclusions.\n     *\n     * Logic:\n     * - First pass: If ALL_PANELS_SPECIAL_ID assignment exists, apply to all panels\n     * - Second pass: Process panel-specific assignments\n     *   - Empty navigation with prior ALL = exclude this panel from that page\n     *   - Empty navigation without ALL = default to home:'main'\n     *\n     * Supported card types: cardAlarm (unlock/alarm), cardQR, and more in the future.\n     *\n     * @param option - Panel configuration partial containing pages and navigation arrays\n     */\n    public processentrys(option: panelConfigPartial): panelConfigPartial {\n        const entries = this.pageConfig;\n\n        for (const entry of entries) {\n            if (!entry.navigationAssignment || !entry.card) {\n                continue;\n            }\n            const uniqueIdExists = option.pages.find((a: PageBase) => a.uniqueID === entry.uniqueName);\n            if (uniqueIdExists) {\n                this.log.warn(`Page with name ${entry.uniqueName} already exists, skipping!`);\n                continue;\n            }\n\n            // First pass: Check for ALL_PANELS_SPECIAL_ID assignment\n            const allPanelsAssignment = entry.navigationAssignment.find(\n                a => a.topic === ShareConfig.ALL_PANELS_SPECIAL_ID,\n            );\n\n            // Second pass: Check for this specific panel's assignment\n            const panelAssignment = entry.navigationAssignment.find(a => a.topic === option.topic);\n\n            // Determine which assignment to use\n            let navAssign:\n                | {\n                      topic: string;\n                      navigation?: {\n                          next?: string;\n                          prev?: string;\n                          home?: string;\n                          parent?: string;\n                      };\n                  }\n                | undefined;\n\n            if (panelAssignment) {\n                // Panel-specific assignment takes precedence\n                // Empty navigation means exclude if ALL was used, otherwise default\n                if (!panelAssignment.navigation && allPanelsAssignment) {\n                    // Explicit exclusion from ALL_PANELS\n                    continue;\n                }\n                navAssign = panelAssignment;\n            } else if (allPanelsAssignment) {\n                // Use ALL_PANELS assignment\n                navAssign = allPanelsAssignment;\n            } else {\n                // No assignment for this panel\n                continue;\n            }\n\n            // Create page configuration based on card type\n            let newPage: PageBase;\n\n            switch (entry.card) {\n                case 'cardAlarm': {\n                    if (!isAlwaysOnMode(entry.alwaysOn)) {\n                        entry.alwaysOn = 'none';\n                    }\n                    newPage = {\n                        uniqueID: entry.uniqueName,\n                        hidden: !!entry.hidden,\n                        alwaysOn: entry.alwaysOn,\n                        dpInit: '',\n                        config: {\n                            card: 'cardAlarm',\n                            data: {\n                                alarmType: { type: 'const', constVal: entry.alarmType || 'unlock' },\n                                headline: { type: 'const', constVal: entry.headline || 'Unlock' },\n                                button1: entry.button1 ? { type: 'const', constVal: entry.button1 } : undefined,\n                                button2: entry.button2 ? { type: 'const', constVal: entry.button2 } : undefined,\n                                button3: entry.button3 ? { type: 'const', constVal: entry.button3 } : undefined,\n                                button4: entry.button4 ? { type: 'const', constVal: entry.button4 } : undefined,\n                                button5: entry.button1 ? { type: 'const', constVal: entry.button5 } : undefined,\n                                button6: entry.button2 ? { type: 'const', constVal: entry.button6 } : undefined,\n                                button7: entry.button3 ? { type: 'const', constVal: entry.button7 } : undefined,\n                                button8: entry.button4 ? { type: 'const', constVal: entry.button8 } : undefined,\n                                pin: entry.pin != null ? { type: 'const', constVal: String(entry.pin) } : undefined,\n                                approved: { type: 'const', constVal: !!entry.approved },\n                                global: { type: 'const', constVal: !!entry.global },\n                                setNavi: entry.setNavi ? { type: 'const', constVal: entry.setNavi } : undefined,\n                            },\n                        },\n                        pageItems: [],\n                    };\n                    break;\n                }\n                case 'cardQR': {\n                    if (!isAlwaysOnMode(entry.alwaysOn)) {\n                        entry.alwaysOn = 'none';\n                    }\n                    newPage = {\n                        uniqueID: entry.uniqueName,\n                        hidden: !!entry.hidden,\n                        alwaysOn: entry.alwaysOn,\n                        dpInit: '',\n                        config: {\n                            card: 'cardQR',\n                            data: {\n                                headline: { type: 'const', constVal: entry.headline || 'Page QR' },\n                                selType: { type: 'const', constVal: entry.selType || 0 },\n                                ssidUrlTel: { type: 'const', constVal: entry.ssidUrlTel || '' },\n                                wlantype: { type: 'const', constVal: entry.wlantype || 'WPA' },\n                                wlanhidden: { type: 'const', constVal: !!entry.wlanhidden || false },\n                                password: { type: 'const', constVal: entry.qrPass || '' },\n                                pwdhidden: { type: 'const', constVal: !!entry.pwdhidden || false },\n                                setState: entry.setState ? { type: 'triggered', dp: entry.setState } : undefined,\n                            },\n                        },\n                        pageItems: [],\n                    };\n                    break;\n                }\n\n                case 'cardChart': {\n                    if (!isAlwaysOnMode(entry.alwaysOn)) {\n                        entry.alwaysOn = 'none';\n                    }\n                    const dbData: ShareConfig.ChartDetailsExternal | undefined =\n                        entry.selInstanceDataSource === 1\n                            ? {\n                                  instance: entry.selInstance || '',\n                                  state: entry.setStateForDB || '',\n                                  hours: entry.rangeHours ?? 24,\n                                  maxTicks: entry.maxXAxisTicks ?? 2,\n                                  factor: entry.factorCardChart ?? 1,\n                                  maxLabels: entry.maxXAxisLabels ?? 4,\n                              }\n                            : undefined;\n                    newPage = {\n                        uniqueID: entry.uniqueName,\n                        hidden: !!entry.hidden,\n                        alwaysOn: entry.alwaysOn,\n                        dpInit: '',\n                        config: {\n                            card: entry.selChartType || 'cardChart',\n                            data: {\n                                headline: { type: 'const', constVal: entry.headline || 'Page Chart' },\n                                text: { type: 'const', constVal: entry.txtlabelYAchse || '' },\n                                color: { true: { color: { type: 'const', constVal: entry.chart_color || '#FFFF00' } } },\n                                ticks: { type: 'triggered', dp: entry.setStateForTicks || '' },\n                                value: { type: 'triggered', dp: entry.setStateForValues || entry.setStateForDB || '' },\n                                dbData: dbData ? { type: 'const', constVal: JSON.stringify(dbData) } : undefined,\n                                setStateForDB:\n                                    entry.selInstanceDataSource === 1 && entry.setStateForDB\n                                        ? { type: 'triggered', dp: entry.setStateForDB }\n                                        : undefined,\n                            },\n                        },\n                        pageItems: [],\n                    };\n                    break;\n                }\n\n                default: {\n                    this.log.warn(`Unsupported card type '${entry.card}' for page '${entry.uniqueName}', skipping!`);\n                    continue;\n                }\n            }\n            // Check for duplicate page name\n            if (option.pages.find((a: PageBase) => a.uniqueID === newPage.uniqueID)) {\n                this.log.warn(`Page with name ${newPage.uniqueID} already exists, skipping!`);\n                continue;\n            }\n\n            option.pages.push(newPage);\n\n            const navigation = navAssign.navigation;\n            if (!navigation) {\n                continue;\n            }\n\n            // Build navigation entry\n            const navigationEntry: NavigationItemConfig = {\n                name: newPage.uniqueID,\n                page: newPage.uniqueID,\n                right: { single: undefined, double: undefined },\n                left: { single: undefined, double: undefined },\n            };\n\n            // Default to home:'main' if no navigation specified\n            if (!navigation.prev && !navigation.next && !navigation.home && !navigation.parent) {\n                navigation.home = 'main';\n            }\n\n            let overrwriteNext = false;\n\n            // Handle prev navigation\n            if (navigation.prev) {\n                navigationEntry.left!.single = navigation.prev;\n                const index = option.navigation.findIndex(\n                    (b: NavigationItemConfig | null) => b && b.name === navigation.prev,\n                );\n                if (index !== -1 && option.navigation[index]) {\n                    const oldNext = option.navigation[index].right?.single;\n                    if (oldNext && oldNext !== newPage.uniqueID) {\n                        overrwriteNext = true;\n                        option.navigation[index].right = option.navigation[index].right || {};\n                        option.navigation[index].right.single = newPage.uniqueID;\n                        navigationEntry.right!.single = oldNext;\n\n                        const nextIndex = option.navigation.findIndex(\n                            (b: NavigationItemConfig | null) => b && b.name === oldNext,\n                        );\n                        if (nextIndex !== -1 && option.navigation[nextIndex]) {\n                            option.navigation[nextIndex].left = option.navigation[nextIndex].left || {};\n                            option.navigation[nextIndex].left.single = newPage.uniqueID;\n                        }\n                    } else if (!oldNext) {\n                        option.navigation[index].right = { single: newPage.uniqueID };\n                    }\n                }\n            }\n\n            // Handle next navigation\n            if (!overrwriteNext && navigation.next) {\n                navigationEntry.right!.single = navigation.next;\n                const index = option.navigation.findIndex(\n                    (b: NavigationItemConfig | null) => b && b.name === navigation.next,\n                );\n                if (index !== -1 && option.navigation[index]) {\n                    const oldPrev = option.navigation[index].left?.single;\n                    if (oldPrev && oldPrev !== newPage.uniqueID) {\n                        option.navigation[index].left = option.navigation[index].left || {};\n                        option.navigation[index].left.single = newPage.uniqueID;\n                        navigationEntry.left!.single = oldPrev;\n\n                        const prevIndex = option.navigation.findIndex(\n                            (b: NavigationItemConfig | null) => b && b.name === oldPrev,\n                        );\n                        if (prevIndex !== -1 && option.navigation[prevIndex]) {\n                            option.navigation[prevIndex].right = option.navigation[prevIndex].right || {};\n                            option.navigation[prevIndex].right.single = newPage.uniqueID;\n                        }\n                    } else if (!oldPrev) {\n                        option.navigation[index].left = { single: newPage.uniqueID };\n                    }\n                }\n            }\n\n            // Handle home/parent navigation\n            if (navigation.home) {\n                navigationEntry.left!.double = navigation.home;\n            }\n            if (navigation.parent) {\n                navigationEntry.right!.double = navigation.parent;\n            }\n\n            option.navigation.push(navigationEntry);\n        }\n\n        return option;\n    }\n}\n\nfunction isAlwaysOnMode(F: any): F is AlwaysOnMode {\n    const R = F as AlwaysOnMode;\n    switch (R) {\n        case 'always':\n        case 'none':\n        case 'ignore':\n        case 'action':\n            return true;\n        default:\n            exhaustiveCheck(R);\n            return false;\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
