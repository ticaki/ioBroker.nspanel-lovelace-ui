name: Check Script Version

on:
  pull_request_target:
    types: [opened, ready_for_review, synchronize]
    branches:
      - main
    paths:
      - 'script/example_sendTo_script_iobroker.ts'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout base repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch PR head ref
        run: |
          git fetch origin pull/${{ github.event.pull_request.number }}/head:pr_head

      - name: Check if script file was modified
        id: check_changes
        run: |
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..pr_head)
          echo "Changed files: $CHANGED_FILES"

          if echo "$CHANGED_FILES" | grep -q "^script/example_sendTo_script_iobroker.ts$"; then
            echo "script_changed=true" >> $GITHUB_OUTPUT
            echo "✓ Script file was modified"
          else
            echo "script_changed=false" >> $GITHUB_OUTPUT
            echo "✓ Script file was not modified - skipping version check"
          fi

      - name: Skip if script not changed
        if: steps.check_changes.outputs.script_changed == 'false'
        run: |
          echo "::notice::Script file was not modified, skipping version check"
          exit 0

      - name: Get current version from PR head
        id: current_version
        if: steps.check_changes.outputs.script_changed == 'true'
        run: |
          FILE_CONTENT=$(git show pr_head:script/example_sendTo_script_iobroker.ts)
          VERSION=$(printf "%s" "$FILE_CONTENT" | grep -E "const version = ['\"][0-9]+\.[0-9]+\.[0-9]+['\"]" | sed "s/.*const version = ['\"][^0-9]*//; s/['\"].*//")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version (PR): $VERSION"

      - name: Get base version from main
        id: base_version
        if: steps.check_changes.outputs.script_changed == 'true'
        run: |
          BASE_CONTENT=$(git show ${{ github.event.pull_request.base.sha }}:script/example_sendTo_script_iobroker.ts)
          BASE_VERSION=$(printf "%s" "$BASE_CONTENT" | grep -E "const version = ['\"][0-9]+\.[0-9]+\.[0-9]+['\"]" | sed "s/.*const version = ['\"][^0-9]*//; s/['\"].*//")
          echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "Base version (main): $BASE_VERSION"

      - name: Compare versions
        id: version_check
        if: steps.check_changes.outputs.script_changed == 'true'
        run: |
          CURRENT="${{ steps.current_version.outputs.version }}"
          BASE="${{ steps.base_version.outputs.base_version }}"

          echo "Comparing versions: Base=$BASE, Current=$CURRENT"

          MAX=$(printf '%s\n%s\n' "$BASE" "$CURRENT" | sort -V | tail -n1)
          if [ -z "$CURRENT" ] || [ -z "$BASE" ]; then
            echo "Version extraction failed (base: '$BASE', current: '$CURRENT')."
            echo "version_incremented=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          if [ "$CURRENT" = "$BASE" ] || [ "$MAX" != "$CURRENT" ]; then
            echo "❌ Version not incremented!"
            echo "version_incremented=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ Version incremented from $BASE to $CURRENT"
            echo "version_incremented=true" >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR if version not incremented
        if: ${{ failure() && steps.check_changes.outputs.script_changed == 'true' }}
        uses: actions/github-script@v8
        with:
          script: |
            const current = `${{ toJSON(steps.current_version.outputs.version) }}`;
            const base = `${{ toJSON(steps.base_version.outputs.base_version) }}`;
            const body = [
              '## ⚠️ Script Version Not Incremented',
              '',
              'The file `script/example_sendTo_script_iobroker.ts` has been modified, but the version number has not been incremented.',
              '',
              `**Current version:** ${current}`,
              `**Base version:** ${base}`,
              '',
              'Please update the version number in this line:',
              '```typescript',
              "const version = 'x.x.x';",
              '```',
              '',
              'The version should be incremented to reflect the changes made to the script file.'
            ].join('\n');

            await github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });