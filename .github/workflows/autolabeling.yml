name: PR Auto-Label by Paths

on:
  pull_request:
    branches:
      - main
permissions:
  contents: read
  pull-requests: write

jobs:
  label-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Label PR based on changed paths
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const pull_number = context.payload.pull_request.number;

            // --- Mapping: EXAKTE DATEIEN -> Labels ---
            const fileLabelMap = {
              "admin/jsonConfig.json5": ["admin"],
              "script/example_sendTo_script_iobroker.ts": ["Script Config"],
              "src/lib/classes/config-manager.ts": ["Script Config"]
            };

            // --- Mapping: ORDNERPRÄFIXE -> Labels ---
            const folderLabelMap = {
              "HMI/": ["HMI"],
              "tasmota/berry/": ["Berry Driver"],
              "admin/i18n/": ["Translations"],
              "src/lib/controller/": ["Internal"],
              "src/lib/pages/": ["Page"]
            };

            // Optional: Farben für neue Labels
            const labelColors = {
              admin: "BFD4F2",
              HMI: "FBCA04",
              "Berry Driver": "0E8A16",
              Translations: "1D76DB",
              "Script Config": "5319E7",
              Internal: "D93F0B",
              Page: "C5DEF5"
            };

            const ensureLabelExists = async (name) => {
              try {
                await github.rest.issues.getLabel({ owner, repo, name });
              } catch (err) {
                if (err.status === 404) {
                  const color = (labelColors[name] || "CCCCCC").replace("#", "");
                  await github.rest.issues.createLabel({
                    owner, repo,
                    name,
                    color,
                    description: "Auto-created by workflow"
                  });
                } else {
                  throw err;
                }
              }
            };

            // Geänderte Dateien im PR holen (paginieren, falls >100)
            const files = await github.paginate(github.rest.pulls.listFiles, {
              owner, repo, pull_number, per_page: 100
            });
            const changed = files.map(f => f.filename);

            const labelsToAdd = new Set();

            for (const path of changed) {
              // exakte Datei-Matches
              if (fileLabelMap[path]) {
                fileLabelMap[path].forEach(l => labelsToAdd.add(l));
              }
              // Ordnerpräfix-Matches
              for (const [prefix, labels] of Object.entries(folderLabelMap)) {
                if (path.startsWith(prefix)) {
                  labels.forEach(l => labelsToAdd.add(l));
                }
              }
            }

            if (labelsToAdd.size === 0) {
              core.info("No matching labels for changed paths.");
              return;
            }

            // schon vorhandene Labels am PR prüfen
            const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number });
            if ((pr.labels?.length ?? 0) > 0) {
              core.info("PR already has labels. Skipping.");
              return;            
            }
            const existing = new Set(); // leer, da wir sonst zurückkehren
            const finalLabels = Array.from(labelsToAdd);
            if (finalLabels.length === 0) {
              core.info("All matching labels already present.");
              return;
            }

            // sicherstellen, dass Labels im Repo existieren
            for (const name of finalLabels) {
              await ensureLabelExists(name);
            }

            // Labels hinzufügen
            await github.rest.issues.addLabels({
              owner, repo, issue_number: pull_number, labels: finalLabels
            });

            core.notice(`Added labels: ${finalLabels.join(", ")}`);